import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test01501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01501");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode3, value24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException28.addSuppressed((java.lang.Throwable) analyzerException30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException30.addSuppressed((java.lang.Throwable) analyzerException33);
        analyzerException26.addSuppressed((java.lang.Throwable) analyzerException33);
        java.lang.Throwable[] throwableArray36 = analyzerException26.getSuppressed();
        java.lang.Class<?> wildcardClass37 = analyzerException26.getClass();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test01502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01502");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter0.copyOperation(abstractInsnNode6, value7);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        java.lang.Object obj11 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.ternaryOperation(abstractInsnNode15, value16, value17, value18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.ternaryOperation(abstractInsnNode23, value24, value25, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter22.merge(value33, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.ternaryOperation(abstractInsnNode42, value43, value44, value45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter53.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.newValue(type57);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter41.merge(value52, value58);
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier21.merge(value40, value52);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter14.copyOperation(abstractInsnNode20, value52);
        int int62 = value61.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter12.copyOperation(abstractInsnNode13, value61);
        int int64 = value61.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;", obj11, value61);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter0.copyOperation(abstractInsnNode9, value61);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        java.util.List list68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = basicInterpreter0.naryOperation(abstractInsnNode67, list68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test01503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01503");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        java.lang.String str13 = type10.getClassName();
        int int15 = type10.getOpcode(138);
        int int16 = type10.getSize();
        boolean boolean18 = type10.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value19 = simpleVerifier5.newValue(type10);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str24 = type23.getDescriptor();
        int int25 = type23.getSort();
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type23, list26, false);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type36, type39, type40, type44, type47 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray51);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException56);
        java.lang.Class<?> wildcardClass58 = analyzerException56.getClass();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        java.lang.String str60 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type61, true);
        boolean boolean64 = type30.equals((java.lang.Object) type61);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier28.newValue(type61);
        int int66 = value65.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value67 = simpleVerifier5.copyOperation(abstractInsnNode20, value65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "char" + "'", str13, "char");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 138 + "'", int15 == 138);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lfloat;" + "'", str24, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "char" + "'", str34, "char");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)B" + "'", str52, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)C" + "'", str53, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str60, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test01504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01504");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        java.lang.Object obj12 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.ternaryOperation(abstractInsnNode20, value21, value22, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter19.merge(value30, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.ternaryOperation(abstractInsnNode39, value40, value41, value42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter38.merge(value49, value55);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier18.merge(value37, value49);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter13.copyOperation(abstractInsnNode17, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj12, value58);
        java.lang.Class<?> wildcardClass60 = value58.getClass();
        java.lang.String str61 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier10.newValue(type62);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType("(CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier10.newValue(type65);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value68 = simpleVerifier10.newOperation(abstractInsnNode67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str61, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test01505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01505");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str13 = type12.getDescriptor();
        java.lang.String str14 = type12.getInternalName();
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier10.newValue(type12);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str18 = type17.getDescriptor();
        int int19 = type17.getSort();
        int int20 = type17.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type17, false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type25, true);
        java.lang.String str30 = type25.getClassName();
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type25, list31, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException40.addSuppressed((java.lang.Throwable) analyzerException42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException44);
        boolean boolean46 = type34.equals((java.lang.Object) analyzerException45);
        java.lang.String str47 = type34.getDescriptor();
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier33.newValue(type34);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        java.lang.String str54 = type51.getClassName();
        int int56 = type51.getOpcode(138);
        int int57 = type51.getSize();
        boolean boolean59 = type51.equals((java.lang.Object) 154);
        java.lang.String str60 = type51.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type51, true);
        boolean boolean63 = type34.equals((java.lang.Object) type51);
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier22.newValue(type51);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value66 = simpleVerifier22.newOperation(abstractInsnNode65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LB;" + "'", str13, "LB;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "B" + "'", str14, "B");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lfloat;" + "'", str18, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "void" + "'", str30, "void");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "F" + "'", str47, "F");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "char" + "'", str54, "char");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 138 + "'", int56 == 138);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(value64);
    }

    @Test
    public void test01506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01506");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier22.newValue(type25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type37, true);
        java.lang.String str42 = type37.getClassName();
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type37, list43, true);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str48 = type47.getDescriptor();
        java.lang.String str49 = type47.getInternalName();
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier45.newValue(type47);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter28.copyOperation(abstractInsnNode34, value50);
        int int52 = value51.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value53 = simpleVerifier22.copyOperation(abstractInsnNode27, value51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "void" + "'", str42, "void");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "LB;" + "'", str48, "LB;");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "B" + "'", str49, "B");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test01507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01507");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str13 = type12.getDescriptor();
        java.lang.String str14 = type12.getInternalName();
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier10.newValue(type12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        java.lang.String str19 = type16.getClassName();
        int int21 = type16.getOpcode(138);
        int int22 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value23 = simpleVerifier10.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        java.lang.Class<?> wildcardClass43 = value41.getClass();
        java.lang.String str44 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier10.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int53 = type51.getOpcode(48);
        java.lang.String str54 = type51.getClassName();
        java.lang.String str55 = type51.getClassName();
        java.lang.String str56 = type51.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type58, type61, type62, type66, type69 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type57, type75, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type57, true);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter47.newValue(type51);
        java.lang.String str83 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier10.newValue(type51);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type86 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list87 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type85, type86, list87, true);
        java.lang.Class<?> wildcardClass90 = simpleVerifier89.getClass();
        org.mockito.asm.Type type91 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass90);
        org.mockito.asm.Type type92 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass90);
        java.util.List list93 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier95 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type92, list93, true);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = type51.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LB;" + "'", str13, "LB;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "B" + "'", str14, "B");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "char" + "'", str19, "char");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 138 + "'", int21 == 138);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str44, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 48 + "'", int53 == 48);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)B" + "'", str74, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "boolean" + "'", str83, "boolean");
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertNotNull(type92);
    }

    @Test
    public void test01508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01508");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.ternaryOperation(abstractInsnNode26, value27, value28, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter25.merge(value36, value42);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier5.merge(value24, value36);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type64, false);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier68.newValue(type69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier68.newValue(type71);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type71, list76, true);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier5.newValue(type71);
        java.lang.Class<?> wildcardClass80 = type71.getClass();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass80);
        java.lang.String str82 = type81.toString();
        int int83 = type81.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type81, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value87 = simpleVerifier85.newOperation(abstractInsnNode86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str82, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test01509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01509");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        boolean boolean8 = type0.equals((java.lang.Object) 154);
        java.lang.String str9 = type0.getDescriptor();
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test01510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01510");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        int int7 = type2.getOpcode(138);
        int int8 = type2.getSize();
        boolean boolean10 = type2.equals((java.lang.Object) 154);
        java.lang.String str11 = type2.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str22 = type21.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type21, false);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier24.newValue(type25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str34 = type33.getDescriptor();
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter29.newValue(type33);
        org.mockito.asm.Type[] typeArray37 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray37);
        java.lang.Class<?> wildcardClass39 = typeArray37.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException44);
        java.lang.Class<?> wildcardClass46 = analyzerException44.getClass();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        java.lang.String str48 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass46);
        java.lang.String str49 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type51, type54, type55, type59, type62 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type68, false);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str49, value74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type40, value74);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) 151);
        java.lang.String str80 = type77.getClassName();
        int int81 = type77.getSize();
        int int83 = type77.getOpcode(148);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type77, false);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str87 = type86.getDescriptor();
        java.lang.String str88 = type86.getClassName();
        int int89 = type86.getSize();
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier85.newValue(type86);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value91 = simpleVerifier24.copyOperation(abstractInsnNode27, value90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 138 + "'", int7 == 138);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "C" + "'", str11, "C");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str22, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "I" + "'", str34, "I");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)I" + "'", str38, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str48, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str49, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)B" + "'", str67, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "char" + "'", str80, "char");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 148 + "'", int83 == 148);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "C" + "'", str87, "C");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "char" + "'", str88, "char");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(value90);
    }

    @Test
    public void test01511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01511");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("J");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        java.lang.String str15 = type12.getClassName();
        int int17 = type12.getOpcode(138);
        int int18 = type12.getSize();
        boolean boolean20 = type12.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier7.newValue(type12);
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type12, list22, false);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        int int27 = type25.getOpcode(101);
        java.lang.String str28 = type25.toString();
        int int29 = type25.getSort();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier24.newValue(type25);
        org.mockito.asm.Type type31 = null;
        java.util.List list32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type31, list32, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str39 = type38.getDescriptor();
        int int40 = type38.getSort();
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type38, list41, false);
        int int44 = type38.getSize();
        int int45 = type38.getSort();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type46, false);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int51 = type49.getOpcode(48);
        java.lang.String str52 = type49.getClassName();
        java.lang.String str53 = type49.getClassName();
        java.util.List list54 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type49, list54, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException59);
        java.lang.Class<?> wildcardClass61 = analyzerException59.getClass();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        org.mockito.asm.Type type63 = type62.getElementType();
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier56.newValue(type63);
        org.mockito.asm.tree.analysis.Value value65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value66 = simpleVerifier34.binaryOperation(abstractInsnNode35, value64, value65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "char" + "'", str15, "char");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 138 + "'", int17 == 138);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 101 + "'", int27 == 101);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "C" + "'", str28, "C");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lfloat;" + "'", str39, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 48 + "'", int51 == 48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(value64);
    }

    @Test
    public void test01512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01512");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        java.lang.String str4 = type1.toString();
        int int5 = type1.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray22);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray22);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type28, type31, type32, type36, type39 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type45, false);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier49.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier49.newValue(type52);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier26.newValue(type52);
        boolean boolean58 = type0.equals((java.lang.Object) value57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type60, true);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier64.newValue(type65);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type70, type71, true);
        java.lang.String str76 = type71.getClassName();
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type69, type71, list77, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type65, type71, true);
        java.lang.Class<?> wildcardClass82 = type65.getClass();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        int int84 = type83.getSort();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str86 = type85.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type85, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type83, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value92 = simpleVerifier90.newOperation(abstractInsnNode91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "C" + "'", str4, "C");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)I" + "'", str25, "(CBFCF)I");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)B" + "'", str44, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "void" + "'", str76, "void");
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "void" + "'", str86, "void");
    }

    @Test
    public void test01513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01513");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str13 = type12.getDescriptor();
        java.lang.String str14 = type12.getInternalName();
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier10.newValue(type12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        java.lang.String str19 = type16.getClassName();
        int int21 = type16.getOpcode(138);
        int int22 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value23 = simpleVerifier10.newValue(type16);
        int int24 = value23.getSize();
        int int25 = value23.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LB;" + "'", str13, "LB;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "B" + "'", str14, "B");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "char" + "'", str19, "char");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 138 + "'", int21 == 138);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test01514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01514");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException6);
        java.lang.Throwable[] throwableArray11 = analyzerException6.getSuppressed();
        java.lang.String str12 = analyzerException6.toString();
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str12, "org.mockito.asm.tree.analysis.AnalyzerException: ");
    }

    @Test
    public void test01515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01515");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = basicInterpreter1.copyOperation(abstractInsnNode2, value3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str6 = type5.getDescriptor();
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter1.newValue(type5);
        org.mockito.asm.Type[] typeArray9 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type23, type26, type27, type31, type34 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type40, false);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str21, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type12, value46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        java.lang.String str52 = type49.getClassName();
        int int53 = type49.getSize();
        int int55 = type49.getOpcode(148);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type49, false);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str59 = type58.getDescriptor();
        java.lang.String str60 = type58.getClassName();
        int int61 = type58.getSize();
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier57.newValue(type58);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type65, true);
        java.lang.String str70 = type65.getClassName();
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type65, list71, true);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean76 = type74.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException80.addSuppressed((java.lang.Throwable) analyzerException82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException84);
        boolean boolean86 = type74.equals((java.lang.Object) analyzerException85);
        java.lang.String str87 = type74.getDescriptor();
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier73.newValue(type74);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier73.newValue(type89);
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier57.newValue(type89);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier57.newOperation(abstractInsnNode92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(CBFCF)I" + "'", str10, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str21, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(CBFCF)B" + "'", str39, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "char" + "'", str52, "char");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 148 + "'", int55 == 148);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "C" + "'", str59, "C");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "char" + "'", str60, "char");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "void" + "'", str70, "void");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "F" + "'", str87, "F");
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
    }

    @Test
    public void test01516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01516");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        boolean boolean18 = type13.equals((java.lang.Object) 177);
        int int19 = type13.getSize();
        java.lang.String str20 = type13.toString();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter7.newValue(type13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter7.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException30.addSuppressed((java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException30);
        java.lang.Throwable[] throwableArray35 = analyzerException34.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str41 = type40.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.ternaryOperation(abstractInsnNode45, value46, value47, value48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter56.copyOperation(abstractInsnNode57, value58);
        org.mockito.asm.Type type60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter56.newValue(type60);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter44.merge(value55, value61);
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter36.copyOperation(abstractInsnNode43, value55);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)F", (java.lang.Object) throwableArray35, value55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter65 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter65.ternaryOperation(abstractInsnNode66, value67, value68, value69);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter71.copyOperation(abstractInsnNode72, value73);
        org.mockito.asm.Type type75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter71.newValue(type75);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter77.copyOperation(abstractInsnNode78, value79);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter77.newValue(type81);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter65.merge(value76, value82);
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter7.ternaryOperation(abstractInsnNode25, value26, value55, value82);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter0.copyOperation(abstractInsnNode6, value26);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value87 = basicInterpreter0.newOperation(abstractInsnNode86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "F" + "'", str20, "F");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "I" + "'", str41, "I");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNull(value70);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertNull(value85);
    }

    @Test
    public void test01517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01517");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        java.lang.Object obj9 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.ternaryOperation(abstractInsnNode17, value18, value19, value20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter16.merge(value27, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.ternaryOperation(abstractInsnNode36, value37, value38, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter35.merge(value46, value52);
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier15.merge(value34, value46);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter10.copyOperation(abstractInsnNode14, value54);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj9, value55);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.copyOperation(abstractInsnNode7, value55);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value59 = basicInterpreter0.newOperation(abstractInsnNode58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value57);
    }

    @Test
    public void test01518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01518");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value10 = simpleVerifier6.newValue(type7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type13, true);
        java.lang.String str18 = type13.getClassName();
        java.util.List list19 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type13, list19, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type13, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type13, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        java.util.List list27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value28 = simpleVerifier25.naryOperation(abstractInsnNode26, list27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "void" + "'", str18, "void");
    }

    @Test
    public void test01519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01519");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type43, false);
        java.lang.String str48 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier22.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int54 = type52.getOpcode(48);
        java.lang.String str55 = type52.getClassName();
        java.lang.String str56 = type52.getClassName();
        int int58 = type52.getOpcode(119);
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier22.newValue(type52);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value62 = simpleVerifier22.unaryOperation(abstractInsnNode60, value61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "byte" + "'", str48, "byte");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 48 + "'", int54 == 48);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 119 + "'", int58 == 119);
        org.junit.Assert.assertNotNull(value59);
    }

    @Test
    public void test01520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01520");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("B");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str4 = type3.getInternalName();
        java.lang.String str5 = type3.toString();
        java.util.List list6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list6, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str12 = type11.getDescriptor();
        int int13 = type11.getSort();
        int int14 = type11.getDimensions();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str17 = type16.getDescriptor();
        int int18 = type16.getSort();
        java.util.List list19 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type16, list19, true);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str24 = type23.getDescriptor();
        int int25 = type23.getSort();
        int int26 = type23.getDimensions();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str29 = type28.getDescriptor();
        int int30 = type28.getSort();
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type28, list31, true);
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier21.newValue(type28);
        int int35 = value34.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        int int39 = type37.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier36.newValue(type37);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type72 = null;
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type71, type72, list73, false);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier63.newValue(type71);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier36.newValue(type71);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        int int79 = type78.getSize();
        java.lang.String str80 = type78.getClassName();
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier36.newValue(type78);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value82 = simpleVerifier8.binaryOperation(abstractInsnNode9, value34, value81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "LB;" + "'", str4, "LB;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LLB;;" + "'", str5, "LLB;;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lfloat;" + "'", str12, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lfloat;" + "'", str17, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lfloat;" + "'", str24, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lfloat;" + "'", str29, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 101 + "'", int39 == 101);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "float" + "'", str80, "float");
        org.junit.Assert.assertNotNull(value81);
    }

    @Test
    public void test01521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01521");
        java.lang.Object obj3 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter4.copyOperation(abstractInsnNode5, value6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter4.copyOperation(abstractInsnNode8, value48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj3, value49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Object) 1.0f, value49);
        java.lang.Throwable[] throwableArray52 = analyzerException51.getSuppressed();
        java.lang.Class<?> wildcardClass53 = throwableArray52.getClass();
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test01522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01522");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.ternaryOperation(abstractInsnNode14, value15, value16, value17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter13.merge(value24, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.ternaryOperation(abstractInsnNode33, value34, value35, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter32.merge(value43, value49);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier12.merge(value31, value43);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter7.copyOperation(abstractInsnNode11, value51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.ternaryOperation(abstractInsnNode54, value55, value56, value57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter59.copyOperation(abstractInsnNode60, value61);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter59.newValue(type63);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter65 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter65.copyOperation(abstractInsnNode66, value67);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter65.newValue(type69);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter53.merge(value64, value70);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter72.ternaryOperation(abstractInsnNode73, value74, value75, value76);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter78 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter78.copyOperation(abstractInsnNode79, value80);
        org.mockito.asm.Type type82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter78.newValue(type82);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter84 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        org.mockito.asm.tree.analysis.Value value86 = null;
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter84.copyOperation(abstractInsnNode85, value86);
        org.mockito.asm.Type type88 = null;
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter84.newValue(type88);
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter72.merge(value83, value89);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter0.ternaryOperation(abstractInsnNode6, value51, value71, value90);
        org.mockito.asm.Type type92 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean94 = type92.equals((java.lang.Object) (byte) 100);
        java.lang.String str95 = type92.getClassName();
        boolean boolean97 = type92.equals((java.lang.Object) 177);
        java.lang.String str98 = type92.getClassName();
        org.mockito.asm.tree.analysis.Value value99 = basicInterpreter0.newValue(type92);
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNull(value87);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNull(value91);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "float" + "'", str95, "float");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "float" + "'", str98, "float");
        org.junit.Assert.assertNotNull(value99);
    }

    @Test
    public void test01523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01523");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        int int4 = type2.getOpcode(101);
        java.lang.String str5 = type2.toString();
        int int6 = type2.getSort();
        java.util.List list7 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list7, false);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str13 = type12.getDescriptor();
        int int14 = type12.getSort();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list15, false);
        int int18 = type12.getSize();
        int int19 = type12.getSort();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type20, false);
        org.mockito.asm.tree.analysis.Value value23 = simpleVerifier9.newValue(type20);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier24.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type30, true);
        java.lang.String str35 = type30.getClassName();
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type30, list36, true);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str41 = type40.getDescriptor();
        java.lang.String str42 = type40.getInternalName();
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier38.newValue(type40);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        java.lang.String str47 = type44.getClassName();
        int int49 = type44.getOpcode(138);
        int int50 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier38.newValue(type44);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type53, true);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier57.newValue(type58);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        java.lang.String str65 = type62.getClassName();
        int int67 = type62.getOpcode(138);
        int int68 = type62.getSize();
        boolean boolean70 = type62.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier57.newValue(type62);
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier24.merge(value51, value71);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.ternaryOperation(abstractInsnNode76, value77, value78, value79);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter81 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        org.mockito.asm.tree.analysis.Value value83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter81.copyOperation(abstractInsnNode82, value83);
        org.mockito.asm.Type type85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter81.newValue(type85);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter87 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        org.mockito.asm.tree.analysis.Value value89 = null;
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter87.copyOperation(abstractInsnNode88, value89);
        org.mockito.asm.Type type91 = null;
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter87.newValue(type91);
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter75.merge(value86, value92);
        int int94 = value93.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/AnalyzerException", (java.lang.Object) 6, value93);
        org.mockito.asm.tree.analysis.Value value96 = simpleVerifier9.merge(value51, value93);
        int int97 = value51.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 101 + "'", int4 == 101);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "C" + "'", str5, "C");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lfloat;" + "'", str13, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "void" + "'", str35, "void");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "LB;" + "'", str41, "LB;");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "B" + "'", str42, "B");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "char" + "'", str47, "char");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 138 + "'", int49 == 138);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "char" + "'", str65, "char");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 138 + "'", int67 == 138);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNull(value90);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(value96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test01524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01524");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        int int35 = type0.getSort();
        int int37 = type0.getOpcode(114);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType("(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type39, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        java.util.List list43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value44 = simpleVerifier41.naryOperation(abstractInsnNode42, list43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 116 + "'", int37 == 116);
        org.junit.Assert.assertNotNull(type39);
    }

    @Test
    public void test01525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01525");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        java.lang.Class<?> wildcardClass10 = analyzerException8.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = type11.getElementType();
        java.lang.String str13 = type12.getClassName();
        java.lang.String str14 = type12.getDescriptor();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type12, list15, false);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type20, true);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier24.newValue(type25);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type31, true);
        java.lang.String str36 = type31.getClassName();
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type31, list37, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type31, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type31, true);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType("V");
        int int46 = type45.getSort();
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier43.newValue(type45);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier17.newValue(type45);
        java.lang.String str49 = type45.getDescriptor();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = type45.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str13, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str14, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "void" + "'", str36, "void");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "V" + "'", str49, "V");
    }

    @Test
    public void test01526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01526");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        int int7 = type2.getOpcode(138);
        int int8 = type2.getSize();
        boolean boolean10 = type2.equals((java.lang.Object) 154);
        java.lang.String str11 = type2.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str22 = type21.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type21, false);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier24.newValue(type25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        java.util.List list28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value29 = simpleVerifier24.naryOperation(abstractInsnNode27, list28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 138 + "'", int7 == 138);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "C" + "'", str11, "C");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str22, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value26);
    }

    @Test
    public void test01527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01527");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        int int17 = type15.getOpcode(101);
        int int19 = type15.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier14.newValue(type15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        java.util.List list22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value23 = simpleVerifier14.naryOperation(abstractInsnNode21, list22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 101 + "'", int17 == 101);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 191 + "'", int19 == 191);
        org.junit.Assert.assertNotNull(value20);
    }

    @Test
    public void test01528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01528");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType("B");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type4, list5, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 193);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type18, type21, type22, type26, type29 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray33);
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray33);
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray33);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray33);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray33);
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "char" + "'", str16, "char");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(CBFCF)B" + "'", str34, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(CBFCF)C" + "'", str35, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str36, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)S" + "'", str37, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)J" + "'", str38, "(CBFCF)J");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(CBFCF)B" + "'", str39, "(CBFCF)B");
    }

    @Test
    public void test01529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01529");
        java.lang.Object obj3 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter4.copyOperation(abstractInsnNode5, value6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter4.copyOperation(abstractInsnNode8, value48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj3, value49);
        java.lang.Throwable[] throwableArray51 = analyzerException50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = analyzerException50.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("Lhi!;", (java.lang.Throwable) analyzerException56);
        analyzerException53.addSuppressed((java.lang.Throwable) analyzerException57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("short", (java.lang.Throwable) analyzerException57);
        java.lang.String str60 = analyzerException57.toString();
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: Lhi!;" + "'", str60, "org.mockito.asm.tree.analysis.AnalyzerException: Lhi!;");
    }

    @Test
    public void test01530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01530");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType("V");
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type52, list53, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        java.util.List list57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value58 = simpleVerifier55.naryOperation(abstractInsnNode56, list57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type52);
    }

    @Test
    public void test01531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01531");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.Type type10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.newValue(type10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.merge(value11, value17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException24);
        java.lang.Class<?> wildcardClass26 = analyzerException24.getClass();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        int int31 = type29.getOpcode(47);
        org.mockito.asm.Type type32 = type29.getElementType();
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type29, list33, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int40 = type38.getOpcode(8);
        int int42 = type38.getOpcode(163);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str46 = type45.getDescriptor();
        int int47 = type45.getSort();
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type45, list48, false);
        int int51 = type45.getSize();
        int int52 = type45.getSort();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type53, false);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int58 = type56.getOpcode(48);
        java.lang.String str59 = type56.getClassName();
        java.lang.String str60 = type56.getClassName();
        java.util.List list61 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type56, list61, true);
        java.util.List list64 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type45, list64, false);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) 151);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) (byte) 100);
        java.lang.String str82 = type79.getClassName();
        org.mockito.asm.Type[] typeArray83 = new org.mockito.asm.Type[] { type68, type71, type72, type76, type79 };
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray83);
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier66.newValue(type67);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value86 = simpleVerifier35.unaryOperation(abstractInsnNode36, value85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "C" + "'", str20, "C");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str28, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 51 + "'", int31 == 51);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 167 + "'", int42 == 167);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Lfloat;" + "'", str46, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 48 + "'", int58 == 48);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "float" + "'", str82, "float");
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(CBFCF)B" + "'", str84, "(CBFCF)B");
        org.junit.Assert.assertNotNull(value85);
    }

    @Test
    public void test01532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01532");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type2 = type1.getElementType();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type22, false);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier26.newValue(type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier26.newValue(type29);
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type29, list34, true);
        int int38 = type29.getOpcode(100);
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type29, list39, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        boolean boolean54 = type49.equals((java.lang.Object) 177);
        int int55 = type49.getSize();
        java.lang.String str56 = type49.toString();
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter43.newValue(type49);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter43.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter43.newValue(type61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type65, true);
        java.lang.String str70 = type65.getClassName();
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type65, list71, true);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str76 = type75.getDescriptor();
        java.lang.String str77 = type75.getInternalName();
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier73.newValue(type75);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str81 = type80.getDescriptor();
        int int82 = type80.getSort();
        int int83 = type80.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type75, type80, false);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter43.newValue(type80);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value87 = simpleVerifier41.copyOperation(abstractInsnNode42, value86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 102 + "'", int38 == 102);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "F" + "'", str56, "F");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "void" + "'", str70, "void");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "LB;" + "'", str76, "LB;");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "B" + "'", str77, "B");
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Lfloat;" + "'", str81, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value86);
    }

    @Test
    public void test01533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01533");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicInterpreter");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("S", (java.lang.Throwable) analyzerException17);
        boolean boolean19 = type8.equals((java.lang.Object) analyzerException17);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type21, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException29.addSuppressed((java.lang.Throwable) analyzerException31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException42.addSuppressed((java.lang.Throwable) analyzerException44);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException46);
        analyzerException37.addSuppressed((java.lang.Throwable) analyzerException47);
        analyzerException29.addSuppressed((java.lang.Throwable) analyzerException47);
        java.lang.Throwable[] throwableArray50 = analyzerException47.getSuppressed();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type52, type55, type56, type60, type63 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type69, false);
        org.mockito.asm.Type type74 = null;
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier73.newValue(type74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) (byte) 100);
        java.lang.String str79 = type76.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier73.newValue(type76);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int82 = type81.getSize();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.CHAR_TYPE;
        int int85 = type83.getOpcode(101);
        java.lang.String str86 = type83.toString();
        int int87 = type83.getSort();
        java.util.List list88 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type81, type83, list88, false);
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier73.newValue(type81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/AnalyzerException: expected 6, but found .", (java.lang.Object) analyzerException47, value91);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier23.unaryOperation(abstractInsnNode24, value91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)B" + "'", str68, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "float" + "'", str79, "float");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 101 + "'", int85 == 101);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "C" + "'", str86, "C");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(value91);
    }

    @Test
    public void test01534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01534");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        int int7 = type2.getOpcode(138);
        int int8 = type2.getSize();
        boolean boolean10 = type2.equals((java.lang.Object) 154);
        java.lang.String str11 = type2.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value15 = simpleVerifier13.newOperation(abstractInsnNode14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 138 + "'", int7 == 138);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "C" + "'", str11, "C");
    }

    @Test
    public void test01535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01535");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier22.newValue(type25);
        int int30 = value29.getSize();
        java.lang.Class<?> wildcardClass31 = value29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str33, "org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test01536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01536");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter0.copyOperation(abstractInsnNode6, value7);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter11.ternaryOperation(abstractInsnNode12, value13, value14, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter11.merge(value22, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.ternaryOperation(abstractInsnNode31, value32, value33, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter30.merge(value41, value47);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier10.merge(value29, value41);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter0.copyOperation(abstractInsnNode9, value41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type53, type56, type57, type61, type64 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type70, false);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier74.newValue(type75);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter0.copyOperation(abstractInsnNode51, value76);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str80 = type79.getClassName();
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter0.newValue(type79);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        org.mockito.asm.tree.analysis.Value value83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value84 = basicInterpreter0.unaryOperation(abstractInsnNode82, value83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)B" + "'", str69, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "LB;" + "'", str80, "LB;");
        org.junit.Assert.assertNotNull(value81);
    }

    @Test
    public void test01537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01537");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 24);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        java.lang.Class<?> wildcardClass31 = analyzerException29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type34, list35, true);
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type26, list38, false);
        boolean boolean41 = type4.equals((java.lang.Object) type7);
        int int42 = type7.getSize();
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type7, list43, true);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType("J");
        org.mockito.asm.Type type48 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 193);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type58, type61, type62, type66, type69 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray73);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray73);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray73);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray73);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray73);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier45.newValue(type47);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type47, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        java.util.List list83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value84 = simpleVerifier81.naryOperation(abstractInsnNode82, list83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "char" + "'", str56, "char");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)B" + "'", str74, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)C" + "'", str75, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str76, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)S" + "'", str77, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)J" + "'", str78, "(CBFCF)J");
        org.junit.Assert.assertNotNull(value79);
    }

    @Test
    public void test01538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01538");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) (byte) 100);
        java.lang.String str4 = type1.getClassName();
        boolean boolean6 = type1.equals((java.lang.Object) 177);
        int int7 = type1.getSize();
        java.lang.String str8 = type1.toString();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list9, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value13 = simpleVerifier11.newOperation(abstractInsnNode12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "float" + "'", str4, "float");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "F" + "'", str8, "F");
    }

    @Test
    public void test01539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01539");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        java.lang.String str15 = type12.getClassName();
        int int17 = type12.getOpcode(138);
        int int18 = type12.getSize();
        boolean boolean20 = type12.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier7.newValue(type12);
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type12, list22, true);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type26, true);
        java.lang.String str31 = type26.getClassName();
        int int32 = type26.getSize();
        java.lang.String str33 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier24.newValue(type26);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value36 = simpleVerifier24.newOperation(abstractInsnNode35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "char" + "'", str15, "char");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 138 + "'", int17 == 138);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "void" + "'", str31, "void");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "void" + "'", str33, "void");
        org.junit.Assert.assertNull(value34);
    }

    @Test
    public void test01540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01540");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        boolean boolean22 = type13.equals((java.lang.Object) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = type13.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test01541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01541");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        java.lang.Class<?> wildcardClass31 = analyzerException29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type34, list35, true);
        org.mockito.asm.Type type38 = type34.getElementType();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type41, type44, type45, type49, type52 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type58, false);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier62.newValue(type63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier62.newValue(type65);
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type65, list70, true);
        int int74 = type65.getOpcode(100);
        org.mockito.asm.Type[] typeArray76 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray76);
        int int78 = type65.getSort();
        org.mockito.asm.Type[] typeArray80 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray80);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray80);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int85 = type84.getSort();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType("I");
        java.util.List list88 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type84, type87, list88, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type87, true);
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier22.newValue(type34);
        org.mockito.asm.Type type95 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int97 = type95.getOpcode(8);
        java.lang.String str98 = type95.getClassName();
        org.mockito.asm.tree.analysis.Value value99 = simpleVerifier22.newValue(type95);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)B" + "'", str57, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 102 + "'", int74 == 102);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)F" + "'", str77, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 6 + "'", int78 == 6);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)F" + "'", str81, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str82, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(type95);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 12 + "'", int97 == 12);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str98, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(value99);
    }

    @Test
    public void test01542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01542");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException15.addSuppressed((java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException19);
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException19);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("byte", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("Lfloat;", (java.lang.Throwable) analyzerException24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.ternaryOperation(abstractInsnNode34, value35, value36, value37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.newValue(type49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter33.merge(value44, value50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode30, value51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException52);
        java.lang.Throwable[] throwableArray54 = analyzerException52.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter61.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter65 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter65.ternaryOperation(abstractInsnNode66, value67, value68, value69);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter71.copyOperation(abstractInsnNode72, value73);
        org.mockito.asm.Type type75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter71.newValue(type75);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter77.copyOperation(abstractInsnNode78, value79);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter77.newValue(type81);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter65.merge(value76, value82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode62, value83);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter55.copyOperation(abstractInsnNode59, value83);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicInterpreter;", (java.lang.Object) analyzerException52, value83);
        analyzerException25.addSuppressed((java.lang.Throwable) analyzerException52);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNull(value70);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value85);
    }

    @Test
    public void test01543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01543");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int9 = type7.getOpcode(48);
        java.lang.String str10 = type7.getClassName();
        java.lang.String str11 = type7.getClassName();
        java.lang.String str12 = type7.getClassName();
        int int13 = type7.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.ternaryOperation(abstractInsnNode16, value17, value18, value19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.newValue(type25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter27.copyOperation(abstractInsnNode28, value29);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter15.merge(value26, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.ternaryOperation(abstractInsnNode35, value36, value37, value38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.newValue(type50);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter34.merge(value45, value51);
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier14.merge(value33, value45);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type56, type59, type60, type64, type67 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type73, false);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier77.newValue(type78);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean82 = type80.equals((java.lang.Object) (byte) 100);
        java.lang.String str83 = type80.getClassName();
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier77.newValue(type80);
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type80, list85, true);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier14.newValue(type80);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type80, true);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter0.newValue(type80);
        org.mockito.asm.Type type92 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int94 = type92.getOpcode(48);
        java.lang.String str95 = type92.getClassName();
        java.util.List list96 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier98 = new org.mockito.asm.tree.analysis.SimpleVerifier(type80, type92, list96, true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type99 = type92.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 48 + "'", int9 == 48);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)B" + "'", str72, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "float" + "'", str83, "float");
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 48 + "'", int94 == 48);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "boolean" + "'", str95, "boolean");
    }

    @Test
    public void test01544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01544");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.Type type10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.newValue(type10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.merge(value11, value17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        java.util.List list23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value24 = basicInterpreter0.naryOperation(abstractInsnNode22, list23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "C" + "'", str20, "C");
        org.junit.Assert.assertNotNull(value21);
    }

    @Test
    public void test01545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01545");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type35, true);
        boolean boolean39 = type35.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier4.newValue(type35);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier4.newValue(type41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str47 = type46.getDescriptor();
        int int48 = type46.getSort();
        java.util.List list49 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type46, list49, false);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type71, false);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier75.newValue(type76);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = type78.getClassName();
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier75.newValue(type78);
        java.util.List list83 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type78, list83, true);
        int int87 = type78.getOpcode(100);
        org.mockito.asm.Type[] typeArray89 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type78, typeArray89);
        java.lang.Class<?> wildcardClass91 = type78.getClass();
        java.lang.String str92 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass91);
        org.mockito.asm.Type type93 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass91);
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier51.newValue(type93);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = simpleVerifier4.copyOperation(abstractInsnNode43, value94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "char" + "'", str8, "char");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)C" + "'", str27, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Lfloat;" + "'", str47, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 102 + "'", int87 == 102);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(CBFCF)F" + "'", str90, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str92, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test01546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01546");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, list10, true);
        org.mockito.asm.Type type13 = type9.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.Value value22 = simpleVerifier14.newValue(type19);
        boolean boolean23 = type13.equals((java.lang.Object) type19);
        java.lang.String str24 = type13.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "I" + "'", str20, "I");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "g/mockito/asm/tree/analysis/AnalyzerException" + "'", str24, "g/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test01547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01547");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type32 = type31.getElementType();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier22.newValue(type32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        int int41 = value40.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value42 = simpleVerifier22.copyOperation(abstractInsnNode34, value40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test01548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01548");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value4 = simpleVerifier0.newValue(type1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        int int8 = type7.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str14 = type13.getDescriptor();
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter9.newValue(type13);
        org.mockito.asm.Type[] typeArray17 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray17);
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray17);
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray17);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier0.newValue(type6);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        boolean boolean27 = type22.equals((java.lang.Object) 177);
        java.lang.String str28 = type22.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException31);
        java.lang.Class<?> wildcardClass33 = analyzerException31.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        int int36 = type34.getOpcode(114);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type38, type41, type42, type46, type49 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray53);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray53);
        boolean boolean56 = type22.equals((java.lang.Object) typeArray53);
        java.lang.String str57 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier0.newValue(type22);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getObjectType("(CBFCF)B");
        org.mockito.asm.Type type61 = type60.getElementType();
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier0.newValue(type61);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getObjectType("(CBFCF)F");
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier0.newValue(type64);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value67 = simpleVerifier0.newOperation(abstractInsnNode66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "I" + "'", str14, "I");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)I" + "'", str18, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)S" + "'", str19, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str20, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "F" + "'", str28, "F");
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 118 + "'", int36 == 118);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)B" + "'", str54, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str55, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(value65);
    }

    @Test
    public void test01549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01549");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        boolean boolean44 = type39.equals((java.lang.Object) 177);
        int int45 = type39.getSize();
        java.lang.String str46 = type39.toString();
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter33.newValue(type39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.ternaryOperation(abstractInsnNode50, value51, value52, value53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter61.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter61.newValue(type65);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter49.merge(value60, value66);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter33.copyOperation(abstractInsnNode48, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.ternaryOperation(abstractInsnNode70, value71, value72, value73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter81 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        org.mockito.asm.tree.analysis.Value value83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter81.copyOperation(abstractInsnNode82, value83);
        org.mockito.asm.Type type85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter81.newValue(type85);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter69.merge(value80, value86);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str89 = type88.getDescriptor();
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter69.newValue(type88);
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier32.merge(value67, value90);
        org.mockito.asm.Type type93 = org.mockito.asm.Type.getReturnType("(CBFCF)Z");
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier32.newValue(type93);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode95 = null;
        java.util.List list96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value97 = simpleVerifier32.naryOperation(abstractInsnNode95, list96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "F" + "'", str46, "F");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "C" + "'", str89, "C");
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test01550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01550");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.toString();
        java.lang.String str24 = type0.toString();
        int int25 = type0.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type27, list28, true);
        java.lang.Class<?> wildcardClass31 = simpleVerifier30.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str35 = type34.getDescriptor();
        int int36 = type34.getSort();
        int int37 = type34.getSize();
        java.lang.String str38 = type34.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type34, true);
        boolean boolean41 = type0.equals((java.lang.Object) type34);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type43, true);
        java.lang.String str48 = type43.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type43, false);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        int int53 = type51.getOpcode(101);
        java.lang.String str54 = type51.toString();
        java.util.List list55 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type51, list55, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int60 = type59.getSize();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        int int63 = type61.getOpcode(101);
        java.lang.String str64 = type61.toString();
        int int65 = type61.getSort();
        java.util.List list66 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type61, list66, false);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str72 = type71.getDescriptor();
        int int73 = type71.getSort();
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type69, type71, list74, false);
        int int77 = type71.getSize();
        int int78 = type71.getSort();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type71, type79, false);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier68.newValue(type79);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getObjectType("void");
        java.lang.String str85 = type84.getDescriptor();
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier68.newValue(type84);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value87 = simpleVerifier57.unaryOperation(abstractInsnNode58, value86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B" + "'", str23, "B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lfloat;" + "'", str35, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "void" + "'", str48, "void");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 101 + "'", int53 == 101);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "C" + "'", str54, "C");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 101 + "'", int63 == 101);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "C" + "'", str64, "C");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Lfloat;" + "'", str72, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNull(value82);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Lvoid;" + "'", str85, "Lvoid;");
        org.junit.Assert.assertNotNull(value86);
    }

    @Test
    public void test01551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01551");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lbyte;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type32, list33, true);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type24, list36, false);
        boolean boolean39 = type2.equals((java.lang.Object) type5);
        java.lang.String str40 = type2.getClassName();
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list41, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value45 = simpleVerifier43.newOperation(abstractInsnNode44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "void" + "'", str40, "void");
    }

    @Test
    public void test01552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01552");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        java.lang.String str11 = type2.toString();
        java.lang.String str12 = type2.toString();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type[] typeArray29 = new org.mockito.asm.Type[] { type14, type17, type18, type22, type25 };
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        java.lang.Class<?> wildcardClass37 = analyzerException35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type40, list41, true);
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type32, list44, false);
        int int47 = type32.getDimensions();
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type32, list48, false);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type52, type55, type56, type60, type63 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type69, false);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier73.newValue(type74);
        int int77 = type74.getOpcode(4);
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier50.newValue(type74);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        java.util.List list80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value81 = simpleVerifier50.naryOperation(abstractInsnNode79, list80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "V" + "'", str11, "V");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)B" + "'", str30, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str39, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)B" + "'", str68, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertNotNull(value78);
    }

    @Test
    public void test01553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01553");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int6 = type4.getOpcode(48);
        java.lang.String str7 = type4.getClassName();
        java.lang.String str8 = type4.getClassName();
        java.lang.String str9 = type4.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type11, type14, type15, type19, type22 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type28, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type10, true);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter0.newValue(type4);
        int int36 = type4.getSort();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = type4.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)B" + "'", str27, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test01554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01554");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier3 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type22, false);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier26.newValue(type27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException33);
        java.lang.Class<?> wildcardClass35 = analyzerException33.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type38, list39, true);
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier26.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter43.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type52, type55, type56, type60, type63 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type69, false);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier73.newValue(type74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type77 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type76, type77, true);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean84 = type82.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier81.newValue(type82);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean88 = type86.equals((java.lang.Object) 151);
        java.lang.String str89 = type86.getClassName();
        int int91 = type86.getOpcode(138);
        int int92 = type86.getSize();
        boolean boolean94 = type86.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value95 = simpleVerifier81.newValue(type86);
        org.mockito.asm.tree.analysis.Value value96 = null;
        org.mockito.asm.tree.analysis.Value value97 = basicInterpreter43.ternaryOperation(abstractInsnNode50, value75, value95, value96);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value98 = simpleVerifier3.merge(value42, value96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str37, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)B" + "'", str68, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "char" + "'", str89, "char");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 138 + "'", int91 == 138);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(value95);
        org.junit.Assert.assertNull(value97);
    }

    @Test
    public void test01555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01555");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        java.lang.String str35 = type0.getClassName();
        java.lang.String str36 = type0.getDescriptor();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type38 = null;
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type38, list39, false);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException67);
        java.lang.Class<?> wildcardClass69 = analyzerException67.getClass();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        java.lang.String str71 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass69);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type72, true);
        boolean boolean76 = type72.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier41.newValue(type72);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier41.newValue(type78);
        boolean boolean80 = type0.equals((java.lang.Object) type78);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str83 = type82.getDescriptor();
        int int84 = type82.getSort();
        int int85 = type82.getDimensions();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str88 = type87.getDescriptor();
        int int89 = type87.getSort();
        java.util.List list90 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type82, type87, list90, true);
        java.lang.String str93 = type82.getDescriptor();
        java.util.List list94 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier96 = new org.mockito.asm.tree.analysis.SimpleVerifier(type78, type82, list94, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode97 = null;
        java.util.List list98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value99 = simpleVerifier96.naryOperation(abstractInsnNode97, list98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "F" + "'", str36, "F");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "char" + "'", str45, "char");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)C" + "'", str64, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str71, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lfloat;" + "'", str83, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Lfloat;" + "'", str88, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Lfloat;" + "'", str93, "Lfloat;");
    }

    @Test
    public void test01556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01556");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter5.ternaryOperation(abstractInsnNode6, value7, value8, value9);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter11.copyOperation(abstractInsnNode12, value13);
        org.mockito.asm.Type type15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter11.newValue(type15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter5.merge(value16, value22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier4.merge(value23, value35);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type46, type49, type50, type54, type57 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type63, false);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier67.newValue(type68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier67.newValue(type70);
        java.util.List list75 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type70, list75, true);
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier4.newValue(type70);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier4.newValue(type79);
        java.lang.String str81 = type79.toString();
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier0.newValue(type79);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value84 = simpleVerifier0.newOperation(abstractInsnNode83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)B" + "'", str62, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "C" + "'", str81, "C");
        org.junit.Assert.assertNotNull(value82);
    }

    @Test
    public void test01557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01557");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        int int35 = type0.getSort();
        int int37 = type0.getOpcode(114);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type39, true);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier43.newValue(type44);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type50, true);
        java.lang.String str55 = type50.getClassName();
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type50, list56, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type50, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type50, true);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        java.util.List list64 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type63, list64, false);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str69 = type68.getInternalName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier66.newValue(type68);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value72 = simpleVerifier66.newOperation(abstractInsnNode71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 116 + "'", int37 == 116);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "void" + "'", str55, "void");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str69, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(value70);
    }

    @Test
    public void test01558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01558");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type43, false);
        java.lang.String str48 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier22.newValue(type50);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter53.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter53.copyOperation(abstractInsnNode57, value58);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter61.ternaryOperation(abstractInsnNode62, value63, value64, value65);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter67 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter67.copyOperation(abstractInsnNode68, value69);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter67.newValue(type71);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter73 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter73.copyOperation(abstractInsnNode74, value75);
        org.mockito.asm.Type type77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter73.newValue(type77);
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter61.merge(value72, value78);
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter53.copyOperation(abstractInsnNode60, value79);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str84 = type83.getDescriptor();
        int int85 = type83.getSort();
        java.util.List list86 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type81, type83, list86, false);
        int int89 = type83.getSize();
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter53.newValue(type83);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value91 = simpleVerifier22.copyOperation(abstractInsnNode52, value90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "byte" + "'", str48, "byte");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNull(value70);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Lfloat;" + "'", str84, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(value90);
    }

    @Test
    public void test01559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01559");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int7 = type0.getOpcode(129);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, true);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier13.newValue(type14);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type20, true);
        java.lang.String str25 = type20.getClassName();
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type20, list26, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type20, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean32 = type20.equals((java.lang.Object) type31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) (byte) 100);
        java.lang.String str41 = type38.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type34, type37, type38, type42, type45 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type51, false);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier55.newValue(type56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier55.newValue(type58);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int64 = type63.getSize();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        int int67 = type65.getOpcode(101);
        java.lang.String str68 = type65.toString();
        int int69 = type65.getSort();
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type65, list70, false);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier55.newValue(type63);
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type63, list74, false);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type20, list77, false);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found .");
        java.util.List list82 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier84 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type81, list82, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value86 = simpleVerifier84.newOperation(abstractInsnNode85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 129 + "'", int7 == 129);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "void" + "'", str25, "void");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(CBFCF)B" + "'", str50, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 101 + "'", int67 == 101);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "C" + "'", str68, "C");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type81);
    }

    @Test
    public void test01560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01560");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        int int17 = type15.getOpcode(101);
        int int19 = type15.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier14.newValue(type15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        java.util.List list22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value23 = simpleVerifier14.naryOperation(abstractInsnNode21, list22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 101 + "'", int17 == 101);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 191 + "'", int19 == 191);
        org.junit.Assert.assertNotNull(value20);
    }

    @Test
    public void test01561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01561");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier0.newValue(type26);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value34 = simpleVerifier0.copyOperation(abstractInsnNode32, value33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
    }

    @Test
    public void test01562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01562");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type26, false);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier30.newValue(type31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException37);
        java.lang.Class<?> wildcardClass39 = analyzerException37.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        java.lang.String str41 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type42, list43, true);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier30.newValue(type42);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type48, true);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier52.newValue(type53);
        boolean boolean57 = type42.equals((java.lang.Object) value56);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value58 = simpleVerifier5.binaryOperation(abstractInsnNode6, value7, value56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str41, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test01563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01563");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        java.lang.Class<?> wildcardClass77 = simpleVerifier0.getClass();
        java.lang.String str78 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type[] typeArray80 = new org.mockito.asm.Type[] {};
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type79, typeArray80);
        java.lang.String str82 = type79.getClassName();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str78, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "()Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str81, "()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org.mockito.asm.tree.analysis.SimpleVerifier" + "'", str82, "org.mockito.asm.tree.analysis.SimpleVerifier");
    }

    @Test
    public void test01564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01564");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException7);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        java.lang.String str11 = analyzerException8.toString();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue" + "'", str11, "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test01565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01565");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        java.lang.Class<?> wildcardClass7 = analyzerException5.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, false);
        int int11 = type1.getSort();
        java.lang.String str12 = type1.toString();
        org.mockito.asm.Type type13 = null;
        java.util.List list14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type13, list14, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type20, true);
        java.lang.String str25 = type20.getClassName();
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type20, list26, true);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException35.addSuppressed((java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException39);
        boolean boolean41 = type29.equals((java.lang.Object) analyzerException40);
        java.lang.String str42 = type29.getDescriptor();
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier28.newValue(type29);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value44 = simpleVerifier16.unaryOperation(abstractInsnNode17, value43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "B" + "'", str12, "B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "void" + "'", str25, "void");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "F" + "'", str42, "F");
        org.junit.Assert.assertNotNull(value43);
    }

    @Test
    public void test01566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01566");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value10 = simpleVerifier6.newValue(type7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type13, true);
        java.lang.String str18 = type13.getClassName();
        java.util.List list19 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type13, list19, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type13, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type13, true);
        java.lang.String str26 = type13.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "void" + "'", str18, "void");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "V" + "'", str26, "V");
    }

    @Test
    public void test01567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01567");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier3 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter4.copyOperation(abstractInsnNode5, value6);
        org.mockito.asm.Type type8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter4.newValue(type8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        boolean boolean15 = type10.equals((java.lang.Object) 177);
        int int16 = type10.getSize();
        java.lang.String str17 = type10.toString();
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter4.newValue(type10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException21);
        java.lang.Class<?> wildcardClass23 = analyzerException21.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.String str25 = type24.toString();
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter4.newValue(type24);
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier3.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        java.util.List list29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value30 = simpleVerifier3.naryOperation(abstractInsnNode28, list29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "F" + "'", str17, "F");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str25, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
    }

    @Test
    public void test01568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01568");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        int int7 = type2.getOpcode(138);
        int int8 = type2.getSize();
        boolean boolean10 = type2.equals((java.lang.Object) 154);
        java.lang.String str11 = type2.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str22 = type21.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type21, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) (byte) 100);
        java.lang.String str39 = type36.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type32, type35, type36, type40, type43 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type49, false);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier53.newValue(type54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type57, type58, true);
        java.lang.String str63 = type58.getClassName();
        java.util.List list64 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type58, list64, true);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str69 = type68.getDescriptor();
        java.lang.String str70 = type68.getInternalName();
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier66.newValue(type68);
        int int72 = value71.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter73 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter73.ternaryOperation(abstractInsnNode74, value75, value76, value77);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter79 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode80 = null;
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter79.copyOperation(abstractInsnNode80, value81);
        org.mockito.asm.Type type83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter79.newValue(type83);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter85 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode86 = null;
        org.mockito.asm.tree.analysis.Value value87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter85.copyOperation(abstractInsnNode86, value87);
        org.mockito.asm.Type type89 = null;
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter85.newValue(type89);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter73.merge(value84, value90);
        int int92 = value91.getSize();
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier53.merge(value71, value91);
        org.mockito.asm.tree.analysis.Value value94 = basicInterpreter26.copyOperation(abstractInsnNode30, value91);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = simpleVerifier24.copyOperation(abstractInsnNode25, value94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 138 + "'", int7 == 138);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "C" + "'", str11, "C");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str22, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "float" + "'", str39, "float");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(CBFCF)B" + "'", str48, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "void" + "'", str63, "void");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "LB;" + "'", str69, "LB;");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "B" + "'", str70, "B");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNull(value82);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNull(value88);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test01569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01569");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        int int35 = type0.getSort();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int39 = type37.getOpcode(167);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type37, list40, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type53, true);
        java.lang.String str58 = type53.getClassName();
        java.util.List list59 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type53, list59, true);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str64 = type63.getDescriptor();
        java.lang.String str65 = type63.getInternalName();
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier61.newValue(type63);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter44.copyOperation(abstractInsnNode50, value66);
        int int68 = value67.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = simpleVerifier42.copyOperation(abstractInsnNode43, value67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 171 + "'", int39 == 171);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "void" + "'", str58, "void");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "LB;" + "'", str64, "LB;");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "B" + "'", str65, "B");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test01570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01570");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type32 = type31.getElementType();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier22.newValue(type32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.ternaryOperation(abstractInsnNode36, value37, value38, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter62.ternaryOperation(abstractInsnNode63, value64, value65, value66);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter68.copyOperation(abstractInsnNode69, value70);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter68.newValue(type72);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter74.copyOperation(abstractInsnNode75, value76);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter74.newValue(type78);
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter62.merge(value73, value79);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier42.merge(value61, value73);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter35.copyOperation(abstractInsnNode41, value73);
        int int83 = value82.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value84 = simpleVerifier22.unaryOperation(abstractInsnNode34, value82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test01571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01571");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        int int2 = type1.getSize();
        int int3 = type1.getSize();
        java.lang.String str4 = type1.toString();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 24);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type35, list36, true);
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type27, list39, false);
        boolean boolean42 = type5.equals((java.lang.Object) type8);
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, list43, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        java.util.List list47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value48 = simpleVerifier45.naryOperation(abstractInsnNode46, list47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lhi!;" + "'", str4, "Lhi!;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test01572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01572");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter5.copyOperation(abstractInsnNode6, value7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str10 = type9.getDescriptor();
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter5.newValue(type9);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type[] typeArray29 = new org.mockito.asm.Type[] { type14, type17, type18, type22, type25 };
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type31, false);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier35.newValue(type36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) (byte) 100);
        java.lang.String str41 = type38.getClassName();
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier35.newValue(type38);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter5.copyOperation(abstractInsnNode12, value42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type45, true);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier49.newValue(type50);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type56, true);
        java.lang.String str61 = type56.getClassName();
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type56, list62, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type56, true);
        java.lang.Class<?> wildcardClass67 = type50.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        int int69 = type68.getSort();
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter5.newValue(type68);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value71 = basicInterpreter0.unaryOperation(abstractInsnNode4, value70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "I" + "'", str10, "I");
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)B" + "'", str30, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "void" + "'", str61, "void");
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertNotNull(value70);
    }

    @Test
    public void test01573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01573");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        int int33 = type31.getOpcode(101);
        int int35 = type31.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value36 = simpleVerifier30.newValue(type31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        java.util.List list38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value39 = simpleVerifier30.naryOperation(abstractInsnNode37, list38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 101 + "'", int33 == 101);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 191 + "'", int35 == 191);
        org.junit.Assert.assertNotNull(value36);
    }

    @Test
    public void test01574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01574");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        java.lang.Class<?> wildcardClass10 = analyzerException8.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = type11.getElementType();
        java.lang.String str13 = type12.getClassName();
        java.lang.String str14 = type12.getDescriptor();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type12, list15, false);
        int int19 = type0.getOpcode(184);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str13, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str14, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 186 + "'", int19 == 186);
    }

    @Test
    public void test01575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01575");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier0.newValue(type26);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type34 = org.mockito.asm.Type.SHORT_TYPE;
        int int35 = type34.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str41 = type40.getDescriptor();
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter36.newValue(type40);
        org.mockito.asm.Type[] typeArray44 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray44);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray44);
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray44);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier0.newValue(type33);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        int int67 = type49.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type49, true);
        java.lang.String str70 = type33.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "I" + "'", str41, "I");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(CBFCF)I" + "'", str45, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(CBFCF)S" + "'", str46, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str47, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: char" + "'", str70, "org.mockito.asm.tree.analysis.AnalyzerException: char");
    }

    @Test
    public void test01576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01576");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("org.mockito.asm.tree.analysis.AnalyzerException: byte");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01577");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str13 = type12.getDescriptor();
        java.lang.String str14 = type12.getInternalName();
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier10.newValue(type12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        java.lang.String str19 = type16.getClassName();
        int int21 = type16.getOpcode(138);
        int int22 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value23 = simpleVerifier10.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        java.lang.Class<?> wildcardClass43 = value41.getClass();
        java.lang.String str44 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier10.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int53 = type51.getOpcode(48);
        java.lang.String str54 = type51.getClassName();
        java.lang.String str55 = type51.getClassName();
        java.lang.String str56 = type51.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type58, type61, type62, type66, type69 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type57, type75, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type57, true);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter47.newValue(type51);
        java.lang.String str83 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier10.newValue(type51);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        java.util.List list86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value87 = simpleVerifier10.naryOperation(abstractInsnNode85, list86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LB;" + "'", str13, "LB;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "B" + "'", str14, "B");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "char" + "'", str19, "char");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 138 + "'", int21 == 138);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str44, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 48 + "'", int53 == 48);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)B" + "'", str74, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "boolean" + "'", str83, "boolean");
        org.junit.Assert.assertNotNull(value84);
    }

    @Test
    public void test01578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01578");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter3.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.Type type7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter3.newValue(type7);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        boolean boolean14 = type9.equals((java.lang.Object) 177);
        int int15 = type9.getSize();
        java.lang.String str16 = type9.toString();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter3.newValue(type9);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.ternaryOperation(abstractInsnNode20, value21, value22, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter19.merge(value30, value36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter3.copyOperation(abstractInsnNode18, value37);
        int int39 = value37.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("Z", (java.lang.Object) analyzerException2, value37);
        java.lang.String str41 = analyzerException2.toString();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "F" + "'", str16, "F");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found ." + "'", str41, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
    }

    @Test
    public void test01579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01579");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) (byte) 100);
        java.lang.String str4 = type1.getClassName();
        boolean boolean6 = type1.equals((java.lang.Object) 177);
        int int7 = type1.getSize();
        java.lang.String str8 = type1.toString();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list9, false);
        int int12 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "float" + "'", str4, "float");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "F" + "'", str8, "F");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test01580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01580");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter4.copyOperation(abstractInsnNode5, value6);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode5, value26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException28);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException34);
        java.lang.Class<?> wildcardClass36 = analyzerException34.getClass();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        java.lang.String str38 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type39, list40, true);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        boolean boolean48 = type43.equals((java.lang.Object) 177);
        int int50 = type43.getOpcode(167);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier42.newValue(type43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) analyzerException29, value51);
        java.lang.Throwable[] throwableArray53 = analyzerException29.getSuppressed();
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str38, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 169 + "'", int50 == 169);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(throwableArray53);
    }

    @Test
    public void test01581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01581");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = basicInterpreter1.copyOperation(abstractInsnNode2, value3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str6 = type5.getDescriptor();
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter1.newValue(type5);
        org.mockito.asm.Type[] typeArray9 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type23, type26, type27, type31, type34 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type40, false);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str21, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type12, value46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        java.lang.String str52 = type49.getClassName();
        int int53 = type49.getSize();
        int int55 = type49.getOpcode(148);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type49, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        java.util.List list59 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value60 = simpleVerifier57.naryOperation(abstractInsnNode58, list59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(CBFCF)I" + "'", str10, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str21, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(CBFCF)B" + "'", str39, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "char" + "'", str52, "char");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 148 + "'", int55 == 148);
    }

    @Test
    public void test01582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01582");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        int int17 = type15.getOpcode(101);
        int int19 = type15.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier14.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException27.addSuppressed((java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException31);
        boolean boolean33 = type21.equals((java.lang.Object) analyzerException32);
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier14.newValue(type21);
        java.lang.String str35 = type21.getDescriptor();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException38);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException42);
        analyzerException39.addSuppressed((java.lang.Throwable) analyzerException43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.ternaryOperation(abstractInsnNode52, value53, value54, value55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.newValue(type61);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter63.copyOperation(abstractInsnNode64, value65);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.newValue(type67);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter51.merge(value62, value68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode48, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException73.addSuppressed((java.lang.Throwable) analyzerException75);
        analyzerException70.addSuppressed((java.lang.Throwable) analyzerException73);
        analyzerException43.addSuppressed((java.lang.Throwable) analyzerException70);
        java.lang.Throwable[] throwableArray79 = analyzerException70.getSuppressed();
        boolean boolean80 = type21.equals((java.lang.Object) analyzerException70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = type21.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 101 + "'", int17 == 101);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 191 + "'", int19 == 191);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "F" + "'", str35, "F");
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test01583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01583");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.toString();
        java.lang.String str24 = type0.toString();
        int int25 = type0.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type27, list28, true);
        java.lang.Class<?> wildcardClass31 = simpleVerifier30.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str35 = type34.getDescriptor();
        int int36 = type34.getSort();
        int int37 = type34.getSize();
        java.lang.String str38 = type34.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type34, true);
        boolean boolean41 = type0.equals((java.lang.Object) type34);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type43, true);
        java.lang.String str48 = type43.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type43, false);
        java.lang.String str51 = type43.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 193);
        java.lang.Class<?> wildcardClass55 = type52.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        java.lang.String str57 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type59, list60, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter64 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter64.copyOperation(abstractInsnNode65, value66);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter64.newValue(type68);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type73 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type72, type73, true);
        java.lang.String str78 = type73.getClassName();
        java.util.List list79 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type71, type73, list79, true);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str84 = type83.getDescriptor();
        java.lang.String str85 = type83.getInternalName();
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier81.newValue(type83);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter64.copyOperation(abstractInsnNode70, value86);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = simpleVerifier62.copyOperation(abstractInsnNode63, value87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B" + "'", str23, "B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lfloat;" + "'", str35, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "void" + "'", str48, "void");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "void" + "'", str51, "void");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/Type" + "'", str56, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org/mockito/asm/Type" + "'", str57, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "void" + "'", str78, "void");
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "LB;" + "'", str84, "LB;");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "B" + "'", str85, "B");
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test01584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01584");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        java.lang.Class<?> wildcardClass75 = type66.getClass();
        java.lang.String str76 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass75);
        java.lang.String str77 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        int int79 = type78.getSize();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str76, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "org/mockito/asm/Type" + "'", str77, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test01585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01585");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)J");
        java.lang.Throwable[] throwableArray2 = analyzerException1.getSuppressed();
        java.lang.Object obj6 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.ternaryOperation(abstractInsnNode14, value15, value16, value17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter13.merge(value24, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.ternaryOperation(abstractInsnNode33, value34, value35, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter32.merge(value43, value49);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier12.merge(value31, value43);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter7.copyOperation(abstractInsnNode11, value51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj6, value52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Object) 1.0f, value52);
        java.lang.Throwable[] throwableArray55 = analyzerException54.getSuppressed();
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException54);
        java.lang.String str57 = analyzerException1.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)J" + "'", str57, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)J");
    }

    @Test
    public void test01586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01586");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        int int5 = type0.getSize();
        int int6 = type0.getSort();
        int int7 = type0.getSort();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] { type13, type16, type17, type21, type24 };
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray28);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException33);
        java.lang.Class<?> wildcardClass35 = analyzerException33.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type38, true);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier40.newValue(type42);
        int int45 = type42.getOpcode(81);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type42, false);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        java.lang.String str51 = type48.getClassName();
        int int53 = type48.getOpcode(138);
        int int54 = type48.getSize();
        boolean boolean56 = type48.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier47.newValue(type48);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value59 = simpleVerifier47.newOperation(abstractInsnNode58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "char" + "'", str11, "char");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(CBFCF)B" + "'", str29, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)C" + "'", str30, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str37, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 85 + "'", int45 == 85);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "char" + "'", str51, "char");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 138 + "'", int53 == 138);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(value57);
    }

    @Test
    public void test01587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01587");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        java.lang.String str27 = type23.getClassName();
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type23, list28, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.ternaryOperation(abstractInsnNode39, value40, value41, value42);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.ternaryOperation(abstractInsnNode47, value48, value49, value50);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter52.copyOperation(abstractInsnNode53, value54);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.newValue(type56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.newValue(type62);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter46.merge(value57, value63);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter65 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter65.ternaryOperation(abstractInsnNode66, value67, value68, value69);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter71.copyOperation(abstractInsnNode72, value73);
        org.mockito.asm.Type type75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter71.newValue(type75);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter77.copyOperation(abstractInsnNode78, value79);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter77.newValue(type81);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter65.merge(value76, value82);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier45.merge(value64, value76);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter38.copyOperation(abstractInsnNode44, value76);
        int int86 = value85.getSize();
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter36.copyOperation(abstractInsnNode37, value85);
        org.mockito.asm.tree.analysis.Value value88 = null;
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter32.merge(value87, value88);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = simpleVerifier30.unaryOperation(abstractInsnNode31, value88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNull(value70);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value89);
    }

    @Test
    public void test01588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01588");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str4 = type3.getDescriptor();
        int int5 = type3.getSort();
        int int6 = type3.getDimensions();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type8, list11, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str16 = type15.getDescriptor();
        int int17 = type15.getSort();
        int int18 = type15.getDimensions();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str21 = type20.getDescriptor();
        int int22 = type20.getSort();
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type20, list23, true);
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier13.newValue(type20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        java.lang.Class<?> wildcardClass31 = analyzerException29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        java.lang.String str34 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier13.newValue(type36);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value38 = simpleVerifier0.unaryOperation(abstractInsnNode1, value37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lfloat;" + "'", str4, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lfloat;" + "'", str16, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lfloat;" + "'", str21, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str33, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str34, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str35, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(value37);
    }

    @Test
    public void test01589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01589");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("I");
        java.lang.Throwable[] throwableArray2 = analyzerException1.getSuppressed();
        java.lang.Class<?> wildcardClass3 = throwableArray2.getClass();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test01590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01590");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        java.lang.String str6 = type0.getDescriptor();
        org.mockito.asm.Type type7 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type12, type15, type16, type20, type23 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type29, false);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier33.newValue(type34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) (byte) 100);
        java.lang.String str39 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier33.newValue(type36);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type42, true);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier33.newValue(type41);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.copyOperation(abstractInsnNode10, value47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(CBFCF)B" + "'", str28, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "float" + "'", str39, "float");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(value47);
    }

    @Test
    public void test01591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01591");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter0.copyOperation(abstractInsnNode6, value7);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getReturnType("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException13.addSuppressed((java.lang.Throwable) analyzerException15);
        java.lang.Class<?> wildcardClass17 = analyzerException15.getClass();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type18, false);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str24 = type23.getDescriptor();
        int int25 = type23.getSort();
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type23, list26, false);
        int int29 = type23.getSize();
        int int30 = type23.getSort();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type31, false);
        int int35 = type23.getOpcode(154);
        org.mockito.asm.tree.analysis.Value value36 = simpleVerifier20.newValue(type23);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.ternaryOperation(abstractInsnNode39, value40, value41, value42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter38.merge(value49, value55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str58 = type57.getDescriptor();
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter38.newValue(type57);
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type57, list60, true);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list65 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type64, list65, true);
        int int69 = type63.getOpcode(169);
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier62.newValue(type63);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value71 = basicInterpreter0.binaryOperation(abstractInsnNode9, value36, value70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lfloat;" + "'", str24, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 158 + "'", int35 == 158);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "C" + "'", str58, "C");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 170 + "'", int69 == 170);
        org.junit.Assert.assertNotNull(value70);
    }

    @Test
    public void test01592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01592");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int77 = type75.getOpcode(48);
        java.lang.String str78 = type75.getClassName();
        java.lang.String str79 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier0.newValue(type75);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getObjectType("long");
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier0.newValue(type82);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value85 = simpleVerifier0.newOperation(abstractInsnNode84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 48 + "'", int77 == 48);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(value83);
    }

    @Test
    public void test01593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01593");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: F");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01594");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("LB;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter5.ternaryOperation(abstractInsnNode6, value7, value8, value9);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter11.copyOperation(abstractInsnNode12, value13);
        org.mockito.asm.Type type15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter11.newValue(type15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter5.merge(value16, value22);
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/Type", (java.lang.Object) basicInterpreter5, value24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.SimpleVerifier", (java.lang.Throwable) analyzerException25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException26);
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException27);
        java.lang.String str29 = analyzerException1.toString();
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: LB;" + "'", str29, "org.mockito.asm.tree.analysis.AnalyzerException: LB;");
    }

    @Test
    public void test01595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01595");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int1 = type0.getSize();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        int int4 = type2.getOpcode(101);
        java.lang.String str5 = type2.toString();
        int int6 = type2.getSort();
        java.util.List list7 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list7, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value11 = simpleVerifier9.newOperation(abstractInsnNode10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 101 + "'", int4 == 101);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "C" + "'", str5, "C");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    public void test01596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01596");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)B");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.Class<?> wildcardClass3 = type2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        int int5 = type4.getDimensions();
        java.lang.String str6 = type4.getDescriptor();
        java.lang.String str7 = type4.getClassName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        boolean boolean13 = type8.equals((java.lang.Object) 177);
        int int14 = type8.getSize();
        java.lang.String str15 = type8.toString();
        java.lang.String str16 = type8.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type8, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        java.util.List list20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value21 = simpleVerifier18.naryOperation(abstractInsnNode19, list20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type" + "'", str7, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "F" + "'", str15, "F");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "F" + "'", str16, "F");
    }

    @Test
    public void test01597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01597");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        java.lang.String str2 = analyzerException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found ." + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
    }

    @Test
    public void test01598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01598");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value9, value10, value11);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.ternaryOperation(abstractInsnNode40, value41, value42, value43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.newValue(type49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter51.copyOperation(abstractInsnNode52, value53);
        org.mockito.asm.Type type55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.newValue(type55);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter39.merge(value50, value56);
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier19.merge(value38, value50);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter14.copyOperation(abstractInsnNode18, value58);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.ternaryOperation(abstractInsnNode61, value62, value63, value64);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter66.copyOperation(abstractInsnNode67, value68);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter66.newValue(type70);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter72.copyOperation(abstractInsnNode73, value74);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter72.newValue(type76);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter60.merge(value71, value77);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter79 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode80 = null;
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.Value value82 = null;
        org.mockito.asm.tree.analysis.Value value83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter79.ternaryOperation(abstractInsnNode80, value81, value82, value83);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter85 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode86 = null;
        org.mockito.asm.tree.analysis.Value value87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter85.copyOperation(abstractInsnNode86, value87);
        org.mockito.asm.Type type89 = null;
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter85.newValue(type89);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter91 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode92 = null;
        org.mockito.asm.tree.analysis.Value value93 = null;
        org.mockito.asm.tree.analysis.Value value94 = basicInterpreter91.copyOperation(abstractInsnNode92, value93);
        org.mockito.asm.Type type95 = null;
        org.mockito.asm.tree.analysis.Value value96 = basicInterpreter91.newValue(type95);
        org.mockito.asm.tree.analysis.Value value97 = basicInterpreter79.merge(value90, value96);
        org.mockito.asm.tree.analysis.Value value98 = basicInterpreter7.ternaryOperation(abstractInsnNode13, value58, value78, value97);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value99 = basicInterpreter0.unaryOperation(abstractInsnNode6, value97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertNull(value88);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNull(value94);
        org.junit.Assert.assertNotNull(value96);
        org.junit.Assert.assertNotNull(value97);
        org.junit.Assert.assertNull(value98);
    }

    @Test
    public void test01599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01599");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str2 = type1.getClassName();
        java.util.List list3 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list3, false);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type7 = null;
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type7, list8, false);
        int int11 = type6.getSize();
        int int12 = type6.getSort();
        int int13 = type6.getSort();
        java.util.List list14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list14, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int20 = type18.getOpcode(48);
        java.lang.String str21 = type18.getClassName();
        java.lang.String str22 = type18.getClassName();
        java.lang.String str23 = type18.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) (byte) 100);
        java.lang.String str39 = type36.getClassName();
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type25, type28, type29, type33, type36 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type42, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type24, true);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str50 = type49.getClassName();
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier48.newValue(type49);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value52 = simpleVerifier16.unaryOperation(abstractInsnNode17, value51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "byte" + "'", str2, "byte");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 48 + "'", int20 == 48);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "float" + "'", str39, "float");
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(CBFCF)B" + "'", str41, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "long" + "'", str50, "long");
        org.junit.Assert.assertNotNull(value51);
    }

    @Test
    public void test01600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01600");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        int int35 = type26.getOpcode(100);
        org.mockito.asm.Type[] typeArray37 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray37);
        int int40 = type26.getOpcode(97);
        int int42 = type26.getOpcode(79);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int45 = type43.getOpcode(48);
        java.lang.String str46 = type43.getClassName();
        java.lang.String str47 = type43.getClassName();
        java.lang.String str48 = type43.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type67, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type49, true);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str75 = type74.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier73.newValue(type74);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str79 = type78.getDescriptor();
        int int80 = type78.getSort();
        int int81 = type78.getDimensions();
        int int83 = type78.getOpcode((int) (short) 10);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier73.newValue(type78);
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type78, list85, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        java.util.List list89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = simpleVerifier87.naryOperation(abstractInsnNode88, list89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 102 + "'", int35 == 102);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)F" + "'", str38, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 81 + "'", int42 == 81);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 48 + "'", int45 == 48);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "long" + "'", str75, "long");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Lfloat;" + "'", str79, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 14 + "'", int83 == 14);
        org.junit.Assert.assertNotNull(value84);
    }

    @Test
    public void test01601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01601");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type27, false);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier31.newValue(type32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier31.newValue(type34);
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type34, list39, true);
        int int43 = type34.getOpcode(100);
        org.mockito.asm.Type[] typeArray45 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray45);
        java.lang.Class<?> wildcardClass47 = type34.getClass();
        java.lang.String str48 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass47);
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier7.newValue(type49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getObjectType("float");
        int int53 = type52.getSize();
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.ternaryOperation(abstractInsnNode56, value57, value58, value59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter61.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter61.newValue(type65);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter67 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter67.copyOperation(abstractInsnNode68, value69);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter67.newValue(type71);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter55.merge(value66, value72);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str75 = type74.getDescriptor();
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter55.newValue(type74);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type74, list77, true);
        boolean boolean80 = type52.equals((java.lang.Object) simpleVerifier79);
        boolean boolean81 = type49.equals((java.lang.Object) boolean80);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 102 + "'", int43 == 102);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(CBFCF)F" + "'", str46, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str48, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNull(value70);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "C" + "'", str75, "C");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test01602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01602");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str21 = type20.getDescriptor();
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter1.newValue(type20);
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type20, list23, true);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type27, list28, true);
        int int32 = type26.getOpcode(169);
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier25.newValue(type26);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type36 = null;
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type36, list37, false);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type45, type48, type49, type53, type56 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray60);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException65);
        java.lang.Class<?> wildcardClass67 = analyzerException65.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.lang.String str69 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type70, true);
        boolean boolean74 = type70.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier39.newValue(type70);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.FLOAT_TYPE;
        int int77 = type76.getSize();
        java.lang.String str78 = type76.getClassName();
        int int79 = type76.getSize();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier39.newValue(type76);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value81 = simpleVerifier25.copyOperation(abstractInsnNode34, value80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "C" + "'", str21, "C");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 170 + "'", int32 == 170);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "char" + "'", str43, "char");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(CBFCF)B" + "'", str61, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)C" + "'", str62, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str69, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(value80);
    }

    @Test
    public void test01603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01603");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        boolean boolean44 = type39.equals((java.lang.Object) 177);
        int int45 = type39.getSize();
        java.lang.String str46 = type39.toString();
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter33.newValue(type39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.ternaryOperation(abstractInsnNode50, value51, value52, value53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter61.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter61.newValue(type65);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter49.merge(value60, value66);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter33.copyOperation(abstractInsnNode48, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.ternaryOperation(abstractInsnNode70, value71, value72, value73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter81 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        org.mockito.asm.tree.analysis.Value value83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter81.copyOperation(abstractInsnNode82, value83);
        org.mockito.asm.Type type85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter81.newValue(type85);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter69.merge(value80, value86);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str89 = type88.getDescriptor();
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter69.newValue(type88);
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier32.merge(value67, value90);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier32.newOperation(abstractInsnNode92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "F" + "'", str46, "F");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "C" + "'", str89, "C");
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
    }

    @Test
    public void test01604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01604");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        java.lang.Object obj10 = null;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type12, type15, type16, type20, type23 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type29, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.ternaryOperation(abstractInsnNode36, value37, value38, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter35.merge(value46, value52);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter54.ternaryOperation(abstractInsnNode55, value56, value57, value58);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter60.copyOperation(abstractInsnNode61, value62);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.newValue(type64);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter66.copyOperation(abstractInsnNode67, value68);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter66.newValue(type70);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter54.merge(value65, value71);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier34.merge(value53, value65);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter74.ternaryOperation(abstractInsnNode75, value76, value77, value78);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter80 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode81 = null;
        org.mockito.asm.tree.analysis.Value value82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter80.copyOperation(abstractInsnNode81, value82);
        org.mockito.asm.Type type84 = null;
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter80.newValue(type84);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter86 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode87 = null;
        org.mockito.asm.tree.analysis.Value value88 = null;
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter86.copyOperation(abstractInsnNode87, value88);
        org.mockito.asm.Type type90 = null;
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter86.newValue(type90);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter74.merge(value85, value91);
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier33.merge(value73, value85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException94 = new org.mockito.asm.tree.analysis.AnalyzerException("double", obj10, value73);
        org.mockito.asm.tree.analysis.Value value95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value96 = simpleVerifier7.binaryOperation(abstractInsnNode8, value73, value95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(CBFCF)B" + "'", str28, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNull(value79);
        org.junit.Assert.assertNull(value83);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNull(value89);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(value93);
    }

    @Test
    public void test01605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01605");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("rg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01606");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        int int35 = type0.getSort();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str38 = type37.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type37, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        java.util.List list42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value43 = simpleVerifier40.naryOperation(abstractInsnNode41, list42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "byte" + "'", str38, "byte");
    }

    @Test
    public void test01607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01607");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        int int35 = type0.getSort();
        int int37 = type0.getOpcode(114);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type39, type42, type43, type47, type50 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type56, false);
        java.lang.String str61 = type38.toString();
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type38, list62, false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type65 = type38.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 116 + "'", int37 == 116);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)B" + "'", str55, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "B" + "'", str61, "B");
    }

    @Test
    public void test01608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01608");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter5.ternaryOperation(abstractInsnNode6, value7, value8, value9);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.ternaryOperation(abstractInsnNode19, value20, value21, value22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter24.copyOperation(abstractInsnNode25, value26);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter18.merge(value29, value35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.ternaryOperation(abstractInsnNode38, value39, value40, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter37.merge(value48, value54);
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier17.merge(value36, value48);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter12.copyOperation(abstractInsnNode16, value56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.ternaryOperation(abstractInsnNode59, value60, value61, value62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter64 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter64.copyOperation(abstractInsnNode65, value66);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter64.newValue(type68);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter70 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter70.copyOperation(abstractInsnNode71, value72);
        org.mockito.asm.Type type74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter70.newValue(type74);
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter58.merge(value69, value75);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter77.ternaryOperation(abstractInsnNode78, value79, value80, value81);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter83 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter83.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.Type type87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter83.newValue(type87);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter89 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode90 = null;
        org.mockito.asm.tree.analysis.Value value91 = null;
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter89.copyOperation(abstractInsnNode90, value91);
        org.mockito.asm.Type type93 = null;
        org.mockito.asm.tree.analysis.Value value94 = basicInterpreter89.newValue(type93);
        org.mockito.asm.tree.analysis.Value value95 = basicInterpreter77.merge(value88, value94);
        org.mockito.asm.tree.analysis.Value value96 = basicInterpreter5.ternaryOperation(abstractInsnNode11, value56, value76, value95);
        org.mockito.asm.tree.analysis.Value value97 = basicInterpreter0.copyOperation(abstractInsnNode4, value96);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value99 = basicInterpreter0.newOperation(abstractInsnNode98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNull(value82);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNull(value92);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertNotNull(value95);
        org.junit.Assert.assertNull(value96);
        org.junit.Assert.assertNull(value97);
    }

    @Test
    public void test01609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01609");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = basicInterpreter1.copyOperation(abstractInsnNode2, value3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str6 = type5.getDescriptor();
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter1.newValue(type5);
        org.mockito.asm.tree.analysis.Value value8 = simpleVerifier0.newValue(type5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter10.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.ternaryOperation(abstractInsnNode22, value23, value24, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter27.copyOperation(abstractInsnNode28, value29);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.newValue(type31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter21.merge(value32, value38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.ternaryOperation(abstractInsnNode41, value42, value43, value44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.newValue(type50);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter52.copyOperation(abstractInsnNode53, value54);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.newValue(type56);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter40.merge(value51, value57);
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier20.merge(value39, value51);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter10.copyOperation(abstractInsnNode19, value51);
        int int61 = value60.getSize();
        int int62 = value60.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value63 = simpleVerifier0.copyOperation(abstractInsnNode9, value60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test01610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01610");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        java.lang.String str2 = analyzerException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test01611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01611");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("LB");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01612");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org/mockito/asm/Type");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01613");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter3.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value9, value10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter7.merge(value18, value24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode4, value25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException27);
        java.lang.Throwable[] throwableArray29 = analyzerException27.getSuppressed();
        java.lang.String str30 = analyzerException27.toString();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)C" + "'", str30, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)C");
    }

    @Test
    public void test01614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01614");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)B");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.Class<?> wildcardClass3 = type2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        int int5 = type4.getDimensions();
        java.lang.String str6 = type4.getDescriptor();
        java.lang.String str7 = type4.getClassName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        boolean boolean13 = type8.equals((java.lang.Object) 177);
        int int14 = type8.getSize();
        java.lang.String str15 = type8.toString();
        java.lang.String str16 = type8.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type8, false);
        java.lang.String str19 = type4.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.Type" + "'", str7, "org.mockito.asm.Type");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "F" + "'", str15, "F");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "F" + "'", str16, "F");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "org.mockito.asm.Type" + "'", str19, "org.mockito.asm.Type");
    }

    @Test
    public void test01615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01615");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type32, true);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier34.newValue(type36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type39, list40, true);
        java.lang.Class<?> wildcardClass43 = simpleVerifier42.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str47 = type46.getDescriptor();
        int int48 = type46.getSort();
        int int49 = type46.getSize();
        java.lang.String str50 = type46.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type46, true);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        int int55 = type53.getOpcode(101);
        int int57 = type53.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier52.newValue(type53);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException65.addSuppressed((java.lang.Throwable) analyzerException67);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException69);
        boolean boolean71 = type59.equals((java.lang.Object) analyzerException70);
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier52.newValue(type59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter73 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter73.ternaryOperation(abstractInsnNode74, value75, value76, value77);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter79 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode80 = null;
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter79.copyOperation(abstractInsnNode80, value81);
        org.mockito.asm.Type type83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter79.newValue(type83);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter85 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode86 = null;
        org.mockito.asm.tree.analysis.Value value87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter85.copyOperation(abstractInsnNode86, value87);
        org.mockito.asm.Type type89 = null;
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter85.newValue(type89);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter73.merge(value84, value90);
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier34.merge(value72, value90);
        boolean boolean93 = type1.equals((java.lang.Object) value90);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Lfloat;" + "'", str47, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 101 + "'", int55 == 101);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 191 + "'", int57 == 191);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNull(value82);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNull(value88);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test01616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01616");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 24);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type30, list31, true);
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type22, list34, false);
        boolean boolean37 = type0.equals((java.lang.Object) type3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = type0.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test01617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01617");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        java.lang.Class<?> wildcardClass75 = type66.getClass();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        java.lang.String str77 = type76.toString();
        int int78 = type76.getSize();
        int int80 = type76.getOpcode(51);
        java.lang.String str81 = type76.toString();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str77, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 55 + "'", int80 == 55);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str81, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test01618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01618");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Throwable[] throwableArray49 = analyzerException48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = analyzerException48.getSuppressed();
        java.lang.Throwable[] throwableArray51 = analyzerException48.getSuppressed();
        java.lang.Throwable[] throwableArray52 = analyzerException48.getSuppressed();
        java.lang.String str53 = analyzerException48.toString();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found ." + "'", str53, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
    }

    @Test
    public void test01619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01619");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lboolean;");
        java.lang.String str2 = type1.getDescriptor();
        java.lang.String str3 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lboolean;" + "'", str2, "Lboolean;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lboolean;" + "'", str3, "Lboolean;");
    }

    @Test
    public void test01620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01620");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 24);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type30, list31, true);
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type22, list34, false);
        boolean boolean37 = type0.equals((java.lang.Object) type3);
        int int38 = type3.getSize();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = type3.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test01621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01621");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        java.util.List list5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.naryOperation(abstractInsnNode4, list5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
    }

    @Test
    public void test01622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01622");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        int int7 = type0.getOpcode(167);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type10, true);
        java.lang.String str15 = type10.getClassName();
        java.util.List list16 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type10, list16, true);
        java.lang.Object obj20 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.ternaryOperation(abstractInsnNode47, value48, value49, value50);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter52.copyOperation(abstractInsnNode53, value54);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.newValue(type56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.newValue(type62);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter46.merge(value57, value63);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier26.merge(value45, value57);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter21.copyOperation(abstractInsnNode25, value65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj20, value66);
        java.lang.Class<?> wildcardClass68 = value66.getClass();
        java.lang.String str69 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier18.newValue(type70);
        boolean boolean72 = type0.equals((java.lang.Object) type70);
        java.lang.String str73 = type70.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 169 + "'", int7 == 169);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "void" + "'", str15, "void");
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str69, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str73, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test01623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01623");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value9, value10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter7.merge(value18, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier6.merge(value25, value37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.ternaryOperation(abstractInsnNode53, value54, value55, value56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.newValue(type62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter64 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter64.copyOperation(abstractInsnNode65, value66);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter64.newValue(type68);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter52.merge(value63, value69);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter71.ternaryOperation(abstractInsnNode72, value73, value74, value75);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter77.copyOperation(abstractInsnNode78, value79);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter77.newValue(type81);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter83 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter83.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.Type type87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter83.newValue(type87);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter71.merge(value82, value88);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier51.merge(value70, value82);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter46.copyOperation(abstractInsnNode50, value90);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter0.merge(value25, value90);
        java.lang.Class<?> wildcardClass93 = value92.getClass();
        java.lang.String str94 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass93);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str94, "org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test01624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01624");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type32, list33, true);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type24, list36, false);
        boolean boolean39 = type2.equals((java.lang.Object) type5);
        int int40 = type5.getSize();
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type5, list41, true);
        int int45 = type5.getOpcode(193);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type46 = type5.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 193 + "'", int45 == 193);
    }

    @Test
    public void test01625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01625");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getDimensions();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list9, true);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str14 = type13.getDescriptor();
        int int15 = type13.getSort();
        int int16 = type13.getDimensions();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str19 = type18.getDescriptor();
        int int20 = type18.getSort();
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type18, list21, true);
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier11.newValue(type18);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type26, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier30.newValue(type31);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier30.newValue(type35);
        int int40 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier11.newValue(type35);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        int int45 = type43.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier42.newValue(type43);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str50 = type49.getDescriptor();
        int int51 = type49.getSort();
        java.util.List list52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type49, list52, false);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) 151);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.Type[] typeArray77 = new org.mockito.asm.Type[] { type62, type65, type66, type70, type73 };
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray77);
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException82);
        java.lang.Class<?> wildcardClass84 = analyzerException82.getClass();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        java.lang.String str86 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass84);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type57, type87, true);
        boolean boolean90 = type56.equals((java.lang.Object) type87);
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier54.newValue(type87);
        org.mockito.asm.Type type92 = null;
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier54.newValue(type92);
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier11.merge(value46, value93);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value96 = simpleVerifier11.newOperation(abstractInsnNode95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lfloat;" + "'", str14, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lfloat;" + "'", str19, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 101 + "'", int45 == 101);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lfloat;" + "'", str50, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "char" + "'", str60, "char");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)B" + "'", str78, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(CBFCF)C" + "'", str79, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str86, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test01626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01626");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, list10, true);
        org.mockito.asm.Type type13 = type9.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.Value value22 = simpleVerifier14.newValue(type19);
        boolean boolean23 = type13.equals((java.lang.Object) type19);
        java.lang.String str24 = type13.getClassName();
        int int26 = type13.getOpcode(12);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "I" + "'", str20, "I");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str24, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
    }

    @Test
    public void test01627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01627");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("C");
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 24);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type35, list36, true);
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type27, list39, false);
        boolean boolean42 = type5.equals((java.lang.Object) type8);
        int int43 = type8.getSize();
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type8, list44, true);
        int int48 = type8.getOpcode(193);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str55 = type54.getDescriptor();
        int int56 = type54.getSort();
        int int57 = type54.getDimensions();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str60 = type59.getDescriptor();
        int int61 = type59.getSort();
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type59, list62, true);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str67 = type66.getDescriptor();
        int int68 = type66.getSort();
        int int69 = type66.getDimensions();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str72 = type71.getDescriptor();
        int int73 = type71.getSort();
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type66, type71, list74, true);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier64.newValue(type71);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value78 = simpleVerifier50.binaryOperation(abstractInsnNode51, value52, value77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "char" + "'", str2, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 193 + "'", int48 == 193);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Lfloat;" + "'", str55, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 10 + "'", int56 == 10);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Lfloat;" + "'", str60, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Lfloat;" + "'", str67, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Lfloat;" + "'", str72, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertNotNull(value77);
    }

    @Test
    public void test01628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01628");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str50, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
    }

    @Test
    public void test01629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01629");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        int int7 = type0.getSize();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType("(CBFCF)Lbyte;");
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type9, list10, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        boolean boolean19 = type14.equals((java.lang.Object) 177);
        java.lang.String str20 = type14.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException23);
        java.lang.Class<?> wildcardClass25 = analyzerException23.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        int int28 = type26.getOpcode(114);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) 151);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type[] typeArray45 = new org.mockito.asm.Type[] { type30, type33, type34, type38, type41 };
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray45);
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray45);
        boolean boolean48 = type14.equals((java.lang.Object) typeArray45);
        int int49 = type14.getSort();
        int int51 = type14.getOpcode(114);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type53, true);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier57.newValue(type58);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type64, true);
        java.lang.String str69 = type64.getClassName();
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type62, type64, list70, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type64, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type64, true);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.INT_TYPE;
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type77, list78, false);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str83 = type82.getInternalName();
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier80.newValue(type82);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value85 = simpleVerifier12.copyOperation(abstractInsnNode13, value84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "F" + "'", str20, "F");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 118 + "'", int28 == 118);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(CBFCF)B" + "'", str46, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str47, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 6 + "'", int49 == 6);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 116 + "'", int51 == 116);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "void" + "'", str69, "void");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str83, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(value84);
    }

    @Test
    public void test01630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01630");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        java.lang.Class<?> wildcardClass7 = analyzerException5.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, false);
        java.lang.String str11 = type8.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str11, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test01631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01631");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str8 = type7.getDescriptor();
        int int9 = type7.getSort();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list10, false);
        java.lang.String str13 = type7.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, false);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int18 = type16.getOpcode(48);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type37, false);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier41.newValue(type42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier41.newValue(type44);
        int int49 = type44.getSize();
        java.util.List list50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type44, list50, true);
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier15.newValue(type16);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        java.util.List list55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value56 = simpleVerifier15.naryOperation(abstractInsnNode54, list55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lfloat;" + "'", str8, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48 + "'", int18 == 48);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(value53);
    }

    @Test
    public void test01632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01632");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.ternaryOperation(abstractInsnNode26, value27, value28, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter25.merge(value36, value42);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier5.merge(value24, value36);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type64, false);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier68.newValue(type69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier68.newValue(type71);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type71, list76, true);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier5.newValue(type71);
        java.lang.Class<?> wildcardClass80 = type71.getClass();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass80);
        java.lang.String str82 = type81.toString();
        int int83 = type81.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type81, true);
        java.lang.String str86 = type81.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str82, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str86, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test01633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01633");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int7 = type0.getOpcode(129);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, true);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier13.newValue(type14);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type20, true);
        java.lang.String str25 = type20.getClassName();
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type20, list26, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type20, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean32 = type20.equals((java.lang.Object) type31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) (byte) 100);
        java.lang.String str41 = type38.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type34, type37, type38, type42, type45 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type51, false);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier55.newValue(type56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier55.newValue(type58);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int64 = type63.getSize();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        int int67 = type65.getOpcode(101);
        java.lang.String str68 = type65.toString();
        int int69 = type65.getSort();
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type65, list70, false);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier55.newValue(type63);
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type63, list74, false);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type20, list77, false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type80 = type0.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 129 + "'", int7 == 129);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "void" + "'", str25, "void");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(CBFCF)B" + "'", str50, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 101 + "'", int67 == 101);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "C" + "'", str68, "C");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(value73);
    }

    @Test
    public void test01634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01634");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int4 = type0.getSize();
        int int6 = type0.getOpcode(148);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        boolean boolean37 = type32.equals((java.lang.Object) 177);
        int int38 = type32.getSize();
        java.lang.String str39 = type32.toString();
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.newValue(type32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter26.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        int int46 = type44.getOpcode(101);
        java.lang.String str47 = type44.toString();
        int int48 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter26.newValue(type44);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type44, false);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        boolean boolean57 = type52.equals((java.lang.Object) 177);
        java.lang.String str58 = type52.toString();
        int int59 = type52.getSize();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType("(CBFCF)Lbyte;");
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type61, list62, true);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier51.newValue(type61);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        java.util.List list67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value68 = simpleVerifier51.naryOperation(abstractInsnNode66, list67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 148 + "'", int6 == 148);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)C" + "'", str25, "(CBFCF)C");
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "F" + "'", str39, "F");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 101 + "'", int46 == 101);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "C" + "'", str47, "C");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "F" + "'", str58, "F");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(value65);
    }

    @Test
    public void test01635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01635");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected F, but found F");
        java.lang.String str2 = analyzerException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected F, but found F" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected F, but found F");
    }

    @Test
    public void test01636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01636");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.ternaryOperation(abstractInsnNode26, value27, value28, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter25.merge(value36, value42);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier5.merge(value24, value36);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type64, false);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier68.newValue(type69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier68.newValue(type71);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type71, list76, true);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier5.newValue(type71);
        java.lang.Class<?> wildcardClass80 = type71.getClass();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass80);
        java.lang.String str82 = type81.toString();
        int int83 = type81.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type81, true);
        java.lang.String str86 = type0.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str82, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "J" + "'", str86, "J");
    }

    @Test
    public void test01637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01637");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException23);
        java.lang.Class<?> wildcardClass25 = analyzerException23.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = type26.getElementType();
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier20.newValue(type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        boolean boolean34 = type29.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException37);
        java.lang.Class<?> wildcardClass39 = analyzerException37.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type41 = type40.getElementType();
        java.lang.String str42 = type41.getClassName();
        java.lang.String str43 = type41.getDescriptor();
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type41, list44, false);
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type29, list47, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type52, list53, true);
        java.lang.Class<?> wildcardClass56 = simpleVerifier55.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str60 = type59.getDescriptor();
        int int61 = type59.getSort();
        int int62 = type59.getSize();
        java.lang.String str63 = type59.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type57, type59, true);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        int int68 = type66.getOpcode(101);
        int int70 = type66.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier65.newValue(type66);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value72 = simpleVerifier49.copyOperation(abstractInsnNode50, value71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str42, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str43, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Lfloat;" + "'", str60, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 101 + "'", int68 == 101);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 191 + "'", int70 == 191);
        org.junit.Assert.assertNotNull(value71);
    }

    @Test
    public void test01638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01638");
        java.lang.Object obj3 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter4.copyOperation(abstractInsnNode5, value6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter4.copyOperation(abstractInsnNode8, value48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj3, value49);
        java.lang.Throwable[] throwableArray51 = analyzerException50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = analyzerException50.getSuppressed();
        java.lang.Throwable[] throwableArray53 = analyzerException50.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B", (java.lang.Throwable) analyzerException54);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Throwable) analyzerException59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Throwable) analyzerException60);
        analyzerException55.addSuppressed((java.lang.Throwable) analyzerException60);
        java.lang.String str63 = analyzerException55.toString();
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B" + "'", str63, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
    }

    @Test
    public void test01639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01639");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getDimensions();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list9, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        boolean boolean24 = type19.equals((java.lang.Object) 177);
        int int25 = type19.getSize();
        java.lang.String str26 = type19.toString();
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter13.newValue(type19);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter13.copyOperation(abstractInsnNode28, value29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        int int33 = type31.getOpcode(101);
        java.lang.String str34 = type31.toString();
        int int35 = type31.getSize();
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter13.newValue(type31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        boolean boolean49 = type44.equals((java.lang.Object) 177);
        int int50 = type44.getSize();
        java.lang.String str51 = type44.toString();
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter38.newValue(type44);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter13.copyOperation(abstractInsnNode37, value52);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter56.copyOperation(abstractInsnNode57, value58);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter62.copyOperation(abstractInsnNode63, value64);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter66.ternaryOperation(abstractInsnNode67, value68, value69, value70);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter72.copyOperation(abstractInsnNode73, value74);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter72.newValue(type76);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter78 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter78.copyOperation(abstractInsnNode79, value80);
        org.mockito.asm.Type type82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter78.newValue(type82);
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter66.merge(value77, value83);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode63, value84);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter56.copyOperation(abstractInsnNode60, value84);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("Lg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .", value86);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = simpleVerifier11.binaryOperation(abstractInsnNode12, value52, value86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "F" + "'", str26, "F");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 101 + "'", int33 == 101);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "C" + "'", str34, "C");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "F" + "'", str51, "F");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value86);
    }

    @Test
    public void test01640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01640");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(CBFCF)S");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01641");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray22);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray22);
        java.lang.Class<?> wildcardClass26 = typeArray22.getClass();
        java.lang.String str27 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass26);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str25, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str27, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test01642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01642");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        int int23 = type18.getSort();
        java.lang.String str24 = type18.getDescriptor();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException47);
        java.lang.Class<?> wildcardClass49 = analyzerException47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str51 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type52, list53, true);
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type44, list56, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type44, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value62 = simpleVerifier60.newOperation(abstractInsnNode61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str51, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type52);
    }

    @Test
    public void test01643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01643");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.Type type6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter2.newValue(type6);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter9.ternaryOperation(abstractInsnNode10, value11, value12, value13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.newValue(type25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter9.merge(value20, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.ternaryOperation(abstractInsnNode29, value30, value31, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter28.merge(value39, value45);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier8.merge(value27, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter48.copyOperation(abstractInsnNode49, value50);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter54.ternaryOperation(abstractInsnNode55, value56, value57, value58);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter60.copyOperation(abstractInsnNode61, value62);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.newValue(type64);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter66.copyOperation(abstractInsnNode67, value68);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter66.newValue(type70);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter54.merge(value65, value71);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter73 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter73.ternaryOperation(abstractInsnNode74, value75, value76, value77);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter79 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode80 = null;
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter79.copyOperation(abstractInsnNode80, value81);
        org.mockito.asm.Type type83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter79.newValue(type83);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter85 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode86 = null;
        org.mockito.asm.tree.analysis.Value value87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter85.copyOperation(abstractInsnNode86, value87);
        org.mockito.asm.Type type89 = null;
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter85.newValue(type89);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter73.merge(value84, value90);
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier53.merge(value72, value84);
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter48.copyOperation(abstractInsnNode52, value92);
        org.mockito.asm.tree.analysis.Value value94 = basicInterpreter2.merge(value27, value92);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = basicInterpreter0.unaryOperation(abstractInsnNode1, value94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNull(value82);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNull(value88);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test01644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01644");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type14, true);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value22 = simpleVerifier18.newValue(type19);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type25, true);
        java.lang.String str30 = type25.getClassName();
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type25, list31, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type25, true);
        java.lang.String str36 = type25.toString();
        int int37 = type25.getSort();
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type25, list38, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value42 = simpleVerifier40.newOperation(abstractInsnNode41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "void" + "'", str30, "void");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "V" + "'", str36, "V");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test01645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01645");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("boolean");
        java.lang.String str2 = type1.getDescriptor();
        java.lang.String str3 = type1.getDescriptor();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type22, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.ternaryOperation(abstractInsnNode29, value30, value31, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter28.merge(value39, value45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.ternaryOperation(abstractInsnNode48, value49, value50, value51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter53.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.newValue(type57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter59.copyOperation(abstractInsnNode60, value61);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter59.newValue(type63);
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter47.merge(value58, value64);
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier27.merge(value46, value58);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter67 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter67.ternaryOperation(abstractInsnNode68, value69, value70, value71);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter73 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter73.copyOperation(abstractInsnNode74, value75);
        org.mockito.asm.Type type77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter73.newValue(type77);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter79 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode80 = null;
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter79.copyOperation(abstractInsnNode80, value81);
        org.mockito.asm.Type type83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter79.newValue(type83);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter67.merge(value78, value84);
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier26.merge(value66, value78);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier26.newValue(type87);
        java.util.List list89 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier91 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type87, list89, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier91.newOperation(abstractInsnNode92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lboolean;" + "'", str2, "Lboolean;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lboolean;" + "'", str3, "Lboolean;");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNull(value82);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value88);
    }

    @Test
    public void test01646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01646");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value4 = simpleVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.ternaryOperation(abstractInsnNode26, value27, value28, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter25.merge(value36, value42);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier5.merge(value24, value36);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type64, false);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier68.newValue(type69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier68.newValue(type71);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type71, list76, true);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier5.newValue(type71);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier5.newValue(type80);
        boolean boolean83 = type80.equals((java.lang.Object) "I");
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier0.newValue(type80);
        int int85 = type80.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test01647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01647");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        java.lang.Class<?> wildcardClass75 = type66.getClass();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        java.lang.String str77 = type76.toString();
        int int78 = type76.getSize();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type76, type80, false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type83 = type80.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str77, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(type80);
    }

    @Test
    public void test01648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01648");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        int int7 = type2.getOpcode(138);
        int int8 = type2.getSize();
        boolean boolean10 = type2.equals((java.lang.Object) 154);
        java.lang.String str11 = type2.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type14 = type1.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 138 + "'", int7 == 138);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "C" + "'", str11, "C");
    }

    @Test
    public void test01649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01649");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        java.lang.Class<?> wildcardClass23 = type6.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int28 = type26.getOpcode(8);
        int int30 = type26.getOpcode(163);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type26, list31, true);
        int int34 = type24.getDimensions();
        java.lang.Object obj36 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter62.ternaryOperation(abstractInsnNode63, value64, value65, value66);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter68.copyOperation(abstractInsnNode69, value70);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter68.newValue(type72);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter74.copyOperation(abstractInsnNode75, value76);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter74.newValue(type78);
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter62.merge(value73, value79);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier42.merge(value61, value73);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter37.copyOperation(abstractInsnNode41, value81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj36, value82);
        java.lang.Class<?> wildcardClass84 = value82.getClass();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType("V");
        java.util.List list88 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type85, type87, list88, true);
        java.lang.String str91 = type85.toString();
        boolean boolean92 = type24.equals((java.lang.Object) type85);
        java.lang.String str93 = type24.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 12 + "'", int28 == 12);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 167 + "'", int30 == 167);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str91, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str93, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test01650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01650");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int6 = type4.getOpcode(48);
        java.lang.String str7 = type4.getClassName();
        java.lang.String str8 = type4.getClassName();
        java.lang.String str9 = type4.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type11, type14, type15, type19, type22 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type28, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type10, true);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter0.newValue(type4);
        int int36 = type4.getSort();
        int int38 = type4.getOpcode(169);
        boolean boolean40 = type4.equals((java.lang.Object) 180);
        int int42 = type4.getOpcode(49);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type43, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value47 = simpleVerifier45.newOperation(abstractInsnNode46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)B" + "'", str27, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 169 + "'", int38 == 169);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 49 + "'", int42 == 49);
    }

    @Test
    public void test01651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01651");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        java.lang.String str4 = type1.getClassName();
        int int5 = type1.getSize();
        int int7 = type1.getOpcode(148);
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list8, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        java.util.List list12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value13 = simpleVerifier10.naryOperation(abstractInsnNode11, list12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "char" + "'", str4, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 148 + "'", int7 == 148);
    }

    @Test
    public void test01652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01652");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier25.newValue(type28);
        int int33 = type28.getSize();
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type28, list34, true);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int38 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier36.newValue(type37);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier36.newValue(type41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str45 = type44.getDescriptor();
        int int46 = type44.getSort();
        int int47 = type44.getDimensions();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str50 = type49.getDescriptor();
        int int51 = type49.getSort();
        java.util.List list52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type49, list52, true);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str57 = type56.getDescriptor();
        int int58 = type56.getSort();
        int int59 = type56.getDimensions();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str62 = type61.getDescriptor();
        int int63 = type61.getSort();
        java.util.List list64 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type61, list64, true);
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier54.newValue(type61);
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier36.newValue(type61);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        java.util.List list70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value71 = simpleVerifier36.naryOperation(abstractInsnNode69, list70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lfloat;" + "'", str45, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lfloat;" + "'", str50, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Lfloat;" + "'", str57, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Lfloat;" + "'", str62, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
    }

    @Test
    public void test01653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01653");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.toString();
        java.lang.String str24 = type0.toString();
        int int25 = type0.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int33 = type31.getOpcode(48);
        java.lang.String str34 = type31.getClassName();
        java.lang.String str35 = type31.getClassName();
        java.lang.String str36 = type31.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type38, type41, type42, type46, type49 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type55, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type37, true);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        int int64 = type62.getOpcode(101);
        int int66 = type62.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = simpleVerifier30.merge(value67, value68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B" + "'", str23, "B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 48 + "'", int33 == 48);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)B" + "'", str54, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 101 + "'", int64 == 101);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 191 + "'", int66 == 191);
        org.junit.Assert.assertNotNull(value67);
    }

    @Test
    public void test01654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01654");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.getClassName();
        int int24 = type0.getSort();
        int int26 = type0.getOpcode(148);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        java.lang.String str30 = type27.getClassName();
        int int31 = type27.getSize();
        int int33 = type27.getOpcode(148);
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type27, list34, true);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int39 = type37.getOpcode(48);
        int int41 = type37.getOpcode(0);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type37, false);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list46 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type45, list46, true);
        java.lang.Class<?> wildcardClass49 = simpleVerifier48.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str51 = type50.getInternalName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type53, type56, type57, type61, type64 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray68);
        java.lang.String str70 = type52.toString();
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type52, list71, true);
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type52, list74, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        java.util.List list78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = simpleVerifier76.naryOperation(abstractInsnNode77, list78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "byte" + "'", str23, "byte");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 148 + "'", int26 == 148);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "char" + "'", str30, "char");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 148 + "'", int33 == 148);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 48 + "'", int39 == 48);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str51, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)B" + "'", str69, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "B" + "'", str70, "B");
    }

    @Test
    public void test01655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01655");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str26 = type25.getDescriptor();
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter6.newValue(type25);
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type25, list28, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type32, list33, true);
        int int37 = type31.getOpcode(169);
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier30.newValue(type31);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.unaryOperation(abstractInsnNode4, value38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "C" + "'", str26, "C");
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 170 + "'", int37 == 170);
        org.junit.Assert.assertNotNull(value38);
    }

    @Test
    public void test01656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01656");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str8 = type7.getDescriptor();
        int int9 = type7.getSort();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list10, false);
        java.lang.String str13 = type7.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, false);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int19 = type17.getOpcode(167);
        org.mockito.asm.Type type20 = type17.getElementType();
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier15.newValue(type17);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.ternaryOperation(abstractInsnNode29, value30, value31, value32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter28.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.ternaryOperation(abstractInsnNode40, value41, value42, value43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.newValue(type49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter51.copyOperation(abstractInsnNode52, value53);
        org.mockito.asm.Type type55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.newValue(type55);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter39.merge(value50, value56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.ternaryOperation(abstractInsnNode59, value60, value61, value62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter64 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter64.copyOperation(abstractInsnNode65, value66);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter64.newValue(type68);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter70 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter70.copyOperation(abstractInsnNode71, value72);
        org.mockito.asm.Type type74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter70.newValue(type74);
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter58.merge(value69, value75);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier38.merge(value57, value69);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter28.copyOperation(abstractInsnNode37, value69);
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter23.copyOperation(abstractInsnNode27, value69);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value80 = simpleVerifier15.copyOperation(abstractInsnNode22, value79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lfloat;" + "'", str8, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 171 + "'", int19 == 171);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
    }

    @Test
    public void test01657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01657");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean24 = type12.equals((java.lang.Object) type23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getReturnType("Lboolean;");
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type26, list27, true);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int31 = type30.getSize();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        int int34 = type32.getOpcode(101);
        java.lang.String str35 = type32.toString();
        int int36 = type32.getSort();
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type32, list37, false);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str43 = type42.getDescriptor();
        int int44 = type42.getSort();
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type42, list45, false);
        int int48 = type42.getSize();
        int int49 = type42.getSort();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type50, false);
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier39.newValue(type50);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("void");
        java.lang.String str56 = type55.getDescriptor();
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier39.newValue(type55);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type55, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        java.util.List list61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value62 = simpleVerifier59.naryOperation(abstractInsnNode60, list61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 101 + "'", int34 == 101);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "C" + "'", str35, "C");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lfloat;" + "'", str43, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lvoid;" + "'", str56, "Lvoid;");
        org.junit.Assert.assertNotNull(value57);
    }

    @Test
    public void test01658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01658");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        java.lang.String str3 = type0.toString();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType("V");
        int int6 = type5.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type5, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        java.lang.String str15 = type12.getClassName();
        int int17 = type12.getOpcode(138);
        int int18 = type12.getSize();
        boolean boolean20 = type12.equals((java.lang.Object) 154);
        java.lang.String str21 = type12.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException26);
        java.lang.Class<?> wildcardClass28 = analyzerException26.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        java.lang.String str30 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        java.lang.String str32 = type31.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type31, false);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        java.lang.String str38 = type35.getClassName();
        int int40 = type35.getOpcode(138);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException43);
        java.lang.Class<?> wildcardClass45 = analyzerException43.getClass();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        boolean boolean47 = type35.equals((java.lang.Object) wildcardClass45);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier34.newValue(type35);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value49 = simpleVerifier8.copyOperation(abstractInsnNode9, value48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "char" + "'", str15, "char");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 138 + "'", int17 == 138);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "C" + "'", str21, "C");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str30, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str32, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "char" + "'", str38, "char");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 138 + "'", int40 == 138);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(value48);
    }

    @Test
    public void test01659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01659");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType("J");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier3 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter4.ternaryOperation(abstractInsnNode5, value6, value7, value8);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.Type type14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.newValue(type14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter4.merge(value15, value21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.ternaryOperation(abstractInsnNode24, value25, value26, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.newValue(type33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter23.merge(value34, value40);
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier3.merge(value22, value34);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type45, type48, type49, type53, type56 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type62, false);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier66.newValue(type67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier66.newValue(type69);
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type69, list74, true);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier3.newValue(type69);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier3.newValue(type78);
        boolean boolean81 = type78.equals((java.lang.Object) "I");
        int int83 = type78.getOpcode(8);
        org.mockito.asm.Type[] typeArray85 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lfloat;");
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type78, typeArray85);
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray85);
        int int88 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter0.newValue(type2);
        java.lang.String str90 = type2.getClassName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(CBFCF)B" + "'", str61, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(CBFCF)C" + "'", str86, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(CBFCF)J" + "'", str87, "(CBFCF)J");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "long" + "'", str90, "long");
    }

    @Test
    public void test01660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01660");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        boolean boolean44 = type39.equals((java.lang.Object) 177);
        int int45 = type39.getSize();
        java.lang.String str46 = type39.toString();
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter33.newValue(type39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.ternaryOperation(abstractInsnNode50, value51, value52, value53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter61.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter61.newValue(type65);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter49.merge(value60, value66);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter33.copyOperation(abstractInsnNode48, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.ternaryOperation(abstractInsnNode70, value71, value72, value73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter81 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        org.mockito.asm.tree.analysis.Value value83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter81.copyOperation(abstractInsnNode82, value83);
        org.mockito.asm.Type type85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter81.newValue(type85);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter69.merge(value80, value86);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str89 = type88.getDescriptor();
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter69.newValue(type88);
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier32.merge(value67, value90);
        org.mockito.asm.Type type93 = org.mockito.asm.Type.getReturnType("(CBFCF)Z");
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier32.newValue(type93);
        org.mockito.asm.Type type96 = org.mockito.asm.Type.getReturnType("LLB;;");
        int int97 = type96.getDimensions();
        java.lang.String str98 = type96.getDescriptor();
        org.mockito.asm.tree.analysis.Value value99 = simpleVerifier32.newValue(type96);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "F" + "'", str46, "F");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "C" + "'", str89, "C");
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertNotNull(type96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "LLB;" + "'", str98, "LLB;");
        org.junit.Assert.assertNotNull(value99);
    }

    @Test
    public void test01661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01661");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        int int6 = type0.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type49, type52, type53, type57, type60 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type66, false);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier70.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier70.newValue(type73);
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type73, list78, true);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier7.newValue(type73);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type73, true);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean86 = type84.equals((java.lang.Object) 151);
        java.lang.String str87 = type84.getClassName();
        java.util.List list88 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type73, type84, list88, false);
        java.lang.String str91 = type73.toString();
        int int92 = type73.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)B" + "'", str65, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "char" + "'", str87, "char");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "F" + "'", str91, "F");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 6 + "'", int92 == 6);
    }

    @Test
    public void test01662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01662");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.toString();
        java.lang.String str24 = type0.toString();
        int int25 = type0.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type27, list28, true);
        java.lang.Class<?> wildcardClass31 = simpleVerifier30.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str35 = type34.getDescriptor();
        int int36 = type34.getSort();
        int int37 = type34.getSize();
        java.lang.String str38 = type34.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type34, true);
        boolean boolean41 = type0.equals((java.lang.Object) type34);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type43, true);
        java.lang.String str48 = type43.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type43, false);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = type43.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B" + "'", str23, "B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lfloat;" + "'", str35, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "void" + "'", str48, "void");
    }

    @Test
    public void test01663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01663");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = basicInterpreter1.copyOperation(abstractInsnNode2, value3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str6 = type5.getDescriptor();
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter1.newValue(type5);
        org.mockito.asm.tree.analysis.Value value8 = simpleVerifier0.newValue(type5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        java.lang.Object obj11 = null;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] { type13, type16, type17, type21, type24 };
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type30, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.ternaryOperation(abstractInsnNode37, value38, value39, value40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter48.copyOperation(abstractInsnNode49, value50);
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter48.newValue(type52);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter36.merge(value47, value53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.ternaryOperation(abstractInsnNode56, value57, value58, value59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter61.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter61.newValue(type65);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter67 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter67.copyOperation(abstractInsnNode68, value69);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter67.newValue(type71);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter55.merge(value66, value72);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier35.merge(value54, value66);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.ternaryOperation(abstractInsnNode76, value77, value78, value79);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter81 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        org.mockito.asm.tree.analysis.Value value83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter81.copyOperation(abstractInsnNode82, value83);
        org.mockito.asm.Type type85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter81.newValue(type85);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter87 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        org.mockito.asm.tree.analysis.Value value89 = null;
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter87.copyOperation(abstractInsnNode88, value89);
        org.mockito.asm.Type type91 = null;
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter87.newValue(type91);
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter75.merge(value86, value92);
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier34.merge(value74, value86);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("double", obj11, value74);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value96 = simpleVerifier0.copyOperation(abstractInsnNode9, value74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(CBFCF)B" + "'", str29, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNull(value70);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNull(value90);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test01664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01664");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type23, false);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier27.newValue(type28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type31, type34, type35, type39, type42 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type48, false);
        java.lang.String str53 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier27.newValue(type30);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier27.newValue(type55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int59 = type57.getOpcode(48);
        java.lang.String str60 = type57.getClassName();
        java.lang.String str61 = type57.getClassName();
        int int63 = type57.getOpcode(119);
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier27.newValue(type57);
        java.lang.String str65 = type57.getDescriptor();
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier4.newValue(type57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = type57.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)B" + "'", str47, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "byte" + "'", str53, "byte");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 48 + "'", int59 == 48);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "boolean" + "'", str61, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 119 + "'", int63 == 119);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Z" + "'", str65, "Z");
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test01665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01665");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test01666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01666");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType("V");
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type52, list53, true);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str58 = type57.getDescriptor();
        int int59 = type57.getSort();
        int int60 = type57.getDimensions();
        int int62 = type57.getOpcode((int) (short) 10);
        int int63 = type57.getSort();
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier55.newValue(type57);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        java.util.List list66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value67 = simpleVerifier55.naryOperation(abstractInsnNode65, list66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lfloat;" + "'", str58, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 14 + "'", int62 == 14);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(value64);
    }

    @Test
    public void test01667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01667");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected class org.mockito.asm.tree.analysis.SimpleVerifier, but found .");
    }

    @Test
    public void test01668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01668");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter3.ternaryOperation(abstractInsnNode4, value5, value6, value7);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.Type type13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter9.newValue(type13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter3.merge(value14, value20);
        int int22 = value21.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/AnalyzerException", (java.lang.Object) 6, value21);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException23);
        java.lang.String str25 = analyzerException24.toString();
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str25, "org.mockito.asm.tree.analysis.AnalyzerException: ");
    }

    @Test
    public void test01669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01669");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("LLg/mockito/asm/tree/analysis/AnalyzerException;;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 49");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01670");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        int int25 = value17.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value26 = simpleVerifier4.unaryOperation(abstractInsnNode5, value17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "void" + "'", str1, "void");
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test01671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01671");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        java.lang.Object obj12 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.ternaryOperation(abstractInsnNode20, value21, value22, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter19.merge(value30, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.ternaryOperation(abstractInsnNode39, value40, value41, value42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter38.merge(value49, value55);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier18.merge(value37, value49);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter13.copyOperation(abstractInsnNode17, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj12, value58);
        java.lang.Class<?> wildcardClass60 = value58.getClass();
        java.lang.String str61 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier10.newValue(type62);
        java.lang.String str64 = type62.getDescriptor();
        int int65 = type62.getDimensions();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str61, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str64, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
    }

    @Test
    public void test01672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01672");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.ternaryOperation(abstractInsnNode17, value18, value19, value20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter16.merge(value27, value33);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode13, value34);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter6.copyOperation(abstractInsnNode10, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.ternaryOperation(abstractInsnNode40, value41, value42, value43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.newValue(type49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter51.copyOperation(abstractInsnNode52, value53);
        org.mockito.asm.Type type55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.newValue(type55);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter39.merge(value50, value56);
        int int58 = value57.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/AnalyzerException", (java.lang.Object) 6, value57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter60.copyOperation(abstractInsnNode61, value62);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        boolean boolean71 = type66.equals((java.lang.Object) 177);
        int int72 = type66.getSize();
        java.lang.String str73 = type66.toString();
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter60.newValue(type66);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter60.copyOperation(abstractInsnNode75, value76);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.CHAR_TYPE;
        int int80 = type78.getOpcode(101);
        java.lang.String str81 = type78.toString();
        int int82 = type78.getSize();
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter60.newValue(type78);
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter6.merge(value57, value83);
        int int85 = value84.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value86 = simpleVerifier4.copyOperation(abstractInsnNode5, value84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "F" + "'", str73, "F");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 101 + "'", int80 == 101);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "C" + "'", str81, "C");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test01673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01673");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int6 = type4.getOpcode(8);
        int int8 = type4.getOpcode(163);
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, list9, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getReturnType("(CBFCF)C");
        org.mockito.asm.Type type15 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type16, list17, true);
        java.lang.Class<?> wildcardClass20 = simpleVerifier19.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str22 = type21.getInternalName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type24, type27, type28, type32, type35 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray39);
        java.lang.String str41 = type23.toString();
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type23, list42, true);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type45, true);
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type21, list48, false);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter51.copyOperation(abstractInsnNode52, value53);
        org.mockito.asm.Type type55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.newValue(type55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.newValue(type61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        boolean boolean68 = type63.equals((java.lang.Object) 177);
        int int69 = type63.getSize();
        java.lang.String str70 = type63.toString();
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter57.newValue(type63);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter73 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter73.ternaryOperation(abstractInsnNode74, value75, value76, value77);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter79 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode80 = null;
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter79.copyOperation(abstractInsnNode80, value81);
        org.mockito.asm.Type type83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter79.newValue(type83);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter85 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode86 = null;
        org.mockito.asm.tree.analysis.Value value87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter85.copyOperation(abstractInsnNode86, value87);
        org.mockito.asm.Type type89 = null;
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter85.newValue(type89);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter73.merge(value84, value90);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter57.copyOperation(abstractInsnNode72, value91);
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier50.merge(value56, value92);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value94 = simpleVerifier11.unaryOperation(abstractInsnNode12, value56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 167 + "'", int8 == 167);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str22, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)B" + "'", str40, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "B" + "'", str41, "B");
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "F" + "'", str70, "F");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNull(value82);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNull(value88);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(value93);
    }

    @Test
    public void test01674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01674");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int18 = type16.getOpcode(48);
        java.lang.String str19 = type16.getClassName();
        java.lang.String str20 = type16.getClassName();
        java.lang.String str21 = type16.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type23, type26, type27, type31, type34 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type40, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type22, true);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        int int49 = type47.getOpcode(101);
        int int51 = type47.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier46.newValue(type47);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value53 = simpleVerifier14.unaryOperation(abstractInsnNode15, value52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48 + "'", int18 == 48);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(CBFCF)B" + "'", str39, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 101 + "'", int49 == 101);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 191 + "'", int51 == 191);
        org.junit.Assert.assertNotNull(value52);
    }

    @Test
    public void test01675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01675");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException17.addSuppressed((java.lang.Throwable) analyzerException19);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException21);
        boolean boolean23 = type11.equals((java.lang.Object) analyzerException22);
        java.lang.String str24 = type11.getDescriptor();
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier10.newValue(type11);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type28, type31, type32, type36, type39 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type45, false);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier49.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier49.newValue(type52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier49.newValue(type54);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str60 = type59.getDescriptor();
        int int61 = type59.getSort();
        int int62 = type59.getDimensions();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str65 = type64.getDescriptor();
        int int66 = type64.getSort();
        java.util.List list67 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type64, list67, true);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str72 = type71.getDescriptor();
        int int73 = type71.getSort();
        int int74 = type71.getDimensions();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str77 = type76.getDescriptor();
        int int78 = type76.getSort();
        java.util.List list79 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type71, type76, list79, true);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier69.newValue(type76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException85);
        java.lang.Class<?> wildcardClass87 = analyzerException85.getClass();
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass87);
        java.lang.String str89 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass87);
        java.lang.String str90 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass87);
        java.lang.String str91 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass87);
        org.mockito.asm.Type type92 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass87);
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier69.newValue(type92);
        org.mockito.asm.Type type94 = null;
        org.mockito.asm.tree.analysis.Value value95 = simpleVerifier69.newValue(type94);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException96 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;", (java.lang.Object) (short) 100, value95);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value97 = simpleVerifier10.binaryOperation(abstractInsnNode26, value55, value95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "F" + "'", str24, "F");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)B" + "'", str44, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Lfloat;" + "'", str60, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Lfloat;" + "'", str65, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Lfloat;" + "'", str72, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Lfloat;" + "'", str77, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str89, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str90, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str91, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(value95);
    }

    @Test
    public void test01676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01676");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str8 = type7.toString();
        int int10 = type7.getOpcode(195);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str6, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 199 + "'", int10 == 199);
    }

    @Test
    public void test01677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01677");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        int int7 = type0.getSize();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType("(CBFCF)Lbyte;");
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type9, list10, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier14.newValue(type16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str20 = type19.getClassName();
        java.lang.String str21 = type19.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        int int25 = type23.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier22.newValue(type23);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type19, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getDescriptor();
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter28.newValue(type32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type36, true);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier40.newValue(type41);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray65);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray65);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter28.newValue(type41);
        int int70 = value69.getSize();
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier14.merge(value26, value69);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value72 = simpleVerifier12.unaryOperation(abstractInsnNode13, value71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "long" + "'", str20, "long");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "long" + "'", str21, "long");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 101 + "'", int25 == 101);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "I" + "'", str33, "I");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "char" + "'", str48, "char");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)C" + "'", str67, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)C" + "'", str68, "(CBFCF)C");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(value71);
    }

    @Test
    public void test01678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01678");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.lang.String str18 = type13.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type37, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type19, true);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str45 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier12.newValue(type44);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        java.util.List list49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value50 = simpleVerifier12.naryOperation(abstractInsnNode48, list49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "long" + "'", str45, "long");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
    }

    @Test
    public void test01679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01679");
        org.mockito.asm.Type type1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter2.ternaryOperation(abstractInsnNode3, value4, value5, value6);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter8.copyOperation(abstractInsnNode9, value10);
        org.mockito.asm.Type type12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.newValue(type12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter2.merge(value13, value19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str22 = type21.getDescriptor();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter2.newValue(type21);
        java.util.List list24 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type21, list24, true);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter27.copyOperation(abstractInsnNode28, value29);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.newValue(type31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = type33.getClassName();
        boolean boolean38 = type33.equals((java.lang.Object) 177);
        int int39 = type33.getSize();
        java.lang.String str40 = type33.toString();
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter27.newValue(type33);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter27.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        int int47 = type45.getOpcode(101);
        java.lang.String str48 = type45.toString();
        int int49 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter27.newValue(type45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;", (java.lang.Object) simpleVerifier26, value50);
        java.lang.Throwable[] throwableArray52 = analyzerException51.getSuppressed();
        java.lang.String str53 = analyzerException51.toString();
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "C" + "'", str22, "C");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "F" + "'", str40, "F");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 101 + "'", int47 == 101);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "C" + "'", str48, "C");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(throwableArray52);
    }

    @Test
    public void test01680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01680");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier2 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter3.ternaryOperation(abstractInsnNode4, value5, value6, value7);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.Type type13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter9.newValue(type13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter3.merge(value14, value20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.ternaryOperation(abstractInsnNode23, value24, value25, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter22.merge(value33, value39);
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier2.merge(value21, value33);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type44, type47, type48, type52, type55 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type61, false);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier65.newValue(type66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier65.newValue(type68);
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type68, list73, true);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier2.newValue(type68);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier2.newValue(type77);
        boolean boolean80 = type77.equals((java.lang.Object) "I");
        int int82 = type77.getOpcode(8);
        boolean boolean84 = type77.equals((java.lang.Object) (-1.0f));
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type77, list85, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        java.util.List list89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = simpleVerifier87.naryOperation(abstractInsnNode88, list89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "void" + "'", str1, "void");
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(CBFCF)B" + "'", str60, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 8 + "'", int82 == 8);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test01681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01681");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier2 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter3.ternaryOperation(abstractInsnNode4, value5, value6, value7);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.Type type13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter9.newValue(type13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter3.merge(value14, value20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.ternaryOperation(abstractInsnNode23, value24, value25, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter22.merge(value33, value39);
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier2.merge(value21, value33);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type44, type47, type48, type52, type55 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type61, false);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier65.newValue(type66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier65.newValue(type68);
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type68, list73, true);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier2.newValue(type68);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier2.newValue(type77);
        boolean boolean80 = type77.equals((java.lang.Object) "I");
        int int82 = type77.getOpcode(8);
        boolean boolean84 = type77.equals((java.lang.Object) (-1.0f));
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type77, list85, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        org.mockito.asm.tree.analysis.Value value89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = simpleVerifier87.unaryOperation(abstractInsnNode88, value89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "void" + "'", str1, "void");
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(CBFCF)B" + "'", str60, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 8 + "'", int82 == 8);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test01682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01682");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.SHORT_TYPE;
        int int3 = type2.getSize();
        java.lang.String str4 = type2.toString();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list5, false);
        int int9 = type1.getOpcode(180);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "S" + "'", str4, "S");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 184 + "'", int9 == 184);
    }

    @Test
    public void test01683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01683");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        int int6 = type0.getOpcode(169);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        int int9 = type7.getOpcode(101);
        int int11 = type7.getOpcode(191);
        int int12 = type7.getSort();
        java.lang.Class<?> wildcardClass13 = type7.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str15 = type14.getDescriptor();
        java.util.List list16 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type14, list16, true);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = type0.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 170 + "'", int6 == 170);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 101 + "'", int9 == 101);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 191 + "'", int11 == 191);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str15, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test01684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01684");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B", (java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException13.addSuppressed((java.lang.Throwable) analyzerException15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException21.addSuppressed((java.lang.Throwable) analyzerException23);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException21);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException21);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException33.addSuppressed((java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException33);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException37);
        boolean boolean39 = type27.equals((java.lang.Object) analyzerException38);
        analyzerException26.addSuppressed((java.lang.Throwable) analyzerException38);
        analyzerException13.addSuppressed((java.lang.Throwable) analyzerException26);
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException26);
        java.lang.Throwable[] throwableArray43 = analyzerException26.getSuppressed();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        boolean boolean49 = type44.equals((java.lang.Object) 177);
        java.lang.String str50 = type44.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException53);
        java.lang.Class<?> wildcardClass55 = analyzerException53.getClass();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        int int58 = type56.getOpcode(114);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type60, type63, type64, type68, type71 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray75);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray75);
        boolean boolean78 = type44.equals((java.lang.Object) typeArray75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException81);
        java.lang.Throwable[] throwableArray83 = analyzerException82.getSuppressed();
        boolean boolean84 = type44.equals((java.lang.Object) analyzerException82);
        analyzerException26.addSuppressed((java.lang.Throwable) analyzerException82);
        java.lang.String str86 = analyzerException26.toString();
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "F" + "'", str50, "F");
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 118 + "'", int58 == 118);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)B" + "'", str76, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str77, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B" + "'", str86, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
    }

    @Test
    public void test01685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01685");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier25.newValue(type28);
        int int33 = type28.getSize();
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type28, list34, true);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier36.newValue(type38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int43 = type41.getOpcode(8);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier36.newValue(type41);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str48 = type47.getDescriptor();
        int int49 = type47.getSort();
        int int50 = type47.getDimensions();
        int int52 = type47.getOpcode((int) (short) 10);
        int int53 = type47.getSort();
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier36.newValue(type47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("(CBFCF)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str61 = type60.getDescriptor();
        int int62 = type60.getSort();
        int int63 = type60.getDimensions();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str66 = type65.getDescriptor();
        int int67 = type65.getSort();
        java.util.List list68 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type65, list68, true);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str73 = type72.getDescriptor();
        int int74 = type72.getSort();
        int int75 = type72.getDimensions();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str78 = type77.getDescriptor();
        int int79 = type77.getSort();
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type72, type77, list80, true);
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier70.newValue(type77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException86);
        java.lang.Class<?> wildcardClass88 = analyzerException86.getClass();
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass88);
        java.lang.String str90 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass88);
        java.lang.String str91 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass88);
        java.lang.String str92 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass88);
        org.mockito.asm.Type type93 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass88);
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier70.newValue(type93);
        org.mockito.asm.Type type95 = null;
        org.mockito.asm.tree.analysis.Value value96 = simpleVerifier70.newValue(type95);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException97 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) "(CBFCF)[Lorg/mockito/asm/Type;", value96);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value98 = simpleVerifier36.copyOperation(abstractInsnNode55, value96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 12 + "'", int43 == 12);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str44, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Lfloat;" + "'", str48, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 14 + "'", int52 == 14);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Lfloat;" + "'", str61, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Lfloat;" + "'", str66, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Lfloat;" + "'", str73, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Lfloat;" + "'", str78, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str90, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str91, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str92, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertNotNull(value96);
    }

    @Test
    public void test01686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01686");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type49, type52, type53, type57, type60 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type66, false);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier70.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier70.newValue(type73);
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type73, list78, true);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier7.newValue(type73);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier7.newValue(type82);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.CHAR_TYPE;
        int int86 = type84.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier7.newValue(type84);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier6.newValue(type84);
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier0.newValue(type84);
        java.lang.String str90 = type84.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = type84.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)B" + "'", str65, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 101 + "'", int86 == 101);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "C" + "'", str90, "C");
    }

    @Test
    public void test01687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01687");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter11.copyOperation(abstractInsnNode12, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter11.newValue(type15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.ternaryOperation(abstractInsnNode20, value21, value22, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter19.merge(value30, value36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter11.copyOperation(abstractInsnNode18, value30);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int41 = type39.getOpcode(48);
        java.lang.String str42 = type39.getClassName();
        java.lang.String str43 = type39.getClassName();
        java.lang.String str44 = type39.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type46, type49, type50, type54, type57 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type63, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type45, true);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str71 = type70.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier69.newValue(type70);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean76 = type74.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type73, type74, true);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier78.newValue(type79);
        int int83 = value82.getSize();
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter11.merge(value72, value82);
        int int85 = value82.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value86 = simpleVerifier5.copyOperation(abstractInsnNode10, value82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "I" + "'", str16, "I");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 48 + "'", int41 == 48);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)B" + "'", str62, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "long" + "'", str71, "long");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test01688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01688");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = basicInterpreter1.copyOperation(abstractInsnNode2, value3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str6 = type5.getDescriptor();
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter1.newValue(type5);
        org.mockito.asm.tree.analysis.Value value8 = simpleVerifier0.newValue(type5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        java.util.List list10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value11 = simpleVerifier0.naryOperation(abstractInsnNode9, list10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(value8);
    }

    @Test
    public void test01689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01689");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.toString();
        java.lang.String str24 = type0.toString();
        int int25 = type0.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        int int28 = type26.getOpcode(101);
        int int30 = type26.getOpcode(191);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        java.util.List list34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value35 = simpleVerifier32.naryOperation(abstractInsnNode33, list34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B" + "'", str23, "B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 101 + "'", int28 == 101);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 191 + "'", int30 == 191);
    }

    @Test
    public void test01690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01690");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getDimensions();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list9, true);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str14 = type13.getDescriptor();
        int int15 = type13.getSort();
        int int16 = type13.getDimensions();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str19 = type18.getDescriptor();
        int int20 = type18.getSort();
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type18, list21, true);
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier11.newValue(type18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        java.util.List list26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value27 = simpleVerifier11.naryOperation(abstractInsnNode25, list26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lfloat;" + "'", str14, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lfloat;" + "'", str19, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(value24);
    }

    @Test
    public void test01691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01691");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: LB;");
        java.lang.String str2 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "rg.mockito.asm.tree.analysis.AnalyzerException: LB" + "'", str2, "rg.mockito.asm.tree.analysis.AnalyzerException: LB");
    }

    @Test
    public void test01692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01692");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        java.lang.String str35 = type0.getClassName();
        java.lang.String str36 = type0.getDescriptor();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type38 = null;
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type38, list39, false);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException67);
        java.lang.Class<?> wildcardClass69 = analyzerException67.getClass();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        java.lang.String str71 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass69);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type72, true);
        boolean boolean76 = type72.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier41.newValue(type72);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier41.newValue(type78);
        boolean boolean80 = type0.equals((java.lang.Object) type78);
        int int82 = type0.getOpcode(119);
        java.lang.String str83 = type0.getDescriptor();
        // The following exception was thrown during execution in test generation
        try {
            int int84 = type0.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "F" + "'", str36, "F");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "char" + "'", str45, "char");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)C" + "'", str64, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str71, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 121 + "'", int82 == 121);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "F" + "'", str83, "F");
    }

    @Test
    public void test01693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01693");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 151);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 100);
        java.lang.String str10 = type7.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type3, type6, type7, type11, type14 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type20, false);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier24.newValue(type25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier24.newValue(type27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier24.newValue(type29);
        int int31 = value30.getSize();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type33, type36, type37, type41, type44 };
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray48);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException54);
        java.lang.Class<?> wildcardClass56 = analyzerException54.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        java.lang.String str58 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type59, list60, true);
        java.util.List list63 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type51, list63, false);
        java.lang.String str66 = type51.getInternalName();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("(CBFCF)S");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type68, false);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        int int73 = type71.getOpcode(101);
        int int75 = type71.getOpcode(191);
        int int76 = type71.getSort();
        java.lang.Class<?> wildcardClass77 = type71.getClass();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        java.lang.String str79 = type78.getDescriptor();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier70.newValue(type78);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value81 = simpleVerifier0.binaryOperation(abstractInsnNode1, value30, value80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)B" + "'", str19, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(CBFCF)B" + "'", str49, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str58, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str66, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 101 + "'", int73 == 101);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 191 + "'", int75 == 191);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str79, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value80);
    }

    @Test
    public void test01694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01694");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int77 = type75.getOpcode(48);
        java.lang.String str78 = type75.getClassName();
        java.lang.String str79 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier0.newValue(type75);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str84 = type83.getDescriptor();
        int int85 = type83.getSort();
        java.util.List list86 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type81, type83, list86, false);
        int int89 = type83.getSize();
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier0.newValue(type83);
        int int91 = type83.getSize();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 48 + "'", int77 == 48);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Lfloat;" + "'", str84, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test01695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01695");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type[] typeArray76 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray76);
        java.lang.String str78 = type66.getClassName();
        java.lang.String str79 = type66.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int80 = type66.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)F" + "'", str77, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "F" + "'", str79, "F");
    }

    @Test
    public void test01696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01696");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int6 = type4.getOpcode(48);
        java.lang.String str7 = type4.getClassName();
        java.lang.String str8 = type4.getClassName();
        java.lang.String str9 = type4.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type11, type14, type15, type19, type22 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type28, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type10, true);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type37, type40, type41, type45, type48 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type54, false);
        int int59 = type54.getSort();
        java.lang.String str60 = type54.getDescriptor();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.newValue(type54);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        java.util.List list63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value64 = basicInterpreter0.naryOperation(abstractInsnNode62, list63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)B" + "'", str27, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)B" + "'", str53, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertNotNull(value61);
    }

    @Test
    public void test01697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01697");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str13 = type12.getDescriptor();
        java.lang.String str14 = type12.getInternalName();
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier10.newValue(type12);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str18 = type17.getDescriptor();
        int int19 = type17.getSort();
        int int20 = type17.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type17, false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type25, true);
        java.lang.String str30 = type25.getClassName();
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type25, list31, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException40.addSuppressed((java.lang.Throwable) analyzerException42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException44);
        boolean boolean46 = type34.equals((java.lang.Object) analyzerException45);
        java.lang.String str47 = type34.getDescriptor();
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier33.newValue(type34);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        java.lang.String str54 = type51.getClassName();
        int int56 = type51.getOpcode(138);
        int int57 = type51.getSize();
        boolean boolean59 = type51.equals((java.lang.Object) 154);
        java.lang.String str60 = type51.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type51, true);
        boolean boolean63 = type34.equals((java.lang.Object) type51);
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier22.newValue(type51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = type51.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LB;" + "'", str13, "LB;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "B" + "'", str14, "B");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lfloat;" + "'", str18, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "void" + "'", str30, "void");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "F" + "'", str47, "F");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "char" + "'", str54, "char");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 138 + "'", int56 == 138);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(value64);
    }

    @Test
    public void test01698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01698");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.toString();
        java.lang.String str24 = type0.toString();
        int int25 = type0.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type27, list28, true);
        java.lang.Class<?> wildcardClass31 = simpleVerifier30.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str35 = type34.getDescriptor();
        int int36 = type34.getSort();
        int int37 = type34.getSize();
        java.lang.String str38 = type34.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type34, true);
        boolean boolean41 = type0.equals((java.lang.Object) type34);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type49, type52, type53, type57, type60 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray64);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException69);
        java.lang.Class<?> wildcardClass71 = analyzerException69.getClass();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass71);
        java.lang.String str73 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass71);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass71);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type74, true);
        boolean boolean77 = type43.equals((java.lang.Object) type74);
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type43, list78, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode81 = null;
        org.mockito.asm.tree.analysis.Value value82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value83 = simpleVerifier80.unaryOperation(abstractInsnNode81, value82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B" + "'", str23, "B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lfloat;" + "'", str35, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "char" + "'", str47, "char");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)B" + "'", str65, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)C" + "'", str66, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str73, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test01699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01699");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str2 = type1.toString();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getReturnType("(CBFCF)Lbyte;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type26, false);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier30.newValue(type31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier30.newValue(type33);
        int int38 = value37.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value39 = simpleVerifier6.unaryOperation(abstractInsnNode7, value37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;" + "'", str2, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test01700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01700");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.getDescriptor();
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter2.newValue(type6);
        org.mockito.asm.Type[] typeArray10 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray10);
        java.lang.Class<?> wildcardClass12 = typeArray10.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException17);
        java.lang.Class<?> wildcardClass19 = analyzerException17.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        java.lang.String str22 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type24, type27, type28, type32, type35 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type41, false);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str22, value47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type13, value47);
        int int50 = type13.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type13, true);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        int int56 = type54.getOpcode(113);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        boolean boolean62 = type57.equals((java.lang.Object) 177);
        java.util.List list63 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type57, list63, false);
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier52.newValue(type54);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value68 = simpleVerifier52.newOperation(abstractInsnNode67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "I" + "'", str7, "I");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(CBFCF)I" + "'", str11, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str21, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str22, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)B" + "'", str40, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 113 + "'", int56 == 113);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test01701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01701");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("B");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01702");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 24);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        java.lang.Class<?> wildcardClass31 = analyzerException29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type34, list35, true);
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type26, list38, false);
        boolean boolean41 = type4.equals((java.lang.Object) type7);
        int int42 = type7.getSize();
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type7, list43, true);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType("J");
        org.mockito.asm.Type type48 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 193);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type58, type61, type62, type66, type69 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray73);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray73);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray73);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray73);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray73);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier45.newValue(type47);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type47, false);
        // The following exception was thrown during execution in test generation
        try {
            int int82 = type47.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "char" + "'", str56, "char");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)B" + "'", str74, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)C" + "'", str75, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str76, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)S" + "'", str77, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)J" + "'", str78, "(CBFCF)J");
        org.junit.Assert.assertNotNull(value79);
    }

    @Test
    public void test01703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01703");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, true);
        java.lang.String str14 = type9.getClassName();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type9, list15, true);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str20 = type19.getDescriptor();
        java.lang.String str21 = type19.getInternalName();
        org.mockito.asm.tree.analysis.Value value22 = simpleVerifier17.newValue(type19);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.copyOperation(abstractInsnNode6, value22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        java.util.List list25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value26 = basicInterpreter0.naryOperation(abstractInsnNode24, list25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "void" + "'", str14, "void");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LB;" + "'", str20, "LB;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "B" + "'", str21, "B");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
    }

    @Test
    public void test01704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01704");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        java.lang.String str6 = type0.getDescriptor();
        org.mockito.asm.Type type7 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value11 = simpleVerifier9.newOperation(abstractInsnNode10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
    }

    @Test
    public void test01705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01705");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.Type type10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.newValue(type10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.merge(value11, value17);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter20.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.ternaryOperation(abstractInsnNode32, value33, value34, value35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter31.merge(value42, value48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.ternaryOperation(abstractInsnNode51, value52, value53, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter56.copyOperation(abstractInsnNode57, value58);
        org.mockito.asm.Type type60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter56.newValue(type60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter62.copyOperation(abstractInsnNode63, value64);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter62.newValue(type66);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter50.merge(value61, value67);
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier30.merge(value49, value61);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter20.copyOperation(abstractInsnNode29, value61);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter0.copyOperation(abstractInsnNode19, value61);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type73 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) 151);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type77 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) (byte) 100);
        java.lang.String str80 = type77.getClassName();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean83 = type81.equals((java.lang.Object) 151);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean86 = type84.equals((java.lang.Object) (byte) 100);
        java.lang.String str87 = type84.getClassName();
        org.mockito.asm.Type[] typeArray88 = new org.mockito.asm.Type[] { type73, type76, type77, type81, type84 };
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type72, typeArray88);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean92 = type90.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier94 = new org.mockito.asm.tree.analysis.SimpleVerifier(type72, type90, false);
        java.lang.String str95 = type72.toString();
        org.mockito.asm.tree.analysis.Value value96 = basicInterpreter0.newValue(type72);
        int int97 = type72.getSize();
        java.lang.String str98 = type72.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int99 = type72.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "float" + "'", str80, "float");
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "float" + "'", str87, "float");
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(CBFCF)B" + "'", str89, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "B" + "'", str95, "B");
        org.junit.Assert.assertNotNull(value96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "B" + "'", str98, "B");
    }

    @Test
    public void test01706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01706");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type6, true);
        java.lang.String str11 = type6.getClassName();
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type6, list12, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 193);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) (byte) 100);
        java.lang.String str39 = type36.getClassName();
        org.mockito.asm.Type[] typeArray40 = new org.mockito.asm.Type[] { type25, type28, type29, type33, type36 };
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type24, typeArray40);
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray40);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray40);
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray40);
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray40);
        int int46 = type4.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str52 = type51.getDescriptor();
        int int53 = type51.getSort();
        int int54 = type51.getDimensions();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str57 = type56.getDescriptor();
        int int58 = type56.getSort();
        java.util.List list59 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type56, list59, true);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str64 = type63.getDescriptor();
        int int65 = type63.getSort();
        int int66 = type63.getDimensions();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str69 = type68.getDescriptor();
        int int70 = type68.getSort();
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type68, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier61.newValue(type68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException77);
        java.lang.Class<?> wildcardClass79 = analyzerException77.getClass();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        java.lang.String str81 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass79);
        java.lang.String str82 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass79);
        java.lang.String str83 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass79);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass79);
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier61.newValue(type84);
        org.mockito.asm.Type type86 = null;
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier61.newValue(type86);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = simpleVerifier48.copyOperation(abstractInsnNode49, value87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "void" + "'", str11, "void");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "char" + "'", str23, "char");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "float" + "'", str39, "float");
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(CBFCF)B" + "'", str41, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)C" + "'", str42, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str43, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)S" + "'", str44, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(CBFCF)I" + "'", str45, "(CBFCF)I");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Lfloat;" + "'", str52, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Lfloat;" + "'", str57, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lfloat;" + "'", str64, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lfloat;" + "'", str69, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str81, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str82, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str83, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test01707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01707");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType("J");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier3 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter4.ternaryOperation(abstractInsnNode5, value6, value7, value8);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.Type type14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.newValue(type14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter4.merge(value15, value21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.ternaryOperation(abstractInsnNode24, value25, value26, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.newValue(type33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter23.merge(value34, value40);
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier3.merge(value22, value34);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type45, type48, type49, type53, type56 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type62, false);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier66.newValue(type67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier66.newValue(type69);
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type69, list74, true);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier3.newValue(type69);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier3.newValue(type78);
        boolean boolean81 = type78.equals((java.lang.Object) "I");
        int int83 = type78.getOpcode(8);
        org.mockito.asm.Type[] typeArray85 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lfloat;");
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type78, typeArray85);
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray85);
        int int88 = type2.getSize();
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter0.newValue(type2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode90 = null;
        java.util.List list91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value92 = basicInterpreter0.naryOperation(abstractInsnNode90, list91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(CBFCF)B" + "'", str61, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 8 + "'", int83 == 8);
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(CBFCF)C" + "'", str86, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(CBFCF)J" + "'", str87, "(CBFCF)J");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(value89);
    }

    @Test
    public void test01708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01708");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        int int1 = type0.getSize();
        java.lang.String str2 = type0.getClassName();
        boolean boolean4 = type0.equals((java.lang.Object) "C");
        int int6 = type0.getOpcode(120);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "float" + "'", str2, "float");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 122 + "'", int6 == 122);
    }

    @Test
    public void test01709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01709");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        java.lang.String str2 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LCBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str2, "LCBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
    }

    @Test
    public void test01710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01710");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getDimensions();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list9, true);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str14 = type13.getDescriptor();
        int int15 = type13.getSort();
        int int16 = type13.getDimensions();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str19 = type18.getDescriptor();
        int int20 = type18.getSort();
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type18, list21, true);
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier11.newValue(type18);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type26, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier30.newValue(type31);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier30.newValue(type35);
        int int40 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier11.newValue(type35);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        int int45 = type43.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier42.newValue(type43);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str50 = type49.getDescriptor();
        int int51 = type49.getSort();
        java.util.List list52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type49, list52, false);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) 151);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.Type[] typeArray77 = new org.mockito.asm.Type[] { type62, type65, type66, type70, type73 };
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray77);
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException82);
        java.lang.Class<?> wildcardClass84 = analyzerException82.getClass();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        java.lang.String str86 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass84);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type57, type87, true);
        boolean boolean90 = type56.equals((java.lang.Object) type87);
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier54.newValue(type87);
        org.mockito.asm.Type type92 = null;
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier54.newValue(type92);
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier11.merge(value46, value93);
        int int95 = value46.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lfloat;" + "'", str14, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lfloat;" + "'", str19, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 101 + "'", int45 == 101);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lfloat;" + "'", str50, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "char" + "'", str60, "char");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)B" + "'", str78, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(CBFCF)C" + "'", str79, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str86, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test01711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01711");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 151);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 100);
        java.lang.String str10 = type7.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type3, type6, type7, type11, type14 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type20, false);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier24.newValue(type25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException31);
        java.lang.Class<?> wildcardClass33 = analyzerException31.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.lang.String str35 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type36, list37, true);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier24.newValue(type36);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value41 = simpleVerifier0.copyOperation(abstractInsnNode1, value40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)B" + "'", str19, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str35, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(value40);
    }

    @Test
    public void test01712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01712");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException22);
        java.lang.Class<?> wildcardClass24 = analyzerException22.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type27, list28, true);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type19, list31, false);
        java.lang.String str34 = type19.getInternalName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        int int38 = type36.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier35.newValue(type36);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type41, type44, type45, type49, type52 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type58, false);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier62.newValue(type63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier62.newValue(type65);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type71 = null;
        java.util.List list72 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type70, type71, list72, false);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier62.newValue(type70);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier35.newValue(type70);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type70, list77, false);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException82);
        java.lang.Class<?> wildcardClass84 = analyzerException83.getClass();
        java.lang.String str85 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass84);
        java.lang.String str86 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass84);
        java.lang.String str87 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass84);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier79.newValue(type89);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode91 = null;
        java.util.List list92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier79.naryOperation(abstractInsnNode91, list92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str26, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str34, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 101 + "'", int38 == 101);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)B" + "'", str57, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str85, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str86, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str87, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(value90);
    }

    @Test
    public void test01713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01713");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str5, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str6, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str7, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str8, "org/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test01714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01714");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        java.lang.String str2 = analyzerException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: boolean" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: boolean");
    }

    @Test
    public void test01715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01715");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass8 = analyzerException7.getClass();
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.ternaryOperation(abstractInsnNode17, value18, value19, value20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter16.merge(value27, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.ternaryOperation(abstractInsnNode36, value37, value38, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter35.merge(value46, value52);
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier15.merge(value34, value46);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter10.copyOperation(abstractInsnNode14, value54);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .", (java.lang.Object) wildcardClass8, value54);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException56);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)S", (java.lang.Throwable) analyzerException57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/SimpleVerifier", (java.lang.Throwable) analyzerException57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter63.copyOperation(abstractInsnNode64, value65);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter67 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter67.ternaryOperation(abstractInsnNode68, value69, value70, value71);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter73 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter73.copyOperation(abstractInsnNode74, value75);
        org.mockito.asm.Type type77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter73.newValue(type77);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter79 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode80 = null;
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter79.copyOperation(abstractInsnNode80, value81);
        org.mockito.asm.Type type83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter79.newValue(type83);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter67.merge(value78, value84);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode64, value85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException86);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException87);
        analyzerException59.addSuppressed((java.lang.Throwable) analyzerException87);
        java.lang.String str90 = analyzerException87.toString();
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str9, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNull(value82);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)C" + "'", str90, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)C");
    }

    @Test
    public void test01716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01716");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        java.lang.String str11 = type2.toString();
        java.lang.String str12 = type2.toString();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type[] typeArray29 = new org.mockito.asm.Type[] { type14, type17, type18, type22, type25 };
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        java.lang.Class<?> wildcardClass37 = analyzerException35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type40, list41, true);
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type32, list44, false);
        int int47 = type32.getDimensions();
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type32, list48, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter52.copyOperation(abstractInsnNode53, value54);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.newValue(type56);
        int int58 = value57.getSize();
        int int59 = value57.getSize();
        int int60 = value57.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value61 = simpleVerifier50.copyOperation(abstractInsnNode51, value57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "V" + "'", str11, "V");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)B" + "'", str30, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str39, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test01717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01717");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException14.addSuppressed((java.lang.Throwable) analyzerException16);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException18);
        analyzerException9.addSuppressed((java.lang.Throwable) analyzerException19);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException24.addSuppressed((java.lang.Throwable) analyzerException26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException24);
        java.lang.Throwable[] throwableArray29 = analyzerException28.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        analyzerException28.addSuppressed((java.lang.Throwable) analyzerException31);
        analyzerException9.addSuppressed((java.lang.Throwable) analyzerException28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.ternaryOperation(abstractInsnNode42, value43, value44, value45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter53.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.newValue(type57);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter41.merge(value52, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode38, value59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException61);
        java.lang.Throwable[] throwableArray63 = analyzerException61.getSuppressed();
        analyzerException28.addSuppressed((java.lang.Throwable) analyzerException61);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter68.copyOperation(abstractInsnNode69, value70);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter72.ternaryOperation(abstractInsnNode73, value74, value75, value76);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter78 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter78.copyOperation(abstractInsnNode79, value80);
        org.mockito.asm.Type type82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter78.newValue(type82);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter84 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        org.mockito.asm.tree.analysis.Value value86 = null;
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter84.copyOperation(abstractInsnNode85, value86);
        org.mockito.asm.Type type88 = null;
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter84.newValue(type88);
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter72.merge(value83, value89);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode69, value90);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException91);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException92);
        java.lang.Throwable[] throwableArray94 = analyzerException92.getSuppressed();
        analyzerException28.addSuppressed((java.lang.Throwable) analyzerException92);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNull(value87);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(throwableArray94);
    }

    @Test
    public void test01718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01718");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        java.lang.String str2 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: " + "'", str2, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ");
    }

    @Test
    public void test01719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01719");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = type5.getElementType();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type25, false);
        java.lang.String str30 = type7.toString();
        java.lang.String str31 = type7.toString();
        int int32 = type7.getSize();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type34, list35, true);
        java.lang.Class<?> wildcardClass38 = simpleVerifier37.getClass();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str42 = type41.getDescriptor();
        int int43 = type41.getSort();
        int int44 = type41.getSize();
        java.lang.String str45 = type41.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type41, true);
        boolean boolean48 = type7.equals((java.lang.Object) type41);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type50, true);
        java.lang.String str55 = type50.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type50, false);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        int int60 = type58.getOpcode(101);
        java.lang.String str61 = type58.toString();
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type58, list62, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type58, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        java.util.List list68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = simpleVerifier66.naryOperation(abstractInsnNode67, list68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "B" + "'", str30, "B");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "B" + "'", str31, "B");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Lfloat;" + "'", str42, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "void" + "'", str55, "void");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 101 + "'", int60 == 101);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "C" + "'", str61, "C");
    }

    @Test
    public void test01720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01720");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        java.lang.String str8 = type5.getClassName();
        int int10 = type5.getOpcode(138);
        int int12 = type5.getOpcode(129);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type14, true);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value22 = simpleVerifier18.newValue(type19);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type25, true);
        java.lang.String str30 = type25.getClassName();
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type25, list31, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type25, true);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean37 = type25.equals((java.lang.Object) type36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type39, type42, type43, type47, type50 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type56, false);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier60.newValue(type61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier60.newValue(type63);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int69 = type68.getSize();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.CHAR_TYPE;
        int int72 = type70.getOpcode(101);
        java.lang.String str73 = type70.toString();
        int int74 = type70.getSort();
        java.util.List list75 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type68, type70, list75, false);
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier60.newValue(type68);
        java.util.List list79 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type68, list79, false);
        java.util.List list82 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier84 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type25, list82, false);
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier4.newValue(type5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value87 = simpleVerifier4.newOperation(abstractInsnNode86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "char" + "'", str8, "char");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 138 + "'", int10 == 138);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 129 + "'", int12 == 129);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "void" + "'", str30, "void");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)B" + "'", str55, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 101 + "'", int72 == 101);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "C" + "'", str73, "C");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value85);
    }

    @Test
    public void test01721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01721");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, list5, false);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, true);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier13.newValue(type14);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type20, true);
        java.lang.String str25 = type20.getClassName();
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type20, list26, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type20, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean32 = type20.equals((java.lang.Object) type31);
        int int33 = type31.getSort();
        int int35 = type31.getOpcode(24);
        org.mockito.asm.tree.analysis.Value value36 = simpleVerifier7.newValue(type31);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type38, list39, true);
        java.lang.String str42 = type38.getClassName();
        java.lang.String str43 = type38.getDescriptor();
        java.lang.String str44 = type38.toString();
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier7.newValue(type38);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type46 = type38.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLB;;" + "'", str2, "LLB;;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "void" + "'", str25, "void");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 24 + "'", int35 == 24);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Z" + "'", str43, "Z");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Z" + "'", str44, "Z");
        org.junit.Assert.assertNotNull(value45);
    }

    @Test
    public void test01722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01722");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter3.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value9, value10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter7.merge(value18, value24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode4, value25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException26);
        java.lang.Throwable[] throwableArray28 = analyzerException26.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.ternaryOperation(abstractInsnNode40, value41, value42, value43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.newValue(type49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter51.copyOperation(abstractInsnNode52, value53);
        org.mockito.asm.Type type55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.newValue(type55);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter39.merge(value50, value56);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode36, value57);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter29.copyOperation(abstractInsnNode33, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicInterpreter;", (java.lang.Object) analyzerException26, value57);
        java.lang.Throwable[] throwableArray61 = analyzerException60.getSuppressed();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(throwableArray61);
    }

    @Test
    public void test01723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01723");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 24);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        java.lang.Class<?> wildcardClass31 = analyzerException29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type34, list35, true);
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type26, list38, false);
        boolean boolean41 = type4.equals((java.lang.Object) type7);
        int int42 = type7.getSize();
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type7, list43, true);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType("J");
        org.mockito.asm.Type type48 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 193);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type58, type61, type62, type66, type69 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray73);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray73);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray73);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray73);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray73);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier45.newValue(type47);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type47, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value83 = simpleVerifier81.newOperation(abstractInsnNode82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "char" + "'", str56, "char");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)B" + "'", str74, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)C" + "'", str75, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str76, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)S" + "'", str77, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)J" + "'", str78, "(CBFCF)J");
        org.junit.Assert.assertNotNull(value79);
    }

    @Test
    public void test01724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01724");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Z");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int4 = type2.getOpcode(48);
        java.lang.String str5 = type2.getClassName();
        java.lang.String str6 = type2.getClassName();
        java.lang.String str7 = type2.getClassName();
        int int8 = type2.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        int int12 = type10.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value13 = simpleVerifier9.newValue(type10);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.ternaryOperation(abstractInsnNode16, value17, value18, value19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.newValue(type25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter27.copyOperation(abstractInsnNode28, value29);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter15.merge(value26, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.ternaryOperation(abstractInsnNode35, value36, value37, value38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.newValue(type50);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter34.merge(value45, value51);
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier14.merge(value33, value45);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type56, type59, type60, type64, type67 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type73, false);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier77.newValue(type78);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean82 = type80.equals((java.lang.Object) (byte) 100);
        java.lang.String str83 = type80.getClassName();
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier77.newValue(type80);
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type80, list85, true);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier14.newValue(type80);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier14.newValue(type89);
        boolean boolean92 = type89.equals((java.lang.Object) "I");
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier9.newValue(type89);
        int int94 = type89.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier96 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type89, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier98 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type89, false);
        java.lang.String str99 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 101 + "'", int12 == 101);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)B" + "'", str72, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "float" + "'", str83, "float");
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 2 + "'", int94 == 2);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "boolean" + "'", str99, "boolean");
    }

    @Test
    public void test01725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01725");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier30.newValue(type31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type35, list36, true);
        java.lang.Class<?> wildcardClass39 = simpleVerifier38.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str43 = type42.getDescriptor();
        int int44 = type42.getSort();
        int int45 = type42.getSize();
        java.lang.String str46 = type42.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type42, true);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier30.newValue(type42);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type51, true);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier55.newValue(type56);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier55.newValue(type60);
        int int65 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier30.newValue(type60);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        java.util.List list68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = simpleVerifier30.naryOperation(abstractInsnNode67, list68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "long" + "'", str32, "long");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lfloat;" + "'", str43, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test01726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01726");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        java.lang.String str11 = type2.toString();
        java.lang.String str12 = type2.toString();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type[] typeArray29 = new org.mockito.asm.Type[] { type14, type17, type18, type22, type25 };
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        java.lang.Class<?> wildcardClass37 = analyzerException35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type40, list41, true);
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type32, list44, false);
        int int47 = type32.getDimensions();
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type32, list48, false);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type52, type55, type56, type60, type63 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type69, false);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier73.newValue(type74);
        int int77 = type74.getOpcode(4);
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier50.newValue(type74);
        java.lang.String str79 = type74.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "V" + "'", str11, "V");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)B" + "'", str30, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str39, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)B" + "'", str68, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Z" + "'", str79, "Z");
    }

    @Test
    public void test01727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01727");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass8 = analyzerException6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type11, list12, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type17, type20, type21, type25, type28 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type34, false);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier38.newValue(type39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier38.newValue(type41);
        java.util.List list46 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type41, list46, true);
        int int50 = type41.getOpcode(100);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier14.newValue(type41);
        java.util.List list52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type41, list52, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type58, type61, type62, type66, type69 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type57, type75, false);
        org.mockito.asm.Type type80 = null;
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier79.newValue(type80);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean84 = type82.equals((java.lang.Object) (byte) 100);
        java.lang.String str85 = type82.getClassName();
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier79.newValue(type82);
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier56.newValue(type82);
        org.mockito.asm.tree.analysis.Value value88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = simpleVerifier54.binaryOperation(abstractInsnNode55, value87, value88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)B" + "'", str33, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 102 + "'", int50 == 102);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)B" + "'", str74, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "float" + "'", str85, "float");
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test01728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01728");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        int int6 = type0.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type49, type52, type53, type57, type60 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type66, false);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier70.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier70.newValue(type73);
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type73, list78, true);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier7.newValue(type73);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type73, true);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean86 = type84.equals((java.lang.Object) 151);
        java.lang.String str87 = type84.getClassName();
        java.util.List list88 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type73, type84, list88, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode91 = null;
        java.util.List list92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier90.naryOperation(abstractInsnNode91, list92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)B" + "'", str65, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "char" + "'", str87, "char");
    }

    @Test
    public void test01729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01729");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("LB;");
        int int3 = type2.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value7 = simpleVerifier5.newOperation(abstractInsnNode6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test01730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01730");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list4, false);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = type12.getElementType();
        java.lang.String str14 = type13.getClassName();
        java.lang.String str15 = type13.getDescriptor();
        org.mockito.asm.Type type16 = type13.getElementType();
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier6.newValue(type16);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        java.util.List list19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value20 = simpleVerifier6.naryOperation(abstractInsnNode18, list19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str14, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str15, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(value17);
    }

    @Test
    public void test01731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01731");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type11, type14, type15, type19, type22 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type28, false);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier32.newValue(type33);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str9, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;", (java.lang.Throwable) analyzerException35);
        java.lang.String str37 = analyzerException36.toString();
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str9, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)B" + "'", str27, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str37, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
    }

    @Test
    public void test01732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01732");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int3 = type1.getOpcode(48);
        java.lang.String str4 = type1.getClassName();
        java.lang.String str5 = type1.getClassName();
        java.lang.String str6 = type1.getClassName();
        java.lang.String str7 = type1.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException10);
        java.lang.Class<?> wildcardClass12 = analyzerException10.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        boolean boolean17 = type15.equals((java.lang.Object) "Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        java.lang.String str18 = type15.getDescriptor();
        java.util.List list19 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type15, list19, false);
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type15, list22, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getDescriptor();
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter28.newValue(type32);
        org.mockito.asm.Type[] typeArray36 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray36);
        java.lang.Class<?> wildcardClass38 = typeArray36.getClass();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException43);
        java.lang.Class<?> wildcardClass45 = analyzerException43.getClass();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        java.lang.String str47 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass45);
        java.lang.String str48 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass45);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type67, false);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str48, value73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type39, value73);
        int int76 = type39.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type39, true);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getReturnType("(CBFCF)F");
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier78.newValue(type80);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value82 = simpleVerifier24.unaryOperation(abstractInsnNode25, value81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Z" + "'", str7, "Z");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str14, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str18, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "I" + "'", str33, "I");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)I" + "'", str37, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str47, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str48, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(value81);
    }

    @Test
    public void test01733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01733");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str54 = type53.getDescriptor();
        int int55 = type53.getSort();
        int int56 = type53.getSize();
        java.util.List list57 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type53, list57, true);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int62 = type60.getOpcode(48);
        java.lang.String str63 = type60.getClassName();
        java.lang.String str64 = type60.getClassName();
        java.lang.String str65 = type60.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) 151);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = type78.getClassName();
        org.mockito.asm.Type[] typeArray82 = new org.mockito.asm.Type[] { type67, type70, type71, type75, type78 };
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray82);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean86 = type84.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type66, type84, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type66, true);
        java.lang.String str91 = type60.getClassName();
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier59.newValue(type60);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode93 = null;
        java.util.List list94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = simpleVerifier59.naryOperation(abstractInsnNode93, list94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str51, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Lfloat;" + "'", str54, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 48 + "'", int62 == 48);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)B" + "'", str83, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "boolean" + "'", str91, "boolean");
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test01734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01734");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        java.lang.String str23 = type12.toString();
        int int24 = type12.getSort();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        java.lang.Class<?> wildcardClass31 = analyzerException29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type34, list35, true);
        org.mockito.asm.Type type38 = type34.getElementType();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type41, type44, type45, type49, type52 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type58, false);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier62.newValue(type63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier62.newValue(type65);
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type65, list70, true);
        int int74 = type65.getOpcode(100);
        org.mockito.asm.Type[] typeArray76 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray76);
        int int78 = type65.getSort();
        org.mockito.asm.Type[] typeArray80 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type65, typeArray80);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray80);
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray80);
        // The following exception was thrown during execution in test generation
        try {
            int int84 = type12.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "V" + "'", str23, "V");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)B" + "'", str57, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 102 + "'", int74 == 102);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)F" + "'", str77, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 6 + "'", int78 == 6);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)F" + "'", str81, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str82, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)V" + "'", str83, "(CBFCF)V");
    }

    @Test
    public void test01735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01735");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: int");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01736");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("LB;");
        int int3 = type2.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        java.util.List list7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value8 = simpleVerifier5.naryOperation(abstractInsnNode6, list7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test01737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01737");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        java.lang.Class<?> wildcardClass7 = analyzerException5.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, false);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str14 = type13.getDescriptor();
        int int15 = type13.getSort();
        java.util.List list16 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type13, list16, false);
        int int19 = type13.getSize();
        int int20 = type13.getSort();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type21, false);
        int int25 = type13.getOpcode(154);
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier10.newValue(type13);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type28, list29, true);
        java.lang.Class<?> wildcardClass32 = simpleVerifier31.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str36 = type35.getDescriptor();
        int int37 = type35.getSort();
        int int38 = type35.getSize();
        java.lang.String str39 = type35.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type35, true);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        int int44 = type42.getOpcode(101);
        int int46 = type42.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier41.newValue(type42);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        boolean boolean53 = type48.equals((java.lang.Object) 177);
        java.lang.String str54 = type48.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException57);
        java.lang.Class<?> wildcardClass59 = analyzerException57.getClass();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass59);
        int int62 = type60.getOpcode(114);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) 151);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.Type[] typeArray79 = new org.mockito.asm.Type[] { type64, type67, type68, type72, type75 };
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray79);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray79);
        boolean boolean82 = type48.equals((java.lang.Object) typeArray79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException85);
        java.lang.Throwable[] throwableArray87 = analyzerException86.getSuppressed();
        boolean boolean88 = type48.equals((java.lang.Object) analyzerException86);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        java.lang.Throwable[] throwableArray91 = analyzerException90.getSuppressed();
        boolean boolean92 = type48.equals((java.lang.Object) analyzerException90);
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier41.newValue(type48);
        int int94 = type48.getSize();
        java.lang.String str95 = type48.getDescriptor();
        org.mockito.asm.tree.analysis.Value value96 = simpleVerifier10.newValue(type48);
        org.mockito.asm.Type type98 = org.mockito.asm.Type.getObjectType("byte");
        org.mockito.asm.tree.analysis.Value value99 = simpleVerifier10.newValue(type98);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lfloat;" + "'", str14, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 158 + "'", int25 == 158);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lfloat;" + "'", str36, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "float" + "'", str39, "float");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 101 + "'", int44 == 101);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 191 + "'", int46 == 191);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "F" + "'", str54, "F");
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118 + "'", int62 == 118);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(CBFCF)B" + "'", str80, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str81, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "F" + "'", str95, "F");
        org.junit.Assert.assertNotNull(value96);
        org.junit.Assert.assertNotNull(type98);
        org.junit.Assert.assertNotNull(value99);
    }

    @Test
    public void test01738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01738");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        java.lang.String str15 = type12.getClassName();
        int int17 = type12.getOpcode(138);
        int int18 = type12.getSize();
        boolean boolean20 = type12.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier7.newValue(type12);
        int int23 = type12.getOpcode(0);
        int int25 = type12.getOpcode(0);
        org.mockito.asm.Type[] typeArray27 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray27);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray27);
        int int30 = type1.getSize();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type32, list33, true);
        java.lang.Class<?> wildcardClass36 = simpleVerifier35.getClass();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str40 = type39.getDescriptor();
        int int41 = type39.getSort();
        int int42 = type39.getSize();
        java.lang.String str43 = type39.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type39, true);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        int int48 = type46.getOpcode(101);
        int int50 = type46.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier45.newValue(type46);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException58.addSuppressed((java.lang.Throwable) analyzerException60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException62);
        boolean boolean64 = type52.equals((java.lang.Object) analyzerException63);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier45.newValue(type52);
        java.lang.String str66 = type52.getDescriptor();
        java.lang.String str67 = type52.getDescriptor();
        java.lang.String str68 = type52.getDescriptor();
        org.mockito.asm.Type[] typeArray70 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray70);
        java.util.List list72 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type52, list72, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value76 = simpleVerifier74.newOperation(abstractInsnNode75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "char" + "'", str15, "char");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 138 + "'", int17 == 138);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(CBFCF)C" + "'", str28, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;" + "'", str29, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Lfloat;" + "'", str40, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 101 + "'", int48 == 101);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 191 + "'", int50 == 191);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "F" + "'", str66, "F");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "F" + "'", str67, "F");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "F" + "'", str68, "F");
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)F" + "'", str71, "(CBFCF)F");
    }

    @Test
    public void test01739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01739");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException3);
        java.lang.Throwable[] throwableArray9 = analyzerException3.getSuppressed();
        java.lang.String str10 = analyzerException3.toString();
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str10, "org.mockito.asm.tree.analysis.AnalyzerException: ");
    }

    @Test
    public void test01740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01740");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier25.newValue(type28);
        int int33 = type28.getSize();
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type28, list34, true);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier36.newValue(type38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type41, type44, type45, type49, type52 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException62);
        java.lang.Class<?> wildcardClass64 = analyzerException62.getClass();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.lang.String str66 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.util.List list68 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type67, list68, true);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type59, list71, false);
        int int74 = type59.getDimensions();
        java.lang.String str75 = type59.getDescriptor();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier36.newValue(type59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        java.util.List list78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = simpleVerifier36.naryOperation(abstractInsnNode77, list78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)B" + "'", str57, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str66, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str75, "Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(value76);
    }

    @Test
    public void test01741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01741");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        java.lang.String str4 = type1.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "char" + "'", str4, "char");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)C" + "'", str23, "(CBFCF)C");
    }

    @Test
    public void test01742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01742");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str8 = type7.getDescriptor();
        int int9 = type7.getSort();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list10, false);
        java.lang.String str13 = type7.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, false);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int19 = type17.getOpcode(167);
        org.mockito.asm.Type type20 = type17.getElementType();
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier15.newValue(type17);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        boolean boolean27 = type22.equals((java.lang.Object) 177);
        java.lang.String str28 = type22.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException31);
        java.lang.Class<?> wildcardClass33 = analyzerException31.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        int int36 = type34.getOpcode(114);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type38, type41, type42, type46, type49 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray53);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray53);
        boolean boolean56 = type22.equals((java.lang.Object) typeArray53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException59);
        java.lang.Throwable[] throwableArray61 = analyzerException60.getSuppressed();
        boolean boolean62 = type22.equals((java.lang.Object) analyzerException60);
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier15.newValue(type22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type65, type66, true);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        boolean boolean80 = type75.equals((java.lang.Object) 177);
        int int81 = type75.getSize();
        java.lang.String str82 = type75.toString();
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter69.newValue(type75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException86);
        java.lang.Class<?> wildcardClass88 = analyzerException86.getClass();
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass88);
        java.lang.String str90 = type89.toString();
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter69.newValue(type89);
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier68.newValue(type89);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier15.copyOperation(abstractInsnNode64, value92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lfloat;" + "'", str8, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 171 + "'", int19 == 171);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "F" + "'", str28, "F");
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 118 + "'", int36 == 118);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)B" + "'", str54, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str55, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "F" + "'", str82, "F");
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str90, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test01743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01743");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.ternaryOperation(abstractInsnNode15, value16, value17, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter14.merge(value25, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.ternaryOperation(abstractInsnNode34, value35, value36, value37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.newValue(type49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter33.merge(value44, value50);
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier13.merge(value32, value44);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter6.copyOperation(abstractInsnNode12, value44);
        int int54 = value53.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter4.copyOperation(abstractInsnNode5, value53);
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.merge(value55, value56);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value59 = basicInterpreter0.newOperation(abstractInsnNode58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value57);
    }

    @Test
    public void test01744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01744");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("LB;");
        int int3 = type2.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType("J");
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type10, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value18 = simpleVerifier14.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        java.lang.String str22 = type19.getClassName();
        int int24 = type19.getOpcode(138);
        int int25 = type19.getSize();
        boolean boolean27 = type19.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier14.newValue(type19);
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type19, list29, false);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        int int34 = type32.getOpcode(101);
        java.lang.String str35 = type32.toString();
        int int36 = type32.getSort();
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier31.newValue(type32);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) (byte) 100);
        java.lang.String str41 = type38.getClassName();
        boolean boolean43 = type38.equals((java.lang.Object) 177);
        java.lang.String str44 = type38.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException47);
        java.lang.Class<?> wildcardClass49 = analyzerException47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        int int52 = type50.getOpcode(114);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray69);
        boolean boolean72 = type38.equals((java.lang.Object) typeArray69);
        int int73 = type38.getSort();
        int int75 = type38.getOpcode(114);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType("(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type77, true);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier31.newValue(type38);
        org.mockito.asm.tree.analysis.Value value81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value82 = simpleVerifier5.binaryOperation(abstractInsnNode6, value80, value81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "char" + "'", str22, "char");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 138 + "'", int24 == 138);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 101 + "'", int34 == 101);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "C" + "'", str35, "C");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "F" + "'", str44, "F");
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 118 + "'", int52 == 118);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str71, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 6 + "'", int73 == 6);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 116 + "'", int75 == 116);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(value80);
    }

    @Test
    public void test01745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01745");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str2 = type1.getClassName();
        java.util.List list3 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list3, false);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type7 = null;
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type7, list8, false);
        int int11 = type6.getSize();
        int int12 = type6.getSort();
        int int13 = type6.getSort();
        java.util.List list14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list14, true);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType("(CBFCF)LB;");
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier16.newValue(type18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.ternaryOperation(abstractInsnNode23, value24, value25, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter22.merge(value33, value39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str42 = type41.getDescriptor();
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter22.newValue(type41);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int47 = type45.getOpcode(8);
        int int49 = type45.getOpcode(163);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str53 = type52.getDescriptor();
        int int54 = type52.getSort();
        java.util.List list55 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type52, list55, false);
        int int58 = type52.getSize();
        int int59 = type52.getSort();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type60, false);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int65 = type63.getOpcode(48);
        java.lang.String str66 = type63.getClassName();
        java.lang.String str67 = type63.getClassName();
        java.util.List list68 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type63, list68, true);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type52, list71, false);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) 151);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type79 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) (byte) 100);
        java.lang.String str82 = type79.getClassName();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean85 = type83.equals((java.lang.Object) 151);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean88 = type86.equals((java.lang.Object) (byte) 100);
        java.lang.String str89 = type86.getClassName();
        org.mockito.asm.Type[] typeArray90 = new org.mockito.asm.Type[] { type75, type78, type79, type83, type86 };
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type74, typeArray90);
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier73.newValue(type74);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier16.binaryOperation(abstractInsnNode21, value43, value92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "byte" + "'", str2, "byte");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CBFCF)LB" + "'", str19, "CBFCF)LB");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "C" + "'", str42, "C");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 12 + "'", int47 == 12);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 167 + "'", int49 == 167);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Lfloat;" + "'", str53, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 48 + "'", int65 == 48);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "float" + "'", str82, "float");
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "float" + "'", str89, "float");
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(CBFCF)B" + "'", str91, "(CBFCF)B");
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test01746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01746");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str2 = type1.getClassName();
        java.util.List list3 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list3, false);
        org.mockito.asm.Type type6 = null;
        org.mockito.asm.tree.analysis.Value value7 = simpleVerifier5.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        java.util.List list9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value10 = simpleVerifier5.naryOperation(abstractInsnNode8, list9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "byte" + "'", str2, "byte");
        org.junit.Assert.assertNotNull(value7);
    }

    @Test
    public void test01747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01747");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(167);
        org.mockito.asm.Type type4 = type1.getElementType();
        int int5 = type1.getSort();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 24);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException31);
        java.lang.Class<?> wildcardClass33 = analyzerException31.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.lang.String str35 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type36, list37, true);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type28, list40, false);
        boolean boolean43 = type6.equals((java.lang.Object) type9);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, true);
        java.lang.Class<?> wildcardClass46 = type9.getClass();
        java.lang.String str47 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass46);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str35, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "org/mockito/asm/Type" + "'", str47, "org/mockito/asm/Type");
    }

    @Test
    public void test01748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01748");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = simpleVerifier5.newValue(type10);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value16 = simpleVerifier5.newOperation(abstractInsnNode15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(value14);
    }

    @Test
    public void test01749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01749");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier25.newValue(type28);
        int int33 = type28.getSize();
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type28, list34, true);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int38 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier36.newValue(type37);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type50, true);
        java.lang.String str55 = type50.getClassName();
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type50, list56, true);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str61 = type60.getDescriptor();
        java.lang.String str62 = type60.getInternalName();
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier58.newValue(type60);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter41.copyOperation(abstractInsnNode47, value63);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value65 = simpleVerifier36.copyOperation(abstractInsnNode40, value63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "void" + "'", str55, "void");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "LB;" + "'", str61, "LB;");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "B" + "'", str62, "B");
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
    }

    @Test
    public void test01750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01750");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier21.newValue(type23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        java.lang.String str30 = type27.getClassName();
        int int32 = type27.getOpcode(138);
        int int33 = type27.getSize();
        boolean boolean35 = type27.equals((java.lang.Object) 154);
        java.lang.String str36 = type27.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type27, true);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier21.newValue(type27);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int42 = type40.getOpcode(48);
        java.lang.String str43 = type40.getClassName();
        java.lang.String str44 = type40.getClassName();
        java.lang.String str45 = type40.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type64, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type46, true);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier70.newValue(type71);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str76 = type75.getDescriptor();
        int int77 = type75.getSort();
        int int78 = type75.getDimensions();
        int int80 = type75.getOpcode((int) (short) 10);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier70.newValue(type75);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier20.merge(value39, value81);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode83 = null;
        java.util.List list84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value85 = simpleVerifier20.naryOperation(abstractInsnNode83, list84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "char" + "'", str30, "char");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 138 + "'", int32 == 138);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "C" + "'", str36, "C");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 48 + "'", int42 == 48);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "long" + "'", str72, "long");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lfloat;" + "'", str76, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 14 + "'", int80 == 14);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
    }

    @Test
    public void test01751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01751");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter5.ternaryOperation(abstractInsnNode6, value7, value8, value9);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter11.copyOperation(abstractInsnNode12, value13);
        org.mockito.asm.Type type15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter11.newValue(type15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter5.merge(value16, value22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.ternaryOperation(abstractInsnNode26, value27, value28, value29);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter25.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.ternaryOperation(abstractInsnNode37, value38, value39, value40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter48.copyOperation(abstractInsnNode49, value50);
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter48.newValue(type52);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter36.merge(value47, value53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.ternaryOperation(abstractInsnNode56, value57, value58, value59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter61.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter61.newValue(type65);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter67 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter67.copyOperation(abstractInsnNode68, value69);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter67.newValue(type71);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter55.merge(value66, value72);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier35.merge(value54, value66);
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter25.copyOperation(abstractInsnNode34, value66);
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter5.copyOperation(abstractInsnNode24, value66);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value77 = simpleVerifier0.unaryOperation(abstractInsnNode4, value66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNull(value70);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
    }

    @Test
    public void test01752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01752");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        int int5 = type0.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type7, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.ternaryOperation(abstractInsnNode14, value15, value16, value17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter13.merge(value24, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.ternaryOperation(abstractInsnNode33, value34, value35, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter32.merge(value43, value49);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier12.merge(value31, value43);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type71, false);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier75.newValue(type76);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = type78.getClassName();
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier75.newValue(type78);
        java.util.List list83 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type78, list83, true);
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier12.newValue(type78);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier12.newValue(type87);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.CHAR_TYPE;
        int int91 = type89.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier12.newValue(type89);
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier11.newValue(type89);
        java.util.List list94 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier96 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type89, list94, true);
        org.mockito.asm.Type type98 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.Value value99 = simpleVerifier96.newValue(type98);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 101 + "'", int91 == 101);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(type98);
        org.junit.Assert.assertNotNull(value99);
    }

    @Test
    public void test01753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01753");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type15, type18, type19, type23, type26 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray30);
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray30);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray30);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type35, type38, type39, type43, type46 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type52, false);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier56.newValue(type57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type60, type63, type64, type68, type71 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type77, false);
        java.lang.String str82 = type59.getClassName();
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier56.newValue(type59);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier56.newValue(type84);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int88 = type86.getOpcode(48);
        java.lang.String str89 = type86.getClassName();
        java.lang.String str90 = type86.getClassName();
        int int92 = type86.getOpcode(119);
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier56.newValue(type86);
        java.lang.String str94 = type86.getClassName();
        org.mockito.asm.Type[] typeArray96 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lfloat;");
        java.lang.String str97 = org.mockito.asm.Type.getMethodDescriptor(type86, typeArray96);
        java.lang.String str98 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray96);
        java.lang.String str99 = type6.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "char" + "'", str13, "char");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(CBFCF)B" + "'", str31, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)C" + "'", str32, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)C" + "'", str33, "(CBFCF)C");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(CBFCF)B" + "'", str51, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)B" + "'", str76, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "byte" + "'", str82, "byte");
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 48 + "'", int88 == 48);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "boolean" + "'", str89, "boolean");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "boolean" + "'", str90, "boolean");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 119 + "'", int92 == 119);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "boolean" + "'", str94, "boolean");
        org.junit.Assert.assertNotNull(typeArray96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "(CBFCF)Z" + "'", str97, "(CBFCF)Z");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "(CBFCF)C" + "'", str98, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "C" + "'", str99, "C");
    }

    @Test
    public void test01754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01754");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str13 = type12.getDescriptor();
        java.lang.String str14 = type12.getInternalName();
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier10.newValue(type12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        java.lang.String str19 = type16.getClassName();
        int int21 = type16.getOpcode(138);
        int int22 = type16.getSize();
        org.mockito.asm.tree.analysis.Value value23 = simpleVerifier10.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        java.lang.Class<?> wildcardClass43 = value41.getClass();
        java.lang.String str44 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier10.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int53 = type51.getOpcode(48);
        java.lang.String str54 = type51.getClassName();
        java.lang.String str55 = type51.getClassName();
        java.lang.String str56 = type51.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type58, type61, type62, type66, type69 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type57, type75, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type57, true);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter47.newValue(type51);
        java.lang.String str83 = type51.getClassName();
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier10.newValue(type51);
        // The following exception was thrown during execution in test generation
        try {
            int int85 = type51.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LB;" + "'", str13, "LB;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "B" + "'", str14, "B");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "char" + "'", str19, "char");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 138 + "'", int21 == 138);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str44, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 48 + "'", int53 == 48);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)B" + "'", str74, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "boolean" + "'", str83, "boolean");
        org.junit.Assert.assertNotNull(value84);
    }

    @Test
    public void test01755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01755");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        int int7 = type5.getOpcode(114);
        java.lang.Class<?> wildcardClass8 = type5.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        int int11 = type10.getSize();
        org.mockito.asm.Type type12 = type10.getElementType();
        int int13 = type12.getDimensions();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 118 + "'", int7 == 118);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test01756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01756");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str2 = type1.getClassName();
        java.util.List list3 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list3, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        java.util.List list7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value8 = simpleVerifier5.naryOperation(abstractInsnNode6, list7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "byte" + "'", str2, "byte");
    }

    @Test
    public void test01757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01757");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        boolean boolean11 = type6.equals((java.lang.Object) 177);
        int int12 = type6.getSize();
        java.lang.String str13 = type6.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getDescriptor();
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter16.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type24, true);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier28.newValue(type29);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type38, type41, type42, type46, type49 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray53);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray53);
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray53);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter16.newValue(type29);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter0.copyOperation(abstractInsnNode15, value57);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        java.util.List list60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.naryOperation(abstractInsnNode59, list60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "I" + "'", str21, "I");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "char" + "'", str36, "char");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)B" + "'", str54, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)C" + "'", str55, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)C" + "'", str56, "(CBFCF)C");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
    }

    @Test
    public void test01758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01758");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value10 = simpleVerifier7.newValue(type9);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.ternaryOperation(abstractInsnNode13, value14, value15, value16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter24.copyOperation(abstractInsnNode25, value26);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter12.merge(value23, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.ternaryOperation(abstractInsnNode32, value33, value34, value35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter31.merge(value42, value48);
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier11.merge(value30, value42);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type53, type56, type57, type61, type64 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type70, false);
        org.mockito.asm.Type type75 = null;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier74.newValue(type75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) (byte) 100);
        java.lang.String str80 = type77.getClassName();
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier74.newValue(type77);
        java.util.List list82 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier84 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type77, list82, true);
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier11.newValue(type77);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier11.newValue(type86);
        java.lang.String str88 = type86.toString();
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier7.newValue(type86);
        java.util.List list90 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type86, list90, true);
        java.lang.Class<?> wildcardClass93 = type0.getClass();
        java.lang.String str94 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass93);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)B" + "'", str69, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "float" + "'", str80, "float");
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "C" + "'", str88, "C");
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org/mockito/asm/Type" + "'", str94, "org/mockito/asm/Type");
    }

    @Test
    public void test01759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01759");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str78 = type77.toString();
        int int79 = type77.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type75, type77, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        java.util.List list83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value84 = simpleVerifier81.naryOperation(abstractInsnNode82, list83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "J" + "'", str78, "J");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
    }

    @Test
    public void test01760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01760");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int2 = type1.getSort();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType("I");
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, list5, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str15 = type14.getDescriptor();
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter10.newValue(type14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.ternaryOperation(abstractInsnNode18, value19, value20, value21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.newValue(type33);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter17.merge(value28, value34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str37 = type36.getDescriptor();
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter17.newValue(type36);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier39.newValue(type41);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type45, type48, type49, type53, type56 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type62, false);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier66.newValue(type67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier66.newValue(type69);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier43.newValue(type69);
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter17.merge(value42, value74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("LLB;;", (java.lang.Object) value16, value74);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value77 = simpleVerifier7.copyOperation(abstractInsnNode8, value16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "I" + "'", str15, "I");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "C" + "'", str37, "C");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(CBFCF)B" + "'", str61, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
    }

    @Test
    public void test01761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01761");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type27, false);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier31.newValue(type32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier31.newValue(type34);
        java.lang.Object obj37 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.ternaryOperation(abstractInsnNode45, value46, value47, value48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter56.copyOperation(abstractInsnNode57, value58);
        org.mockito.asm.Type type60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter56.newValue(type60);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter44.merge(value55, value61);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.ternaryOperation(abstractInsnNode64, value65, value66, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter63.merge(value74, value80);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier43.merge(value62, value74);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter38.copyOperation(abstractInsnNode42, value82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj37, value83);
        java.lang.Class<?> wildcardClass85 = value83.getClass();
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass85);
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier31.newValue(type86);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) 141, value87);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = basicInterpreter0.unaryOperation(abstractInsnNode6, value87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test01762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01762");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.ternaryOperation(abstractInsnNode14, value15, value16, value17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter13.merge(value24, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.ternaryOperation(abstractInsnNode33, value34, value35, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter32.merge(value43, value49);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier12.merge(value31, value43);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter7.copyOperation(abstractInsnNode11, value51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.ternaryOperation(abstractInsnNode54, value55, value56, value57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter59.copyOperation(abstractInsnNode60, value61);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter59.newValue(type63);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter65 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter65.copyOperation(abstractInsnNode66, value67);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter65.newValue(type69);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter53.merge(value64, value70);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter72.ternaryOperation(abstractInsnNode73, value74, value75, value76);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter78 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter78.copyOperation(abstractInsnNode79, value80);
        org.mockito.asm.Type type82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter78.newValue(type82);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter84 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        org.mockito.asm.tree.analysis.Value value86 = null;
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter84.copyOperation(abstractInsnNode85, value86);
        org.mockito.asm.Type type88 = null;
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter84.newValue(type88);
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter72.merge(value83, value89);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter0.ternaryOperation(abstractInsnNode6, value51, value71, value90);
        int int92 = value71.getSize();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNull(value87);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNull(value91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test01763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01763");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        int int35 = type26.getOpcode(100);
        org.mockito.asm.Type[] typeArray37 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray37);
        java.lang.Class<?> wildcardClass39 = type26.getClass();
        java.lang.String str40 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        java.lang.String str44 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass39);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 102 + "'", int35 == 102);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)F" + "'", str38, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str40, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str44, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test01764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01764");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str2 = type1.toString();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getReturnType("(CBFCF)Lbyte;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, true);
        java.lang.Object obj8 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.ternaryOperation(abstractInsnNode16, value17, value18, value19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.newValue(type25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter27.copyOperation(abstractInsnNode28, value29);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter15.merge(value26, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.ternaryOperation(abstractInsnNode35, value36, value37, value38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.newValue(type50);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter34.merge(value45, value51);
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier14.merge(value33, value45);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter9.copyOperation(abstractInsnNode13, value53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj8, value54);
        java.lang.Class<?> wildcardClass56 = value54.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType("V");
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type57, type59, list60, true);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier6.newValue(type63);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter72.ternaryOperation(abstractInsnNode73, value74, value75, value76);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter78 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter78.copyOperation(abstractInsnNode79, value80);
        org.mockito.asm.Type type82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter78.newValue(type82);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter84 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        org.mockito.asm.tree.analysis.Value value86 = null;
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter84.copyOperation(abstractInsnNode85, value86);
        org.mockito.asm.Type type88 = null;
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter84.newValue(type88);
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter72.merge(value83, value89);
        int int91 = value90.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/AnalyzerException", (java.lang.Object) 6, value90);
        int int93 = value90.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value94 = simpleVerifier6.unaryOperation(abstractInsnNode69, value90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;" + "'", str2, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "char" + "'", str66, "char");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNull(value87);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test01765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01765");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter3.ternaryOperation(abstractInsnNode4, value5, value6, value7);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.Type type13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter9.newValue(type13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter3.merge(value14, value20);
        int int22 = value21.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/AnalyzerException", (java.lang.Object) 6, value21);
        java.lang.Throwable[] throwableArray24 = analyzerException23.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("()Lorg/mockito/asm/tree/analysis/SimpleVerifier;", (java.lang.Throwable) analyzerException23);
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException32.addSuppressed((java.lang.Throwable) analyzerException34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException39.addSuppressed((java.lang.Throwable) analyzerException41);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException39);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException43);
        analyzerException34.addSuppressed((java.lang.Throwable) analyzerException43);
        analyzerException30.addSuppressed((java.lang.Throwable) analyzerException34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("Lfloat;", (java.lang.Throwable) analyzerException34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException50.addSuppressed((java.lang.Throwable) analyzerException52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException50);
        java.lang.Throwable[] throwableArray55 = analyzerException54.getSuppressed();
        analyzerException47.addSuppressed((java.lang.Throwable) analyzerException54);
        java.lang.Throwable[] throwableArray57 = analyzerException47.getSuppressed();
        java.lang.Throwable[] throwableArray58 = analyzerException47.getSuppressed();
        analyzerException25.addSuppressed((java.lang.Throwable) analyzerException47);
        java.lang.String str60 = analyzerException25.toString();
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: ()Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str60, "org.mockito.asm.tree.analysis.AnalyzerException: ()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
    }

    @Test
    public void test01766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01766");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier32.newValue(type34);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str38 = type37.getInternalName();
        java.lang.String str39 = type37.toString();
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier32.newValue(type37);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value42 = simpleVerifier32.newOperation(abstractInsnNode41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "LB;" + "'", str38, "LB;");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "LLB;;" + "'", str39, "LLB;;");
        org.junit.Assert.assertNotNull(value40);
    }

    @Test
    public void test01767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01767");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, list10, true);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        boolean boolean18 = type13.equals((java.lang.Object) 177);
        int int20 = type13.getOpcode(167);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier12.newValue(type13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier23.newValue(type25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        boolean boolean32 = type27.equals((java.lang.Object) 177);
        java.lang.String str33 = type27.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException36);
        java.lang.Class<?> wildcardClass38 = analyzerException36.getClass();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        int int41 = type39.getOpcode(114);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type43, type46, type47, type51, type54 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray58);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray58);
        boolean boolean61 = type27.equals((java.lang.Object) typeArray58);
        int int62 = type27.getSort();
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier23.newValue(type27);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value64 = simpleVerifier12.unaryOperation(abstractInsnNode22, value63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 169 + "'", int20 == 169);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "F" + "'", str33, "F");
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 118 + "'", int41 == 118);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)B" + "'", str59, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str60, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 6 + "'", int62 == 6);
        org.junit.Assert.assertNotNull(value63);
    }

    @Test
    public void test01768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01768");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        int int4 = type0.getSize();
        java.lang.String str5 = type0.getDescriptor();
        int int6 = type0.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Z" + "'", str5, "Z");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test01769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01769");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("double");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type5, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        java.util.List list9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value10 = simpleVerifier7.naryOperation(abstractInsnNode8, list9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(type5);
    }

    @Test
    public void test01770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01770");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int3 = type1.getOpcode(8);
        int int5 = type1.getOpcode(163);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, list11, false);
        int int14 = type8.getSize();
        int int15 = type8.getSort();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type16, false);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int21 = type19.getOpcode(48);
        java.lang.String str22 = type19.getClassName();
        java.lang.String str23 = type19.getClassName();
        java.util.List list24 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type19, list24, true);
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, list27, false);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type31, type34, type35, type39, type42 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier29.newValue(type30);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        java.util.List list50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value51 = simpleVerifier29.naryOperation(abstractInsnNode49, list50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 167 + "'", int5 == 167);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 48 + "'", int21 == 48);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)B" + "'", str47, "(CBFCF)B");
        org.junit.Assert.assertNotNull(value48);
    }

    @Test
    public void test01771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01771");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException23);
        java.lang.Class<?> wildcardClass25 = analyzerException23.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = type26.getElementType();
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier20.newValue(type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        boolean boolean34 = type29.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException37);
        java.lang.Class<?> wildcardClass39 = analyzerException37.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type41 = type40.getElementType();
        java.lang.String str42 = type41.getClassName();
        java.lang.String str43 = type41.getDescriptor();
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type41, list44, false);
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type29, list47, true);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.LONG_TYPE;
        int int51 = type50.getSort();
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier49.newValue(type50);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int55 = type53.getOpcode(48);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.Type[] typeArray72 = new org.mockito.asm.Type[] { type57, type60, type61, type65, type68 };
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray72);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean76 = type74.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type74, false);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier78.newValue(type79);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean83 = type81.equals((java.lang.Object) (byte) 100);
        java.lang.String str84 = type81.getClassName();
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier78.newValue(type81);
        int int86 = type81.getSize();
        java.util.List list87 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type81, list87, true);
        org.mockito.asm.Type type91 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier89.newValue(type91);
        org.mockito.asm.Type type94 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int96 = type94.getOpcode(8);
        java.lang.String str97 = type94.getClassName();
        org.mockito.asm.tree.analysis.Value value98 = simpleVerifier89.newValue(type94);
        org.mockito.asm.tree.analysis.Value value99 = simpleVerifier49.newValue(type94);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str42, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str43, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 48 + "'", int55 == 48);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(CBFCF)B" + "'", str73, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "float" + "'", str84, "float");
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 12 + "'", int96 == 12);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str97, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(value98);
        org.junit.Assert.assertNotNull(value99);
    }

    @Test
    public void test01772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01772");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        int int2 = type1.getSize();
        int int3 = type1.getSize();
        java.lang.String str4 = type1.toString();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 24);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type35, list36, true);
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type27, list39, false);
        boolean boolean42 = type5.equals((java.lang.Object) type8);
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, list43, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type50 = null;
        java.util.List list51 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type50, list51, false);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type59, type62, type63, type67, type70 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray74);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException79);
        java.lang.Class<?> wildcardClass81 = analyzerException79.getClass();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        java.lang.String str83 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type84, true);
        boolean boolean88 = type84.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier53.newValue(type84);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.FLOAT_TYPE;
        int int91 = type90.getSize();
        java.lang.String str92 = type90.getClassName();
        int int93 = type90.getSize();
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier53.newValue(type90);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = simpleVerifier45.ternaryOperation(abstractInsnNode46, value47, value48, value94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lhi!;" + "'", str4, "Lhi!;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "char" + "'", str57, "char");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)B" + "'", str75, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)C" + "'", str76, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str83, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "float" + "'", str92, "float");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test01773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01773");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int4 = type0.getSize();
        int int6 = type0.getOpcode(148);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        boolean boolean37 = type32.equals((java.lang.Object) 177);
        int int38 = type32.getSize();
        java.lang.String str39 = type32.toString();
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.newValue(type32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter26.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        int int46 = type44.getOpcode(101);
        java.lang.String str47 = type44.toString();
        int int48 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter26.newValue(type44);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type44, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value53 = simpleVerifier51.newOperation(abstractInsnNode52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 148 + "'", int6 == 148);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)C" + "'", str25, "(CBFCF)C");
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "F" + "'", str39, "F");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 101 + "'", int46 == 101);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "C" + "'", str47, "C");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
    }

    @Test
    public void test01774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01774");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value26 = simpleVerifier22.newOperation(abstractInsnNode25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(value24);
    }

    @Test
    public void test01775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01775");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.BasicValue");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01776");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        int int11 = type0.getSize();
        int int13 = type0.getOpcode(12);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
    }

    @Test
    public void test01777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01777");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str2 = type1.getClassName();
        java.lang.String str3 = type1.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        int int7 = type5.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value8 = simpleVerifier4.newValue(type5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type1, value8);
        java.lang.Class<?> wildcardClass10 = value8.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "long" + "'", str2, "long");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "long" + "'", str3, "long");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 101 + "'", int7 == 101);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test01778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01778");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str2 = type1.toString();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getReturnType("(CBFCF)Lbyte;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        java.util.List list8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value9 = simpleVerifier6.naryOperation(abstractInsnNode7, list8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;" + "'", str2, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        org.junit.Assert.assertNotNull(type4);
    }

    @Test
    public void test01779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01779");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("g/mockito/asm/tree/analysis/AnalyzerException");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01780");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter0.newValue(type6);
        java.lang.Class<?> wildcardClass9 = basicInterpreter0.getClass();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "long" + "'", str7, "long");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test01781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01781");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.String str5 = type1.getClassName();
        java.lang.String str6 = type1.getDescriptor();
        java.lang.String str7 = type1.getClassName();
        int int8 = type1.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Z" + "'", str6, "Z");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test01782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01782");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier25.newValue(type28);
        int int33 = type28.getSize();
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type28, list34, true);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier36.newValue(type38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int43 = type41.getOpcode(8);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier36.newValue(type41);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str48 = type47.getDescriptor();
        int int49 = type47.getSort();
        int int50 = type47.getDimensions();
        int int52 = type47.getOpcode((int) (short) 10);
        int int53 = type47.getSort();
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier36.newValue(type47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str59 = type58.getDescriptor();
        int int60 = type58.getSort();
        java.util.List list61 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type58, list61, false);
        int int64 = type58.getSize();
        int int65 = type58.getSort();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type66, false);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int71 = type69.getOpcode(48);
        java.lang.String str72 = type69.getClassName();
        java.lang.String str73 = type69.getClassName();
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type69, list74, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException79);
        java.lang.Class<?> wildcardClass81 = analyzerException79.getClass();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        org.mockito.asm.Type type83 = type82.getElementType();
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier76.newValue(type83);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value85 = simpleVerifier36.unaryOperation(abstractInsnNode55, value84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 12 + "'", int43 == 12);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str44, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Lfloat;" + "'", str48, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 14 + "'", int52 == 14);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Lfloat;" + "'", str59, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 48 + "'", int71 == 48);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "boolean" + "'", str72, "boolean");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "boolean" + "'", str73, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(value84);
    }

    @Test
    public void test01783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01783");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str53 = type52.getDescriptor();
        boolean boolean54 = type51.equals((java.lang.Object) type52);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list57 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type56, list57, true);
        boolean boolean60 = type51.equals((java.lang.Object) simpleVerifier59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        java.util.List list62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value63 = simpleVerifier59.naryOperation(abstractInsnNode61, list62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "I" + "'", str53, "I");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test01784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01784");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int13 = type11.getOpcode(48);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type15, type18, type19, type23, type26 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type32, false);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier36.newValue(type37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier36.newValue(type39);
        int int44 = type39.getSize();
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type39, list45, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type39, false);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 24);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException75);
        java.lang.Class<?> wildcardClass77 = analyzerException75.getClass();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        java.lang.String str79 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        java.util.List list81 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type72, type80, list81, true);
        java.util.List list84 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type72, list84, false);
        boolean boolean87 = type50.equals((java.lang.Object) type53);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier49.newValue(type53);
        int int90 = type53.getOpcode(137);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 48 + "'", int13 == 48);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(CBFCF)B" + "'", str31, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str79, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 137 + "'", int90 == 137);
    }

    @Test
    public void test01785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01785");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value9, value10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter7.merge(value18, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier6.merge(value25, value37);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type48, type51, type52, type56, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type65, false);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier69.newValue(type70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier69.newValue(type72);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type72, list77, true);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier6.newValue(type72);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier6.newValue(type81);
        boolean boolean84 = type81.equals((java.lang.Object) "I");
        int int86 = type81.getOpcode(8);
        java.util.List list87 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type81, list87, false);
        org.mockito.asm.Type type91 = org.mockito.asm.Type.getReturnType("(CBFCF)Lbyte;");
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier89.newValue(type91);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode93 = null;
        java.util.List list94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = simpleVerifier89.naryOperation(abstractInsnNode93, list94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Z" + "'", str5, "Z");
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)B" + "'", str64, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 8 + "'", int86 == 8);
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test01786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01786");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        java.lang.String str11 = type2.toString();
        java.lang.String str12 = type2.toString();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type[] typeArray29 = new org.mockito.asm.Type[] { type14, type17, type18, type22, type25 };
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        java.lang.Class<?> wildcardClass37 = analyzerException35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type40, list41, true);
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type32, list44, false);
        int int47 = type32.getDimensions();
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type32, list48, false);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 193);
        java.lang.Class<?> wildcardClass54 = type51.getClass();
        java.lang.String str55 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass54);
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass54);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier50.newValue(type57);
        int int60 = type57.getOpcode(121);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "V" + "'", str11, "V");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "V" + "'", str12, "V");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)B" + "'", str30, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str39, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org/mockito/asm/Type" + "'", str55, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/Type" + "'", str56, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 125 + "'", int60 == 125);
    }

    @Test
    public void test01787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01787");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        int int23 = type12.getSort();
        int int24 = type12.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = type12.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test01788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01788");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier32.newValue(type34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type37, list38, true);
        java.lang.Class<?> wildcardClass41 = simpleVerifier40.getClass();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str45 = type44.getDescriptor();
        int int46 = type44.getSort();
        int int47 = type44.getSize();
        java.lang.String str48 = type44.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type44, true);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        int int53 = type51.getOpcode(101);
        int int55 = type51.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier50.newValue(type51);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException63.addSuppressed((java.lang.Throwable) analyzerException65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException67);
        boolean boolean69 = type57.equals((java.lang.Object) analyzerException68);
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier50.newValue(type57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter71.ternaryOperation(abstractInsnNode72, value73, value74, value75);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter77.copyOperation(abstractInsnNode78, value79);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter77.newValue(type81);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter83 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter83.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.Type type87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter83.newValue(type87);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter71.merge(value82, value88);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier32.merge(value70, value88);
        int int91 = value70.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lfloat;" + "'", str45, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 101 + "'", int53 == 101);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 191 + "'", int55 == 191);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test01789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01789");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter0.copyOperation(abstractInsnNode6, value7);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter11.ternaryOperation(abstractInsnNode12, value13, value14, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter11.merge(value22, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.ternaryOperation(abstractInsnNode31, value32, value33, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter30.merge(value41, value47);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier10.merge(value29, value41);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter0.copyOperation(abstractInsnNode9, value41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type53, type56, type57, type61, type64 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type70, false);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier74.newValue(type75);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter0.copyOperation(abstractInsnNode51, value76);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str80 = type79.getClassName();
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter0.newValue(type79);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getReturnType("LLB;;");
        int int84 = type83.getDimensions();
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter0.newValue(type83);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value87 = basicInterpreter0.newOperation(abstractInsnNode86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)B" + "'", str69, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "LB;" + "'", str80, "LB;");
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(value85);
    }

    @Test
    public void test01790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01790");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter0.copyOperation(abstractInsnNode7, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        boolean boolean39 = type34.equals((java.lang.Object) 177);
        int int40 = type34.getSize();
        java.lang.String str41 = type34.toString();
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter28.newValue(type34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException45);
        java.lang.Class<?> wildcardClass47 = analyzerException45.getClass();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass47);
        java.lang.String str49 = type48.toString();
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter28.newValue(type48);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.ternaryOperation(abstractInsnNode53, value54, value55, value56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.newValue(type62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter64 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter64.copyOperation(abstractInsnNode65, value66);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter64.newValue(type68);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter52.merge(value63, value69);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter71.ternaryOperation(abstractInsnNode72, value73, value74, value75);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter77.copyOperation(abstractInsnNode78, value79);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter77.newValue(type81);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter83 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter83.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.Type type87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter83.newValue(type87);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter71.merge(value82, value88);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier51.merge(value70, value82);
        int int91 = value82.getSize();
        int int92 = value82.getSize();
        int int93 = value82.getSize();
        org.mockito.asm.tree.analysis.Value value94 = basicInterpreter0.merge(value50, value82);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode95 = null;
        java.util.List list96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value97 = basicInterpreter0.naryOperation(abstractInsnNode95, list96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "F" + "'", str41, "F");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str49, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test01791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01791");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        boolean boolean16 = type14.equals((java.lang.Object) "Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        java.lang.String str17 = type14.getDescriptor();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type14, list18, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type25, true);
        java.lang.String str30 = type25.getClassName();
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type25, list31, true);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str36 = type35.getDescriptor();
        java.lang.String str37 = type35.getInternalName();
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier33.newValue(type35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        java.lang.String str42 = type39.getClassName();
        int int44 = type39.getOpcode(138);
        int int45 = type39.getSize();
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier33.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.ternaryOperation(abstractInsnNode48, value49, value50, value51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter53.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.newValue(type57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter59.copyOperation(abstractInsnNode60, value61);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter59.newValue(type63);
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter47.merge(value58, value64);
        java.lang.Class<?> wildcardClass66 = value64.getClass();
        java.lang.String str67 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier33.newValue(type68);
        int int70 = value69.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value71 = simpleVerifier20.binaryOperation(abstractInsnNode21, value22, value69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Z" + "'", str6, "Z");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str13, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str17, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "void" + "'", str30, "void");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "LB;" + "'", str36, "LB;");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "B" + "'", str37, "B");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "char" + "'", str42, "char");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 138 + "'", int44 == 138);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str67, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test01792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01792");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Throwable) analyzerException4);
        java.lang.String str6 = analyzerException5.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: V" + "'", str6, "org.mockito.asm.tree.analysis.AnalyzerException: V");
    }

    @Test
    public void test01793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01793");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type26, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.ternaryOperation(abstractInsnNode33, value34, value35, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter32.merge(value43, value49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.ternaryOperation(abstractInsnNode52, value53, value54, value55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.newValue(type61);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter63.copyOperation(abstractInsnNode64, value65);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.newValue(type67);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter51.merge(value62, value68);
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier31.merge(value50, value62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter71.ternaryOperation(abstractInsnNode72, value73, value74, value75);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter77.copyOperation(abstractInsnNode78, value79);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter77.newValue(type81);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter83 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter83.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.Type type87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter83.newValue(type87);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter71.merge(value82, value88);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier30.merge(value70, value82);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter0.copyOperation(abstractInsnNode7, value82);
        java.lang.Class<?> wildcardClass92 = value82.getClass();
        org.mockito.asm.Type type93 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass92);
        java.lang.String str94 = type93.getDescriptor();
        int int95 = type93.getSize();
        java.lang.String str96 = type93.toString();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str94, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str96, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test01794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01794");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        boolean boolean8 = type0.equals((java.lang.Object) 154);
        java.lang.String str9 = type0.getDescriptor();
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/Type" + "'", str11, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test01795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01795");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01796");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: : expected class org.mockito.asm.tree.analysis.SimpleVerifier, but found .");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01797");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Throwable[] throwableArray4 = analyzerException2.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException12);
        java.lang.Class<?> wildcardClass14 = analyzerException13.getClass();
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.ternaryOperation(abstractInsnNode23, value24, value25, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter22.merge(value33, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.ternaryOperation(abstractInsnNode42, value43, value44, value45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter53.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.newValue(type57);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter41.merge(value52, value58);
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier21.merge(value40, value52);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter16.copyOperation(abstractInsnNode20, value60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .", (java.lang.Object) wildcardClass14, value60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)S", (java.lang.Throwable) analyzerException63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/SimpleVerifier", (java.lang.Throwable) analyzerException63);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter73 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter73.ternaryOperation(abstractInsnNode74, value75, value76, value77);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter79 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode80 = null;
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter79.copyOperation(abstractInsnNode80, value81);
        org.mockito.asm.Type type83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter79.newValue(type83);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter85 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode86 = null;
        org.mockito.asm.tree.analysis.Value value87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter85.copyOperation(abstractInsnNode86, value87);
        org.mockito.asm.Type type89 = null;
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter85.newValue(type89);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter73.merge(value84, value90);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode70, value91);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException92);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException94 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException93);
        analyzerException65.addSuppressed((java.lang.Throwable) analyzerException93);
        java.lang.Throwable[] throwableArray96 = analyzerException65.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException97 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException65);
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException97);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str15, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNull(value82);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNull(value88);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(throwableArray96);
    }

    @Test
    public void test01798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01798");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str8 = type7.getDescriptor();
        int int9 = type7.getSort();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list10, false);
        java.lang.String str13 = type7.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, false);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        int int18 = type16.getOpcode(101);
        java.lang.String str19 = type16.toString();
        int int20 = type16.getSort();
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier15.newValue(type16);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        java.util.List list23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value24 = simpleVerifier15.naryOperation(abstractInsnNode22, list23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lfloat;" + "'", str8, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 101 + "'", int18 == 101);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "C" + "'", str19, "C");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(value21);
    }

    @Test
    public void test01799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01799");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int6 = type4.getOpcode(48);
        java.lang.String str7 = type4.getClassName();
        java.lang.String str8 = type4.getClassName();
        java.lang.String str9 = type4.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type11, type14, type15, type19, type22 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type28, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type10, true);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter0.newValue(type4);
        int int36 = type4.getSort();
        int int38 = type4.getOpcode(169);
        boolean boolean40 = type4.equals((java.lang.Object) 180);
        int int42 = type4.getOpcode(49);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type43, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = type4.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)B" + "'", str27, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 169 + "'", int38 == 169);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 49 + "'", int42 == 49);
    }

    @Test
    public void test01800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01800");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        java.lang.Class<?> wildcardClass77 = simpleVerifier0.getClass();
        java.lang.String str78 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        java.lang.String str80 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass77);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str78, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str80, "org/mockito/asm/tree/analysis/SimpleVerifier");
    }

    @Test
    public void test01801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01801");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException2);
        java.lang.Throwable[] throwableArray7 = analyzerException2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test01802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01802");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException22);
        java.lang.Class<?> wildcardClass24 = analyzerException22.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type27, list28, true);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type19, list31, false);
        java.lang.String str34 = type19.getInternalName();
        int int35 = type19.getDimensions();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type36 = type19.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str26, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str34, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
    }

    @Test
    public void test01803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01803");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException7);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: boolean", (java.lang.Throwable) analyzerException8);
        java.lang.String str11 = analyzerException10.toString();
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: boolean" + "'", str11, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: boolean");
    }

    @Test
    public void test01804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01804");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.getDescriptor();
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter2.newValue(type6);
        org.mockito.asm.Type[] typeArray10 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray10);
        java.lang.Class<?> wildcardClass12 = typeArray10.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException17);
        java.lang.Class<?> wildcardClass19 = analyzerException17.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        java.lang.String str22 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type24, type27, type28, type32, type35 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type41, false);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str22, value47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type13, value47);
        int int50 = type13.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type13, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type55 = null;
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type55, list56, false);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) 151);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.Type[] typeArray79 = new org.mockito.asm.Type[] { type64, type67, type68, type72, type75 };
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray79);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException84);
        java.lang.Class<?> wildcardClass86 = analyzerException84.getClass();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass86);
        java.lang.String str88 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass86);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass86);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier91 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type89, true);
        boolean boolean93 = type89.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier58.newValue(type89);
        org.mockito.asm.Type type95 = null;
        org.mockito.asm.tree.analysis.Value value96 = simpleVerifier58.newValue(type95);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value97 = simpleVerifier52.copyOperation(abstractInsnNode53, value96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "I" + "'", str7, "I");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(CBFCF)I" + "'", str11, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str21, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str22, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)B" + "'", str40, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "char" + "'", str62, "char");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(CBFCF)B" + "'", str80, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)C" + "'", str81, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str88, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertNotNull(value96);
    }

    @Test
    public void test01805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01805");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException15.addSuppressed((java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException19);
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException19);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("byte", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("Lfloat;", (java.lang.Throwable) analyzerException24);
        java.lang.String str26 = analyzerException25.toString();
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: Lfloat;" + "'", str26, "org.mockito.asm.tree.analysis.AnalyzerException: Lfloat;");
    }

    @Test
    public void test01806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01806");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier0.newValue(type40);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value43 = simpleVerifier0.newOperation(abstractInsnNode42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value41);
    }

    @Test
    public void test01807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01807");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.getClassName();
        int int24 = type0.getSort();
        int int26 = type0.getOpcode(148);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        java.lang.String str30 = type27.getClassName();
        int int31 = type27.getSize();
        int int33 = type27.getOpcode(148);
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type27, list34, true);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType("B");
        org.mockito.asm.Type type39 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type40, list41, true);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 193);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray69);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray69);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray69);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray69);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray69);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type38, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = simpleVerifier77.newOperation(abstractInsnNode78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "byte" + "'", str23, "byte");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 148 + "'", int26 == 148);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "char" + "'", str30, "char");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 148 + "'", int33 == 148);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "char" + "'", str52, "char");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)C" + "'", str71, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str72, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(CBFCF)S" + "'", str73, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)J" + "'", str74, "(CBFCF)J");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)B" + "'", str75, "(CBFCF)B");
    }

    @Test
    public void test01808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01808");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("B");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str4 = type3.getInternalName();
        java.lang.String str5 = type3.toString();
        java.util.List list6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list6, true);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str11 = type10.getClassName();
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type10, list12, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type17, true);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier21.newValue(type22);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier21.newValue(type26);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value31 = simpleVerifier14.copyOperation(abstractInsnNode15, value30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "LB;" + "'", str4, "LB;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LLB;;" + "'", str5, "LLB;;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
    }

    @Test
    public void test01809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01809");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)V");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("float");
        int int4 = type3.getSize();
        int int5 = type3.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        int int9 = type7.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value10 = simpleVerifier6.newValue(type7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type12, type15, type16, type20, type23 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type29, false);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier33.newValue(type34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) (byte) 100);
        java.lang.String str39 = type36.getClassName();
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier33.newValue(type36);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type42 = null;
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type42, list43, false);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier33.newValue(type41);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier6.newValue(type41);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type67, false);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier71.newValue(type72);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean76 = type74.equals((java.lang.Object) (byte) 100);
        java.lang.String str77 = type74.getClassName();
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier71.newValue(type74);
        java.util.List list79 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type74, list79, true);
        int int83 = type74.getOpcode(100);
        org.mockito.asm.Type[] typeArray85 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type74, typeArray85);
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray85);
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray85);
        int int89 = type3.getSort();
        int int90 = type3.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value94 = simpleVerifier92.newOperation(abstractInsnNode93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 101 + "'", int9 == 101);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(CBFCF)B" + "'", str28, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "float" + "'", str39, "float");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "float" + "'", str77, "float");
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 102 + "'", int83 == 102);
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(CBFCF)F" + "'", str86, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(CBFCF)V" + "'", str87, "(CBFCF)V");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(CBFCF)Lfloat;" + "'", str88, "(CBFCF)Lfloat;");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
    }

    @Test
    public void test01810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01810");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type32, list33, true);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type32, list36, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        java.util.List list40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value41 = simpleVerifier38.naryOperation(abstractInsnNode39, list40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
    }

    @Test
    public void test01811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01811");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type31 = null;
        java.util.List list32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type31, list32, false);
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier22.newValue(type30);
        int int37 = type30.getOpcode(101);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str41 = type40.getDescriptor();
        int int42 = type40.getSort();
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type40, list43, false);
        int int46 = type40.getSize();
        int int47 = type40.getSort();
        boolean boolean48 = type30.equals((java.lang.Object) int47);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 106 + "'", int37 == 106);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lfloat;" + "'", str41, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test01812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01812");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("g/mockito/asm/tree/analysis/SimpleVerifier");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 42");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01813");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        boolean boolean11 = type6.equals((java.lang.Object) 177);
        int int12 = type6.getSize();
        java.lang.String str13 = type6.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter0.newValue(type18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        java.util.List list21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value22 = basicInterpreter0.naryOperation(abstractInsnNode20, list21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
    }

    @Test
    public void test01814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01814");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier30.newValue(type31);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str36 = type35.getDescriptor();
        int int37 = type35.getSort();
        int int38 = type35.getDimensions();
        int int40 = type35.getOpcode((int) (short) 10);
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier30.newValue(type35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException44);
        java.lang.Class<?> wildcardClass46 = analyzerException45.getClass();
        java.lang.String str47 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass46);
        java.lang.String str48 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass46);
        java.lang.String str49 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier30.newValue(type51);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.Type[] typeArray70 = new org.mockito.asm.Type[] { type55, type58, type59, type63, type66 };
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type72, false);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier76.newValue(type77);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = simpleVerifier30.unaryOperation(abstractInsnNode53, value78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "long" + "'", str32, "long");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lfloat;" + "'", str36, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 14 + "'", int40 == 14);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str47, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str48, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str49, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)B" + "'", str71, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(value78);
    }

    @Test
    public void test01815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01815");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Lg/mockito/asm/tree/analysis/SimpleVerifier;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 44");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01816");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.toString();
        java.lang.String str24 = type0.toString();
        int int25 = type0.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int32 = type30.getOpcode(48);
        java.lang.String str33 = type30.getClassName();
        java.lang.String str34 = type30.getClassName();
        java.lang.String str35 = type30.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type37, type40, type41, type45, type48 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type54, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type36, true);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter26.newValue(type30);
        java.lang.String str62 = type30.getClassName();
        int int63 = type30.getSort();
        java.util.List list64 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, list64, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = type0.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B" + "'", str23, "B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 48 + "'", int32 == 48);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "boolean" + "'", str33, "boolean");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)B" + "'", str53, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "boolean" + "'", str62, "boolean");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
    }

    @Test
    public void test01817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01817");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        int int17 = type15.getOpcode(101);
        int int19 = type15.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier14.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException27.addSuppressed((java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException31);
        boolean boolean33 = type21.equals((java.lang.Object) analyzerException32);
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier14.newValue(type21);
        java.lang.String str35 = type21.getDescriptor();
        java.lang.String str36 = type21.getDescriptor();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = type21.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 101 + "'", int17 == 101);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 191 + "'", int19 == 191);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "F" + "'", str35, "F");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "F" + "'", str36, "F");
    }

    @Test
    public void test01818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01818");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        int int27 = type25.getOpcode(101);
        java.lang.String str28 = type25.toString();
        int int29 = type25.getSize();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type31, type34, type35, type39, type42 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray46);
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray46);
        int int49 = type25.getSort();
        java.lang.String str50 = type25.toString();
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier22.newValue(type25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        java.util.List list53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value54 = simpleVerifier22.naryOperation(abstractInsnNode52, list53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 101 + "'", int27 == 101);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "C" + "'", str28, "C");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)B" + "'", str47, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(CBFCF)C" + "'", str48, "(CBFCF)C");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "C" + "'", str50, "C");
        org.junit.Assert.assertNotNull(value51);
    }

    @Test
    public void test01819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01819");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        int int7 = type5.getOpcode(114);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray24);
        java.lang.String str27 = type5.getDescriptor();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type29, list30, true);
        int int34 = type28.getOpcode(169);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        int int37 = type35.getOpcode(101);
        int int39 = type35.getOpcode(191);
        int int40 = type35.getSort();
        java.lang.Class<?> wildcardClass41 = type35.getClass();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        java.lang.String str43 = type42.getDescriptor();
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type42, list44, true);
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type28, list47, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        java.util.List list51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value52 = simpleVerifier49.naryOperation(abstractInsnNode50, list51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 118 + "'", int7 == 118);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str26, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str27, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 170 + "'", int34 == 170);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 101 + "'", int37 == 101);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 191 + "'", int39 == 191);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str43, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test01820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01820");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        boolean boolean11 = type6.equals((java.lang.Object) 177);
        int int12 = type6.getSize();
        java.lang.String str13 = type6.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getDescriptor();
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter16.newValue(type20);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type24, true);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier28.newValue(type29);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type38, type41, type42, type46, type49 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray53);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray53);
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray53);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter16.newValue(type29);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter0.copyOperation(abstractInsnNode15, value57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter59.copyOperation(abstractInsnNode60, value61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str64 = type63.getDescriptor();
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter59.newValue(type63);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter0.newValue(type63);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type67 = type63.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "I" + "'", str21, "I");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "char" + "'", str36, "char");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)B" + "'", str54, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)C" + "'", str55, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)C" + "'", str56, "(CBFCF)C");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "I" + "'", str64, "I");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test01821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01821");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type31, true);
        org.mockito.asm.tree.analysis.Value value36 = simpleVerifier22.newValue(type30);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier22.newValue(type37);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier39.newValue(type41);
        int int44 = type41.getOpcode(136);
        int int45 = type41.getSize();
        int int46 = type41.getSort();
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier22.newValue(type41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        java.util.List list49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value50 = simpleVerifier22.naryOperation(abstractInsnNode48, list49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 140 + "'", int44 == 140);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(value47);
    }

    @Test
    public void test01822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01822");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)J");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01823");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        int int2 = type1.getSize();
        int int3 = type1.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter5.ternaryOperation(abstractInsnNode6, value7, value8, value9);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter11.copyOperation(abstractInsnNode12, value13);
        org.mockito.asm.Type type15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter11.newValue(type15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter5.merge(value16, value22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier4.merge(value23, value35);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type46, type49, type50, type54, type57 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type63, false);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier67.newValue(type68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier67.newValue(type70);
        java.util.List list75 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type70, list75, true);
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier4.newValue(type70);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier4.newValue(type79);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean83 = type81.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier4.newValue(type81);
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type81, list85, true);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicInterpreter");
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier87.newValue(type89);
        org.mockito.asm.Type type92 = org.mockito.asm.Type.getReturnType("(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier87.newValue(type92);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode94 = null;
        java.util.List list95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value96 = simpleVerifier87.naryOperation(abstractInsnNode94, list95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)B" + "'", str62, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(type92);
        org.junit.Assert.assertNotNull(value93);
    }

    @Test
    public void test01824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01824");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str52 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str58 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str50, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str52, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str56, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str58, "org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test01825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01825");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        java.lang.String str3 = type0.toString();
        int int4 = type0.getSize();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray21);
        int int24 = type0.getSize();
        int int26 = type0.getOpcode(100);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 193);
        java.lang.Class<?> wildcardClass30 = type27.getClass();
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type34, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        java.util.List list38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value39 = simpleVerifier36.naryOperation(abstractInsnNode37, list38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)C" + "'", str23, "(CBFCF)C");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/asm/Type" + "'", str31, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/Type" + "'", str32, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
    }

    @Test
    public void test01826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01826");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        int int2 = type1.getSize();
        int int3 = type1.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter5.ternaryOperation(abstractInsnNode6, value7, value8, value9);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter11.copyOperation(abstractInsnNode12, value13);
        org.mockito.asm.Type type15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter11.newValue(type15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter5.merge(value16, value22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier4.merge(value23, value35);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type46, type49, type50, type54, type57 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type63, false);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier67.newValue(type68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier67.newValue(type70);
        java.util.List list75 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type70, list75, true);
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier4.newValue(type70);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier4.newValue(type79);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean83 = type81.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier4.newValue(type81);
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type81, list85, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        java.util.List list89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = simpleVerifier87.naryOperation(abstractInsnNode88, list89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)B" + "'", str62, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(value84);
    }

    @Test
    public void test01827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01827");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int4 = type0.getSize();
        int int6 = type0.getOpcode(148);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        boolean boolean37 = type32.equals((java.lang.Object) 177);
        int int38 = type32.getSize();
        java.lang.String str39 = type32.toString();
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.newValue(type32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter26.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        int int46 = type44.getOpcode(101);
        java.lang.String str47 = type44.toString();
        int int48 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter26.newValue(type44);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type44, false);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        boolean boolean57 = type52.equals((java.lang.Object) 177);
        java.lang.String str58 = type52.toString();
        int int59 = type52.getSize();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType("(CBFCF)Lbyte;");
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type61, list62, true);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier51.newValue(type61);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type67, type68, true);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier72.newValue(type73);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) 151);
        java.lang.String str80 = type77.getClassName();
        int int82 = type77.getOpcode(138);
        int int83 = type77.getSize();
        boolean boolean85 = type77.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier72.newValue(type77);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value87 = simpleVerifier51.copyOperation(abstractInsnNode66, value86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 148 + "'", int6 == 148);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)C" + "'", str25, "(CBFCF)C");
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "F" + "'", str39, "F");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 101 + "'", int46 == 101);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "C" + "'", str47, "C");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "F" + "'", str58, "F");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "char" + "'", str80, "char");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 138 + "'", int82 == 138);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(value86);
    }

    @Test
    public void test01828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01828");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) (byte) 100);
        java.lang.String str5 = type2.getClassName();
        boolean boolean7 = type2.equals((java.lang.Object) 177);
        int int9 = type2.getOpcode(167);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException12.addSuppressed((java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException20.addSuppressed((java.lang.Throwable) analyzerException22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException20);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException32.addSuppressed((java.lang.Throwable) analyzerException34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException36);
        boolean boolean38 = type26.equals((java.lang.Object) analyzerException37);
        analyzerException25.addSuppressed((java.lang.Throwable) analyzerException37);
        analyzerException12.addSuppressed((java.lang.Throwable) analyzerException25);
        boolean boolean41 = type2.equals((java.lang.Object) analyzerException25);
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list42, true);
        java.lang.String str45 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "float" + "'", str5, "float");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 169 + "'", int9 == 169);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str45, "org.mockito.asm.tree.analysis.AnalyzerException: ");
    }

    @Test
    public void test01829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01829");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, list5, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getObjectType("(CBFCF)[Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str14 = type13.getDescriptor();
        int int15 = type13.getSort();
        int int16 = type13.getDimensions();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str19 = type18.getDescriptor();
        int int20 = type18.getSort();
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type18, list21, true);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str26 = type25.getDescriptor();
        int int27 = type25.getSort();
        int int28 = type25.getDimensions();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str31 = type30.getDescriptor();
        int int32 = type30.getSort();
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type30, list33, true);
        org.mockito.asm.tree.analysis.Value value36 = simpleVerifier23.newValue(type30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException39);
        java.lang.Class<?> wildcardClass41 = analyzerException39.getClass();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        java.lang.String str43 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass41);
        java.lang.String str44 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass41);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier23.newValue(type46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier23.newValue(type48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) "(CBFCF)[Lorg/mockito/asm/Type;", value49);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value51 = simpleVerifier7.copyOperation(abstractInsnNode8, value49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLB;;" + "'", str2, "LLB;;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lfloat;" + "'", str14, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lfloat;" + "'", str19, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lfloat;" + "'", str26, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lfloat;" + "'", str31, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str43, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str44, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str45, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value49);
    }

    @Test
    public void test01830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01830");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int13 = type11.getOpcode(48);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type15, type18, type19, type23, type26 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type32, false);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier36.newValue(type37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier36.newValue(type39);
        int int44 = type39.getSize();
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type39, list45, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type39, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str53 = type52.getDescriptor();
        int int54 = type52.getSort();
        int int55 = type52.getDimensions();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str58 = type57.getDescriptor();
        int int59 = type57.getSort();
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type57, list60, true);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str65 = type64.getDescriptor();
        int int66 = type64.getSort();
        int int67 = type64.getDimensions();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str70 = type69.getDescriptor();
        int int71 = type69.getSort();
        java.util.List list72 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type69, list72, true);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier62.newValue(type69);
        int int76 = value75.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value77 = simpleVerifier49.copyOperation(abstractInsnNode50, value75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 48 + "'", int13 == 48);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(CBFCF)B" + "'", str31, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Lfloat;" + "'", str53, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lfloat;" + "'", str58, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Lfloat;" + "'", str65, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 10 + "'", int66 == 10);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Lfloat;" + "'", str70, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test01831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01831");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) (byte) 100);
        java.lang.String str4 = type1.getClassName();
        boolean boolean6 = type1.equals((java.lang.Object) 177);
        java.lang.String str7 = type1.toString();
        int int8 = type1.getSize();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType("(CBFCF)Lbyte;");
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type10, list11, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException17.addSuppressed((java.lang.Throwable) analyzerException19);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException17);
        java.lang.Throwable[] throwableArray22 = analyzerException21.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getDescriptor();
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.ternaryOperation(abstractInsnNode32, value33, value34, value35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter31.merge(value42, value48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter23.copyOperation(abstractInsnNode30, value42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)F", (java.lang.Object) throwableArray22, value42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)I", (java.lang.Object) type1, value42);
        java.lang.String str53 = analyzerException52.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "float" + "'", str4, "float");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "F" + "'", str7, "F");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "I" + "'", str28, "I");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)I: expected F, but found ." + "'", str53, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)I: expected F, but found .");
    }

    @Test
    public void test01832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01832");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        java.lang.Class<?> wildcardClass75 = type66.getClass();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        java.lang.String str77 = type76.toString();
        int int78 = type76.getSize();
        org.mockito.asm.Type type79 = type76.getElementType();
        java.lang.String str80 = type79.getDescriptor();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str77, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Lg/mockito/asm/Type;" + "'", str80, "Lg/mockito/asm/Type;");
    }

    @Test
    public void test01833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01833");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType("Lhi!;");
        org.mockito.asm.tree.analysis.Value value12 = simpleVerifier5.newValue(type11);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.ternaryOperation(abstractInsnNode16, value17, value18, value19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.newValue(type25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter27.copyOperation(abstractInsnNode28, value29);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter15.merge(value26, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.ternaryOperation(abstractInsnNode35, value36, value37, value38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.newValue(type50);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter34.merge(value45, value51);
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier14.merge(value33, value45);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type56, type59, type60, type64, type67 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type73, false);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier77.newValue(type78);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean82 = type80.equals((java.lang.Object) (byte) 100);
        java.lang.String str83 = type80.getClassName();
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier77.newValue(type80);
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type80, list85, true);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier14.newValue(type80);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int91 = type89.getOpcode(48);
        java.lang.String str92 = type89.getClassName();
        java.lang.String str93 = type89.getClassName();
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier14.newValue(type89);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = simpleVerifier5.copyOperation(abstractInsnNode13, value94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)B" + "'", str72, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "float" + "'", str83, "float");
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 48 + "'", int91 == 48);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "boolean" + "'", str92, "boolean");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "boolean" + "'", str93, "boolean");
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test01834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01834");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str5 = type4.getDescriptor();
        int int6 = type4.getSort();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type7, list8, false);
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, list11, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        java.util.List list15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value16 = simpleVerifier13.naryOperation(abstractInsnNode14, list15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LLB;;" + "'", str5, "LLB;;");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(type7);
    }

    @Test
    public void test01835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01835");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        int int14 = type10.getOpcode((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type15 = type10.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
    }

    @Test
    public void test01836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01836");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("org.mockito.asm.tree.analysis.AnalyzerException: Z");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 50");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01837");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/Type", (java.lang.Object) basicInterpreter1, value20);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getDescriptor();
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) (byte) 100);
        java.lang.String str39 = type36.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type32, type35, type36, type40, type43 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type49, false);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier53.newValue(type54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier53.newValue(type56);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter23.copyOperation(abstractInsnNode30, value60);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.ternaryOperation(abstractInsnNode64, value65, value66, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter63.merge(value74, value80);
        int int82 = value74.getSize();
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter23.copyOperation(abstractInsnNode62, value74);
        int int84 = value74.getSize();
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter1.copyOperation(abstractInsnNode22, value74);
        int int86 = value74.getSize();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "I" + "'", str28, "I");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "float" + "'", str39, "float");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(CBFCF)B" + "'", str48, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test01838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01838");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("B");
        int int3 = type2.getSize();
        int int4 = type2.getSort();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, true);
        java.lang.String str14 = type9.getClassName();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type9, list15, true);
        java.lang.Object obj19 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.ternaryOperation(abstractInsnNode46, value47, value48, value49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter51.copyOperation(abstractInsnNode52, value53);
        org.mockito.asm.Type type55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.newValue(type55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.newValue(type61);
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter45.merge(value56, value62);
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier25.merge(value44, value56);
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter20.copyOperation(abstractInsnNode24, value64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj19, value65);
        java.lang.Class<?> wildcardClass67 = value65.getClass();
        java.lang.String str68 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier17.newValue(type69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.SHORT_TYPE;
        int int72 = type71.getSize();
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier17.newValue(type71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("g.mockito.asm.tree.analysis.AnalyzerException", (java.lang.Object) 163, value73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Object) type2, value73);
        java.lang.Class<?> wildcardClass76 = analyzerException75.getClass();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "void" + "'", str14, "void");
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str68, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test01839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01839");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = basicInterpreter1.copyOperation(abstractInsnNode2, value3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str6 = type5.getDescriptor();
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter1.newValue(type5);
        org.mockito.asm.Type[] typeArray9 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type23, type26, type27, type31, type34 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type40, false);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str21, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type12, value46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        java.lang.String str52 = type49.getClassName();
        int int53 = type49.getSize();
        int int55 = type49.getOpcode(148);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type49, false);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type59, type62, type63, type67, type70 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type76, false);
        java.lang.String str81 = type58.toString();
        int int82 = type58.getSort();
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier57.newValue(type58);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter84 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        org.mockito.asm.tree.analysis.Value value86 = null;
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter84.copyOperation(abstractInsnNode85, value86);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str89 = type88.getDescriptor();
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter84.newValue(type88);
        org.mockito.asm.Type[] typeArray92 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type88, typeArray92);
        java.lang.Class<?> wildcardClass94 = typeArray92.getClass();
        org.mockito.asm.Type type95 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass94);
        org.mockito.asm.Type type96 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass94);
        java.lang.String str97 = type96.getInternalName();
        java.lang.String str98 = type96.toString();
        org.mockito.asm.tree.analysis.Value value99 = simpleVerifier57.newValue(type96);
        org.junit.Assert.assertNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(CBFCF)I" + "'", str10, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str21, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(CBFCF)B" + "'", str39, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "char" + "'", str52, "char");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 148 + "'", int55 == 148);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)B" + "'", str75, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "B" + "'", str81, "B");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNull(value87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "I" + "'", str89, "I");
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(CBFCF)I" + "'", str93, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertNotNull(type95);
        org.junit.Assert.assertNotNull(type96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str97, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str98, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value99);
    }

    @Test
    public void test01840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01840");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = basicInterpreter1.copyOperation(abstractInsnNode2, value3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str6 = type5.getDescriptor();
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter1.newValue(type5);
        org.mockito.asm.Type[] typeArray9 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type23, type26, type27, type31, type34 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type40, false);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str21, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type12, value46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        java.lang.String str52 = type49.getClassName();
        int int53 = type49.getSize();
        int int55 = type49.getOpcode(148);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type49, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter59.copyOperation(abstractInsnNode60, value61);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter59.copyOperation(abstractInsnNode63, value64);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter67 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter67.ternaryOperation(abstractInsnNode68, value69, value70, value71);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter73 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter73.copyOperation(abstractInsnNode74, value75);
        org.mockito.asm.Type type77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter73.newValue(type77);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter79 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode80 = null;
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter79.copyOperation(abstractInsnNode80, value81);
        org.mockito.asm.Type type83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter79.newValue(type83);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter67.merge(value78, value84);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter59.copyOperation(abstractInsnNode66, value85);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str90 = type89.getDescriptor();
        int int91 = type89.getSort();
        java.util.List list92 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier94 = new org.mockito.asm.tree.analysis.SimpleVerifier(type87, type89, list92, false);
        int int95 = type89.getSize();
        org.mockito.asm.tree.analysis.Value value96 = basicInterpreter59.newValue(type89);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value97 = simpleVerifier57.unaryOperation(abstractInsnNode58, value96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(CBFCF)I" + "'", str10, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str21, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(CBFCF)B" + "'", str39, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "char" + "'", str52, "char");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 148 + "'", int55 == 148);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNull(value82);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Lfloat;" + "'", str90, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(value96);
    }

    @Test
    public void test01841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01841");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        java.lang.String str13 = type10.getClassName();
        int int15 = type10.getOpcode(138);
        int int16 = type10.getSize();
        boolean boolean18 = type10.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value19 = simpleVerifier5.newValue(type10);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getReturnType("(CBFCF)C");
        org.mockito.asm.tree.analysis.Value value22 = simpleVerifier5.newValue(type21);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value24 = simpleVerifier5.newOperation(abstractInsnNode23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "char" + "'", str13, "char");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 138 + "'", int15 == 138);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(value22);
    }

    @Test
    public void test01842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01842");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.Type type10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.newValue(type10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.merge(value11, value17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter23.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.ternaryOperation(abstractInsnNode32, value33, value34, value35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter31.merge(value42, value48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter23.copyOperation(abstractInsnNode30, value49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter0.copyOperation(abstractInsnNode22, value49);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter0.newValue(type53);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        java.util.List list56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.naryOperation(abstractInsnNode55, list56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "C" + "'", str20, "C");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(value54);
    }

    @Test
    public void test01843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01843");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type26, false);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier30.newValue(type31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier30.newValue(type33);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter0.copyOperation(abstractInsnNode7, value37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int41 = type39.getOpcode(48);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter0.newValue(type39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type47, list48, true);
        java.lang.Class<?> wildcardClass51 = type46.getClass();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.ternaryOperation(abstractInsnNode53, value54, value55, value56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.newValue(type62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter64 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter64.copyOperation(abstractInsnNode65, value66);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter64.newValue(type68);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter52.merge(value63, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)F", (java.lang.Object) wildcardClass51, value70);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value72 = basicInterpreter0.unaryOperation(abstractInsnNode44, value70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 48 + "'", int41 == 48);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
    }

    @Test
    public void test01844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01844");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str4 = type3.getClassName();
        java.lang.String str5 = type3.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        int int9 = type7.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value10 = simpleVerifier6.newValue(type7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type3, value10);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value12 = simpleVerifier0.unaryOperation(abstractInsnNode1, value10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "long" + "'", str4, "long");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "long" + "'", str5, "long");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 101 + "'", int9 == 101);
        org.junit.Assert.assertNotNull(value10);
    }

    @Test
    public void test01845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01845");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        int int35 = type0.getSort();
        int int37 = type0.getOpcode(114);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type39, type42, type43, type47, type50 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type56, false);
        java.lang.String str61 = type38.toString();
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type38, list62, false);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        int int66 = type65.getSize();
        java.lang.String str67 = type65.getClassName();
        int int68 = type65.getSort();
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier64.newValue(type65);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        java.util.List list71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value72 = simpleVerifier64.naryOperation(abstractInsnNode70, list71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 116 + "'", int37 == 116);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)B" + "'", str55, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "B" + "'", str61, "B");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test01846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01846");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier2 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter3.ternaryOperation(abstractInsnNode4, value5, value6, value7);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.Type type13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter9.newValue(type13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter3.merge(value14, value20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.ternaryOperation(abstractInsnNode23, value24, value25, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter22.merge(value33, value39);
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier2.merge(value21, value33);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type44, type47, type48, type52, type55 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type61, false);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier65.newValue(type66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier65.newValue(type68);
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type68, list73, true);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier2.newValue(type68);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier2.newValue(type77);
        boolean boolean80 = type77.equals((java.lang.Object) "I");
        int int82 = type77.getOpcode(8);
        boolean boolean84 = type77.equals((java.lang.Object) (-1.0f));
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type77, list85, true);
        java.lang.String str88 = type77.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "void" + "'", str1, "void");
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(CBFCF)B" + "'", str60, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 8 + "'", int82 == 8);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "C" + "'", str88, "C");
    }

    @Test
    public void test01847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01847");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)Lfloat;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type[] typeArray4 = new org.mockito.asm.Type[] { type3 };
        java.lang.String str5 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray4);
        java.lang.String str6 = type1.toString();
        java.lang.String str7 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "(LLhi!;;)Lfloat;" + "'", str5, "(LLhi!;;)Lfloat;");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lfloat;" + "'", str6, "Lfloat;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "float" + "'", str7, "float");
    }

    @Test
    public void test01848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01848");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        boolean boolean8 = type0.equals((java.lang.Object) 154);
        java.lang.String str9 = type0.getDescriptor();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type10, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str23 = type22.getDescriptor();
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter18.copyOperation(abstractInsnNode25, value37);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int48 = type46.getOpcode(48);
        java.lang.String str49 = type46.getClassName();
        java.lang.String str50 = type46.getClassName();
        java.lang.String str51 = type46.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type53, type56, type57, type61, type64 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type70, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type52, true);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str78 = type77.getClassName();
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier76.newValue(type77);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type81 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean83 = type81.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type80, type81, true);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean88 = type86.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier85.newValue(type86);
        int int90 = value89.getSize();
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter18.merge(value79, value89);
        int int92 = value89.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier16.copyOperation(abstractInsnNode17, value89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "I" + "'", str23, "I");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 48 + "'", int48 == 48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)B" + "'", str69, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "long" + "'", str78, "long");
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test01849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01849");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type32, true);
        boolean boolean35 = type1.equals((java.lang.Object) type32);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type36 = type1.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test01850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01850");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.SHORT_TYPE;
        int int3 = type2.getSize();
        java.lang.String str4 = type2.toString();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list5, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        java.util.List list9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value10 = simpleVerifier7.naryOperation(abstractInsnNode8, list9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "S" + "'", str4, "S");
    }

    @Test
    public void test01851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01851");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int6 = type4.getOpcode(48);
        java.lang.String str7 = type4.getClassName();
        java.lang.String str8 = type4.getClassName();
        java.lang.String str9 = type4.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type11, type14, type15, type19, type22 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type28, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type10, true);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type37, type40, type41, type45, type48 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type54, false);
        int int59 = type54.getSort();
        java.lang.String str60 = type54.getDescriptor();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.newValue(type54);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier63.newValue(type65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        java.lang.String str72 = type69.getClassName();
        int int74 = type69.getOpcode(138);
        int int75 = type69.getSize();
        boolean boolean77 = type69.equals((java.lang.Object) 154);
        java.lang.String str78 = type69.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type68, type69, true);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier63.newValue(type69);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter0.copyOperation(abstractInsnNode62, value81);
        java.lang.Class<?> wildcardClass83 = basicInterpreter0.getClass();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass83);
        int int85 = type84.getDimensions();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)B" + "'", str27, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)B" + "'", str53, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "char" + "'", str72, "char");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 138 + "'", int74 == 138);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "C" + "'", str78, "C");
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test01852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01852");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier32.newValue(type34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type37, list38, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type36, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        java.util.List list44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value45 = simpleVerifier42.naryOperation(abstractInsnNode43, list44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
    }

    @Test
    public void test01853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01853");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type6, true);
        java.lang.String str11 = type6.getClassName();
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type6, list12, true);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str17 = type16.getDescriptor();
        java.lang.String str18 = type16.getInternalName();
        org.mockito.asm.tree.analysis.Value value19 = simpleVerifier14.newValue(type16);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        java.lang.String str23 = type20.getClassName();
        int int25 = type20.getOpcode(138);
        int int26 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier14.newValue(type20);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type29, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier33.newValue(type34);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        java.lang.String str41 = type38.getClassName();
        int int43 = type38.getOpcode(138);
        int int44 = type38.getSize();
        boolean boolean46 = type38.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier33.newValue(type38);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier0.merge(value27, value47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException51);
        java.lang.Class<?> wildcardClass53 = analyzerException51.getClass();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        int int56 = type54.getOpcode(114);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.Type[] typeArray73 = new org.mockito.asm.Type[] { type58, type61, type62, type66, type69 };
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray73);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray73);
        java.lang.String str76 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier0.newValue(type54);
        int int78 = value77.getSize();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "void" + "'", str11, "void");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LB;" + "'", str17, "LB;");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "B" + "'", str18, "B");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "char" + "'", str23, "char");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 138 + "'", int25 == 138);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "char" + "'", str41, "char");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 138 + "'", int43 == 138);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 118 + "'", int56 == 118);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)B" + "'", str74, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str75, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str76, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test01854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01854");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier32.newValue(type34);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        java.util.List list37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value38 = simpleVerifier32.naryOperation(abstractInsnNode36, list37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
    }

    @Test
    public void test01855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01855");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.getClassName();
        int int24 = type0.getSort();
        int int26 = type0.getOpcode(148);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        java.lang.String str30 = type27.getClassName();
        int int31 = type27.getSize();
        int int33 = type27.getOpcode(148);
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type27, list34, true);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int39 = type37.getOpcode(48);
        int int41 = type37.getOpcode(0);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type37, false);
        int int44 = type37.getSize();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str45 = type37.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "byte" + "'", str23, "byte");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 148 + "'", int26 == 148);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "char" + "'", str30, "char");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 148 + "'", int33 == 148);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 48 + "'", int39 == 48);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test01856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01856");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value32 = simpleVerifier30.newOperation(abstractInsnNode31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test01857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01857");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType("J");
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type7, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier11.newValue(type12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        java.lang.String str19 = type16.getClassName();
        int int21 = type16.getOpcode(138);
        int int22 = type16.getSize();
        boolean boolean24 = type16.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier11.newValue(type16);
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type16, list26, false);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        int int31 = type29.getOpcode(101);
        java.lang.String str32 = type29.toString();
        int int33 = type29.getSort();
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier28.newValue(type29);
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier0.newValue(type29);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        java.util.List list37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value38 = simpleVerifier0.naryOperation(abstractInsnNode36, list37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "char" + "'", str19, "char");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 138 + "'", int21 == 138);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 101 + "'", int31 == 101);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "C" + "'", str32, "C");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
    }

    @Test
    public void test01858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01858");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)I");
        java.lang.String str2 = type1.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException5);
        java.lang.Class<?> wildcardClass7 = analyzerException5.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        int int10 = type8.getOpcode(114);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type12, type15, type16, type20, type23 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray27);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray27);
        java.util.List list30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, list30, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type36, list37, true);
        java.lang.Class<?> wildcardClass40 = simpleVerifier39.getClass();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        java.lang.String str42 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type45, true);
        java.lang.String str50 = type45.getClassName();
        java.util.List list51 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type45, list51, true);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException60.addSuppressed((java.lang.Throwable) analyzerException62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException64);
        boolean boolean66 = type54.equals((java.lang.Object) analyzerException65);
        java.lang.String str67 = type54.getDescriptor();
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier53.newValue(type54);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("Lvoid;", (java.lang.Object) wildcardClass40, value68);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value70 = simpleVerifier32.unaryOperation(abstractInsnNode33, value68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "I" + "'", str2, "I");
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 118 + "'", int10 == 118);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(CBFCF)B" + "'", str28, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str42, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "void" + "'", str50, "void");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "F" + "'", str67, "F");
        org.junit.Assert.assertNotNull(value68);
    }

    @Test
    public void test01859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01859");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException15.addSuppressed((java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException19);
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException20);
        analyzerException7.addSuppressed((java.lang.Throwable) analyzerException10);
        java.lang.Throwable[] throwableArray23 = analyzerException10.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)J", (java.lang.Throwable) analyzerException10);
        java.lang.String str25 = analyzerException10.toString();
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B" + "'", str25, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
    }

    @Test
    public void test01860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01860");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter0.copyOperation(abstractInsnNode7, value26);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        java.util.List list29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value30 = basicInterpreter0.naryOperation(abstractInsnNode28, list29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
    }

    @Test
    public void test01861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01861");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode7, value28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter0.copyOperation(abstractInsnNode4, value28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        java.util.List list32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value33 = basicInterpreter0.naryOperation(abstractInsnNode31, list32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value30);
    }

    @Test
    public void test01862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01862");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org/mockito/asm/tree/analysis/BasicVerifier");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01863");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type35, true);
        boolean boolean39 = type35.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier4.newValue(type35);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        int int42 = type41.getSize();
        java.lang.String str43 = type41.getClassName();
        int int44 = type41.getSize();
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier4.newValue(type41);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = type41.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "char" + "'", str8, "char");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)C" + "'", str27, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(value45);
    }

    @Test
    public void test01864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01864");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        int int6 = type0.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type49, type52, type53, type57, type60 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type66, false);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier70.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier70.newValue(type73);
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type73, list78, true);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier7.newValue(type73);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type73, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        java.util.List list85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value86 = simpleVerifier83.naryOperation(abstractInsnNode84, list85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)B" + "'", str65, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value81);
    }

    @Test
    public void test01865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01865");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException12);
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicInterpreter", (java.lang.Throwable) analyzerException13);
        java.lang.String str16 = analyzerException13.toString();
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: char" + "'", str16, "org.mockito.asm.tree.analysis.AnalyzerException: char");
    }

    @Test
    public void test01866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01866");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("(CBFCF)Lbyte;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException28);
        java.lang.Class<?> wildcardClass30 = analyzerException28.getClass();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        java.lang.String str32 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type33, list34, true);
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type25, list37, false);
        boolean boolean40 = type3.equals((java.lang.Object) type6);
        java.lang.String str41 = type3.getClassName();
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, list42, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int50 = type48.getOpcode(48);
        java.lang.String str51 = type48.getClassName();
        java.lang.String str52 = type48.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str56 = type55.getDescriptor();
        int int57 = type55.getSort();
        java.util.List list58 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type55, list58, false);
        java.lang.String str61 = type55.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type55, false);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        int int66 = type64.getOpcode(101);
        java.lang.String str67 = type64.toString();
        int int68 = type64.getSort();
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier63.newValue(type64);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value70 = simpleVerifier46.copyOperation(abstractInsnNode47, value69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str32, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "void" + "'", str41, "void");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 48 + "'", int50 == 48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lfloat;" + "'", str56, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 101 + "'", int66 == 101);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "C" + "'", str67, "C");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test01867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01867");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/Type", (java.lang.Object) basicInterpreter1, value20);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str28 = type27.getDescriptor();
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) (byte) 100);
        java.lang.String str39 = type36.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type32, type35, type36, type40, type43 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type49, false);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier53.newValue(type54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier53.newValue(type56);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter23.copyOperation(abstractInsnNode30, value60);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.ternaryOperation(abstractInsnNode64, value65, value66, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter63.merge(value74, value80);
        int int82 = value74.getSize();
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter23.copyOperation(abstractInsnNode62, value74);
        int int84 = value74.getSize();
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter1.copyOperation(abstractInsnNode22, value74);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue");
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter1.newValue(type87);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = basicInterpreter1.newOperation(abstractInsnNode89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "I" + "'", str28, "I");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "float" + "'", str39, "float");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(CBFCF)B" + "'", str48, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value88);
    }

    @Test
    public void test01868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01868");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException7);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        java.lang.Throwable[] throwableArray11 = analyzerException8.getSuppressed();
        java.lang.String str12 = analyzerException8.toString();
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue" + "'", str12, "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test01869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01869");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Z");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier25.newValue(type28);
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type28, list33, true);
        int int37 = type28.getOpcode(100);
        org.mockito.asm.Type[] typeArray39 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray39);
        int int42 = type28.getOpcode(97);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type45, type48, type49, type53, type56 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type62, false);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier66.newValue(type67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier66.newValue(type69);
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type69, list74, true);
        int int78 = type69.getOpcode(100);
        org.mockito.asm.Type[] typeArray80 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray80);
        java.lang.Class<?> wildcardClass82 = type69.getClass();
        java.lang.String str83 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass82);
        boolean boolean84 = type28.equals((java.lang.Object) wildcardClass82);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type28, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = simpleVerifier86.newOperation(abstractInsnNode87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 102 + "'", int37 == 102);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)F" + "'", str40, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 99 + "'", int42 == 99);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(CBFCF)B" + "'", str61, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 102 + "'", int78 == 102);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)F" + "'", str81, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org/mockito/asm/Type" + "'", str83, "org/mockito/asm/Type");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test01870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01870");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list3 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list3, true);
        java.lang.Class<?> wildcardClass6 = simpleVerifier5.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter9.ternaryOperation(abstractInsnNode10, value11, value12, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.ternaryOperation(abstractInsnNode18, value19, value20, value21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.newValue(type33);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter17.merge(value28, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.ternaryOperation(abstractInsnNode37, value38, value39, value40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter48.copyOperation(abstractInsnNode49, value50);
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter48.newValue(type52);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter36.merge(value47, value53);
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier16.merge(value35, value47);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter9.copyOperation(abstractInsnNode15, value47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Object) wildcardClass6, value47);
        int int58 = value47.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test01871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01871");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)C");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, list4, true);
        java.lang.Class<?> wildcardClass7 = simpleVerifier6.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str9 = type8.getInternalName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type11, type14, type15, type19, type22 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        java.lang.String str28 = type10.toString();
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type10, list29, true);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type32, true);
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, list35, false);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type39, list40, true);
        java.lang.Class<?> wildcardClass43 = simpleVerifier42.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.lang.String str45 = type44.getInternalName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        java.lang.String str64 = type46.toString();
        java.util.List list65 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type46, list65, true);
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier37.newValue(type44);
        int int70 = type44.getOpcode(131072);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str9, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)B" + "'", str27, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "B" + "'", str28, "B");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str45, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "B" + "'", str64, "B");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 131076 + "'", int70 == 131076);
    }

    @Test
    public void test01872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01872");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType("Z");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter4.ternaryOperation(abstractInsnNode5, value6, value7, value8);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.Type type14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.newValue(type14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter4.merge(value15, value21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str24 = type23.getDescriptor();
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter4.newValue(type23);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier26.newValue(type28);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) (byte) 100);
        java.lang.String str39 = type36.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type32, type35, type36, type40, type43 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type49, false);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier53.newValue(type54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier53.newValue(type56);
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier30.newValue(type56);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter4.merge(value29, value61);
        int int63 = value29.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: hi!", (java.lang.Object) type3, value29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("D", (java.lang.Throwable) analyzerException64);
        java.lang.Throwable[] throwableArray66 = analyzerException65.getSuppressed();
        java.lang.String str67 = analyzerException65.toString();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "float" + "'", str39, "float");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(CBFCF)B" + "'", str48, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: D" + "'", str67, "org.mockito.asm.tree.analysis.AnalyzerException: D");
    }

    @Test
    public void test01873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01873");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        int int23 = type18.getSort();
        java.lang.String str24 = type18.getDescriptor();
        boolean boolean26 = type18.equals((java.lang.Object) 179);
        int int27 = type18.getSize();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        int int30 = type28.getOpcode(101);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type28, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        java.util.List list35 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value36 = simpleVerifier33.naryOperation(abstractInsnNode34, list35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 101 + "'", int30 == 101);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "char" + "'", str31, "char");
    }

    @Test
    public void test01874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01874");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        java.lang.String str3 = type0.toString();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType("V");
        int int6 = type5.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type5, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value10 = simpleVerifier8.newOperation(abstractInsnNode9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test01875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01875");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.ternaryOperation(abstractInsnNode26, value27, value28, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter25.merge(value36, value42);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier5.merge(value24, value36);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type64, false);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier68.newValue(type69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier68.newValue(type71);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type71, list76, true);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier5.newValue(type71);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier5.newValue(type80);
        boolean boolean83 = type80.equals((java.lang.Object) "I");
        int int85 = type80.getOpcode(96);
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier4.newValue(type80);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = simpleVerifier4.newOperation(abstractInsnNode87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "void" + "'", str1, "void");
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 96 + "'", int85 == 96);
        org.junit.Assert.assertNotNull(value86);
    }

    @Test
    public void test01876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01876");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter0.copyOperation(abstractInsnNode7, value26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str31 = type30.getDescriptor();
        int int32 = type30.getSort();
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type30, list33, false);
        int int36 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter0.newValue(type30);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        java.util.List list39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.naryOperation(abstractInsnNode38, list39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lfloat;" + "'", str31, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value37);
    }

    @Test
    public void test01877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01877");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        int int35 = type26.getOpcode(100);
        org.mockito.asm.Type[] typeArray37 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray37);
        java.lang.Class<?> wildcardClass39 = type26.getClass();
        java.lang.String str40 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        java.lang.String str41 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass39);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 102 + "'", int35 == 102);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)F" + "'", str38, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org/mockito/asm/Type" + "'", str40, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org/mockito/asm/Type" + "'", str41, "org/mockito/asm/Type");
    }

    @Test
    public void test01878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01878");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier22.newValue(type25);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.ternaryOperation(abstractInsnNode32, value33, value34, value35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter31.merge(value42, value48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.ternaryOperation(abstractInsnNode51, value52, value53, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter56.copyOperation(abstractInsnNode57, value58);
        org.mockito.asm.Type type60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter56.newValue(type60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter62.copyOperation(abstractInsnNode63, value64);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter62.newValue(type66);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter50.merge(value61, value67);
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier30.merge(value49, value61);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) 151);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean84 = type82.equals((java.lang.Object) (byte) 100);
        java.lang.String str85 = type82.getClassName();
        org.mockito.asm.Type[] typeArray86 = new org.mockito.asm.Type[] { type71, type74, type75, type79, type82 };
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray86);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean90 = type88.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type70, type88, false);
        org.mockito.asm.Type type93 = null;
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier92.newValue(type93);
        org.mockito.asm.tree.analysis.Value value95 = simpleVerifier22.merge(value69, value94);
        java.lang.Class<?> wildcardClass96 = value69.getClass();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "float" + "'", str85, "float");
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(CBFCF)B" + "'", str87, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertNotNull(value95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test01879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01879");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("org.mockito.asm.tree.analysis.AnalyzerException: ()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01880");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = basicInterpreter1.copyOperation(abstractInsnNode2, value3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str6 = type5.getDescriptor();
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter1.newValue(type5);
        org.mockito.asm.Type[] typeArray9 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type23, type26, type27, type31, type34 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type40, false);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str21, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type12, value46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        java.lang.String str52 = type49.getClassName();
        int int53 = type49.getSize();
        int int55 = type49.getOpcode(148);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type49, false);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type59, type62, type63, type67, type70 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type76, false);
        java.lang.String str81 = type58.toString();
        int int82 = type58.getSort();
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier57.newValue(type58);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value85 = simpleVerifier57.newOperation(abstractInsnNode84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(CBFCF)I" + "'", str10, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str21, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(CBFCF)B" + "'", str39, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "char" + "'", str52, "char");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 148 + "'", int55 == 148);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)B" + "'", str75, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "B" + "'", str81, "B");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertNotNull(value83);
    }

    @Test
    public void test01881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01881");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.toString();
        java.lang.String str24 = type0.toString();
        int int25 = type0.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, true);
        int int31 = type0.getSize();
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type32, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type37 = null;
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type37, list38, false);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type46, type49, type50, type54, type57 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray61);
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException66);
        java.lang.Class<?> wildcardClass68 = analyzerException66.getClass();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        java.lang.String str70 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass68);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type71, true);
        boolean boolean75 = type71.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier40.newValue(type71);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value77 = simpleVerifier34.unaryOperation(abstractInsnNode35, value76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B" + "'", str23, "B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "char" + "'", str44, "char");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)B" + "'", str62, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)C" + "'", str63, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str70, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(value76);
    }

    @Test
    public void test01882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01882");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        int int23 = type18.getSort();
        java.lang.String str24 = type18.getDescriptor();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException47);
        java.lang.Class<?> wildcardClass49 = analyzerException47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str51 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type52, list53, true);
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type44, list56, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type44, false);
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier62.newValue(type64);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value66 = simpleVerifier60.merge(value61, value65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str51, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(value65);
    }

    @Test
    public void test01883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01883");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        java.lang.String str15 = type12.getClassName();
        int int17 = type12.getOpcode(138);
        int int18 = type12.getSize();
        boolean boolean20 = type12.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier7.newValue(type12);
        int int23 = type12.getOpcode(0);
        int int25 = type12.getOpcode(0);
        org.mockito.asm.Type[] typeArray27 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray27);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray27);
        int int30 = type1.getSize();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type32, list33, true);
        java.lang.Class<?> wildcardClass36 = simpleVerifier35.getClass();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str40 = type39.getDescriptor();
        int int41 = type39.getSort();
        int int42 = type39.getSize();
        java.lang.String str43 = type39.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type39, true);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        int int48 = type46.getOpcode(101);
        int int50 = type46.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier45.newValue(type46);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException58.addSuppressed((java.lang.Throwable) analyzerException60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException62);
        boolean boolean64 = type52.equals((java.lang.Object) analyzerException63);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier45.newValue(type52);
        java.lang.String str66 = type52.getDescriptor();
        java.lang.String str67 = type52.getDescriptor();
        java.lang.String str68 = type52.getDescriptor();
        org.mockito.asm.Type[] typeArray70 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray70);
        java.util.List list72 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type52, list72, true);
        org.mockito.asm.Type[] typeArray75 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "char" + "'", str15, "char");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 138 + "'", int17 == 138);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(CBFCF)C" + "'", str28, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;" + "'", str29, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Lfloat;" + "'", str40, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 101 + "'", int48 == 101);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 191 + "'", int50 == 191);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "F" + "'", str66, "F");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "F" + "'", str67, "F");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "F" + "'", str68, "F");
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)F" + "'", str71, "(CBFCF)F");
    }

    @Test
    public void test01884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01884");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("C");
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 24);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type35, list36, true);
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type27, list39, false);
        boolean boolean42 = type5.equals((java.lang.Object) type8);
        int int43 = type8.getSize();
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type8, list44, true);
        int int48 = type8.getOpcode(193);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter52.copyOperation(abstractInsnNode53, value54);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.newValue(type56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        boolean boolean63 = type58.equals((java.lang.Object) 177);
        int int64 = type58.getSize();
        java.lang.String str65 = type58.toString();
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter52.newValue(type58);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter68.ternaryOperation(abstractInsnNode69, value70, value71, value72);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter74.copyOperation(abstractInsnNode75, value76);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter74.newValue(type78);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter80 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode81 = null;
        org.mockito.asm.tree.analysis.Value value82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter80.copyOperation(abstractInsnNode81, value82);
        org.mockito.asm.Type type84 = null;
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter80.newValue(type84);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter68.merge(value79, value85);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter52.copyOperation(abstractInsnNode67, value86);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = simpleVerifier50.copyOperation(abstractInsnNode51, value87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "char" + "'", str2, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 193 + "'", int48 == 193);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "F" + "'", str65, "F");
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNull(value83);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test01885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01885");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        int int34 = type26.getSize();
        java.lang.String str35 = type26.getDescriptor();
        java.lang.String str36 = type26.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            int int37 = type26.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "F" + "'", str35, "F");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
    }

    @Test
    public void test01886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01886");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        int int17 = type15.getOpcode(101);
        int int19 = type15.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier14.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException27.addSuppressed((java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException31);
        boolean boolean33 = type21.equals((java.lang.Object) analyzerException32);
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier14.newValue(type21);
        java.lang.String str35 = type21.getDescriptor();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException38);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException42);
        analyzerException39.addSuppressed((java.lang.Throwable) analyzerException43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.ternaryOperation(abstractInsnNode52, value53, value54, value55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.newValue(type61);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter63.copyOperation(abstractInsnNode64, value65);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.newValue(type67);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter51.merge(value62, value68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode48, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException73.addSuppressed((java.lang.Throwable) analyzerException75);
        analyzerException70.addSuppressed((java.lang.Throwable) analyzerException73);
        analyzerException43.addSuppressed((java.lang.Throwable) analyzerException70);
        java.lang.Throwable[] throwableArray79 = analyzerException70.getSuppressed();
        boolean boolean80 = type21.equals((java.lang.Object) analyzerException70);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type82 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type83 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean85 = type83.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type82, type83, true);
        java.lang.String str88 = type83.getClassName();
        java.util.List list89 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier91 = new org.mockito.asm.tree.analysis.SimpleVerifier(type81, type83, list89, true);
        java.lang.String str92 = type83.toString();
        java.lang.String str93 = type83.toString();
        java.util.List list94 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier96 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type83, list94, false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type97 = type21.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 101 + "'", int17 == 101);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 191 + "'", int19 == 191);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "F" + "'", str35, "F");
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "void" + "'", str88, "void");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "V" + "'", str92, "V");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "V" + "'", str93, "V");
    }

    @Test
    public void test01887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01887");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        int int23 = type18.getSort();
        java.lang.String str24 = type18.getDescriptor();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException47);
        java.lang.Class<?> wildcardClass49 = analyzerException47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str51 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type52, list53, true);
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type44, list56, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type44, false);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getObjectType("g.mockito.asm.tree.analysis.AnalyzerException");
        java.util.List list63 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type62, list63, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        java.util.List list67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value68 = simpleVerifier65.naryOperation(abstractInsnNode66, list67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str51, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type62);
    }

    @Test
    public void test01888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01888");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier2 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.CHAR_TYPE;
        int int5 = type3.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value6 = simpleVerifier2.newValue(type3);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type25, false);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier29.newValue(type30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value36 = simpleVerifier29.newValue(type32);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type38 = null;
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type38, list39, false);
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier29.newValue(type37);
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier2.newValue(type37);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        int int45 = type44.getSize();
        java.lang.String str46 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier2.newValue(type44);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        boolean boolean53 = type48.equals((java.lang.Object) 177);
        java.lang.String str54 = type48.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException57);
        java.lang.Class<?> wildcardClass59 = analyzerException57.getClass();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass59);
        int int62 = type60.getOpcode(114);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) 151);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.Type[] typeArray79 = new org.mockito.asm.Type[] { type64, type67, type68, type72, type75 };
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray79);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray79);
        boolean boolean82 = type48.equals((java.lang.Object) typeArray79);
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray79);
        int int85 = type44.getOpcode(0);
        java.util.List list86 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type44, list86, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = simpleVerifier88.newOperation(abstractInsnNode89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 101 + "'", int5 == 101);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "F" + "'", str54, "F");
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118 + "'", int62 == 118);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(CBFCF)B" + "'", str80, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str81, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)F" + "'", str83, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
    }

    @Test
    public void test01889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01889");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        int int2 = type1.getSize();
        org.mockito.asm.Type type3 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter4.ternaryOperation(abstractInsnNode5, value6, value7, value8);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.Type type14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.newValue(type14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter4.merge(value15, value21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str24 = type23.getDescriptor();
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter4.newValue(type23);
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type23, list26, true);
        boolean boolean29 = type1.equals((java.lang.Object) simpleVerifier28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        java.util.List list31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value32 = simpleVerifier28.naryOperation(abstractInsnNode30, list31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test01890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01890");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        java.lang.Object obj12 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.ternaryOperation(abstractInsnNode20, value21, value22, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter19.merge(value30, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.ternaryOperation(abstractInsnNode39, value40, value41, value42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter38.merge(value49, value55);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier18.merge(value37, value49);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter13.copyOperation(abstractInsnNode17, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj12, value58);
        java.lang.Class<?> wildcardClass60 = value58.getClass();
        java.lang.String str61 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier10.newValue(type62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.SHORT_TYPE;
        int int65 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier10.newValue(type64);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("(CBFCF)Lfloat;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type68, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode71 = null;
        java.util.List list72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value73 = simpleVerifier70.naryOperation(abstractInsnNode71, list72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str61, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
    }

    @Test
    public void test01891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01891");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("short");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01892");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        java.lang.String str15 = type12.getClassName();
        int int17 = type12.getOpcode(138);
        int int18 = type12.getSize();
        boolean boolean20 = type12.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier7.newValue(type12);
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type12, list22, true);
        java.lang.Class<?> wildcardClass25 = type1.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "char" + "'", str15, "char");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 138 + "'", int17 == 138);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test01893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01893");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) (byte) 100);
        java.lang.String str7 = type4.getClassName();
        boolean boolean9 = type4.equals((java.lang.Object) 177);
        java.lang.String str10 = type4.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException13);
        java.lang.Class<?> wildcardClass15 = analyzerException13.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        int int18 = type16.getOpcode(114);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray35);
        boolean boolean38 = type4.equals((java.lang.Object) typeArray35);
        int int39 = type4.getSort();
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type4, list40, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str49 = type48.getDescriptor();
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type53, type56, type57, type61, type64 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type70, false);
        org.mockito.asm.Type type75 = null;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier74.newValue(type75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) (byte) 100);
        java.lang.String str80 = type77.getClassName();
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier74.newValue(type77);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter44.copyOperation(abstractInsnNode51, value81);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value83 = simpleVerifier42.copyOperation(abstractInsnNode43, value81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "float" + "'", str7, "float");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "F" + "'", str10, "F");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 118 + "'", int18 == 118);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str37, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "I" + "'", str49, "I");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)B" + "'", str69, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "float" + "'", str80, "float");
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
    }

    @Test
    public void test01894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01894");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier25.newValue(type28);
        int int33 = type28.getSize();
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type28, list34, true);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int38 = type37.getSize();
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier36.newValue(type37);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier36.newValue(type41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str45 = type44.getDescriptor();
        int int46 = type44.getSort();
        int int47 = type44.getDimensions();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str50 = type49.getDescriptor();
        int int51 = type49.getSort();
        java.util.List list52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type49, list52, true);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str57 = type56.getDescriptor();
        int int58 = type56.getSort();
        int int59 = type56.getDimensions();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str62 = type61.getDescriptor();
        int int63 = type61.getSort();
        java.util.List list64 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type61, list64, true);
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier54.newValue(type61);
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier36.newValue(type61);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value70 = simpleVerifier36.newOperation(abstractInsnNode69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lfloat;" + "'", str45, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lfloat;" + "'", str50, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Lfloat;" + "'", str57, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Lfloat;" + "'", str62, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
    }

    @Test
    public void test01895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01895");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.getDescriptor();
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter2.newValue(type6);
        org.mockito.asm.Type[] typeArray10 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray10);
        java.lang.Class<?> wildcardClass12 = typeArray10.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException17);
        java.lang.Class<?> wildcardClass19 = analyzerException17.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        java.lang.String str22 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type24, type27, type28, type32, type35 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type41, false);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str22, value47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type13, value47);
        int int50 = type13.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type13, true);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        int int56 = type54.getOpcode(113);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        boolean boolean62 = type57.equals((java.lang.Object) 177);
        java.util.List list63 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type57, list63, false);
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier52.newValue(type54);
        int int67 = value66.getSize();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "I" + "'", str7, "I");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(CBFCF)I" + "'", str11, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str21, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str22, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)B" + "'", str40, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 113 + "'", int56 == 113);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test01896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01896");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) (byte) 100);
        java.lang.String str4 = type1.getClassName();
        boolean boolean6 = type1.equals((java.lang.Object) 177);
        int int7 = type1.getSize();
        java.lang.String str8 = type1.toString();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list9, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        java.util.List list13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value14 = simpleVerifier11.naryOperation(abstractInsnNode12, list13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "float" + "'", str4, "float");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "F" + "'", str8, "F");
    }

    @Test
    public void test01897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01897");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value4 = simpleVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.ternaryOperation(abstractInsnNode26, value27, value28, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter25.merge(value36, value42);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier5.merge(value24, value36);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type64, false);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier68.newValue(type69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier68.newValue(type71);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type71, list76, true);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier5.newValue(type71);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier5.newValue(type80);
        boolean boolean83 = type80.equals((java.lang.Object) "I");
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier0.newValue(type80);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getObjectType("boolean");
        java.lang.String str87 = type86.getDescriptor();
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier0.newValue(type86);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode89 = null;
        java.util.List list90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value91 = simpleVerifier0.naryOperation(abstractInsnNode89, list90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Lboolean;" + "'", str87, "Lboolean;");
        org.junit.Assert.assertNotNull(value88);
    }

    @Test
    public void test01898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01898");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(169);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 173 + "'", int3 == 173);
    }

    @Test
    public void test01899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01899");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str5 = type4.getDescriptor();
        int int6 = type4.getSort();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type7, list8, false);
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, list11, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.newValue(type19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        boolean boolean26 = type21.equals((java.lang.Object) 177);
        int int27 = type21.getSize();
        java.lang.String str28 = type21.toString();
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter15.newValue(type21);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter15.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        int int35 = type33.getOpcode(101);
        java.lang.String str36 = type33.toString();
        int int37 = type33.getSize();
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter15.newValue(type33);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.ternaryOperation(abstractInsnNode43, value44, value45, value46);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.ternaryOperation(abstractInsnNode51, value52, value53, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter56.copyOperation(abstractInsnNode57, value58);
        org.mockito.asm.Type type60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter56.newValue(type60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter62.copyOperation(abstractInsnNode63, value64);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter62.newValue(type66);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter50.merge(value61, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.ternaryOperation(abstractInsnNode70, value71, value72, value73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter81 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        org.mockito.asm.tree.analysis.Value value83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter81.copyOperation(abstractInsnNode82, value83);
        org.mockito.asm.Type type85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter81.newValue(type85);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter69.merge(value80, value86);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier49.merge(value68, value80);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter42.copyOperation(abstractInsnNode48, value80);
        int int90 = value89.getSize();
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter40.copyOperation(abstractInsnNode41, value89);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter15.copyOperation(abstractInsnNode39, value89);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier13.copyOperation(abstractInsnNode14, value92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LLB;;" + "'", str5, "LLB;;");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "F" + "'", str28, "F");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 101 + "'", int35 == 101);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "C" + "'", str36, "C");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test01900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01900");
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException7.addSuppressed((java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException14.addSuppressed((java.lang.Throwable) analyzerException16);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException18);
        analyzerException9.addSuppressed((java.lang.Throwable) analyzerException18);
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("Lfloat;", (java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException25.addSuppressed((java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException25);
        java.lang.Throwable[] throwableArray30 = analyzerException29.getSuppressed();
        analyzerException22.addSuppressed((java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException39.addSuppressed((java.lang.Throwable) analyzerException41);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException46.addSuppressed((java.lang.Throwable) analyzerException48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException50);
        analyzerException41.addSuppressed((java.lang.Throwable) analyzerException50);
        analyzerException37.addSuppressed((java.lang.Throwable) analyzerException41);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)F", (java.lang.Throwable) analyzerException54);
        analyzerException22.addSuppressed((java.lang.Throwable) analyzerException55);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Throwable) analyzerException55);
        java.lang.String str58 = analyzerException55.toString();
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)F" + "'", str58, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)F");
    }

    @Test
    public void test01901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01901");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        int int33 = type31.getOpcode(101);
        int int35 = type31.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value36 = simpleVerifier30.newValue(type31);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type39, type42, type43, type47, type50 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type56, false);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier60.newValue(type61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier60.newValue(type63);
        java.util.List list68 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type63, list68, true);
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier30.newValue(type37);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter73 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter73.copyOperation(abstractInsnNode74, value75);
        org.mockito.asm.Type type77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter73.newValue(type77);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = simpleVerifier30.unaryOperation(abstractInsnNode72, value78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 101 + "'", int33 == 101);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 191 + "'", int35 == 191);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)B" + "'", str55, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNotNull(value78);
    }

    @Test
    public void test01902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01902");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        java.lang.String str9 = type6.getClassName();
        int int11 = type6.getOpcode(138);
        int int12 = type6.getSize();
        boolean boolean14 = type6.equals((java.lang.Object) 154);
        java.lang.String str15 = type6.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type6, true);
        org.mockito.asm.tree.analysis.Value value18 = simpleVerifier0.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int22 = type20.getOpcode(48);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type24, type27, type28, type32, type35 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type41, false);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier45.newValue(type46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier45.newValue(type48);
        int int53 = type48.getSize();
        java.util.List list54 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type48, list54, true);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int58 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier56.newValue(type57);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value60 = simpleVerifier0.copyOperation(abstractInsnNode19, value59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "char" + "'", str9, "char");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 138 + "'", int11 == 138);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "C" + "'", str15, "C");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 48 + "'", int22 == 48);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)B" + "'", str40, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(value59);
    }

    @Test
    public void test01903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01903");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str46 = type45.getDescriptor();
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter26.newValue(type45);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value48 = simpleVerifier22.copyOperation(abstractInsnNode25, value47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "C" + "'", str46, "C");
        org.junit.Assert.assertNotNull(value47);
    }

    @Test
    public void test01904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01904");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, list10, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value14 = simpleVerifier12.newOperation(abstractInsnNode13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
    }

    @Test
    public void test01905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01905");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type15, type18, type19, type23, type26 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray30);
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        java.lang.Class<?> wildcardClass37 = analyzerException35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type40, true);
        boolean boolean43 = type9.equals((java.lang.Object) type40);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier7.newValue(type40);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int48 = type46.getOpcode(48);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type67, false);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier71.newValue(type72);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean76 = type74.equals((java.lang.Object) (byte) 100);
        java.lang.String str77 = type74.getClassName();
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier71.newValue(type74);
        int int79 = type74.getSize();
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type74, list80, true);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int84 = type83.getSize();
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier82.newValue(type83);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier82.newValue(type87);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = simpleVerifier7.unaryOperation(abstractInsnNode45, value88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "char" + "'", str13, "char");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(CBFCF)B" + "'", str31, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)C" + "'", str32, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str39, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 48 + "'", int48 == 48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "float" + "'", str77, "float");
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value88);
    }

    @Test
    public void test01906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01906");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier30.newValue(type31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value35 = simpleVerifier30.newOperation(abstractInsnNode34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "long" + "'", str32, "long");
        org.junit.Assert.assertNotNull(value33);
    }

    @Test
    public void test01907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01907");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier22.newValue(type25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value31 = simpleVerifier22.newOperation(abstractInsnNode30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(value29);
    }

    @Test
    public void test01908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01908");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int3 = type1.getOpcode(48);
        java.lang.String str4 = type1.getClassName();
        java.lang.String str5 = type1.getClassName();
        java.lang.String str6 = type1.getClassName();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type25, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type7, true);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str33 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier31.newValue(type32);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = simpleVerifier31.newValue(type35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException62);
        java.lang.Class<?> wildcardClass64 = analyzerException62.getClass();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.lang.String str66 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type67, true);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier69.newValue(type71);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str75 = type74.getInternalName();
        java.lang.String str76 = type74.toString();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier69.newValue(type74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) type35, value77);
        java.lang.Throwable[] throwableArray79 = analyzerException78.getSuppressed();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "long" + "'", str33, "long");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "char" + "'", str40, "char");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)C" + "'", str59, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str66, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "LB;" + "'", str75, "LB;");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "LLB;;" + "'", str76, "LLB;;");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test01909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01909");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type26, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.ternaryOperation(abstractInsnNode33, value34, value35, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter32.merge(value43, value49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.ternaryOperation(abstractInsnNode52, value53, value54, value55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.newValue(type61);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter63.copyOperation(abstractInsnNode64, value65);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.newValue(type67);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter51.merge(value62, value68);
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier31.merge(value50, value62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter71.ternaryOperation(abstractInsnNode72, value73, value74, value75);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter77.copyOperation(abstractInsnNode78, value79);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter77.newValue(type81);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter83 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter83.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.Type type87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter83.newValue(type87);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter71.merge(value82, value88);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier30.merge(value70, value82);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter0.copyOperation(abstractInsnNode7, value82);
        java.lang.Class<?> wildcardClass92 = value82.getClass();
        org.mockito.asm.Type type93 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass92);
        java.lang.String str94 = type93.getDescriptor();
        int int95 = type93.getSize();
        int int96 = type93.getSize();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str94, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
    }

    @Test
    public void test01910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01910");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        java.lang.Class<?> wildcardClass7 = analyzerException5.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, false);
        int int11 = type1.getSort();
        java.lang.String str12 = type1.toString();
        org.mockito.asm.Type type13 = null;
        java.util.List list14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type13, list14, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value19 = simpleVerifier16.unaryOperation(abstractInsnNode17, value18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "B" + "'", str12, "B");
    }

    @Test
    public void test01911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01911");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)C");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, list4, true);
        java.lang.Class<?> wildcardClass7 = simpleVerifier6.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        java.lang.String str9 = type8.getInternalName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type11, type14, type15, type19, type22 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        java.lang.String str28 = type10.toString();
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type10, list29, true);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type32, true);
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, list35, false);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) (byte) 100);
        java.lang.String str41 = type38.getClassName();
        boolean boolean43 = type38.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException46);
        java.lang.Class<?> wildcardClass48 = analyzerException46.getClass();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass48);
        org.mockito.asm.Type type50 = type49.getElementType();
        java.lang.String str51 = type50.getClassName();
        java.lang.String str52 = type50.getDescriptor();
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type50, list53, false);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type57, type58, true);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier62.newValue(type63);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type68, type69, true);
        java.lang.String str74 = type69.getClassName();
        java.util.List list75 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type67, type69, list75, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type69, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type69, true);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getType("V");
        int int84 = type83.getSort();
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier81.newValue(type83);
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier55.newValue(type83);
        java.lang.String str87 = type83.getDescriptor();
        org.mockito.asm.Type[] typeArray89 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type83, typeArray89);
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier37.newValue(type83);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode92 = null;
        java.util.List list93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value94 = simpleVerifier37.naryOperation(abstractInsnNode92, list93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str9, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)B" + "'", str27, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "B" + "'", str28, "B");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str51, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str52, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "void" + "'", str74, "void");
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNull(value85);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "V" + "'", str87, "V");
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(CBFCF)V" + "'", str90, "(CBFCF)V");
        org.junit.Assert.assertNull(value91);
    }

    @Test
    public void test01912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01912");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.ternaryOperation(abstractInsnNode26, value27, value28, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter25.merge(value36, value42);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier5.merge(value24, value36);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter0.copyOperation(abstractInsnNode4, value44);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str52 = type51.getDescriptor();
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type56, type59, type60, type64, type67 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type73, false);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier77.newValue(type78);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean82 = type80.equals((java.lang.Object) (byte) 100);
        java.lang.String str83 = type80.getClassName();
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier77.newValue(type80);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter47.copyOperation(abstractInsnNode54, value84);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter0.copyOperation(abstractInsnNode46, value84);
        java.lang.Class<?> wildcardClass87 = value84.getClass();
        java.lang.String str88 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass87);
        java.lang.String str89 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass87);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "I" + "'", str52, "I");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)B" + "'", str72, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "float" + "'", str83, "float");
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str88, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str89, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test01913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01913");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        boolean boolean11 = type6.equals((java.lang.Object) 177);
        int int12 = type6.getSize();
        java.lang.String str13 = type6.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        int int20 = type18.getOpcode(101);
        java.lang.String str21 = type18.toString();
        int int22 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.ternaryOperation(abstractInsnNode36, value37, value38, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter35.merge(value46, value52);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter54.ternaryOperation(abstractInsnNode55, value56, value57, value58);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter60.copyOperation(abstractInsnNode61, value62);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.newValue(type64);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter66.copyOperation(abstractInsnNode67, value68);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter66.newValue(type70);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter54.merge(value65, value71);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier34.merge(value53, value65);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter27.copyOperation(abstractInsnNode33, value65);
        int int75 = value74.getSize();
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter25.copyOperation(abstractInsnNode26, value74);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter0.copyOperation(abstractInsnNode24, value74);
        java.lang.Class<?> wildcardClass78 = basicInterpreter0.getClass();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 101 + "'", int20 == 101);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "C" + "'", str21, "C");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test01914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01914");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        java.lang.String str21 = type2.getDescriptor();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 24);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException47);
        java.lang.Class<?> wildcardClass49 = analyzerException47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str51 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type52, list53, true);
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type44, list56, false);
        boolean boolean59 = type22.equals((java.lang.Object) type25);
        java.lang.String str60 = type22.toString();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        boolean boolean66 = type61.equals((java.lang.Object) 177);
        java.lang.String str67 = type61.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException70);
        java.lang.Class<?> wildcardClass72 = analyzerException70.getClass();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        int int75 = type73.getOpcode(114);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) 151);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type81 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean83 = type81.equals((java.lang.Object) (byte) 100);
        java.lang.String str84 = type81.getClassName();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean87 = type85.equals((java.lang.Object) 151);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean90 = type88.equals((java.lang.Object) (byte) 100);
        java.lang.String str91 = type88.getClassName();
        org.mockito.asm.Type[] typeArray92 = new org.mockito.asm.Type[] { type77, type80, type81, type85, type88 };
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type76, typeArray92);
        java.lang.String str94 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray92);
        boolean boolean95 = type61.equals((java.lang.Object) typeArray92);
        java.lang.String str96 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray92);
        boolean boolean97 = type2.equals((java.lang.Object) typeArray92);
        int int99 = type2.getOpcode(80);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lfloat;" + "'", str21, "Lfloat;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str51, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "V" + "'", str60, "V");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "F" + "'", str67, "F");
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 118 + "'", int75 == 118);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "float" + "'", str84, "float");
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "float" + "'", str91, "float");
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(CBFCF)B" + "'", str93, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str94, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "(CBFCF)V" + "'", str96, "(CBFCF)V");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 84 + "'", int99 == 84);
    }

    @Test
    public void test01915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01915");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        int int17 = type15.getOpcode(101);
        int int19 = type15.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier14.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException27.addSuppressed((java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException31);
        boolean boolean33 = type21.equals((java.lang.Object) analyzerException32);
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier14.newValue(type21);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier14.newValue(type35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type40, type43, type44, type48, type51 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type57, false);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier14.newValue(type57);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        java.util.List list64 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value65 = simpleVerifier14.naryOperation(abstractInsnNode63, list64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 101 + "'", int17 == 101);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 191 + "'", int19 == 191);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)B" + "'", str56, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(value62);
    }

    @Test
    public void test01916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01916");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)LB;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/SimpleVerifier;", (java.lang.Throwable) analyzerException2);
        java.lang.Throwable throwable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            analyzerException2.addSuppressed(throwable4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01917");
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException13.addSuppressed((java.lang.Throwable) analyzerException15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException17);
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException17);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("Lfloat;", (java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException24.addSuppressed((java.lang.Throwable) analyzerException26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException24);
        java.lang.Throwable[] throwableArray29 = analyzerException28.getSuppressed();
        analyzerException21.addSuppressed((java.lang.Throwable) analyzerException28);
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException38.addSuppressed((java.lang.Throwable) analyzerException40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException45.addSuppressed((java.lang.Throwable) analyzerException47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException49);
        analyzerException40.addSuppressed((java.lang.Throwable) analyzerException49);
        analyzerException36.addSuppressed((java.lang.Throwable) analyzerException40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Throwable) analyzerException36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)F", (java.lang.Throwable) analyzerException53);
        analyzerException21.addSuppressed((java.lang.Throwable) analyzerException54);
        java.lang.Throwable[] throwableArray56 = analyzerException54.getSuppressed();
        java.lang.String str57 = analyzerException54.toString();
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)F" + "'", str57, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)F");
    }

    @Test
    public void test01918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01918");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        java.lang.String str3 = type0.toString();
        int int4 = type0.getSize();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        int int6 = type5.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type5, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        java.util.List list10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value11 = simpleVerifier8.naryOperation(abstractInsnNode9, list10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test01919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01919");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type[] typeArray8 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str9 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray8);
        java.lang.Class<?> wildcardClass10 = typeArray8.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str13 = type12.getInternalName();
        int int14 = type12.getDimensions();
        java.lang.Class<?> wildcardClass15 = type12.getClass();
        java.lang.String str16 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass15);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "(CBFCF)I" + "'", str9, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str13, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/Type" + "'", str16, "org/mockito/asm/Type");
    }

    @Test
    public void test01920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01920");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        java.util.List list6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value7 = simpleVerifier4.naryOperation(abstractInsnNode5, list6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "void" + "'", str1, "void");
    }

    @Test
    public void test01921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01921");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, list10, true);
        org.mockito.asm.Type type13 = type9.getElementType();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type33, false);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier37.newValue(type38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier37.newValue(type40);
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type40, list45, true);
        int int49 = type40.getOpcode(100);
        org.mockito.asm.Type[] typeArray51 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray51);
        int int53 = type40.getSort();
        org.mockito.asm.Type[] typeArray55 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray55);
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray55);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int60 = type59.getSort();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType("I");
        java.util.List list63 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type62, list63, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type62, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        java.util.List list69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value70 = simpleVerifier67.naryOperation(abstractInsnNode68, list69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 102 + "'", int49 == 102);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)F" + "'", str52, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)F" + "'", str56, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str57, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(type62);
    }

    @Test
    public void test01922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01922");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str13 = type12.getDescriptor();
        java.lang.String str14 = type12.getInternalName();
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier10.newValue(type12);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str18 = type17.getDescriptor();
        int int19 = type17.getSort();
        int int20 = type17.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type17, false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str26 = type25.getDescriptor();
        int int27 = type25.getSort();
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type25, list28, false);
        int int31 = type25.getSize();
        int int32 = type25.getSort();
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type25, list33, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value37 = simpleVerifier35.newOperation(abstractInsnNode36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LB;" + "'", str13, "LB;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "B" + "'", str14, "B");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lfloat;" + "'", str18, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lfloat;" + "'", str26, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
    }

    @Test
    public void test01923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01923");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: boolean");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 105");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01924");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter0.copyOperation(abstractInsnNode6, value7);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter11.ternaryOperation(abstractInsnNode12, value13, value14, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter11.merge(value22, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.ternaryOperation(abstractInsnNode31, value32, value33, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter30.merge(value41, value47);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier10.merge(value29, value41);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter0.copyOperation(abstractInsnNode9, value41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value52 = basicInterpreter0.newOperation(abstractInsnNode51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
    }

    @Test
    public void test01925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01925");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException22);
        java.lang.Class<?> wildcardClass24 = analyzerException22.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type27, list28, true);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type19, list31, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier35.newValue(type37);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str41 = type40.getClassName();
        java.lang.String str42 = type40.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        int int46 = type44.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier43.newValue(type44);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type40, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str54 = type53.getDescriptor();
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter49.newValue(type53);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type57, true);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier61.newValue(type62);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) 151);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean84 = type82.equals((java.lang.Object) (byte) 100);
        java.lang.String str85 = type82.getClassName();
        org.mockito.asm.Type[] typeArray86 = new org.mockito.asm.Type[] { type71, type74, type75, type79, type82 };
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray86);
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray86);
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray86);
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter49.newValue(type62);
        int int91 = value90.getSize();
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier35.merge(value47, value90);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier33.copyOperation(abstractInsnNode34, value47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str26, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "long" + "'", str41, "long");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "long" + "'", str42, "long");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 101 + "'", int46 == 101);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "I" + "'", str54, "I");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "char" + "'", str69, "char");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "float" + "'", str85, "float");
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(CBFCF)B" + "'", str87, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(CBFCF)C" + "'", str88, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(CBFCF)C" + "'", str89, "(CBFCF)C");
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test01926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01926");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("g/mockito/asm/tree/analysis/SimpleVerifier");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01927");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        int int6 = type0.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type49, type52, type53, type57, type60 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type66, false);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier70.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier70.newValue(type73);
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type73, list78, true);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier7.newValue(type73);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type73, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        java.util.List list85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value86 = simpleVerifier83.naryOperation(abstractInsnNode84, list85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)B" + "'", str65, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value81);
    }

    @Test
    public void test01928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01928");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.String str5 = type1.getClassName();
        java.lang.String str6 = type1.getDescriptor();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = type1.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Z" + "'", str6, "Z");
    }

    @Test
    public void test01929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01929");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value4 = simpleVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type23, false);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier27.newValue(type28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier27.newValue(type30);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type36 = null;
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type36, list37, false);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier27.newValue(type35);
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier0.newValue(type35);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value44 = simpleVerifier0.copyOperation(abstractInsnNode42, value43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value41);
    }

    @Test
    public void test01930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01930");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type32 = type31.getElementType();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier22.newValue(type32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter35.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter35.copyOperation(abstractInsnNode42, value61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str66 = type65.getDescriptor();
        int int67 = type65.getSort();
        java.util.List list68 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type65, list68, false);
        int int71 = type65.getSize();
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter35.newValue(type65);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value73 = simpleVerifier22.copyOperation(abstractInsnNode34, value72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Lfloat;" + "'", str66, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(value72);
    }

    @Test
    public void test01931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01931");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        java.lang.Class<?> wildcardClass7 = analyzerException5.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, false);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str14 = type13.getDescriptor();
        int int15 = type13.getSort();
        java.util.List list16 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type13, list16, false);
        int int19 = type13.getSize();
        int int20 = type13.getSort();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type21, false);
        int int25 = type13.getOpcode(154);
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier10.newValue(type13);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str29 = type28.getDescriptor();
        int int30 = type28.getSort();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 24);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type35, type38, type39, type43, type46 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray50);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException56);
        java.lang.Class<?> wildcardClass58 = analyzerException56.getClass();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        java.lang.String str60 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type61, list62, true);
        java.util.List list65 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type53, list65, false);
        boolean boolean68 = type31.equals((java.lang.Object) type34);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type74 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean76 = type74.equals((java.lang.Object) 151);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = type78.getClassName();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean84 = type82.equals((java.lang.Object) 151);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean87 = type85.equals((java.lang.Object) (byte) 100);
        java.lang.String str88 = type85.getClassName();
        org.mockito.asm.Type[] typeArray89 = new org.mockito.asm.Type[] { type74, type77, type78, type82, type85 };
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray89);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray89);
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray89);
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray89);
        int int94 = type28.getSort();
        org.mockito.asm.tree.analysis.Value value95 = simpleVerifier10.newValue(type28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode96 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value97 = simpleVerifier10.newOperation(abstractInsnNode96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lfloat;" + "'", str14, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 158 + "'", int25 == 158);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "LLB;;" + "'", str29, "LLB;;");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(CBFCF)B" + "'", str51, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str60, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "char" + "'", str72, "char");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "float" + "'", str88, "float");
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(CBFCF)B" + "'", str90, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(CBFCF)C" + "'", str91, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(CBFCF)V" + "'", str92, "(CBFCF)V");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(CBFCF)LLB;;" + "'", str93, "(CBFCF)LLB;;");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 10 + "'", int94 == 10);
        org.junit.Assert.assertNotNull(value95);
    }

    @Test
    public void test01932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01932");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("byte");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        int int38 = type36.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier35.newValue(type36);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = type40.getClassName();
        boolean boolean45 = type40.equals((java.lang.Object) 177);
        java.lang.String str46 = type40.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException49);
        java.lang.Class<?> wildcardClass51 = analyzerException49.getClass();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        int int54 = type52.getOpcode(114);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type56, type59, type60, type64, type67 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray71);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray71);
        boolean boolean74 = type40.equals((java.lang.Object) typeArray71);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray71);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray71);
        int int77 = type34.getSize();
        int int78 = type34.getSort();
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier32.newValue(type34);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode80 = null;
        java.util.List list81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value82 = simpleVerifier32.naryOperation(abstractInsnNode80, list81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 101 + "'", int38 == 101);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "F" + "'", str46, "F");
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 118 + "'", int54 == 118);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)B" + "'", str72, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str73, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)C" + "'", str75, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)Lbyte;" + "'", str76, "(CBFCF)Lbyte;");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(value79);
    }

    @Test
    public void test01933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01933");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(167);
        org.mockito.asm.Type type4 = type1.getElementType();
        int int5 = type1.getSort();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 24);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException31);
        java.lang.Class<?> wildcardClass33 = analyzerException31.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.lang.String str35 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type36, list37, true);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type28, list40, false);
        boolean boolean43 = type6.equals((java.lang.Object) type9);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier46.newValue(type48);
        int int51 = type48.getOpcode(136);
        int int52 = type48.getSize();
        java.lang.String str53 = type48.getInternalName();
        java.util.List list54 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type48, list54, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = type9.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str35, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 140 + "'", int51 == 140);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found ." + "'", str53, "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
    }

    @Test
    public void test01934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01934");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type35, true);
        boolean boolean39 = type35.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier4.newValue(type35);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("byte");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        int int46 = type44.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier43.newValue(type44);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        boolean boolean53 = type48.equals((java.lang.Object) 177);
        java.lang.String str54 = type48.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException57);
        java.lang.Class<?> wildcardClass59 = analyzerException57.getClass();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass59);
        int int62 = type60.getOpcode(114);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) 151);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.Type[] typeArray79 = new org.mockito.asm.Type[] { type64, type67, type68, type72, type75 };
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray79);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray79);
        boolean boolean82 = type48.equals((java.lang.Object) typeArray79);
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray79);
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray79);
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier4.newValue(type42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        boolean boolean88 = type42.equals((java.lang.Object) analyzerException87);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type89 = type42.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "char" + "'", str8, "char");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)C" + "'", str27, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 101 + "'", int46 == 101);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "F" + "'", str54, "F");
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118 + "'", int62 == 118);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(CBFCF)B" + "'", str80, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str81, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)C" + "'", str83, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(CBFCF)Lbyte;" + "'", str84, "(CBFCF)Lbyte;");
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test01935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01935");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.toString();
        java.lang.String str24 = type0.toString();
        int int25 = type0.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type27, list28, true);
        java.lang.Class<?> wildcardClass31 = simpleVerifier30.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str35 = type34.getDescriptor();
        int int36 = type34.getSort();
        int int37 = type34.getSize();
        java.lang.String str38 = type34.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type34, true);
        boolean boolean41 = type0.equals((java.lang.Object) type34);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type43, true);
        java.lang.String str48 = type43.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type43, false);
        java.lang.String str51 = type43.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 193);
        java.lang.Class<?> wildcardClass55 = type52.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        java.lang.String str57 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type59, list60, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int66 = type64.getOpcode(48);
        java.lang.String str67 = type64.getClassName();
        java.lang.String str68 = type64.getClassName();
        java.lang.String str69 = type64.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) 151);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean84 = type82.equals((java.lang.Object) (byte) 100);
        java.lang.String str85 = type82.getClassName();
        org.mockito.asm.Type[] typeArray86 = new org.mockito.asm.Type[] { type71, type74, type75, type79, type82 };
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray86);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean90 = type88.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type70, type88, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier94 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type70, true);
        org.mockito.asm.Type type95 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str96 = type95.getClassName();
        org.mockito.asm.tree.analysis.Value value97 = simpleVerifier94.newValue(type95);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value98 = simpleVerifier62.unaryOperation(abstractInsnNode63, value97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B" + "'", str23, "B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lfloat;" + "'", str35, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "void" + "'", str48, "void");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "void" + "'", str51, "void");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/Type" + "'", str56, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org/mockito/asm/Type" + "'", str57, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 48 + "'", int66 == 48);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "boolean" + "'", str69, "boolean");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "float" + "'", str85, "float");
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(CBFCF)B" + "'", str87, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(type95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "long" + "'", str96, "long");
        org.junit.Assert.assertNotNull(value97);
    }

    @Test
    public void test01936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01936");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value10 = simpleVerifier6.newValue(type7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type13, true);
        java.lang.String str18 = type13.getClassName();
        java.util.List list19 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type13, list19, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type13, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type13, true);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("B");
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str30 = type29.getInternalName();
        java.lang.String str31 = type29.toString();
        java.util.List list32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type29, list32, true);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str37 = type36.getClassName();
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type36, list38, true);
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier25.newValue(type29);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        java.util.List list43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value44 = simpleVerifier25.naryOperation(abstractInsnNode42, list43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "void" + "'", str18, "void");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "LB;" + "'", str30, "LB;");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "LLB;;" + "'", str31, "LLB;;");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(value41);
    }

    @Test
    public void test01937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01937");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        java.lang.Class<?> wildcardClass77 = simpleVerifier0.getClass();
        java.lang.String str78 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str78, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
    }

    @Test
    public void test01938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01938");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type32, true);
        boolean boolean35 = type1.equals((java.lang.Object) type32);
        org.mockito.asm.Type type36 = null;
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type36, list37, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.ternaryOperation(abstractInsnNode42, value43, value44, value45);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter41.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.ternaryOperation(abstractInsnNode53, value54, value55, value56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.newValue(type62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter64 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter64.copyOperation(abstractInsnNode65, value66);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter64.newValue(type68);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter52.merge(value63, value69);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter71.ternaryOperation(abstractInsnNode72, value73, value74, value75);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter77.copyOperation(abstractInsnNode78, value79);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter77.newValue(type81);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter83 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter83.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.Type type87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter83.newValue(type87);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter71.merge(value82, value88);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier51.merge(value70, value82);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter41.copyOperation(abstractInsnNode50, value82);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value92 = simpleVerifier39.copyOperation(abstractInsnNode40, value82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
    }

    @Test
    public void test01939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01939");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01940");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("boolean");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lboolean;" + "'", str2, "Lboolean;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test01941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01941");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value6 = simpleVerifier4.newOperation(abstractInsnNode5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01942");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str54 = type53.getDescriptor();
        int int55 = type53.getSort();
        int int56 = type53.getSize();
        java.util.List list57 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type53, list57, true);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int62 = type60.getOpcode(48);
        java.lang.String str63 = type60.getClassName();
        java.lang.String str64 = type60.getClassName();
        java.lang.String str65 = type60.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) 151);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = type78.getClassName();
        org.mockito.asm.Type[] typeArray82 = new org.mockito.asm.Type[] { type67, type70, type71, type75, type78 };
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray82);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean86 = type84.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type66, type84, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type66, true);
        java.lang.String str91 = type60.getClassName();
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier59.newValue(type60);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode93 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value94 = simpleVerifier59.newOperation(abstractInsnNode93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str51, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Lfloat;" + "'", str54, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 48 + "'", int62 == 48);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)B" + "'", str83, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "boolean" + "'", str91, "boolean");
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test01943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01943");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, list10, true);
        org.mockito.asm.Type type13 = type9.getElementType();
        boolean boolean15 = type13.equals((java.lang.Object) 159);
        java.lang.Class<?> wildcardClass16 = type13.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test01944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01944");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException22);
        java.lang.Class<?> wildcardClass24 = analyzerException22.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type27, list28, true);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type19, list31, false);
        java.lang.String str34 = type19.getInternalName();
        java.lang.String str35 = type19.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str26, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str34, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str35, "Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
    }

    @Test
    public void test01945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01945");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        boolean boolean8 = type0.equals((java.lang.Object) 154);
        java.lang.String str9 = type0.getDescriptor();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type10, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value18 = simpleVerifier16.newOperation(abstractInsnNode17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
    }

    @Test
    public void test01946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01946");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        int int17 = type15.getOpcode(101);
        int int19 = type15.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier14.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException27.addSuppressed((java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException31);
        boolean boolean33 = type21.equals((java.lang.Object) analyzerException32);
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier14.newValue(type21);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier14.newValue(type35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type40, type43, type44, type48, type51 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type57, false);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier14.newValue(type57);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        java.lang.String str67 = type63.getClassName();
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier14.newValue(type63);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        int int71 = type69.getOpcode(101);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier14.newValue(type69);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        java.util.List list75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value76 = simpleVerifier14.naryOperation(abstractInsnNode74, list75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 101 + "'", int17 == 101);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 191 + "'", int19 == 191);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)B" + "'", str56, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 101 + "'", int71 == 101);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "char" + "'", str72, "char");
        org.junit.Assert.assertNotNull(value73);
    }

    @Test
    public void test01947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01947");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) (byte) 100);
        java.lang.String str7 = type4.getClassName();
        boolean boolean9 = type4.equals((java.lang.Object) 177);
        java.lang.String str10 = type4.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException13);
        java.lang.Class<?> wildcardClass15 = analyzerException13.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        int int18 = type16.getOpcode(114);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray35);
        boolean boolean38 = type4.equals((java.lang.Object) typeArray35);
        int int39 = type4.getSort();
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type4, list40, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type46, type49, type50, type54, type57 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type63, false);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier67.newValue(type68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier67.newValue(type70);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier44.newValue(type70);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type78 = org.mockito.asm.Type.SHORT_TYPE;
        int int79 = type78.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter80 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode81 = null;
        org.mockito.asm.tree.analysis.Value value82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter80.copyOperation(abstractInsnNode81, value82);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str85 = type84.getDescriptor();
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter80.newValue(type84);
        org.mockito.asm.Type[] typeArray88 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type84, typeArray88);
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type78, typeArray88);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type77, typeArray88);
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier44.newValue(type77);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier42.unaryOperation(abstractInsnNode43, value92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "float" + "'", str7, "float");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "F" + "'", str10, "F");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 118 + "'", int18 == 118);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str37, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)B" + "'", str62, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNull(value83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "I" + "'", str85, "I");
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(CBFCF)I" + "'", str89, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(CBFCF)S" + "'", str90, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str91, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test01948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01948");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(167);
        org.mockito.asm.Type type4 = type1.getElementType();
        int int5 = type1.getSort();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 24);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException31);
        java.lang.Class<?> wildcardClass33 = analyzerException31.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.lang.String str35 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type36, list37, true);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type28, list40, false);
        boolean boolean43 = type6.equals((java.lang.Object) type9);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value47 = simpleVerifier45.newOperation(abstractInsnNode46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str35, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test01949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01949");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        java.lang.Class<?> wildcardClass23 = type6.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.String str25 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        int int27 = type26.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str25, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
    }

    @Test
    public void test01950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01950");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.BasicInterpreter");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01951");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        int int17 = type15.getOpcode(101);
        int int19 = type15.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier14.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException27.addSuppressed((java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException31);
        boolean boolean33 = type21.equals((java.lang.Object) analyzerException32);
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier14.newValue(type21);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier14.newValue(type35);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type40, type43, type44, type48, type51 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type57, false);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier14.newValue(type57);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        java.lang.String str67 = type63.getClassName();
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier14.newValue(type63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str69 = type63.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 101 + "'", int17 == 101);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 191 + "'", int19 == 191);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)B" + "'", str56, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(value68);
    }

    @Test
    public void test01952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01952");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str13 = type12.getDescriptor();
        java.lang.String str14 = type12.getInternalName();
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier10.newValue(type12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        java.util.List list17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value18 = simpleVerifier10.naryOperation(abstractInsnNode16, list17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LB;" + "'", str13, "LB;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "B" + "'", str14, "B");
        org.junit.Assert.assertNotNull(value15);
    }

    @Test
    public void test01953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01953");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier32.newValue(type34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type37, list38, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type36, true);
        java.lang.Class<?> wildcardClass43 = type34.getClass();
        java.lang.String str44 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "org/mockito/asm/Type" + "'", str44, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org/mockito/asm/Type" + "'", str45, "org/mockito/asm/Type");
    }

    @Test
    public void test01954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01954");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
    }

    @Test
    public void test01955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01955");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type32 = type31.getElementType();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier22.newValue(type32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier22.newValue(type34);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str39 = type38.getDescriptor();
        int int40 = type38.getSort();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list42 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type41, list42, false);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type46, true);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier50.newValue(type51);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type57, true);
        java.lang.String str62 = type57.getClassName();
        java.util.List list63 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type57, list63, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type57, true);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean69 = type57.equals((java.lang.Object) type68);
        int int70 = type68.getSort();
        int int72 = type68.getOpcode(24);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier44.newValue(type68);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value74 = simpleVerifier22.unaryOperation(abstractInsnNode36, value73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "LLB;;" + "'", str39, "LLB;;");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 10 + "'", int40 == 10);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "void" + "'", str62, "void");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 5 + "'", int70 == 5);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 24 + "'", int72 == 24);
        org.junit.Assert.assertNotNull(value73);
    }

    @Test
    public void test01956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01956");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.Type type10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.newValue(type10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.merge(value11, value17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter23.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.ternaryOperation(abstractInsnNode32, value33, value34, value35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter31.merge(value42, value48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter23.copyOperation(abstractInsnNode30, value49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter0.copyOperation(abstractInsnNode22, value49);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getReturnType("(CBFCF)C");
        org.mockito.asm.Type type54 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type55, list56, true);
        java.lang.Class<?> wildcardClass59 = simpleVerifier58.getClass();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass59);
        java.lang.String str61 = type60.getInternalName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean76 = type74.equals((java.lang.Object) (byte) 100);
        java.lang.String str77 = type74.getClassName();
        org.mockito.asm.Type[] typeArray78 = new org.mockito.asm.Type[] { type63, type66, type67, type71, type74 };
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray78);
        java.lang.String str80 = type62.toString();
        java.util.List list81 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type62, list81, true);
        org.mockito.asm.Type type84 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type84, true);
        java.util.List list87 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type60, list87, false);
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.newValue(type53);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode91 = null;
        java.util.List list92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = basicInterpreter0.naryOperation(abstractInsnNode91, list92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "C" + "'", str20, "C");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str61, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "float" + "'", str77, "float");
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(CBFCF)B" + "'", str79, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "B" + "'", str80, "B");
        org.junit.Assert.assertNotNull(value90);
    }

    @Test
    public void test01957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01957");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        java.lang.String str6 = type0.getDescriptor();
        int int7 = type0.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test01958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01958");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getDimensions();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list9, true);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str14 = type13.getDescriptor();
        int int15 = type13.getSort();
        int int16 = type13.getDimensions();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str19 = type18.getDescriptor();
        int int20 = type18.getSort();
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type18, list21, true);
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier11.newValue(type18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier11.newValue(type34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        int int38 = type36.getOpcode(101);
        java.lang.String str39 = type36.toString();
        int int40 = type36.getSize();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray57);
        int int60 = type36.getSort();
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier11.newValue(type36);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        java.util.List list63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value64 = simpleVerifier11.naryOperation(abstractInsnNode62, list63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lfloat;" + "'", str14, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lfloat;" + "'", str19, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str31, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str32, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str33, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 101 + "'", int38 == 101);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "C" + "'", str39, "C");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)C" + "'", str59, "(CBFCF)C");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(value61);
    }

    @Test
    public void test01959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01959");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException3);
        java.lang.Throwable[] throwableArray9 = analyzerException3.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException11);
        java.lang.String str13 = analyzerException3.toString();
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str13, "org.mockito.asm.tree.analysis.AnalyzerException: ");
    }

    @Test
    public void test01960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01960");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        int int24 = type22.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier21.newValue(type22);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type28 = org.mockito.asm.Type.SHORT_TYPE;
        int int29 = type28.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str35 = type34.getDescriptor();
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter30.newValue(type34);
        org.mockito.asm.Type[] typeArray38 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray38);
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray38);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray38);
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier21.newValue(type27);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        boolean boolean48 = type43.equals((java.lang.Object) 177);
        java.lang.String str49 = type43.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException52);
        java.lang.Class<?> wildcardClass54 = analyzerException52.getClass();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        int int57 = type55.getOpcode(114);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type59, type62, type63, type67, type70 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray74);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray74);
        boolean boolean77 = type43.equals((java.lang.Object) typeArray74);
        java.lang.String str78 = type43.getClassName();
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier21.newValue(type43);
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type43, list80, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode83 = null;
        java.util.List list84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value85 = simpleVerifier82.naryOperation(abstractInsnNode83, list84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 101 + "'", int24 == 101);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "I" + "'", str35, "I");
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(CBFCF)I" + "'", str39, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)S" + "'", str40, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str41, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "F" + "'", str49, "F");
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 118 + "'", int57 == 118);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)B" + "'", str75, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str76, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(value79);
    }

    @Test
    public void test01961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01961");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str2 = type1.toString();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getReturnType("(CBFCF)Lbyte;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, true);
        java.lang.Object obj8 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.ternaryOperation(abstractInsnNode16, value17, value18, value19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.newValue(type25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter27.copyOperation(abstractInsnNode28, value29);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter15.merge(value26, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.ternaryOperation(abstractInsnNode35, value36, value37, value38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.newValue(type50);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter34.merge(value45, value51);
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier14.merge(value33, value45);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter9.copyOperation(abstractInsnNode13, value53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj8, value54);
        java.lang.Class<?> wildcardClass56 = value54.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType("V");
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type57, type59, list60, true);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier6.newValue(type63);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        java.util.List list70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value71 = simpleVerifier6.naryOperation(abstractInsnNode69, list70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;" + "'", str2, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "char" + "'", str66, "char");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
    }

    @Test
    public void test01962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01962");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        java.lang.Class<?> wildcardClass23 = type6.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        int int25 = type24.getSort();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type26, true);
        int int31 = type26.getOpcode(52);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "void" + "'", str27, "void");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 57 + "'", int31 == 57);
    }

    @Test
    public void test01963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01963");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.Type type2 = null;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 151);
        java.lang.String str6 = type3.getClassName();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 100);
        java.lang.String str10 = type7.getClassName();
        boolean boolean12 = type7.equals((java.lang.Object) 177);
        java.lang.String str13 = type7.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        int int21 = type19.getOpcode(114);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type23, type26, type27, type31, type34 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray38);
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray38);
        boolean boolean41 = type7.equals((java.lang.Object) typeArray38);
        int int42 = type7.getSort();
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type7, list43, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type7, false);
        java.lang.String str48 = type7.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type7, false);
        java.lang.Class<?> wildcardClass51 = type7.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "char" + "'", str6, "char");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 118 + "'", int21 == 118);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(CBFCF)B" + "'", str39, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str40, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 6 + "'", int42 == 6);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "F" + "'", str48, "F");
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test01964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01964");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier25.newValue(type28);
        int int33 = type28.getSize();
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type28, list34, true);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier36.newValue(type38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int43 = type41.getOpcode(8);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier36.newValue(type41);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str48 = type47.getDescriptor();
        int int49 = type47.getSort();
        int int50 = type47.getDimensions();
        int int52 = type47.getOpcode((int) (short) 10);
        int int53 = type47.getSort();
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier36.newValue(type47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        java.util.List list56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value57 = simpleVerifier36.naryOperation(abstractInsnNode55, list56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 12 + "'", int43 == 12);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str44, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Lfloat;" + "'", str48, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 14 + "'", int52 == 14);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(value54);
    }

    @Test
    public void test01965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01965");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type26, false);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier30.newValue(type31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier30.newValue(type33);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter0.copyOperation(abstractInsnNode7, value37);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.ternaryOperation(abstractInsnNode41, value42, value43, value44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.newValue(type50);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter52.copyOperation(abstractInsnNode53, value54);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.newValue(type56);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter40.merge(value51, value57);
        int int59 = value51.getSize();
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter0.copyOperation(abstractInsnNode39, value51);
        int int61 = value60.getSize();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test01966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01966");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier3 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException28);
        java.lang.Class<?> wildcardClass30 = analyzerException28.getClass();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        java.lang.String str32 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type33, list34, true);
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type25, list37, false);
        java.lang.String str40 = type25.getInternalName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("(CBFCF)S");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type42, false);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        int int47 = type45.getOpcode(101);
        int int49 = type45.getOpcode(191);
        int int50 = type45.getSort();
        java.lang.Class<?> wildcardClass51 = type45.getClass();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.lang.String str53 = type52.getDescriptor();
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier44.newValue(type52);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        java.lang.String str57 = type56.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier44.newValue(type56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter59.copyOperation(abstractInsnNode60, value61);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter59.copyOperation(abstractInsnNode63, value64);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type68, type69, true);
        java.lang.String str74 = type69.getClassName();
        java.util.List list75 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type67, type69, list75, true);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException84.addSuppressed((java.lang.Throwable) analyzerException86);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException84);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException88);
        boolean boolean90 = type78.equals((java.lang.Object) analyzerException89);
        java.lang.String str91 = type78.getDescriptor();
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier77.newValue(type78);
        int int93 = value92.getSize();
        org.mockito.asm.tree.analysis.Value value94 = basicInterpreter59.copyOperation(abstractInsnNode66, value92);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)J", (java.lang.Object) value58, value92);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value96 = simpleVerifier3.unaryOperation(abstractInsnNode4, value58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str32, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str40, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 101 + "'", int47 == 101);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 191 + "'", int49 == 191);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str53, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str57, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "void" + "'", str74, "void");
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "F" + "'", str91, "F");
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test01967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01967");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test01968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01968");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        int int19 = type1.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.ternaryOperation(abstractInsnNode23, value24, value25, value26);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.ternaryOperation(abstractInsnNode31, value32, value33, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter30.merge(value41, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.ternaryOperation(abstractInsnNode50, value51, value52, value53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter61.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter61.newValue(type65);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter49.merge(value60, value66);
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier29.merge(value48, value60);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter22.copyOperation(abstractInsnNode28, value60);
        int int70 = value69.getSize();
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter20.copyOperation(abstractInsnNode21, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("C", (java.lang.Object) type1, value71);
        java.lang.String str73 = analyzerException72.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: C: expected B, but found ." + "'", str73, "org.mockito.asm.tree.analysis.AnalyzerException: C: expected B, but found .");
    }

    @Test
    public void test01969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01969");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter2.ternaryOperation(abstractInsnNode3, value4, value5, value6);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter8.copyOperation(abstractInsnNode9, value10);
        org.mockito.asm.Type type12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.newValue(type12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter2.merge(value13, value19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str22 = type21.getDescriptor();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter2.newValue(type21);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier24.newValue(type26);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) 151);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type[] typeArray45 = new org.mockito.asm.Type[] { type30, type33, type34, type38, type41 };
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type47, false);
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier51.newValue(type52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier51.newValue(type54);
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier28.newValue(type54);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter2.merge(value27, value59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter61.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter61.newValue(type65);
        int int67 = value66.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter68.ternaryOperation(abstractInsnNode69, value70, value71, value72);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter74.copyOperation(abstractInsnNode75, value76);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter74.newValue(type78);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter80 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode81 = null;
        org.mockito.asm.tree.analysis.Value value82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter80.copyOperation(abstractInsnNode81, value82);
        org.mockito.asm.Type type84 = null;
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter80.newValue(type84);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter68.merge(value79, value85);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter2.merge(value66, value86);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Object) "B", value66);
        java.lang.String str89 = analyzerException88.toString();
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "C" + "'", str22, "C");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(CBFCF)B" + "'", str46, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNull(value83);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: char: expected B, but found ." + "'", str89, "org.mockito.asm.tree.analysis.AnalyzerException: char: expected B, but found .");
    }

    @Test
    public void test01970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01970");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.Type type10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.newValue(type10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.merge(value11, value17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier22.newValue(type24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type28, type31, type32, type36, type39 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type45, false);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier49.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier49.newValue(type52);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier26.newValue(type52);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter0.merge(value25, value57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter59.copyOperation(abstractInsnNode60, value61);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter59.newValue(type63);
        int int65 = value64.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter66.ternaryOperation(abstractInsnNode67, value68, value69, value70);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter72.copyOperation(abstractInsnNode73, value74);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter72.newValue(type76);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter78 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter78.copyOperation(abstractInsnNode79, value80);
        org.mockito.asm.Type type82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter78.newValue(type82);
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter66.merge(value77, value83);
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter0.merge(value64, value84);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value87 = basicInterpreter0.newOperation(abstractInsnNode86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "C" + "'", str20, "C");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)B" + "'", str44, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
    }

    @Test
    public void test01971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01971");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        java.lang.String str27 = type23.getClassName();
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type23, list28, false);
        // The following exception was thrown during execution in test generation
        try {
            int int31 = type23.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
    }

    @Test
    public void test01972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01972");
        java.lang.Object obj3 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter4.copyOperation(abstractInsnNode5, value6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter4.copyOperation(abstractInsnNode8, value48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj3, value49);
        java.lang.Throwable[] throwableArray51 = analyzerException50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = analyzerException50.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException53);
        java.lang.String str55 = analyzerException53.toString();
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue" + "'", str55, "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test01973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01973");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        int int35 = type0.getSort();
        int int37 = type0.getOpcode(114);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type39, true);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier43.newValue(type44);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type50, true);
        java.lang.String str55 = type50.getClassName();
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type50, list56, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type50, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type50, true);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.INT_TYPE;
        java.util.List list64 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type63, list64, false);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str69 = type68.getInternalName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier66.newValue(type68);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode71 = null;
        java.util.List list72 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value73 = simpleVerifier66.naryOperation(abstractInsnNode71, list72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 116 + "'", int37 == 116);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "void" + "'", str55, "void");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str69, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(value70);
    }

    @Test
    public void test01974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01974");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException8);
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: boolean", (java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: char: expected B, but found .", (java.lang.Throwable) analyzerException11);
    }

    @Test
    public void test01975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01975");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.ternaryOperation(abstractInsnNode15, value16, value17, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter14.merge(value25, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.ternaryOperation(abstractInsnNode34, value35, value36, value37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.newValue(type49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter33.merge(value44, value50);
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier13.merge(value32, value44);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter6.copyOperation(abstractInsnNode12, value44);
        int int54 = value53.getSize();
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter4.copyOperation(abstractInsnNode5, value53);
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.merge(value55, value56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str60 = type59.getClassName();
        java.lang.String str61 = type59.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        int int65 = type63.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type59, value66);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter0.newValue(type59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        java.util.List list70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value71 = basicInterpreter0.naryOperation(abstractInsnNode69, list70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "long" + "'", str60, "long");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "long" + "'", str61, "long");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 101 + "'", int65 == 101);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value68);
    }

    @Test
    public void test01976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01976");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("LLB;;");
        int int2 = type1.getDimensions();
        java.lang.String str3 = type1.getDescriptor();
        int int4 = type1.getSort();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type23, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter48.ternaryOperation(abstractInsnNode49, value50, value51, value52);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter54.copyOperation(abstractInsnNode55, value56);
        org.mockito.asm.Type type58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter54.newValue(type58);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter60.copyOperation(abstractInsnNode61, value62);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.newValue(type64);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter48.merge(value59, value65);
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier28.merge(value47, value59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter68.ternaryOperation(abstractInsnNode69, value70, value71, value72);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter74.copyOperation(abstractInsnNode75, value76);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter74.newValue(type78);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter80 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode81 = null;
        org.mockito.asm.tree.analysis.Value value82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter80.copyOperation(abstractInsnNode81, value82);
        org.mockito.asm.Type type84 = null;
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter80.newValue(type84);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter68.merge(value79, value85);
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier27.merge(value67, value79);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type89 = null;
        java.util.List list90 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type88, type89, list90, false);
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier27.newValue(type88);
        int int94 = type88.getSize();
        int int95 = type88.getSort();
        org.mockito.asm.Type[] typeArray97 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lfloat;");
        java.lang.String str98 = org.mockito.asm.Type.getMethodDescriptor(type88, typeArray97);
        java.lang.String str99 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray97);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LLB;" + "'", str3, "LLB;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNull(value83);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertNull(value93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(typeArray97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "(CBFCF)V" + "'", str98, "(CBFCF)V");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "(CBFCF)LLB;" + "'", str99, "(CBFCF)LLB;");
    }

    @Test
    public void test01977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01977");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = type5.getElementType();
        java.lang.String str7 = type6.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("byte");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        int int13 = type11.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value14 = simpleVerifier10.newValue(type11);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        boolean boolean20 = type15.equals((java.lang.Object) 177);
        java.lang.String str21 = type15.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException24);
        java.lang.Class<?> wildcardClass26 = analyzerException24.getClass();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        int int29 = type27.getOpcode(114);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type31, type34, type35, type39, type42 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray46);
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray46);
        boolean boolean49 = type15.equals((java.lang.Object) typeArray46);
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray46);
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray46);
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray46);
        java.lang.Class<?> wildcardClass53 = type6.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str7, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 101 + "'", int13 == 101);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "F" + "'", str21, "F");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 118 + "'", int29 == 118);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)B" + "'", str47, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str48, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(CBFCF)C" + "'", str50, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(CBFCF)Lbyte;" + "'", str51, "(CBFCF)Lbyte;");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str52, "(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test01978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01978");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        int int6 = type0.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type49, type52, type53, type57, type60 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type66, false);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier70.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier70.newValue(type73);
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type73, list78, true);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier7.newValue(type73);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type73, true);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean86 = type84.equals((java.lang.Object) 151);
        java.lang.String str87 = type84.getClassName();
        java.util.List list88 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type73, type84, list88, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode91 = null;
        java.util.List list92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier90.naryOperation(abstractInsnNode91, list92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)B" + "'", str65, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "char" + "'", str87, "char");
    }

    @Test
    public void test01979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01979");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter0.copyOperation(abstractInsnNode7, value19);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int30 = type29.getSize();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        int int33 = type31.getOpcode(101);
        java.lang.String str34 = type31.toString();
        int int35 = type31.getSort();
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type31, list36, false);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str42 = type41.getDescriptor();
        int int43 = type41.getSort();
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type41, list44, false);
        int int47 = type41.getSize();
        int int48 = type41.getSort();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type49, false);
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier38.newValue(type49);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("void");
        java.lang.String str55 = type54.getDescriptor();
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier38.newValue(type54);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value57 = basicInterpreter0.unaryOperation(abstractInsnNode28, value56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 101 + "'", int33 == 101);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "C" + "'", str34, "C");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Lfloat;" + "'", str42, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Lvoid;" + "'", str55, "Lvoid;");
        org.junit.Assert.assertNotNull(value56);
    }

    @Test
    public void test01980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01980");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lboolean;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str4 = type3.getDescriptor();
        int int5 = type3.getSort();
        int int6 = type3.getDimensions();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type8, list11, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str16 = type15.getDescriptor();
        int int17 = type15.getSort();
        int int18 = type15.getDimensions();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str21 = type20.getDescriptor();
        int int22 = type20.getSort();
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type20, list23, true);
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier13.newValue(type20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        java.lang.Class<?> wildcardClass31 = analyzerException29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        java.lang.String str34 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier13.newValue(type36);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type36, true);
        java.lang.String str40 = type36.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lfloat;" + "'", str4, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lfloat;" + "'", str16, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lfloat;" + "'", str21, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str33, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str34, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str35, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str40, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test01981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01981");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getDimensions();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list9, true);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str14 = type13.getDescriptor();
        int int15 = type13.getSort();
        int int16 = type13.getDimensions();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str19 = type18.getDescriptor();
        int int20 = type18.getSort();
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type18, list21, true);
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier11.newValue(type18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier11.newValue(type34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier11.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter48.ternaryOperation(abstractInsnNode49, value50, value51, value52);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter54.copyOperation(abstractInsnNode55, value56);
        org.mockito.asm.Type type58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter54.newValue(type58);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter60.copyOperation(abstractInsnNode61, value62);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.newValue(type64);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter48.merge(value59, value65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode45, value66);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter38.copyOperation(abstractInsnNode42, value66);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str74 = type73.getDescriptor();
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier11.merge(value66, value75);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        java.util.List list78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = simpleVerifier11.naryOperation(abstractInsnNode77, list78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lfloat;" + "'", str14, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lfloat;" + "'", str19, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str31, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str32, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str33, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "I" + "'", str74, "I");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
    }

    @Test
    public void test01982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01982");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        int int25 = value17.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value26 = simpleVerifier4.copyOperation(abstractInsnNode5, value17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test01983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01983");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value13 = simpleVerifier10.copyOperation(abstractInsnNode11, value12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
    }

    @Test
    public void test01984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01984");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) (byte) 100);
        java.lang.String str4 = type1.getClassName();
        boolean boolean6 = type1.equals((java.lang.Object) 177);
        int int7 = type1.getSize();
        java.lang.String str8 = type1.toString();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list9, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        java.util.List list13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value14 = simpleVerifier11.naryOperation(abstractInsnNode12, list13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "float" + "'", str4, "float");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "F" + "'", str8, "F");
    }

    @Test
    public void test01985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01985");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter2.ternaryOperation(abstractInsnNode3, value4, value5, value6);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter8.copyOperation(abstractInsnNode9, value10);
        org.mockito.asm.Type type12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.newValue(type12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter2.merge(value13, value19);
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/Type", (java.lang.Object) basicInterpreter2, value21);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.SimpleVerifier", (java.lang.Throwable) analyzerException22);
        java.lang.Throwable[] throwableArray24 = analyzerException23.getSuppressed();
        java.lang.String str25 = analyzerException23.toString();
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.SimpleVerifier" + "'", str25, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.SimpleVerifier");
    }

    @Test
    public void test01986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01986");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, list5, false);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, true);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier13.newValue(type14);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type20, true);
        java.lang.String str25 = type20.getClassName();
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type20, list26, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type20, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean32 = type20.equals((java.lang.Object) type31);
        int int33 = type31.getSort();
        int int35 = type31.getOpcode(24);
        org.mockito.asm.tree.analysis.Value value36 = simpleVerifier7.newValue(type31);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type38, list39, true);
        java.lang.String str42 = type38.getClassName();
        java.lang.String str43 = type38.getDescriptor();
        java.lang.String str44 = type38.toString();
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier7.newValue(type38);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value48 = simpleVerifier7.copyOperation(abstractInsnNode46, value47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLB;;" + "'", str2, "LLB;;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "void" + "'", str25, "void");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 24 + "'", int35 == 24);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Z" + "'", str43, "Z");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Z" + "'", str44, "Z");
        org.junit.Assert.assertNotNull(value45);
    }

    @Test
    public void test01987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01987");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        java.lang.Object obj12 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.ternaryOperation(abstractInsnNode20, value21, value22, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter19.merge(value30, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.ternaryOperation(abstractInsnNode39, value40, value41, value42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter38.merge(value49, value55);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier18.merge(value37, value49);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter13.copyOperation(abstractInsnNode17, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj12, value58);
        java.lang.Class<?> wildcardClass60 = value58.getClass();
        java.lang.String str61 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier10.newValue(type62);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType("(CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier10.newValue(type65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("B");
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str71 = type70.getInternalName();
        java.lang.String str72 = type70.toString();
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type68, type70, list73, true);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str78 = type77.getClassName();
        java.util.List list79 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type70, type77, list79, true);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier10.newValue(type70);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode83 = null;
        java.util.List list84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value85 = simpleVerifier10.naryOperation(abstractInsnNode83, list84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str61, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "LB;" + "'", str71, "LB;");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "LLB;;" + "'", str72, "LLB;;");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "hi!" + "'", str78, "hi!");
        org.junit.Assert.assertNotNull(value82);
    }

    @Test
    public void test01988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01988");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException3);
        java.lang.Object obj7 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter8.copyOperation(abstractInsnNode9, value10);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.ternaryOperation(abstractInsnNode15, value16, value17, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter14.merge(value25, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.ternaryOperation(abstractInsnNode34, value35, value36, value37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.newValue(type49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter33.merge(value44, value50);
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier13.merge(value32, value44);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter8.copyOperation(abstractInsnNode12, value52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj7, value53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("byte", (java.lang.Throwable) analyzerException54);
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException55);
        java.lang.Class<?> wildcardClass57 = analyzerException55.getClass();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(type58);
    }

    @Test
    public void test01989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01989");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        int int2 = type1.getSize();
        int int3 = type1.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter5.ternaryOperation(abstractInsnNode6, value7, value8, value9);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter11.copyOperation(abstractInsnNode12, value13);
        org.mockito.asm.Type type15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter11.newValue(type15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter5.merge(value16, value22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier4.merge(value23, value35);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type46, type49, type50, type54, type57 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type63, false);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier67.newValue(type68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier67.newValue(type70);
        java.util.List list75 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type70, list75, true);
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier4.newValue(type70);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier4.newValue(type79);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean83 = type81.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier4.newValue(type81);
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type81, list85, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = simpleVerifier87.newOperation(abstractInsnNode88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)B" + "'", str62, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(value84);
    }

    @Test
    public void test01990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01990");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value4 = simpleVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type23, false);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier27.newValue(type28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier27.newValue(type30);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type36 = null;
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type36, list37, false);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier27.newValue(type35);
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier0.newValue(type35);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        int int43 = type42.getSize();
        java.lang.String str44 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier0.newValue(type42);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        boolean boolean51 = type46.equals((java.lang.Object) 177);
        java.lang.String str52 = type46.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException55);
        java.lang.Class<?> wildcardClass57 = analyzerException55.getClass();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        int int60 = type58.getOpcode(114);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) 151);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.Type[] typeArray77 = new org.mockito.asm.Type[] { type62, type65, type66, type70, type73 };
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray77);
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray77);
        boolean boolean80 = type46.equals((java.lang.Object) typeArray77);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier0.newValue(type46);
        org.mockito.asm.Type type82 = null;
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier0.newValue(type82);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value85 = simpleVerifier0.newOperation(abstractInsnNode84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "F" + "'", str52, "F");
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 118 + "'", int60 == 118);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)B" + "'", str78, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str79, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value83);
    }

    @Test
    public void test01991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01991");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicInterpreter");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("S", (java.lang.Throwable) analyzerException17);
        boolean boolean19 = type8.equals((java.lang.Object) analyzerException17);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type21, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str30 = type29.getDescriptor();
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter25.newValue(type29);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getReturnType("Lboolean;");
        int int34 = type33.getDimensions();
        int int35 = type33.getDimensions();
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter25.newValue(type33);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value37 = simpleVerifier23.unaryOperation(abstractInsnNode24, value36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "I" + "'", str30, "I");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(value36);
    }

    @Test
    public void test01992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01992");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        java.lang.String str21 = type2.getDescriptor();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type22 = type2.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lfloat;" + "'", str21, "Lfloat;");
    }

    @Test
    public void test01993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01993");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)B");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.Class<?> wildcardClass3 = type2.getClass();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        int int5 = type4.getDimensions();
        java.lang.String str6 = type4.getDescriptor();
        java.lang.String str7 = type4.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str6, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str7, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test01994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01994");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        boolean boolean11 = type6.equals((java.lang.Object) 177);
        int int12 = type6.getSize();
        java.lang.String str13 = type6.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        int int20 = type18.getOpcode(101);
        java.lang.String str21 = type18.toString();
        int int22 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type18);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str26 = type25.toString();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getReturnType("(CBFCF)Lbyte;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type28, true);
        int int32 = type28.getOpcode(141);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter0.newValue(type28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.ternaryOperation(abstractInsnNode36, value37, value38, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter62.ternaryOperation(abstractInsnNode63, value64, value65, value66);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter68.copyOperation(abstractInsnNode69, value70);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter68.newValue(type72);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter74.copyOperation(abstractInsnNode75, value76);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter74.newValue(type78);
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter62.merge(value73, value79);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier42.merge(value61, value73);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter35.copyOperation(abstractInsnNode41, value73);
        int int83 = value73.getSize();
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter0.copyOperation(abstractInsnNode34, value73);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        java.util.List list86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value87 = basicInterpreter0.naryOperation(abstractInsnNode85, list86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 101 + "'", int20 == 101);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "C" + "'", str21, "C");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;" + "'", str26, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 145 + "'", int32 == 145);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
    }

    @Test
    public void test01995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01995");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str8 = type7.getDescriptor();
        int int9 = type7.getSort();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list10, false);
        java.lang.String str13 = type7.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, false);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int19 = type17.getOpcode(167);
        org.mockito.asm.Type type20 = type17.getElementType();
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier15.newValue(type17);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value23 = simpleVerifier15.newOperation(abstractInsnNode22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lfloat;" + "'", str8, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 171 + "'", int19 == 171);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
    }

    @Test
    public void test01996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01996");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int37 = type35.getOpcode(167);
        org.mockito.asm.Type type38 = type35.getElementType();
        int int39 = type35.getSort();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 24);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type44, type47, type48, type52, type55 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException65);
        java.lang.Class<?> wildcardClass67 = analyzerException65.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.lang.String str69 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type62, type70, list71, true);
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type62, list74, false);
        boolean boolean77 = type40.equals((java.lang.Object) type43);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type43, true);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier33.newValue(type35);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode81 = null;
        java.util.List list82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value83 = simpleVerifier33.naryOperation(abstractInsnNode81, list82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 171 + "'", int37 == 171);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(CBFCF)B" + "'", str60, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str69, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(value80);
    }

    @Test
    public void test01997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01997");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter2.ternaryOperation(abstractInsnNode3, value4, value5, value6);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter8.copyOperation(abstractInsnNode9, value10);
        org.mockito.asm.Type type12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.newValue(type12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter2.merge(value13, value19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str22 = type21.getDescriptor();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter2.newValue(type21);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier24.newValue(type26);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) 151);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type[] typeArray45 = new org.mockito.asm.Type[] { type30, type33, type34, type38, type41 };
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type47, false);
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier51.newValue(type52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier51.newValue(type54);
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier28.newValue(type54);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter2.merge(value27, value59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter61.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter61.newValue(type65);
        int int67 = value66.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter68.ternaryOperation(abstractInsnNode69, value70, value71, value72);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter74.copyOperation(abstractInsnNode75, value76);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter74.newValue(type78);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter80 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode81 = null;
        org.mockito.asm.tree.analysis.Value value82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter80.copyOperation(abstractInsnNode81, value82);
        org.mockito.asm.Type type84 = null;
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter80.newValue(type84);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter68.merge(value79, value85);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter2.merge(value66, value86);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Object) "B", value66);
        java.lang.Class<?> wildcardClass89 = value66.getClass();
        java.lang.String str90 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass89);
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "C" + "'", str22, "C");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(CBFCF)B" + "'", str46, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNull(value83);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str90, "org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test01998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01998");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException37);
        java.lang.Throwable[] throwableArray39 = analyzerException38.getSuppressed();
        boolean boolean40 = type0.equals((java.lang.Object) analyzerException38);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        java.lang.Throwable[] throwableArray43 = analyzerException42.getSuppressed();
        boolean boolean44 = type0.equals((java.lang.Object) analyzerException42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException47);
        java.lang.Class<?> wildcardClass49 = analyzerException48.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        java.lang.String str51 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        java.lang.String str52 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        boolean boolean53 = type0.equals((java.lang.Object) str52);
        java.lang.String str54 = type0.getDescriptor();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int57 = type55.getOpcode(48);
        java.lang.String str58 = type55.getClassName();
        java.lang.String str59 = type55.getClassName();
        java.lang.String str60 = type55.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) 151);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.Type[] typeArray77 = new org.mockito.asm.Type[] { type62, type65, type66, type70, type73 };
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray77);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type61, type79, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type61, true);
        java.util.List list86 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type61, list86, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode89 = null;
        java.util.List list90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value91 = simpleVerifier88.naryOperation(abstractInsnNode89, list90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str50, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str51, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str52, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "F" + "'", str54, "F");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 48 + "'", int57 == 48);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "boolean" + "'", str59, "boolean");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "boolean" + "'", str60, "boolean");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)B" + "'", str78, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test01999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01999");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str13 = type12.getDescriptor();
        java.lang.String str14 = type12.getInternalName();
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier10.newValue(type12);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str18 = type17.getDescriptor();
        int int19 = type17.getSort();
        int int20 = type17.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type17, false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type25, true);
        java.lang.String str30 = type25.getClassName();
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type25, list31, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException40.addSuppressed((java.lang.Throwable) analyzerException42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException44);
        boolean boolean46 = type34.equals((java.lang.Object) analyzerException45);
        java.lang.String str47 = type34.getDescriptor();
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier33.newValue(type34);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        java.lang.String str54 = type51.getClassName();
        int int56 = type51.getOpcode(138);
        int int57 = type51.getSize();
        boolean boolean59 = type51.equals((java.lang.Object) 154);
        java.lang.String str60 = type51.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type51, true);
        boolean boolean63 = type34.equals((java.lang.Object) type51);
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier22.newValue(type51);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value66 = simpleVerifier22.newOperation(abstractInsnNode65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LB;" + "'", str13, "LB;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "B" + "'", str14, "B");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lfloat;" + "'", str18, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "void" + "'", str30, "void");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "F" + "'", str47, "F");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "char" + "'", str54, "char");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 138 + "'", int56 == 138);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(value64);
    }

    @Test
    public void test02000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test02000");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        java.lang.Class<?> wildcardClass7 = basicInterpreter0.getClass();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test05001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05001");
        java.lang.Throwable throwable1 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)C", throwable1);
    }

    @Test
    public void test05002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05002");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int3 = type1.getOpcode(48);
        java.lang.String str4 = type1.getClassName();
        java.lang.String str5 = type1.getClassName();
        java.lang.String str6 = type1.getClassName();
        java.lang.String str7 = type1.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException10);
        java.lang.Class<?> wildcardClass12 = analyzerException10.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        boolean boolean17 = type15.equals((java.lang.Object) "Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        java.lang.String str18 = type15.getDescriptor();
        java.util.List list19 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type15, list19, false);
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type15, list22, false);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type43, false);
        java.lang.String str48 = type25.getClassName();
        int int49 = type25.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type25, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        java.util.List list53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value54 = simpleVerifier51.naryOperation(abstractInsnNode52, list53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Z" + "'", str7, "Z");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str14, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str18, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "byte" + "'", str48, "byte");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
    }

    @Test
    public void test05003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05003");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        int int7 = type0.getOpcode(167);
        java.lang.String str8 = type0.getDescriptor();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str12 = type11.getDescriptor();
        int int13 = type11.getSort();
        java.util.List list14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type11, list14, false);
        int int17 = type11.getSize();
        int int18 = type11.getSort();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type19, false);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type23, true);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier27.newValue(type28);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type34, true);
        java.lang.String str39 = type34.getClassName();
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type34, list40, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type34, true);
        java.lang.String str45 = type34.toString();
        int int46 = type34.getSort();
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type34, list47, false);
        org.mockito.asm.Type[] typeArray51 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray51);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray51);
        int int54 = type0.getSize();
        java.lang.String str55 = type0.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 169 + "'", int7 == 169);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "F" + "'", str8, "F");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lfloat;" + "'", str12, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "void" + "'", str39, "void");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "V" + "'", str45, "V");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)V" + "'", str52, "(CBFCF)V");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)F" + "'", str53, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "F" + "'", str55, "F");
    }

    @Test
    public void test05004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05004");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier3 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: boolean");
        org.mockito.asm.tree.analysis.Value value6 = simpleVerifier3.newValue(type5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = type12.getElementType();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type15, type18, type19, type23, type26 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type32, false);
        int int37 = type32.getSort();
        java.lang.String str38 = type32.getDescriptor();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type40, type43, type44, type48, type51 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException61);
        java.lang.Class<?> wildcardClass63 = analyzerException61.getClass();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        java.lang.String str65 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass63);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        java.util.List list67 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type66, list67, true);
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type58, list70, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type58, false);
        int int75 = type58.getSort();
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type58, list76, true);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier3.newValue(type58);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value81 = simpleVerifier3.newOperation(abstractInsnNode80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(CBFCF)B" + "'", str31, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "C" + "'", str38, "C");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)B" + "'", str56, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str65, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertNotNull(value79);
    }

    @Test
    public void test05005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05005");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = simpleVerifier5.newValue(type10);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type17, true);
        java.lang.String str22 = type17.getClassName();
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type17, list23, true);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException32.addSuppressed((java.lang.Throwable) analyzerException34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException36);
        boolean boolean38 = type26.equals((java.lang.Object) analyzerException37);
        java.lang.String str39 = type26.getDescriptor();
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        java.lang.String str46 = type43.getClassName();
        int int48 = type43.getOpcode(138);
        int int49 = type43.getSize();
        boolean boolean51 = type43.equals((java.lang.Object) 154);
        java.lang.String str52 = type43.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type43, true);
        boolean boolean55 = type26.equals((java.lang.Object) type43);
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier5.newValue(type43);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type61, true);
        java.lang.String str66 = type61.getClassName();
        java.util.List list67 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type61, list67, true);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str72 = type71.getDescriptor();
        java.lang.String str73 = type71.getInternalName();
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier69.newValue(type71);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value75 = simpleVerifier5.binaryOperation(abstractInsnNode57, value58, value74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "void" + "'", str22, "void");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "F" + "'", str39, "F");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "char" + "'", str46, "char");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 138 + "'", int48 == 138);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "C" + "'", str52, "C");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "void" + "'", str66, "void");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "LB;" + "'", str72, "LB;");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "B" + "'", str73, "B");
        org.junit.Assert.assertNotNull(value74);
    }

    @Test
    public void test05006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05006");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.getDescriptor();
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter2.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        java.lang.Object obj11 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.ternaryOperation(abstractInsnNode19, value20, value21, value22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter24.copyOperation(abstractInsnNode25, value26);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter18.merge(value29, value35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.ternaryOperation(abstractInsnNode38, value39, value40, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter37.merge(value48, value54);
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier17.merge(value36, value48);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter12.copyOperation(abstractInsnNode16, value56);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj11, value57);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter2.copyOperation(abstractInsnNode9, value57);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str63 = type62.getDescriptor();
        int int64 = type62.getSort();
        java.util.List list65 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type62, list65, false);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: F", (java.lang.Object) basicInterpreter2, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: : expected 179, but found F", (java.lang.Throwable) analyzerException70);
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "I" + "'", str7, "I");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Lfloat;" + "'", str63, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test05007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05007");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean83 = type81.equals((java.lang.Object) (byte) 100);
        java.lang.String str84 = type81.getClassName();
        boolean boolean86 = type81.equals((java.lang.Object) 177);
        int int87 = type81.getSize();
        java.lang.String str88 = type81.toString();
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter75.newValue(type81);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier0.newValue(type81);
        java.lang.String str91 = type81.toString();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "float" + "'", str84, "float");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "F" + "'", str88, "F");
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "F" + "'", str91, "F");
    }

    @Test
    public void test05008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05008");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        int int35 = type0.getSort();
        int int37 = type0.getOpcode(114);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type39, type42, type43, type47, type50 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type56, false);
        java.lang.String str61 = type38.toString();
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type38, list62, false);
        // The following exception was thrown during execution in test generation
        try {
            int int65 = type0.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 116 + "'", int37 == 116);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)B" + "'", str55, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "B" + "'", str61, "B");
    }

    @Test
    public void test05009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05009");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        int int35 = type0.getSort();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int39 = type37.getOpcode(167);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type37, list40, true);
        java.lang.String str43 = type37.getDescriptor();
        org.mockito.asm.Type type44 = type37.getElementType();
        java.lang.Class<?> wildcardClass45 = type44.getClass();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 171 + "'", int39 == 171);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str43, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test05010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05010");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.Type type15 = type6.getElementType();
        java.lang.String str16 = type6.toString();
        int int17 = type6.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str16, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test05011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05011");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.Type type2 = type1.getElementType();
        org.mockito.asm.Type type3 = type1.getElementType();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type5, true);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value13 = simpleVerifier9.newValue(type10);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type16, true);
        java.lang.String str21 = type16.getClassName();
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type16, list22, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type16, true);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean28 = type16.equals((java.lang.Object) type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) 151);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type[] typeArray45 = new org.mockito.asm.Type[] { type30, type33, type34, type38, type41 };
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type47, false);
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier51.newValue(type52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier51.newValue(type54);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int60 = type59.getSize();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        int int63 = type61.getOpcode(101);
        java.lang.String str64 = type61.toString();
        int int65 = type61.getSort();
        java.util.List list66 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type61, list66, false);
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier51.newValue(type59);
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type59, list70, false);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getObjectType("float");
        int int75 = type74.getSize();
        boolean boolean76 = type16.equals((java.lang.Object) type74);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type16, list77, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode80 = null;
        java.util.List list81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value82 = simpleVerifier79.naryOperation(abstractInsnNode80, list81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "void" + "'", str21, "void");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(CBFCF)B" + "'", str46, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 101 + "'", int63 == 101);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "C" + "'", str64, "C");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test05012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05012");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str52 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type54 = type53.getElementType();
        int int55 = type54.getSort();
        java.lang.String str56 = type54.toString();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str50, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str52, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lg/mockito/asm/tree/analysis/BasicValue;" + "'", str56, "Lg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test05013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05013");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        int int35 = type26.getOpcode(100);
        org.mockito.asm.Type[] typeArray37 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray37);
        java.lang.Class<?> wildcardClass39 = type26.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        java.lang.String str41 = type40.getDescriptor();
        int int43 = type40.getOpcode(110);
        java.lang.String str44 = type40.toString();
        int int45 = type40.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 102 + "'", int35 == 102);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)F" + "'", str38, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str41, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 114 + "'", int43 == 114);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str44, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test05014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05014");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str53 = type52.getDescriptor();
        boolean boolean54 = type51.equals((java.lang.Object) type52);
        java.lang.Class<?> wildcardClass55 = type51.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        java.lang.String str57 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass55);
        java.lang.String str58 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "I" + "'", str53, "I");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/Type" + "'", str56, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str57, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "org/mockito/asm/Type" + "'", str58, "org/mockito/asm/Type");
    }

    @Test
    public void test05015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05015");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        int int7 = type2.getOpcode(138);
        int int8 = type2.getSize();
        boolean boolean10 = type2.equals((java.lang.Object) 154);
        java.lang.String str11 = type2.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str22 = type21.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type21, false);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        java.lang.String str28 = type25.getClassName();
        int int30 = type25.getOpcode(138);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException33);
        java.lang.Class<?> wildcardClass35 = analyzerException33.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        boolean boolean37 = type25.equals((java.lang.Object) wildcardClass35);
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier24.newValue(type25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException41);
        java.lang.Class<?> wildcardClass43 = analyzerException42.getClass();
        java.lang.String str44 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        java.lang.String str45 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass43);
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.lang.String str49 = type48.getClassName();
        java.util.List list50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type48, list50, true);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier52.newValue(type54);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        java.util.List list57 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value58 = simpleVerifier52.naryOperation(abstractInsnNode56, list57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 138 + "'", int7 == 138);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "C" + "'", str11, "C");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str22, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "char" + "'", str28, "char");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 138 + "'", int30 == 138);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str44, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str45, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str46, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str49, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(value55);
    }

    @Test
    public void test05016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05016");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException22);
        java.lang.Class<?> wildcardClass24 = analyzerException22.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type27, list28, true);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type19, list31, false);
        java.lang.String str34 = type19.getInternalName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("(CBFCF)S");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type36, false);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        int int41 = type39.getOpcode(101);
        int int43 = type39.getOpcode(191);
        int int44 = type39.getSort();
        java.lang.Class<?> wildcardClass45 = type39.getClass();
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        int int49 = type47.getOpcode(160);
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier38.newValue(type47);
        java.lang.String str51 = type47.toString();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getReturnType("Lrg.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type53, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value57 = simpleVerifier55.newOperation(abstractInsnNode56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str26, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str34, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 101 + "'", int41 == 101);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 191 + "'", int43 == 191);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str46, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 164 + "'", int49 == 164);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str51, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type53);
    }

    @Test
    public void test05017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05017");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        java.lang.String str9 = type6.getClassName();
        int int11 = type6.getOpcode(138);
        int int12 = type6.getSize();
        boolean boolean14 = type6.equals((java.lang.Object) 154);
        java.lang.String str15 = type6.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type6, true);
        org.mockito.asm.tree.analysis.Value value18 = simpleVerifier0.newValue(type6);
        java.lang.String str19 = type6.getDescriptor();
        int int20 = type6.getSize();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "char" + "'", str9, "char");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 138 + "'", int11 == 138);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "C" + "'", str15, "C");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "C" + "'", str19, "C");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test05018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05018");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException15.addSuppressed((java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException19);
        boolean boolean21 = type9.equals((java.lang.Object) analyzerException20);
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException20);
        java.lang.Throwable[] throwableArray23 = analyzerException8.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException25);
        java.lang.String str27 = analyzerException25.toString();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str27, "org.mockito.asm.tree.analysis.AnalyzerException: ");
    }

    @Test
    public void test05019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05019");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException3.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = type5.getElementType();
        int int7 = type5.getDimensions();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, list10, true);
        java.lang.Class<?> wildcardClass13 = simpleVerifier12.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type23, type26, type27, type31, type34 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type40, false);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier44.newValue(type45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier44.newValue(type47);
        java.util.List list52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type47, list52, true);
        int int56 = type47.getOpcode(100);
        org.mockito.asm.Type[] typeArray58 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray58);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray58);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray58);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray58);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str15, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(CBFCF)B" + "'", str39, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 102 + "'", int56 == 102);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)F" + "'", str59, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(CBFCF)F" + "'", str60, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str61, "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str62, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test05020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05020");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        boolean boolean8 = type0.equals((java.lang.Object) 154);
        java.lang.String str9 = type0.getDescriptor();
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass10);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/Type" + "'", str11, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test05021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05021");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        int int23 = type18.getSort();
        java.lang.String str24 = type18.getDescriptor();
        boolean boolean26 = type18.equals((java.lang.Object) "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;;");
        java.lang.Object obj28 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.ternaryOperation(abstractInsnNode36, value37, value38, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter35.merge(value46, value52);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter54.ternaryOperation(abstractInsnNode55, value56, value57, value58);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter60.copyOperation(abstractInsnNode61, value62);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.newValue(type64);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter66.copyOperation(abstractInsnNode67, value68);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter66.newValue(type70);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter54.merge(value65, value71);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier34.merge(value53, value65);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter29.copyOperation(abstractInsnNode33, value73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj28, value74);
        java.lang.Class<?> wildcardClass76 = value74.getClass();
        java.lang.String str77 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass76);
        java.lang.String str78 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass76);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass76);
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type79, list80, false);
        org.mockito.asm.Type type83 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type79, type83, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode86 = null;
        java.util.List list87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = simpleVerifier85.naryOperation(abstractInsnNode86, list87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str77, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str78, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type79);
    }

    @Test
    public void test05022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05022");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicInterpreter");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("S", (java.lang.Throwable) analyzerException17);
        boolean boolean19 = type8.equals((java.lang.Object) analyzerException17);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type22 = type21.getElementType();
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type21, list23, false);
        int int27 = type21.getOpcode(62);
        int int28 = type21.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 66 + "'", int27 == 66);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test05023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05023");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found .");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("hi!");
        int int4 = type3.getSize();
        int int5 = type3.getSize();
        int int6 = type3.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type10 = null;
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type10, list11, false);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type19, type22, type23, type27, type30 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray34);
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException39);
        java.lang.Class<?> wildcardClass41 = analyzerException39.getClass();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        java.lang.String str43 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type44, true);
        boolean boolean48 = type44.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier13.newValue(type44);
        int int50 = type44.getDimensions();
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier8.newValue(type44);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value54 = simpleVerifier8.unaryOperation(abstractInsnNode52, value53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "char" + "'", str17, "char");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(CBFCF)B" + "'", str35, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)C" + "'", str36, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str43, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(value51);
    }

    @Test
    public void test05024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05024");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type49, type52, type53, type57, type60 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type66, false);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier70.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier70.newValue(type73);
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type73, list78, true);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier7.newValue(type73);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier7.newValue(type82);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.CHAR_TYPE;
        int int86 = type84.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier7.newValue(type84);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier6.newValue(type84);
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier0.newValue(type84);
        int int90 = type84.getSize();
        java.lang.String str91 = type84.getDescriptor();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type92 = type84.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)B" + "'", str65, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 101 + "'", int86 == 101);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "C" + "'", str91, "C");
    }

    @Test
    public void test05025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05025");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test05026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05026");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier0.newValue(type26);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        boolean boolean37 = type32.equals((java.lang.Object) 177);
        java.lang.String str38 = type32.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException41);
        java.lang.Class<?> wildcardClass43 = analyzerException41.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        int int46 = type44.getOpcode(114);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type48, type51, type52, type56, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray63);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray63);
        boolean boolean66 = type32.equals((java.lang.Object) typeArray63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException69);
        java.lang.Throwable[] throwableArray71 = analyzerException70.getSuppressed();
        boolean boolean72 = type32.equals((java.lang.Object) analyzerException70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        java.lang.Throwable[] throwableArray75 = analyzerException74.getSuppressed();
        boolean boolean76 = type32.equals((java.lang.Object) analyzerException74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException79);
        java.lang.Class<?> wildcardClass81 = analyzerException80.getClass();
        java.lang.String str82 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        java.lang.String str83 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        java.lang.String str84 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass81);
        boolean boolean85 = type32.equals((java.lang.Object) str84);
        int int87 = type32.getOpcode(21);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier0.newValue(type32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode89 = null;
        java.util.List list90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value91 = simpleVerifier0.naryOperation(abstractInsnNode89, list90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "F" + "'", str38, "F");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 118 + "'", int46 == 118);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)B" + "'", str64, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str65, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str82, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str83, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str84, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 23 + "'", int87 == 23);
        org.junit.Assert.assertNotNull(value88);
    }

    @Test
    public void test05027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05027");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        int int2 = type1.getSize();
        int int3 = type1.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        int int7 = type5.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value8 = simpleVerifier4.newValue(type5);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type27, false);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier31.newValue(type32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier31.newValue(type34);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type40 = null;
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type40, list41, false);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier31.newValue(type39);
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier4.newValue(type39);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type48, type51, type52, type56, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type65, false);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier69.newValue(type70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier69.newValue(type72);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type72, list77, true);
        int int81 = type72.getOpcode(100);
        org.mockito.asm.Type[] typeArray83 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type72, typeArray83);
        java.lang.String str85 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray83);
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray83);
        int int87 = type1.getSort();
        int int88 = type1.getSort();
        java.lang.String str89 = type1.getInternalName();
        java.lang.String str90 = type1.getInternalName();
        int int91 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 101 + "'", int7 == 101);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)B" + "'", str64, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 102 + "'", int81 == 102);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(CBFCF)F" + "'", str84, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(CBFCF)V" + "'", str85, "(CBFCF)V");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(CBFCF)Lfloat;" + "'", str86, "(CBFCF)Lfloat;");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 10 + "'", int87 == 10);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 10 + "'", int88 == 10);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "float" + "'", str89, "float");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "float" + "'", str90, "float");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
    }

    @Test
    public void test05028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05028");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        java.lang.String str8 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type11, true);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value19 = simpleVerifier15.newValue(type16);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        java.lang.String str23 = type20.getClassName();
        int int25 = type20.getOpcode(138);
        int int26 = type20.getSize();
        boolean boolean28 = type20.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier15.newValue(type20);
        int int31 = type20.getOpcode(0);
        int int33 = type20.getOpcode(0);
        int int34 = type20.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type20, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value38 = simpleVerifier36.newOperation(abstractInsnNode37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str6, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str7, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str8, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "char" + "'", str23, "char");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 138 + "'", int25 == 138);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
    }

    @Test
    public void test05029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05029");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicInterpreter");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("S", (java.lang.Throwable) analyzerException11);
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Throwable) analyzerException18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("I");
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        boolean boolean27 = type22.equals((java.lang.Object) 177);
        java.lang.String str28 = type22.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException31);
        java.lang.Class<?> wildcardClass33 = analyzerException31.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        int int36 = type34.getOpcode(114);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type38, type41, type42, type46, type49 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray53);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray53);
        boolean boolean56 = type22.equals((java.lang.Object) typeArray53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException59);
        java.lang.Throwable[] throwableArray61 = analyzerException60.getSuppressed();
        boolean boolean62 = type22.equals((java.lang.Object) analyzerException60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        java.lang.Throwable[] throwableArray65 = analyzerException64.getSuppressed();
        boolean boolean66 = type22.equals((java.lang.Object) analyzerException64);
        analyzerException21.addSuppressed((java.lang.Throwable) analyzerException64);
        analyzerException19.addSuppressed((java.lang.Throwable) analyzerException64);
        analyzerException11.addSuppressed((java.lang.Throwable) analyzerException64);
        java.lang.Throwable[] throwableArray70 = analyzerException64.getSuppressed();
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "F" + "'", str28, "F");
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 118 + "'", int36 == 118);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)B" + "'", str54, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str55, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(throwableArray70);
    }

    @Test
    public void test05030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05030");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass8 = analyzerException6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type11, list12, true);
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type3, list15, false);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.DOUBLE_TYPE;
        org.mockito.asm.tree.analysis.Value value19 = simpleVerifier17.newValue(type18);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type20 = type18.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(value19);
    }

    @Test
    public void test05031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05031");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type[] typeArray2 = org.mockito.asm.Type.getArgumentTypes("()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(typeArray2);
    }

    @Test
    public void test05032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05032");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException6);
        java.lang.Object obj10 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter11.copyOperation(abstractInsnNode12, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.ternaryOperation(abstractInsnNode18, value19, value20, value21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.newValue(type33);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter17.merge(value28, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.ternaryOperation(abstractInsnNode37, value38, value39, value40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter48.copyOperation(abstractInsnNode49, value50);
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter48.newValue(type52);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter36.merge(value47, value53);
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier16.merge(value35, value47);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter11.copyOperation(abstractInsnNode15, value55);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj10, value56);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("byte", (java.lang.Throwable) analyzerException57);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException58);
        java.lang.Throwable[] throwableArray60 = analyzerException6.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.Type", (java.lang.Throwable) analyzerException6);
        java.lang.Throwable[] throwableArray62 = analyzerException6.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException70);
        java.lang.Class<?> wildcardClass72 = analyzerException70.getClass();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        java.lang.String str74 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass72);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass72);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type67, type75, list76, true);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) (byte) 100);
        java.lang.String str82 = type79.getClassName();
        boolean boolean84 = type79.equals((java.lang.Object) 177);
        int int86 = type79.getOpcode(167);
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier78.newValue(type79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("double", (java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/SimpleVerifier;", value87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lboolean;", (java.lang.Object) analyzerException6, value87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("()L(CBFCF)S;", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException92 = new org.mockito.asm.tree.analysis.AnalyzerException("I");
        java.lang.Throwable[] throwableArray93 = analyzerException92.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        analyzerException92.addSuppressed((java.lang.Throwable) analyzerException95);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException95);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str74, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "float" + "'", str82, "float");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 169 + "'", int86 == 169);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(throwableArray93);
    }

    @Test
    public void test05033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05033");
        java.lang.Throwable throwable4 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", throwable4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("long", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int11 = type9.getOpcode(48);
        java.lang.String str12 = type9.getClassName();
        java.lang.String str13 = type9.getClassName();
        java.lang.String str14 = type9.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type33, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type15, true);
        int int41 = type9.getOpcode(171);
        java.lang.Object obj43 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.ternaryOperation(abstractInsnNode51, value52, value53, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter56.copyOperation(abstractInsnNode57, value58);
        org.mockito.asm.Type type60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter56.newValue(type60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter62.copyOperation(abstractInsnNode63, value64);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter62.newValue(type66);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter50.merge(value61, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.ternaryOperation(abstractInsnNode70, value71, value72, value73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter81 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        org.mockito.asm.tree.analysis.Value value83 = null;
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter81.copyOperation(abstractInsnNode82, value83);
        org.mockito.asm.Type type85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter81.newValue(type85);
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter69.merge(value80, value86);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier49.merge(value68, value80);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter44.copyOperation(abstractInsnNode48, value88);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj43, value89);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)LCBFCF)Lfloat;", (java.lang.Object) type9, value89);
        analyzerException7.addSuppressed((java.lang.Throwable) analyzerException91);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Throwable) analyzerException91);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 48 + "'", int11 == 48);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 171 + "'", int41 == 171);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
    }

    @Test
    public void test05034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05034");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        int int2 = type1.getSort();
        int int3 = type1.getSize();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        java.util.List list9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value10 = simpleVerifier7.naryOperation(abstractInsnNode8, list9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "void" + "'", str5, "void");
    }

    @Test
    public void test05035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05035");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list4, false);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, true);
        java.lang.String str14 = type9.getClassName();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type9, list15, true);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str20 = type19.getDescriptor();
        java.lang.String str21 = type19.getInternalName();
        org.mockito.asm.tree.analysis.Value value22 = simpleVerifier17.newValue(type19);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        java.lang.String str26 = type23.getClassName();
        int int28 = type23.getOpcode(138);
        int int29 = type23.getSize();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier17.newValue(type23);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int33 = type31.getOpcode(48);
        java.lang.String str34 = type31.getClassName();
        java.lang.String str35 = type31.getClassName();
        java.lang.String str36 = type31.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type38, type41, type42, type46, type49 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type55, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type37, true);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str63 = type62.getClassName();
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier61.newValue(type62);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier6.merge(value30, value64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        int int69 = type67.getOpcode(113);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        boolean boolean75 = type70.equals((java.lang.Object) 177);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type67, type70, list76, false);
        java.lang.String str79 = type67.toString();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier6.newValue(type67);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode81 = null;
        java.util.List list82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value83 = simpleVerifier6.naryOperation(abstractInsnNode81, list82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "void" + "'", str14, "void");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LB;" + "'", str20, "LB;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "B" + "'", str21, "B");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "char" + "'", str26, "char");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 138 + "'", int28 == 138);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 48 + "'", int33 == 48);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "boolean" + "'", str34, "boolean");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "boolean" + "'", str35, "boolean");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "boolean" + "'", str36, "boolean");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)B" + "'", str54, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "long" + "'", str63, "long");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 113 + "'", int69 == 113);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "B" + "'", str79, "B");
        org.junit.Assert.assertNotNull(value80);
    }

    @Test
    public void test05036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05036");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int13 = type11.getOpcode(48);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type15, type18, type19, type23, type26 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type32, false);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier36.newValue(type37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier36.newValue(type39);
        int int44 = type39.getSize();
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type39, list45, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type39, false);
        java.lang.String str50 = type2.getDescriptor();
        java.lang.String str51 = type2.toString();
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str56 = type55.getDescriptor();
        int int57 = type55.getSort();
        java.util.List list58 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type55, list58, false);
        java.lang.String str61 = type55.getClassName();
        java.lang.String str62 = type55.getInternalName();
        java.lang.String str63 = type55.toString();
        int int65 = type55.getOpcode(53);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type55, true);
        int int69 = type55.getOpcode(145);
        boolean boolean70 = type2.equals((java.lang.Object) type55);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 48 + "'", int13 == 48);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(CBFCF)B" + "'", str31, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "V" + "'", str50, "V");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "V" + "'", str51, "V");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lfloat;" + "'", str56, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Lfloat;" + "'", str63, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 57 + "'", int65 == 57);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 149 + "'", int69 == 149);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test05037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05037");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean24 = type12.equals((java.lang.Object) type23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getReturnType("Lboolean;");
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type26, list27, true);
        int int30 = type26.getSize();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type32, true);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier36.newValue(type37);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type43, true);
        java.lang.String str48 = type43.getClassName();
        java.util.List list49 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type43, list49, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type43, true);
        int int54 = type43.getSort();
        int int56 = type43.getOpcode(57);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type59 = type58.getElementType();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type61, true);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier65.newValue(type66);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier65.newValue(type70);
        int int75 = type70.getSize();
        int int77 = type70.getOpcode(114);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type70, true);
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type58, list80, false);
        org.mockito.asm.Type type83 = type58.getElementType();
        java.util.List list84 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type83, list84, false);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int89 = type87.getOpcode(48);
        java.lang.String str90 = type87.getClassName();
        java.lang.String str91 = type87.getClassName();
        int int93 = type87.getOpcode(119);
        int int94 = type87.getSort();
        int int95 = type87.getSort();
        java.lang.String str96 = type87.getClassName();
        org.mockito.asm.tree.analysis.Value value97 = simpleVerifier86.newValue(type87);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value99 = simpleVerifier86.newOperation(abstractInsnNode98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "void" + "'", str48, "void");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 62 + "'", int56 == 62);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 116 + "'", int77 == 116);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 48 + "'", int89 == 48);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "boolean" + "'", str90, "boolean");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "boolean" + "'", str91, "boolean");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 119 + "'", int93 == 119);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "boolean" + "'", str96, "boolean");
        org.junit.Assert.assertNotNull(value97);
    }

    @Test
    public void test05038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05038");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("rg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.SimpleVerifier");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05039");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getDimensions();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list9, true);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str14 = type13.getDescriptor();
        int int15 = type13.getSort();
        int int16 = type13.getDimensions();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str19 = type18.getDescriptor();
        int int20 = type18.getSort();
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type18, list21, true);
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier11.newValue(type18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier11.newValue(type34);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str41 = type40.getDescriptor();
        int int42 = type40.getSort();
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type40, list43, false);
        int int46 = type40.getSize();
        int int47 = type40.getSort();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type48, false);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int53 = type51.getOpcode(48);
        java.lang.String str54 = type51.getClassName();
        java.lang.String str55 = type51.getClassName();
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type51, list56, true);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        int int60 = type59.getSize();
        java.lang.String str61 = type59.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type59, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type59, true);
        java.lang.String str66 = type37.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException74.addSuppressed((java.lang.Throwable) analyzerException76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException81.addSuppressed((java.lang.Throwable) analyzerException83);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException85);
        analyzerException76.addSuppressed((java.lang.Throwable) analyzerException85);
        analyzerException72.addSuppressed((java.lang.Throwable) analyzerException76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Throwable) analyzerException72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("byte", (java.lang.Throwable) analyzerException72);
        boolean boolean91 = type37.equals((java.lang.Object) analyzerException90);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier93 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type37, false);
        java.lang.String str94 = type37.getInternalName();
        java.lang.String str95 = type37.getInternalName();
        int int97 = type37.getOpcode(115);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lfloat;" + "'", str14, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lfloat;" + "'", str19, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str31, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str32, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str33, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lfloat;" + "'", str41, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 48 + "'", int53 == 48);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: char" + "'", str66, "org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: char" + "'", str94, "org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: char" + "'", str95, "org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 119 + "'", int97 == 119);
    }

    @Test
    public void test05040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05040");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int77 = type75.getOpcode(48);
        java.lang.String str78 = type75.getClassName();
        java.lang.String str79 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier0.newValue(type75);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getObjectType("long");
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier0.newValue(type82);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicValue");
        java.lang.String str86 = type85.getClassName();
        int int87 = type85.getSize();
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier0.newValue(type85);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode89 = null;
        java.util.List list90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value91 = simpleVerifier0.naryOperation(abstractInsnNode89, list90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 48 + "'", int77 == 48);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str86, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(value88);
    }

    @Test
    public void test05041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05041");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)J");
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test05042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05042");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getDimensions();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list9, true);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str14 = type13.getDescriptor();
        int int15 = type13.getSort();
        int int16 = type13.getDimensions();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str19 = type18.getDescriptor();
        int int20 = type18.getSort();
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type18, list21, true);
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier11.newValue(type18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier11.newValue(type34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        int int38 = type36.getOpcode(101);
        java.lang.String str39 = type36.toString();
        int int40 = type36.getSize();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray57);
        int int60 = type36.getSort();
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier11.newValue(type36);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        java.util.List list63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value64 = simpleVerifier11.naryOperation(abstractInsnNode62, list63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lfloat;" + "'", str14, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lfloat;" + "'", str19, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str31, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str32, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str33, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 101 + "'", int38 == 101);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "C" + "'", str39, "C");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)C" + "'", str59, "(CBFCF)C");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(value61);
    }

    @Test
    public void test05043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05043");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int2 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test05044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05044");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int13 = type11.getOpcode(48);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type15, type18, type19, type23, type26 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type32, false);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier36.newValue(type37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier36.newValue(type39);
        int int44 = type39.getSize();
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type39, list45, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type39, false);
        java.lang.String str50 = type2.getDescriptor();
        java.lang.String str51 = type2.getDescriptor();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getReturnType("LB;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type53, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value57 = simpleVerifier55.newOperation(abstractInsnNode56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 48 + "'", int13 == 48);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(CBFCF)B" + "'", str31, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "V" + "'", str50, "V");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "V" + "'", str51, "V");
        org.junit.Assert.assertNotNull(type53);
    }

    @Test
    public void test05045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05045");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str8 = type7.getDescriptor();
        int int9 = type7.getSort();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list10, false);
        java.lang.String str13 = type7.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, false);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int18 = type16.getOpcode(48);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type37, false);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier41.newValue(type42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier41.newValue(type44);
        int int49 = type44.getSize();
        java.util.List list50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type44, list50, true);
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier15.newValue(type16);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        int int57 = type55.getOpcode(101);
        java.lang.String str58 = type55.toString();
        int int59 = type55.getSize();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        int int61 = type60.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type60, false);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found .");
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier63.newValue(type65);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value67 = simpleVerifier15.unaryOperation(abstractInsnNode54, value66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lfloat;" + "'", str8, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 48 + "'", int18 == 48);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 101 + "'", int57 == 101);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "C" + "'", str58, "C");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test05046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05046");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = type6.getInternalName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        java.lang.String str26 = type8.toString();
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, list27, true);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type30, true);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type33, false);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type40, list41, true);
        java.lang.Class<?> wildcardClass44 = simpleVerifier43.getClass();
        java.lang.String str45 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass44);
        java.lang.String str46 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass44);
        java.lang.String str47 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass44);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass44);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type48, false);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type52, true);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        boolean boolean66 = type61.equals((java.lang.Object) 177);
        int int67 = type61.getSize();
        java.lang.String str68 = type61.toString();
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter55.newValue(type61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException72);
        java.lang.Class<?> wildcardClass74 = analyzerException72.getClass();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass74);
        java.lang.String str76 = type75.toString();
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter55.newValue(type75);
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier54.newValue(type75);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier50.newValue(type75);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getObjectType("hi!");
        int int82 = type81.getSort();
        boolean boolean83 = type75.equals((java.lang.Object) int82);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str7, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "B" + "'", str26, "B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "char" + "'", str36, "char");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str45, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str46, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str47, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "F" + "'", str68, "F");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str76, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test05047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05047");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("B");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException15.addSuppressed((java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException19);
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException19);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException10);
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException2);
        java.lang.String str25 = analyzerException24.toString();
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue" + "'", str25, "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test05048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05048");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.toString();
        java.lang.String str24 = type0.toString();
        int int25 = type0.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 193);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, true);
        int int31 = type0.getSize();
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type32, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        java.util.List list36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value37 = simpleVerifier34.naryOperation(abstractInsnNode35, list36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B" + "'", str23, "B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test05049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05049");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lboolean;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str4 = type3.getDescriptor();
        int int5 = type3.getSort();
        int int6 = type3.getDimensions();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type8, list11, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str16 = type15.getDescriptor();
        int int17 = type15.getSort();
        int int18 = type15.getDimensions();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str21 = type20.getDescriptor();
        int int22 = type20.getSort();
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type20, list23, true);
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier13.newValue(type20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        java.lang.Class<?> wildcardClass31 = analyzerException29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        java.lang.String str34 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier13.newValue(type36);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type36, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.ternaryOperation(abstractInsnNode42, value43, value44, value45);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.ternaryOperation(abstractInsnNode50, value51, value52, value53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter61.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter61.newValue(type65);
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter49.merge(value60, value66);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter68.ternaryOperation(abstractInsnNode69, value70, value71, value72);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter74.copyOperation(abstractInsnNode75, value76);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter74.newValue(type78);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter80 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode81 = null;
        org.mockito.asm.tree.analysis.Value value82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter80.copyOperation(abstractInsnNode81, value82);
        org.mockito.asm.Type type84 = null;
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter80.newValue(type84);
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter68.merge(value79, value85);
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier48.merge(value67, value79);
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter41.copyOperation(abstractInsnNode47, value79);
        int int89 = value79.getSize();
        int int90 = value79.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value91 = simpleVerifier39.copyOperation(abstractInsnNode40, value79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lfloat;" + "'", str4, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lfloat;" + "'", str16, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lfloat;" + "'", str21, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str33, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str34, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str35, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNull(value83);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
    }

    @Test
    public void test05050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05050");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("L(CBFCF)B;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier2 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.CHAR_TYPE;
        int int5 = type3.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value6 = simpleVerifier2.newValue(type3);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type9 = org.mockito.asm.Type.SHORT_TYPE;
        int int10 = type9.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter11.copyOperation(abstractInsnNode12, value13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str16 = type15.getDescriptor();
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter11.newValue(type15);
        org.mockito.asm.Type[] typeArray19 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray19);
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray19);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray19);
        org.mockito.asm.tree.analysis.Value value23 = simpleVerifier2.newValue(type8);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        boolean boolean29 = type24.equals((java.lang.Object) 177);
        java.lang.String str30 = type24.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException33);
        java.lang.Class<?> wildcardClass35 = analyzerException33.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        int int38 = type36.getOpcode(114);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type40, type43, type44, type48, type51 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray55);
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray55);
        boolean boolean58 = type24.equals((java.lang.Object) typeArray55);
        java.lang.String str59 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier2.newValue(type24);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getObjectType("(CBFCF)B");
        org.mockito.asm.Type type63 = type62.getElementType();
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier2.newValue(type63);
        java.util.List list65 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type63, list65, false);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type68 = type63.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 101 + "'", int5 == 101);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "I" + "'", str16, "I");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)I" + "'", str20, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)S" + "'", str21, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str22, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "F" + "'", str30, "F");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 118 + "'", int38 == 118);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)B" + "'", str56, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str57, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(value64);
    }

    @Test
    public void test05051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05051");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        boolean boolean18 = type13.equals((java.lang.Object) 177);
        java.lang.String str19 = type13.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException22);
        java.lang.Class<?> wildcardClass24 = analyzerException22.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        int int27 = type25.getOpcode(114);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type29, type32, type33, type37, type40 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray44);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray44);
        boolean boolean47 = type13.equals((java.lang.Object) typeArray44);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier12.newValue(type13);
        int int49 = value48.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "F" + "'", str19, "F");
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 118 + "'", int27 == 118);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(CBFCF)B" + "'", str45, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str46, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test05052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05052");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        int int5 = type0.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type7, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.ternaryOperation(abstractInsnNode14, value15, value16, value17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter13.merge(value24, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.ternaryOperation(abstractInsnNode33, value34, value35, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter32.merge(value43, value49);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier12.merge(value31, value43);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type71, false);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier75.newValue(type76);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = type78.getClassName();
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier75.newValue(type78);
        java.util.List list83 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type78, list83, true);
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier12.newValue(type78);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier12.newValue(type87);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.CHAR_TYPE;
        int int91 = type89.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier12.newValue(type89);
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier11.newValue(type89);
        java.util.List list94 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier96 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type89, list94, true);
        org.mockito.asm.Type type98 = org.mockito.asm.Type.getReturnType("LLg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.mockito.asm.tree.analysis.Value value99 = simpleVerifier96.newValue(type98);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 101 + "'", int91 == 101);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(type98);
        org.junit.Assert.assertNotNull(value99);
    }

    @Test
    public void test05053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05053");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException34);
        java.lang.Class<?> wildcardClass36 = analyzerException34.getClass();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        java.lang.String str38 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type39, list40, true);
        java.lang.String str43 = type31.toString();
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier22.newValue(type31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter45.copyOperation(abstractInsnNode49, value50);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type55, true);
        java.lang.String str60 = type55.getClassName();
        java.util.List list61 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type55, list61, true);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException70.addSuppressed((java.lang.Throwable) analyzerException72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException74);
        boolean boolean76 = type64.equals((java.lang.Object) analyzerException75);
        java.lang.String str77 = type64.getDescriptor();
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier63.newValue(type64);
        int int79 = value78.getSize();
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter45.copyOperation(abstractInsnNode52, value78);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier81.newValue(type83);
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier22.merge(value80, value84);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode86 = null;
        java.util.List list87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = simpleVerifier22.naryOperation(abstractInsnNode86, list87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str38, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str43, "Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "void" + "'", str60, "void");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "F" + "'", str77, "F");
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(value85);
    }

    @Test
    public void test05054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05054");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) (byte) 100);
        java.lang.String str7 = type4.getClassName();
        boolean boolean9 = type4.equals((java.lang.Object) 177);
        java.lang.String str10 = type4.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException13);
        java.lang.Class<?> wildcardClass15 = analyzerException13.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        int int18 = type16.getOpcode(114);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray35);
        boolean boolean38 = type4.equals((java.lang.Object) typeArray35);
        int int39 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier0.newValue(type4);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int42 = type41.getSize();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        int int45 = type43.getOpcode(101);
        java.lang.String str46 = type43.toString();
        int int47 = type43.getSort();
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type43, list48, false);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str54 = type53.getDescriptor();
        int int55 = type53.getSort();
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type53, list56, false);
        int int59 = type53.getSize();
        int int60 = type53.getSort();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type61, false);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int66 = type64.getOpcode(48);
        java.lang.String str67 = type64.getClassName();
        java.lang.String str68 = type64.getClassName();
        java.util.List list69 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type64, list69, true);
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier50.newValue(type53);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier0.newValue(type53);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        int int81 = value80.getSize();
        int int82 = value80.getSize();
        int int83 = value80.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value84 = simpleVerifier0.unaryOperation(abstractInsnNode74, value80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "float" + "'", str7, "float");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "F" + "'", str10, "F");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 118 + "'", int18 == 118);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str37, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 101 + "'", int45 == 101);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "C" + "'", str46, "C");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Lfloat;" + "'", str54, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 48 + "'", int66 == 48);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test05055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05055");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int77 = type75.getOpcode(48);
        java.lang.String str78 = type75.getClassName();
        java.lang.String str79 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier0.newValue(type75);
        java.lang.Class<?> wildcardClass81 = value80.getClass();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        java.lang.String str83 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        java.lang.String str84 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass81);
        java.lang.String str85 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass81);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 48 + "'", int77 == 48);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str83, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str84, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str85, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type86);
    }

    @Test
    public void test05056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05056");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException23);
        java.lang.Class<?> wildcardClass25 = analyzerException23.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = type26.getElementType();
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier20.newValue(type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        boolean boolean34 = type29.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException37);
        java.lang.Class<?> wildcardClass39 = analyzerException37.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type41 = type40.getElementType();
        java.lang.String str42 = type41.getClassName();
        java.lang.String str43 = type41.getDescriptor();
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type41, list44, false);
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type29, list47, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("LB;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("void", (java.lang.Throwable) analyzerException53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException57.addSuppressed((java.lang.Throwable) analyzerException59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException59.addSuppressed((java.lang.Throwable) analyzerException62);
        analyzerException55.addSuppressed((java.lang.Throwable) analyzerException59);
        java.lang.Class<?> wildcardClass65 = analyzerException59.getClass();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        int int67 = type66.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type66, false);
        int int71 = type29.getOpcode(0);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str42, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str43, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
    }

    @Test
    public void test05057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05057");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.String str5 = type0.getDescriptor();
        int int6 = type0.getSort();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        java.lang.Class<?> wildcardClass13 = analyzerException11.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.util.List list17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type16, list17, true);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        boolean boolean25 = type20.equals((java.lang.Object) 177);
        int int27 = type20.getOpcode(167);
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier19.newValue(type20);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSort();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier19.newValue(type29);
        int int33 = type29.getSize();
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type34, true);
        boolean boolean37 = type0.equals((java.lang.Object) simpleVerifier36);
        int int38 = type0.getSort();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type39 = type0.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "J" + "'", str5, "J");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str15, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 169 + "'", int27 == 169);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "void" + "'", str30, "void");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 7 + "'", int38 == 7);
    }

    @Test
    public void test05058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05058");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        boolean boolean34 = type30.equals((java.lang.Object) 81);
        int int35 = type30.getDimensions();
        java.lang.String str36 = type30.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str36, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test05059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05059");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier25.newValue(type28);
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type28, list33, true);
        int int37 = type28.getOpcode(100);
        org.mockito.asm.Type[] typeArray39 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.ternaryOperation(abstractInsnNode52, value53, value54, value55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.newValue(type61);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter63.copyOperation(abstractInsnNode64, value65);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.newValue(type67);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter51.merge(value62, value68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode48, value69);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter41.copyOperation(abstractInsnNode45, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Object) str40, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected F, but found F", (java.lang.Throwable) analyzerException72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException77.addSuppressed((java.lang.Throwable) analyzerException79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException77);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean85 = type83.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException89.addSuppressed((java.lang.Throwable) analyzerException91);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException89);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException94 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException93);
        boolean boolean95 = type83.equals((java.lang.Object) analyzerException94);
        analyzerException82.addSuppressed((java.lang.Throwable) analyzerException94);
        java.lang.Throwable[] throwableArray97 = analyzerException94.getSuppressed();
        analyzerException73.addSuppressed((java.lang.Throwable) analyzerException94);
        java.lang.Throwable[] throwableArray99 = analyzerException73.getSuppressed();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 102 + "'", int37 == 102);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)F" + "'", str40, "(CBFCF)F");
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(throwableArray97);
        org.junit.Assert.assertNotNull(throwableArray99);
    }

    @Test
    public void test05060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05060");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass8 = analyzerException6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type11, list12, true);
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type3, list15, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value19 = simpleVerifier17.newOperation(abstractInsnNode18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type11);
    }

    @Test
    public void test05061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05061");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str6, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str7, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str9, "org/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test05062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05062");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicInterpreter");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("S", (java.lang.Throwable) analyzerException17);
        boolean boolean19 = type8.equals((java.lang.Object) analyzerException17);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type22 = type21.getElementType();
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type21, list23, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newOperation(abstractInsnNode26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
    }

    @Test
    public void test05063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05063");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str8 = type7.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type51, type54, type55, type59, type62 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type68, false);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier72.newValue(type73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier72.newValue(type75);
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type75, list80, true);
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier9.newValue(type75);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier9.newValue(type84);
        boolean boolean87 = type84.equals((java.lang.Object) "I");
        int int89 = type84.getOpcode(8);
        boolean boolean91 = type84.equals((java.lang.Object) (-1.0f));
        java.lang.String str92 = type84.getDescriptor();
        java.util.List list93 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier95 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type84, list93, false);
        java.lang.Class<?> wildcardClass96 = type7.getClass();
        java.lang.String str97 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass96);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str8, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)B" + "'", str67, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 8 + "'", int89 == 8);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "C" + "'", str92, "C");
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str97, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test05064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05064");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException23);
        java.lang.Class<?> wildcardClass25 = analyzerException23.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = type26.getElementType();
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier20.newValue(type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        boolean boolean34 = type29.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException37);
        java.lang.Class<?> wildcardClass39 = analyzerException37.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type41 = type40.getElementType();
        java.lang.String str42 = type41.getClassName();
        java.lang.String str43 = type41.getDescriptor();
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type41, list44, false);
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type29, list47, true);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.LONG_TYPE;
        int int51 = type50.getSort();
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier49.newValue(type50);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        java.util.List list54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value55 = simpleVerifier49.naryOperation(abstractInsnNode53, list54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str42, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str43, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertNotNull(value52);
    }

    @Test
    public void test05065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05065");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        java.lang.String str2 = type1.toString();
        int int3 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str2, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test05066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05066");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lrg.mockito.asm.tree.analysis.AnalyzerException: LLB;");
    }

    @Test
    public void test05067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05067");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        int int1 = type0.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.getDescriptor();
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter2.newValue(type6);
        org.mockito.asm.Type[] typeArray10 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray10);
        java.lang.String str12 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray10);
        java.lang.String str13 = type0.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "I" + "'", str7, "I");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(CBFCF)I" + "'", str11, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "(CBFCF)S" + "'", str12, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "S" + "'", str13, "S");
    }

    @Test
    public void test05068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05068");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier30.newValue(type31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type35, list36, true);
        java.lang.Class<?> wildcardClass39 = simpleVerifier38.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str43 = type42.getDescriptor();
        int int44 = type42.getSort();
        int int45 = type42.getSize();
        java.lang.String str46 = type42.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type42, true);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier30.newValue(type42);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("short");
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier30.newValue(type51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type54, true);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.newValue(type61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        boolean boolean68 = type63.equals((java.lang.Object) 177);
        int int69 = type63.getSize();
        java.lang.String str70 = type63.toString();
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter57.newValue(type63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException74);
        java.lang.Class<?> wildcardClass76 = analyzerException74.getClass();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass76);
        java.lang.String str78 = type77.toString();
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter57.newValue(type77);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier56.newValue(type77);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier30.newValue(type77);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier82.newValue(type84);
        int int86 = type84.getSize();
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier30.newValue(type84);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type89 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list90 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type88, type89, list90, true);
        java.lang.Class<?> wildcardClass93 = simpleVerifier92.getClass();
        org.mockito.asm.Type type94 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass93);
        org.mockito.asm.Type type95 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass93);
        org.mockito.asm.Type type96 = type95.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier98 = new org.mockito.asm.tree.analysis.SimpleVerifier(type84, type95, false);
        int int99 = type95.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "long" + "'", str32, "long");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lfloat;" + "'", str43, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "F" + "'", str70, "F");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str78, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertNotNull(type95);
        org.junit.Assert.assertNotNull(type96);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 10 + "'", int99 == 10);
    }

    @Test
    public void test05069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05069");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        int int5 = type0.getSize();
        int int6 = type0.getSort();
        int int7 = type0.getSort();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] { type13, type16, type17, type21, type24 };
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray28);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException33);
        java.lang.Class<?> wildcardClass35 = analyzerException33.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type38, true);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier40.newValue(type42);
        int int45 = type42.getOpcode(81);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type42, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value50 = simpleVerifier47.unaryOperation(abstractInsnNode48, value49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "char" + "'", str11, "char");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(CBFCF)B" + "'", str29, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)C" + "'", str30, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str37, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 85 + "'", int45 == 85);
    }

    @Test
    public void test05070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05070");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = type6.getInternalName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        java.lang.String str26 = type8.toString();
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, list27, true);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type30, true);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type33, false);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type40, list41, true);
        java.lang.Class<?> wildcardClass44 = simpleVerifier43.getClass();
        java.lang.String str45 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass44);
        java.lang.String str46 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass44);
        java.lang.String str47 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass44);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass44);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type48, false);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type52, true);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        boolean boolean66 = type61.equals((java.lang.Object) 177);
        int int67 = type61.getSize();
        java.lang.String str68 = type61.toString();
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter55.newValue(type61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException72);
        java.lang.Class<?> wildcardClass74 = analyzerException72.getClass();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass74);
        java.lang.String str76 = type75.toString();
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter55.newValue(type75);
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier54.newValue(type75);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier50.newValue(type75);
        java.lang.String str80 = type75.getDescriptor();
        org.mockito.asm.Type type81 = type75.getElementType();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str7, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "B" + "'", str26, "B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "char" + "'", str36, "char");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str45, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str46, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str47, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "F" + "'", str68, "F");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str76, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str80, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type81);
    }

    @Test
    public void test05071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05071");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        java.lang.String str34 = type26.getDescriptor();
        int int35 = type26.getSort();
        int int36 = type26.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "F" + "'", str34, "F");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test05072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05072");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.String str5 = type0.getDescriptor();
        int int6 = type0.getSort();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        java.lang.Class<?> wildcardClass13 = analyzerException11.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.util.List list17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type16, list17, true);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        boolean boolean25 = type20.equals((java.lang.Object) 177);
        int int27 = type20.getOpcode(167);
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier19.newValue(type20);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSort();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier19.newValue(type29);
        int int33 = type29.getSize();
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type34, true);
        boolean boolean37 = type0.equals((java.lang.Object) simpleVerifier36);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        java.util.List list39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value40 = simpleVerifier36.naryOperation(abstractInsnNode38, list39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "J" + "'", str5, "J");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str15, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 169 + "'", int27 == 169);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "void" + "'", str30, "void");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test05073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05073");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str52 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str55 = type54.getClassName();
        int int56 = type54.getSort();
        int int57 = type54.getSize();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType("V");
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type59, list60, true);
        java.lang.Class<?> wildcardClass63 = type59.getClass();
        boolean boolean64 = type53.equals((java.lang.Object) wildcardClass63);
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str50, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str52, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "byte" + "'", str55, "byte");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test05074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05074");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        int int35 = type0.getSort();
        int int37 = type0.getOpcode(114);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType("(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type39, true);
        java.lang.String str42 = type0.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 116 + "'", int37 == 116);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "F" + "'", str42, "F");
    }

    @Test
    public void test05075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05075");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected F, but found F");
        int int3 = type1.getOpcode(110);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getReturnType("()C");
        java.util.List list6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type5, list6, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type11, true);
        boolean boolean17 = type11.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.mockito.asm.Type type18 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list20 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type19, list20, true);
        java.lang.Class<?> wildcardClass23 = simpleVerifier22.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.String str25 = type24.getInternalName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) (byte) 100);
        java.lang.String str41 = type38.getClassName();
        org.mockito.asm.Type[] typeArray42 = new org.mockito.asm.Type[] { type27, type30, type31, type35, type38 };
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray42);
        java.lang.String str44 = type26.toString();
        java.util.List list45 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type26, list45, true);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type48, true);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type51, false);
        int int57 = type51.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type51, true);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type61, true);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier65.newValue(type66);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type71, type72, true);
        java.lang.String str77 = type72.getClassName();
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type70, type72, list78, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type66, type72, true);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean84 = type72.equals((java.lang.Object) type83);
        int int85 = type83.getSort();
        int int87 = type83.getOpcode(24);
        java.lang.String str88 = type83.getDescriptor();
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier59.newValue(type83);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = simpleVerifier8.copyOperation(abstractInsnNode9, value89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 114 + "'", int3 == 114);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str25, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(CBFCF)B" + "'", str43, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "B" + "'", str44, "B");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "char" + "'", str54, "char");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "void" + "'", str77, "void");
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 5 + "'", int85 == 5);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 24 + "'", int87 == 24);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "I" + "'", str88, "I");
        org.junit.Assert.assertNotNull(value89);
    }

    @Test
    public void test05076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05076");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        int int79 = type77.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier0.newValue(type77);
        java.lang.String str81 = type77.getClassName();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 101 + "'", int79 == 101);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "char" + "'", str81, "char");
    }

    @Test
    public void test05077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05077");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("V", (java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("S", (java.lang.Throwable) analyzerException5);
        java.lang.String str8 = analyzerException7.toString();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: S" + "'", str8, "org.mockito.asm.tree.analysis.AnalyzerException: S");
    }

    @Test
    public void test05078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05078");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str2 = type1.getDescriptor();
        boolean boolean4 = type1.equals((java.lang.Object) "hi!");
        java.lang.String str5 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LB;" + "'", str2, "LB;");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "B" + "'", str5, "B");
    }

    @Test
    public void test05079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05079");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("I");
        java.lang.Throwable[] throwableArray2 = analyzerException1.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException10);
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException18.addSuppressed((java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException25.addSuppressed((java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException29);
        analyzerException20.addSuppressed((java.lang.Throwable) analyzerException29);
        analyzerException16.addSuppressed((java.lang.Throwable) analyzerException20);
        analyzerException11.addSuppressed((java.lang.Throwable) analyzerException16);
        java.lang.Throwable[] throwableArray34 = analyzerException16.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray34);
    }

    @Test
    public void test05080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05080");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier30.newValue(type31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type35, list36, true);
        java.lang.Class<?> wildcardClass39 = simpleVerifier38.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str43 = type42.getDescriptor();
        int int44 = type42.getSort();
        int int45 = type42.getSize();
        java.lang.String str46 = type42.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type42, true);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier30.newValue(type42);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type51, type54, type55, type59, type62 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type68, false);
        java.lang.String str73 = type50.getClassName();
        int int74 = type50.getSort();
        int int76 = type50.getOpcode(148);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) 151);
        java.lang.String str80 = type77.getClassName();
        int int81 = type77.getSize();
        int int83 = type77.getOpcode(148);
        java.util.List list84 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type77, list84, true);
        java.lang.Class<?> wildcardClass87 = type77.getClass();
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass87);
        int int90 = type88.getOpcode(124);
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier30.newValue(type88);
        java.lang.String str92 = type88.getClassName();
        java.lang.String str93 = type88.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "long" + "'", str32, "long");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lfloat;" + "'", str43, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)B" + "'", str67, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "byte" + "'", str73, "byte");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 148 + "'", int76 == 148);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "char" + "'", str80, "char");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 148 + "'", int83 == 148);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 128 + "'", int90 == 128);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "org.mockito.asm.Type" + "'", str92, "org.mockito.asm.Type");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str93, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test05081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05081");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("(CBFCF)LB;");
        java.util.List list4 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list4, true);
        int int7 = type3.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test05082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05082");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: Lhi!;;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test05083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05083");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        java.lang.String str4 = type1.toString();
        int int5 = type1.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray22);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray22);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type28, type31, type32, type36, type39 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type45, false);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier49.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier49.newValue(type52);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier26.newValue(type52);
        boolean boolean58 = type0.equals((java.lang.Object) value57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type60, true);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier64.newValue(type65);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type70, type71, true);
        java.lang.String str76 = type71.getClassName();
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type69, type71, list77, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type65, type71, true);
        java.lang.Class<?> wildcardClass82 = type65.getClass();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        int int84 = type83.getSort();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str86 = type85.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type85, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type83, true);
        java.lang.String str91 = type83.getClassName();
        int int92 = type83.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "C" + "'", str4, "C");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)I" + "'", str25, "(CBFCF)I");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)B" + "'", str44, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "void" + "'", str76, "void");
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "void" + "'", str86, "void");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "org.mockito.asm.Type" + "'", str91, "org.mockito.asm.Type");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10 + "'", int92 == 10);
    }

    @Test
    public void test05084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05084");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getDimensions();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list9, true);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str14 = type13.getDescriptor();
        int int15 = type13.getSort();
        int int16 = type13.getDimensions();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str19 = type18.getDescriptor();
        int int20 = type18.getSort();
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type18, list21, true);
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier11.newValue(type18);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type26, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier30.newValue(type31);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier30.newValue(type35);
        int int40 = type35.getSize();
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier11.newValue(type35);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        int int45 = type43.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier42.newValue(type43);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str50 = type49.getDescriptor();
        int int51 = type49.getSort();
        java.util.List list52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type49, list52, false);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) 151);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.Type[] typeArray77 = new org.mockito.asm.Type[] { type62, type65, type66, type70, type73 };
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray77);
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException82);
        java.lang.Class<?> wildcardClass84 = analyzerException82.getClass();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        java.lang.String str86 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass84);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type57, type87, true);
        boolean boolean90 = type56.equals((java.lang.Object) type87);
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier54.newValue(type87);
        org.mockito.asm.Type type92 = null;
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier54.newValue(type92);
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier11.merge(value46, value93);
        org.mockito.asm.Type type95 = null;
        org.mockito.asm.tree.analysis.Value value96 = simpleVerifier11.newValue(type95);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value98 = simpleVerifier11.newOperation(abstractInsnNode97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lfloat;" + "'", str14, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lfloat;" + "'", str19, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 101 + "'", int45 == 101);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lfloat;" + "'", str50, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "char" + "'", str60, "char");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)B" + "'", str78, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(CBFCF)C" + "'", str79, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str86, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertNotNull(value96);
    }

    @Test
    public void test05085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05085");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier23.merge(value42, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.ternaryOperation(abstractInsnNode64, value65, value66, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter63.merge(value74, value80);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier22.merge(value62, value74);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier22.newValue(type83);
        java.lang.String str85 = type83.getDescriptor();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getReturnType("F");
        java.util.List list88 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type87, list88, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode91 = null;
        org.mockito.asm.tree.analysis.Value value92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier90.unaryOperation(abstractInsnNode91, value92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "F" + "'", str85, "F");
        org.junit.Assert.assertNotNull(type87);
    }

    @Test
    public void test05086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05086");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass11 = analyzerException6.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        java.lang.String str13 = type12.getInternalName();
        int int14 = type12.getSort();
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str13, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test05087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05087");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getReturnType("(CBFCF)C");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type4, list5, true);
        java.lang.Class<?> wildcardClass8 = simpleVerifier7.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str10 = type9.getInternalName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type[] typeArray27 = new org.mockito.asm.Type[] { type12, type15, type16, type20, type23 };
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray27);
        java.lang.String str29 = type11.toString();
        java.util.List list30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type11, list30, true);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type33, true);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type9, list36, false);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        java.lang.String str42 = type39.getClassName();
        int int44 = type39.getOpcode(138);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException47);
        java.lang.Class<?> wildcardClass49 = analyzerException47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        boolean boolean51 = type39.equals((java.lang.Object) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier38.newValue(type52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.Type[] typeArray70 = new org.mockito.asm.Type[] { type55, type58, type59, type63, type66 };
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type72, false);
        java.lang.String str77 = type54.getClassName();
        int int78 = type54.getSort();
        java.lang.String str79 = type54.toString();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter80 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode81 = null;
        org.mockito.asm.tree.analysis.Value value82 = null;
        org.mockito.asm.tree.analysis.Value value83 = null;
        org.mockito.asm.tree.analysis.Value value84 = null;
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter80.ternaryOperation(abstractInsnNode81, value82, value83, value84);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str87 = type86.getClassName();
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter80.newValue(type86);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getObjectType("L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter80.newValue(type90);
        boolean boolean92 = type54.equals((java.lang.Object) value91);
        int int93 = value91.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException94 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: void", (java.lang.Object) value53, value91);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str10, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(CBFCF)B" + "'", str28, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "B" + "'", str29, "B");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "char" + "'", str42, "char");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 138 + "'", int44 == 138);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)B" + "'", str71, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "byte" + "'", str77, "byte");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "B" + "'", str79, "B");
        org.junit.Assert.assertNull(value85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "long" + "'", str87, "long");
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test05088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05088");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char: expected B, but found .;");
    }

    @Test
    public void test05089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05089");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException7.addSuppressed((java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException11);
        boolean boolean13 = type1.equals((java.lang.Object) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/SimpleVerifier;", (java.lang.Throwable) analyzerException12);
        java.lang.Throwable[] throwableArray15 = analyzerException14.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException18.addSuppressed((java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException20.addSuppressed((java.lang.Throwable) analyzerException23);
        java.lang.Throwable[] throwableArray25 = analyzerException23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = analyzerException23.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("mockito.asm.tree.analysis.BasicValue", (java.lang.Throwable) analyzerException23);
        analyzerException14.addSuppressed((java.lang.Throwable) analyzerException27);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
    }

    @Test
    public void test05090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05090");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type10, true);
        java.lang.String str15 = type10.getClassName();
        java.util.List list16 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type10, list16, true);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException25.addSuppressed((java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException29);
        boolean boolean31 = type19.equals((java.lang.Object) analyzerException30);
        java.lang.String str32 = type19.getDescriptor();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier18.newValue(type19);
        int int34 = value33.getSize();
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter0.copyOperation(abstractInsnNode7, value33);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter0.newValue(type36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str41 = type40.getDescriptor();
        int int42 = type40.getSort();
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type40, list43, false);
        java.lang.String str46 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter0.newValue(type40);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter0.copyOperation(abstractInsnNode48, value49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass51 = value50.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "void" + "'", str15, "void");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "F" + "'", str32, "F");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lfloat;" + "'", str41, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value50);
    }

    @Test
    public void test05091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05091");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 193);
        java.lang.Class<?> wildcardClass3 = type0.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.Object obj7 = null;
        boolean boolean8 = type6.equals(obj7);
        int int9 = type6.getDimensions();
        int int10 = type6.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test05092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05092");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        java.lang.String str34 = type30.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lboolean;: expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        boolean boolean37 = type30.equals((java.lang.Object) type36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type39, type42, type43, type47, type50 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type56, false);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier60.newValue(type61);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier60.newValue(type63);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type69 = null;
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type68, type69, list70, false);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier60.newValue(type68);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type68, false);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier22.newValue(type68);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        java.util.List list78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = simpleVerifier22.naryOperation(abstractInsnNode77, list78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)B" + "'", str55, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNull(value76);
    }

    @Test
    public void test05093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05093");
        org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(typeArray1);
    }

    @Test
    public void test05094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05094");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.Type type2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, true);
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException28);
        java.lang.Class<?> wildcardClass30 = analyzerException28.getClass();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        java.lang.String str32 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type33, list34, true);
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type25, list37, false);
        java.lang.String str40 = type25.getInternalName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        int int44 = type42.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier41.newValue(type42);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type64, false);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier68.newValue(type69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier68.newValue(type71);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type77 = null;
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type76, type77, list78, false);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier68.newValue(type76);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier41.newValue(type76);
        java.util.List list83 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type76, list83, false);
        java.util.List list86 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type25, list86, false);
        java.util.List list89 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier91 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type5, list89, false);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "void" + "'", str1, "void");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str32, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str40, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 101 + "'", int44 == 101);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNull(value81);
        org.junit.Assert.assertNull(value82);
    }

    @Test
    public void test05095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05095");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        int int40 = value19.getSize();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test05096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05096");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type43, false);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier47.newValue(type48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type51, type54, type55, type59, type62 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type68, false);
        java.lang.String str73 = type50.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier47.newValue(type50);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type50, true);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type77 = type50.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)B" + "'", str67, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "byte" + "'", str73, "byte");
        org.junit.Assert.assertNotNull(value74);
    }

    @Test
    public void test05097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05097");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier25.newValue(type28);
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type28, list33, true);
        int int37 = type28.getOpcode(100);
        org.mockito.asm.Type[] typeArray39 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.ternaryOperation(abstractInsnNode52, value53, value54, value55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.newValue(type61);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter63.copyOperation(abstractInsnNode64, value65);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.newValue(type67);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter51.merge(value62, value68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode48, value69);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter41.copyOperation(abstractInsnNode45, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Object) str40, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected F, but found F", (java.lang.Throwable) analyzerException72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException77.addSuppressed((java.lang.Throwable) analyzerException79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException77);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean85 = type83.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException89 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException89.addSuppressed((java.lang.Throwable) analyzerException91);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException89);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException94 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException93);
        boolean boolean95 = type83.equals((java.lang.Object) analyzerException94);
        analyzerException82.addSuppressed((java.lang.Throwable) analyzerException94);
        java.lang.Throwable[] throwableArray97 = analyzerException94.getSuppressed();
        analyzerException73.addSuppressed((java.lang.Throwable) analyzerException94);
        java.lang.String str99 = analyzerException94.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 102 + "'", int37 == 102);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)F" + "'", str40, "(CBFCF)F");
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(throwableArray97);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: char" + "'", str99, "org.mockito.asm.tree.analysis.AnalyzerException: char");
    }

    @Test
    public void test05098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05098");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int3 = type1.getOpcode(48);
        java.lang.String str4 = type1.getClassName();
        int int5 = type1.getSize();
        int int6 = type1.getSort();
        java.util.List list7 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list7, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = type1.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test05099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05099");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int3 = type1.getOpcode(48);
        java.lang.String str4 = type1.getClassName();
        int int5 = type1.getSize();
        java.lang.String str6 = type1.getDescriptor();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.mockito.asm.Type type9 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type10, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value18 = simpleVerifier14.newValue(type15);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        java.lang.String str22 = type19.getClassName();
        int int24 = type19.getOpcode(138);
        int int25 = type19.getSize();
        boolean boolean27 = type19.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier14.newValue(type19);
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type19, list29, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, true);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType("()L(CBFCF)I;");
        boolean boolean36 = type1.equals((java.lang.Object) type35);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value40 = simpleVerifier38.newOperation(abstractInsnNode39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 48 + "'", int3 == 48);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Z" + "'", str6, "Z");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "char" + "'", str22, "char");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 138 + "'", int24 == 138);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test05100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05100");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException6);
        java.lang.Throwable[] throwableArray11 = analyzerException10.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException13);
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: int", (java.lang.Throwable) analyzerException13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .", (java.lang.Throwable) analyzerException16);
        java.lang.String str18 = analyzerException17.toString();
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found ." + "'", str18, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
    }

    @Test
    public void test05101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05101");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)Z");
        java.lang.Object obj3 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter4.copyOperation(abstractInsnNode5, value6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter4.copyOperation(abstractInsnNode8, value48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj3, value49);
        java.lang.Class<?> wildcardClass51 = value49.getClass();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType("V");
        java.util.List list55 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type54, list55, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type52, true);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException64);
        java.lang.Class<?> wildcardClass66 = analyzerException64.getClass();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        java.lang.String str68 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass66);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type61, type69, list70, true);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        boolean boolean78 = type73.equals((java.lang.Object) 177);
        int int80 = type73.getOpcode(167);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier72.newValue(type73);
        boolean boolean82 = type1.equals((java.lang.Object) value81);
        java.lang.String str83 = type1.getDescriptor();
        int int84 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str68, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 169 + "'", int80 == 169);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Z" + "'", str83, "Z");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test05102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05102");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        int int10 = type8.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.ternaryOperation(abstractInsnNode14, value15, value16, value17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter13.merge(value24, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.ternaryOperation(abstractInsnNode33, value34, value35, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter32.merge(value43, value49);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier12.merge(value31, value43);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type71, false);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier75.newValue(type76);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = type78.getClassName();
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier75.newValue(type78);
        java.util.List list83 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type78, list83, true);
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier12.newValue(type78);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier12.newValue(type87);
        boolean boolean90 = type87.equals((java.lang.Object) "I");
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier7.newValue(type87);
        int int92 = type87.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier94 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type87, true);
        java.lang.String str95 = type87.getDescriptor();
        int int96 = type87.getSort();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 101 + "'", int10 == 101);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "C" + "'", str95, "C");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2 + "'", int96 == 2);
    }

    @Test
    public void test05103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05103");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type35, true);
        boolean boolean39 = type35.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier4.newValue(type35);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("byte");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        int int46 = type44.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier43.newValue(type44);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        boolean boolean53 = type48.equals((java.lang.Object) 177);
        java.lang.String str54 = type48.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException57);
        java.lang.Class<?> wildcardClass59 = analyzerException57.getClass();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass59);
        int int62 = type60.getOpcode(114);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) 151);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.Type[] typeArray79 = new org.mockito.asm.Type[] { type64, type67, type68, type72, type75 };
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray79);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray79);
        boolean boolean82 = type48.equals((java.lang.Object) typeArray79);
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray79);
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray79);
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier4.newValue(type42);
        int int86 = value85.getSize();
        java.lang.Class<?> wildcardClass87 = value85.getClass();
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass87);
        java.lang.String str89 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass87);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "char" + "'", str8, "char");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)C" + "'", str27, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 101 + "'", int46 == 101);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "F" + "'", str54, "F");
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 118 + "'", int62 == 118);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(CBFCF)B" + "'", str80, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str81, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)C" + "'", str83, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(CBFCF)Lbyte;" + "'", str84, "(CBFCF)Lbyte;");
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str89, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test05104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05104");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str54 = type53.getDescriptor();
        int int55 = type53.getSort();
        int int56 = type53.getSize();
        java.util.List list57 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type53, list57, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter62.copyOperation(abstractInsnNode63, value64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str67 = type66.getDescriptor();
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter62.newValue(type66);
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier61.newValue(type66);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value70 = simpleVerifier59.unaryOperation(abstractInsnNode60, value69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str51, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Lfloat;" + "'", str54, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "I" + "'", str67, "I");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test05105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05105");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str13 = type12.getDescriptor();
        java.lang.String str14 = type12.getInternalName();
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier10.newValue(type12);
        java.lang.String str16 = type12.getClassName();
        java.lang.String str17 = type12.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) (byte) 100);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type[] typeArray34 = new org.mockito.asm.Type[] { type19, type22, type23, type27, type30 };
        java.lang.String str35 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type36, false);
        int int41 = type36.getSort();
        java.lang.String str42 = type36.getDescriptor();
        boolean boolean44 = type36.equals((java.lang.Object) 179);
        java.lang.String str45 = type36.getDescriptor();
        int int46 = type36.getSort();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int49 = type47.getOpcode(48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type51, type54, type55, type59, type62 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type68, false);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier72.newValue(type73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier72.newValue(type75);
        int int80 = type75.getSize();
        java.util.List list81 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type75, list81, true);
        int int85 = type47.getOpcode(138);
        java.lang.Class<?> wildcardClass86 = type47.getClass();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass86);
        java.util.List list88 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type87, list88, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type87, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode93 = null;
        java.util.List list94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = simpleVerifier92.naryOperation(abstractInsnNode93, list94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LB;" + "'", str13, "LB;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "B" + "'", str14, "B");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "B" + "'", str16, "B");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "B" + "'", str17, "B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "float" + "'", str26, "float");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "(CBFCF)B" + "'", str35, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "C" + "'", str42, "C");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "C" + "'", str45, "C");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 48 + "'", int49 == 48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)B" + "'", str67, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 138 + "'", int85 == 138);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(type87);
    }

    @Test
    public void test05106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05106");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        java.lang.Object obj12 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.ternaryOperation(abstractInsnNode20, value21, value22, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter19.merge(value30, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.ternaryOperation(abstractInsnNode39, value40, value41, value42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter38.merge(value49, value55);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier18.merge(value37, value49);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter13.copyOperation(abstractInsnNode17, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj12, value58);
        java.lang.Class<?> wildcardClass60 = value58.getClass();
        java.lang.String str61 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier10.newValue(type62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type65, true);
        java.lang.String str70 = type64.getDescriptor();
        int int71 = type64.getSort();
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier10.newValue(type64);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier10.newValue(type74);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        java.util.List list77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value78 = simpleVerifier10.naryOperation(abstractInsnNode76, list77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str61, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "I" + "'", str70, "I");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(value75);
    }

    @Test
    public void test05107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05107");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        java.lang.Object obj12 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.ternaryOperation(abstractInsnNode20, value21, value22, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter19.merge(value30, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.ternaryOperation(abstractInsnNode39, value40, value41, value42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter38.merge(value49, value55);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier18.merge(value37, value49);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter13.copyOperation(abstractInsnNode17, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj12, value58);
        java.lang.Class<?> wildcardClass60 = value58.getClass();
        java.lang.String str61 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier10.newValue(type62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.SHORT_TYPE;
        int int65 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier10.newValue(type64);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier10.newValue(type68);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        java.util.List list71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value72 = simpleVerifier10.naryOperation(abstractInsnNode70, list71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str61, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test05108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05108");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type4, true);
        java.lang.String str9 = type4.getClassName();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type4, list10, true);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str15 = type14.getDescriptor();
        java.lang.String str16 = type14.getInternalName();
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier12.newValue(type14);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str20 = type19.getDescriptor();
        int int21 = type19.getSort();
        int int22 = type19.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type19, false);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int28 = type26.getOpcode(48);
        java.lang.String str29 = type26.getClassName();
        java.lang.String str30 = type26.getClassName();
        java.lang.String str31 = type26.getClassName();
        int int32 = type26.getSort();
        java.lang.String str33 = type26.toString();
        java.lang.String str34 = type26.toString();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.ternaryOperation(abstractInsnNode46, value47, value48, value49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter51.copyOperation(abstractInsnNode52, value53);
        org.mockito.asm.Type type55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.newValue(type55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.newValue(type61);
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter45.merge(value56, value62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode42, value63);
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter35.copyOperation(abstractInsnNode39, value63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .", (java.lang.Object) type26, value63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) false, value63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("LCBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;", (java.lang.Throwable) analyzerException67);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "void" + "'", str9, "void");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LB;" + "'", str15, "LB;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "B" + "'", str16, "B");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lfloat;" + "'", str20, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 48 + "'", int28 == 48);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "boolean" + "'", str29, "boolean");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Z" + "'", str33, "Z");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Z" + "'", str34, "Z");
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value65);
    }

    @Test
    public void test05109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05109");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        int int33 = type31.getOpcode(101);
        int int35 = type31.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value36 = simpleVerifier30.newValue(type31);
        int int37 = type31.getSort();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getReturnType("(CBFCF)Lfloat;");
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type[] typeArray42 = new org.mockito.asm.Type[] { type41 };
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray42);
        java.lang.String str44 = type39.toString();
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException51.addSuppressed((java.lang.Throwable) analyzerException53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException58.addSuppressed((java.lang.Throwable) analyzerException60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException62);
        analyzerException53.addSuppressed((java.lang.Throwable) analyzerException62);
        analyzerException49.addSuppressed((java.lang.Throwable) analyzerException53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Throwable) analyzerException49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException69.addSuppressed((java.lang.Throwable) analyzerException71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException69);
        java.lang.Throwable[] throwableArray74 = analyzerException73.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        analyzerException73.addSuppressed((java.lang.Throwable) analyzerException76);
        analyzerException49.addSuppressed((java.lang.Throwable) analyzerException73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        analyzerException49.addSuppressed((java.lang.Throwable) analyzerException80);
        boolean boolean82 = type39.equals((java.lang.Object) analyzerException49);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier84 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type39, true);
        java.lang.String str85 = type39.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 101 + "'", int33 == 101);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 191 + "'", int35 == 191);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(LLhi!;;)Lfloat;" + "'", str43, "(LLhi!;;)Lfloat;");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lfloat;" + "'", str44, "Lfloat;");
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "float" + "'", str85, "float");
    }

    @Test
    public void test05110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05110");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        int int6 = type0.getSize();
        java.lang.String str7 = type0.getClassName();
        int int8 = type0.getSort();
        org.mockito.asm.Type[] typeArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test05111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05111");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        int int5 = type0.getSize();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = type0.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test05112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05112");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int4 = type0.getSize();
        int int6 = type0.getOpcode(148);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        boolean boolean37 = type32.equals((java.lang.Object) 177);
        int int38 = type32.getSize();
        java.lang.String str39 = type32.toString();
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter26.newValue(type32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter26.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        int int46 = type44.getOpcode(101);
        java.lang.String str47 = type44.toString();
        int int48 = type44.getSize();
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter26.newValue(type44);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type44, false);
        java.lang.Class<?> wildcardClass52 = type0.getClass();
        java.lang.String str53 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass52);
        java.lang.String str54 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass52);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 148 + "'", int6 == 148);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)C" + "'", str25, "(CBFCF)C");
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "F" + "'", str39, "F");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 101 + "'", int46 == 101);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "C" + "'", str47, "C");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org/mockito/asm/Type" + "'", str53, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str54, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test05113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05113");
        java.lang.Object obj3 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter4.copyOperation(abstractInsnNode5, value6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter4.copyOperation(abstractInsnNode8, value48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj3, value49);
        java.lang.Throwable[] throwableArray51 = analyzerException50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = analyzerException50.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        analyzerException53.addSuppressed((java.lang.Throwable) analyzerException56);
        java.lang.String str58 = analyzerException53.toString();
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue" + "'", str58, "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test05114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05114");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str5 = type4.getDescriptor();
        int int6 = type4.getSort();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type7, list8, false);
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, list11, true);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        java.lang.String str17 = type14.getClassName();
        int int18 = type14.getSize();
        int int20 = type14.getOpcode(148);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier13.newValue(type14);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.ternaryOperation(abstractInsnNode26, value27, value28, value29);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.ternaryOperation(abstractInsnNode34, value35, value36, value37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.newValue(type49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter33.merge(value44, value50);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.ternaryOperation(abstractInsnNode53, value54, value55, value56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.newValue(type62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter64 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter64.copyOperation(abstractInsnNode65, value66);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter64.newValue(type68);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter52.merge(value63, value69);
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier32.merge(value51, value63);
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter25.copyOperation(abstractInsnNode31, value63);
        int int73 = value72.getSize();
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter23.copyOperation(abstractInsnNode24, value72);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value75 = simpleVerifier13.copyOperation(abstractInsnNode22, value72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LLB;;" + "'", str5, "LLB;;");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "char" + "'", str17, "char");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 148 + "'", int20 == 148);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(value74);
    }

    @Test
    public void test05115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05115");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value9 = basicInterpreter0.unaryOperation(abstractInsnNode7, value8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
    }

    @Test
    public void test05116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05116");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException3);
        java.lang.Class<?> wildcardClass5 = analyzerException3.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        int int13 = type11.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value14 = simpleVerifier10.newValue(type11);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type17 = org.mockito.asm.Type.SHORT_TYPE;
        int int18 = type17.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str24 = type23.getDescriptor();
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter19.newValue(type23);
        org.mockito.asm.Type[] typeArray27 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray27);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray27);
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray27);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier10.newValue(type16);
        int int32 = value31.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lboolean;", (java.lang.Object) str9, value31);
        java.lang.Throwable[] throwableArray34 = analyzerException33.getSuppressed();
        java.lang.Throwable[] throwableArray35 = analyzerException33.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("D");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter40.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("double", (java.lang.Object) basicInterpreter40, value52);
        java.lang.Throwable[] throwableArray54 = analyzerException53.getSuppressed();
        analyzerException38.addSuppressed((java.lang.Throwable) analyzerException53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("B");
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException64.addSuppressed((java.lang.Throwable) analyzerException66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException71.addSuppressed((java.lang.Throwable) analyzerException73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException75);
        analyzerException66.addSuppressed((java.lang.Throwable) analyzerException75);
        analyzerException62.addSuppressed((java.lang.Throwable) analyzerException66);
        analyzerException58.addSuppressed((java.lang.Throwable) analyzerException66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException58);
        analyzerException38.addSuppressed((java.lang.Throwable) analyzerException58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("[Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException38);
        analyzerException33.addSuppressed((java.lang.Throwable) analyzerException82);
        java.lang.Throwable[] throwableArray84 = analyzerException82.getSuppressed();
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str7, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str9, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 101 + "'", int13 == 101);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "I" + "'", str24, "I");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(CBFCF)I" + "'", str28, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(CBFCF)S" + "'", str29, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str30, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test05117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05117");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        org.mockito.asm.Type type8 = null;
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected F, but found F");
        org.mockito.asm.tree.analysis.Value value12 = simpleVerifier7.newValue(type11);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value14 = simpleVerifier7.newOperation(abstractInsnNode13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(value12);
    }

    @Test
    public void test05118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05118");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier0.newValue(type26);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type33, true);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier37.newValue(type38);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type44, true);
        java.lang.String str49 = type44.getClassName();
        java.util.List list50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type44, list50, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type44, true);
        java.lang.String str55 = type44.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type44, true);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type59, type62, type63, type67, type70 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type76, false);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier57.newValue(type76);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        java.util.List list83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value84 = simpleVerifier57.naryOperation(abstractInsnNode82, list83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "void" + "'", str49, "void");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "V" + "'", str55, "V");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)B" + "'", str75, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(value81);
    }

    @Test
    public void test05119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05119");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Li!;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test05120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05120");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException6);
        java.lang.Throwable[] throwableArray11 = analyzerException10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = analyzerException10.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test05121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05121");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LB;");
        int int2 = type1.getDimensions();
        int int4 = type1.getOpcode(0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
    }

    @Test
    public void test05122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05122");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)I");
        int int2 = type1.getSort();
        java.lang.String str3 = type1.getDescriptor();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getReturnType("(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;");
        java.util.List list6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type5, list6, false);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.Class<?> wildcardClass11 = type10.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        java.lang.String str13 = type12.getDescriptor();
        java.util.List list14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type12, list14, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException41);
        java.lang.Class<?> wildcardClass43 = analyzerException41.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.lang.String str45 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type46, list47, true);
        java.util.List list50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type38, list50, false);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str55 = type54.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int59 = type57.getOpcode(8);
        int int61 = type57.getOpcode(163);
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type57, list62, false);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier52.newValue(type57);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type68, type69, true);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean76 = type74.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier73.newValue(type74);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) 151);
        java.lang.String str81 = type78.getClassName();
        int int83 = type78.getOpcode(138);
        int int84 = type78.getSize();
        boolean boolean86 = type78.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier73.newValue(type78);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("Lhi!;", (java.lang.Object) "F", value87);
        int int89 = value87.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = simpleVerifier16.ternaryOperation(abstractInsnNode17, value18, value65, value87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "L(CBFCF)I;" + "'", str3, "L(CBFCF)I;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str45, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hi!" + "'", str55, "hi!");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 12 + "'", int59 == 12);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 167 + "'", int61 == 167);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "char" + "'", str81, "char");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 138 + "'", int83 == 138);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test05123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05123");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass8 = analyzerException6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type11, list12, true);
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type3, list15, false);
        java.lang.String str18 = type0.toString();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type20 = null;
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type20, list21, false);
        int int24 = type19.getSize();
        int int25 = type19.getSort();
        int int26 = type19.getSort();
        int int27 = type19.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type19, true);
        java.lang.String str30 = type0.toString();
        org.mockito.asm.Type[] typeArray32 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray32);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "J" + "'", str18, "J");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "J" + "'", str30, "J");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)J" + "'", str33, "(CBFCF)J");
    }

    @Test
    public void test05124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05124");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        int int35 = type26.getOpcode(100);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        int int39 = type37.getOpcode(101);
        java.lang.String str40 = type37.toString();
        int int41 = type37.getSize();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type43, type46, type47, type51, type54 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray58);
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray58);
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray58);
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray58);
        int int63 = type26.getSort();
        java.lang.String str64 = type26.toString();
        org.mockito.asm.Type[] typeArray66 = org.mockito.asm.Type.getArgumentTypes("()L(CBFCF)I;");
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray66);
        java.lang.String str68 = type26.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 102 + "'", int35 == 102);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 101 + "'", int39 == 101);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "C" + "'", str40, "C");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)B" + "'", str59, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(CBFCF)C" + "'", str60, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(CBFCF)I" + "'", str61, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)F" + "'", str62, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 6 + "'", int63 == 6);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "F" + "'", str64, "F");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "()F" + "'", str67, "()F");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "F" + "'", str68, "F");
    }

    @Test
    public void test05125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05125");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass8 = analyzerException6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type11, list12, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type17, type20, type21, type25, type28 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type34, false);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier38.newValue(type39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier38.newValue(type41);
        java.util.List list46 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type41, list46, true);
        int int50 = type41.getOpcode(100);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier14.newValue(type41);
        java.util.List list52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type41, list52, true);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str57 = type56.getClassName();
        java.util.List list58 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type56, list58, false);
        boolean boolean61 = type1.equals((java.lang.Object) simpleVerifier60);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value63 = simpleVerifier60.newOperation(abstractInsnNode62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)B" + "'", str33, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 102 + "'", int50 == 102);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "byte" + "'", str57, "byte");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test05126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05126");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Lorg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05127");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        java.lang.String str3 = type0.toString();
        int int4 = type0.getSize();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        int int6 = type5.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type5, false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type27, false);
        java.lang.String str32 = type9.getClassName();
        int int33 = type9.getSort();
        int int35 = type9.getOpcode(148);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        java.lang.String str39 = type36.getClassName();
        int int40 = type36.getSize();
        int int42 = type36.getOpcode(148);
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type36, list43, true);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int48 = type46.getOpcode(48);
        int int50 = type46.getOpcode(0);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type46, false);
        java.lang.String str53 = type46.getDescriptor();
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier8.newValue(type46);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        java.util.List list56 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value57 = simpleVerifier8.naryOperation(abstractInsnNode55, list56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "byte" + "'", str32, "byte");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 148 + "'", int35 == 148);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "char" + "'", str39, "char");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 148 + "'", int42 == 148);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 48 + "'", int48 == 48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Z" + "'", str53, "Z");
        org.junit.Assert.assertNotNull(value54);
    }

    @Test
    public void test05128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05128");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicValue;: expected (CBFCF)F, but found .");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05129");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type6, true);
        java.lang.String str11 = type6.getClassName();
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type6, list12, true);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str17 = type16.getDescriptor();
        java.lang.String str18 = type16.getInternalName();
        org.mockito.asm.tree.analysis.Value value19 = simpleVerifier14.newValue(type16);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        java.lang.String str23 = type20.getClassName();
        int int25 = type20.getOpcode(138);
        int int26 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier14.newValue(type20);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type29, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier33.newValue(type34);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        java.lang.String str41 = type38.getClassName();
        int int43 = type38.getOpcode(138);
        int int44 = type38.getSize();
        boolean boolean46 = type38.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier33.newValue(type38);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier0.merge(value27, value47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        boolean boolean54 = type49.equals((java.lang.Object) 177);
        java.lang.String str55 = type49.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException58);
        java.lang.Class<?> wildcardClass60 = analyzerException58.getClass();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        int int63 = type61.getOpcode(114);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.Type type73 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) 151);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) (byte) 100);
        java.lang.String str79 = type76.getClassName();
        org.mockito.asm.Type[] typeArray80 = new org.mockito.asm.Type[] { type65, type68, type69, type73, type76 };
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type64, typeArray80);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray80);
        boolean boolean83 = type49.equals((java.lang.Object) typeArray80);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier0.newValue(type49);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        java.util.List list86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value87 = simpleVerifier0.naryOperation(abstractInsnNode85, list86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "void" + "'", str11, "void");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LB;" + "'", str17, "LB;");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "B" + "'", str18, "B");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "char" + "'", str23, "char");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 138 + "'", int25 == 138);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "char" + "'", str41, "char");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 138 + "'", int43 == 138);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "F" + "'", str55, "F");
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 118 + "'", int63 == 118);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "float" + "'", str79, "float");
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)B" + "'", str81, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str82, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(value84);
    }

    @Test
    public void test05130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05130");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type43, false);
        java.lang.String str48 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier22.newValue(type50);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type59, type62, type63, type67, type70 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray74);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException79);
        java.lang.Class<?> wildcardClass81 = analyzerException79.getClass();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        java.lang.String str83 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type84, true);
        boolean boolean87 = type53.equals((java.lang.Object) type84);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier22.newValue(type84);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier22.newValue(type89);
        // The following exception was thrown during execution in test generation
        try {
            int int91 = type89.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "byte" + "'", str48, "byte");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "char" + "'", str57, "char");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)B" + "'", str75, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)C" + "'", str76, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str83, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNull(value90);
    }

    @Test
    public void test05131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05131");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        boolean boolean11 = type6.equals((java.lang.Object) 177);
        int int12 = type6.getSize();
        java.lang.String str13 = type6.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        int int20 = type18.getOpcode(101);
        java.lang.String str21 = type18.toString();
        int int22 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        boolean boolean36 = type31.equals((java.lang.Object) 177);
        int int37 = type31.getSize();
        java.lang.String str38 = type31.toString();
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter25.newValue(type31);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter0.copyOperation(abstractInsnNode24, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type43, type46, type47, type51, type54 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type60, false);
        java.lang.String str65 = type42.getClassName();
        int int66 = type42.getSort();
        java.lang.String str67 = type42.toString();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter68.ternaryOperation(abstractInsnNode69, value70, value71, value72);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str75 = type74.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter68.newValue(type74);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getObjectType("L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter68.newValue(type78);
        boolean boolean80 = type42.equals((java.lang.Object) value79);
        int int81 = value79.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value82 = basicInterpreter0.unaryOperation(abstractInsnNode41, value79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 101 + "'", int20 == 101);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "C" + "'", str21, "C");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "F" + "'", str38, "F");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)B" + "'", str59, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "byte" + "'", str65, "byte");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "B" + "'", str67, "B");
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "long" + "'", str75, "long");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test05132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05132");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, false);
        java.lang.String str6 = type1.toString();
        java.lang.String str7 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "B" + "'", str6, "B");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "B" + "'", str7, "B");
    }

    @Test
    public void test05133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05133");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        boolean boolean8 = type0.equals((java.lang.Object) 154);
        java.lang.String str9 = type0.getDescriptor();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type10, true);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int19 = type17.getOpcode(48);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type[] typeArray36 = new org.mockito.asm.Type[] { type21, type24, type25, type29, type32 };
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type38, false);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier42.newValue(type43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier42.newValue(type45);
        int int50 = type45.getSize();
        java.util.List list51 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type45, list51, true);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int55 = type54.getSize();
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier53.newValue(type54);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str61 = type60.getDescriptor();
        int int62 = type60.getSort();
        int int63 = type60.getDimensions();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str66 = type65.getDescriptor();
        int int67 = type65.getSort();
        java.util.List list68 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type65, list68, true);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str73 = type72.getDescriptor();
        int int74 = type72.getSort();
        int int75 = type72.getDimensions();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str78 = type77.getDescriptor();
        int int79 = type77.getSort();
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type72, type77, list80, true);
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier70.newValue(type77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException86);
        java.lang.Class<?> wildcardClass88 = analyzerException86.getClass();
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass88);
        java.lang.String str90 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass88);
        java.lang.String str91 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass88);
        java.lang.String str92 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass88);
        org.mockito.asm.Type type93 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass88);
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier70.newValue(type93);
        org.mockito.asm.Type type95 = null;
        org.mockito.asm.tree.analysis.Value value96 = simpleVerifier70.newValue(type95);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException97 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;", (java.lang.Object) (short) 100, value96);
        org.mockito.asm.tree.analysis.Value value98 = simpleVerifier16.merge(value56, value96);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 48 + "'", int19 == 48);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)B" + "'", str37, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Lfloat;" + "'", str61, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Lfloat;" + "'", str66, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Lfloat;" + "'", str73, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Lfloat;" + "'", str78, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str90, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str91, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str92, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertNotNull(value96);
        org.junit.Assert.assertNotNull(value98);
    }

    @Test
    public void test05134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05134");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type26, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.ternaryOperation(abstractInsnNode33, value34, value35, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter32.merge(value43, value49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.ternaryOperation(abstractInsnNode52, value53, value54, value55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.newValue(type61);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter63.copyOperation(abstractInsnNode64, value65);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.newValue(type67);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter51.merge(value62, value68);
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier31.merge(value50, value62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter71.ternaryOperation(abstractInsnNode72, value73, value74, value75);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter77.copyOperation(abstractInsnNode78, value79);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter77.newValue(type81);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter83 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter83.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.Type type87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter83.newValue(type87);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter71.merge(value82, value88);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier30.merge(value70, value82);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter0.copyOperation(abstractInsnNode7, value82);
        java.lang.Class<?> wildcardClass92 = value82.getClass();
        org.mockito.asm.Type type93 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass92);
        org.mockito.asm.Type type94 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass92);
        java.lang.String str95 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass92);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str95, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test05135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05135");
        java.lang.Object obj2 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter3.copyOperation(abstractInsnNode4, value5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter9.ternaryOperation(abstractInsnNode10, value11, value12, value13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.newValue(type25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter9.merge(value20, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.ternaryOperation(abstractInsnNode29, value30, value31, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter28.merge(value39, value45);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier8.merge(value27, value39);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter3.copyOperation(abstractInsnNode7, value47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj2, value48);
        java.lang.Throwable[] throwableArray50 = analyzerException49.getSuppressed();
        java.lang.Throwable[] throwableArray51 = analyzerException49.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("Lhi!;", (java.lang.Throwable) analyzerException55);
        analyzerException52.addSuppressed((java.lang.Throwable) analyzerException56);
        java.lang.String str58 = analyzerException52.toString();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue" + "'", str58, "org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test05136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05136");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str54 = type53.getDescriptor();
        int int55 = type53.getSort();
        int int56 = type53.getSize();
        java.util.List list57 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type53, list57, true);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        java.lang.String str63 = type60.getClassName();
        int int65 = type60.getOpcode(138);
        int int66 = type60.getSize();
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier59.newValue(type60);
        java.lang.String str68 = type60.getDescriptor();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str51, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Lfloat;" + "'", str54, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "char" + "'", str63, "char");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 138 + "'", int65 == 138);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "C" + "'", str68, "C");
    }

    @Test
    public void test05137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05137");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("short");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier25.newValue(type28);
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type28, list33, true);
        int int37 = type28.getOpcode(100);
        org.mockito.asm.Type[] typeArray39 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray39);
        int int41 = type28.getSort();
        org.mockito.asm.Type[] typeArray43 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray43);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type28, false);
        java.lang.String str47 = type1.getClassName();
        java.lang.String str48 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 102 + "'", int37 == 102);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)F" + "'", str40, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)F" + "'", str44, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "short" + "'", str47, "short");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "short" + "'", str48, "short");
    }

    @Test
    public void test05138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05138");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/BasicVerifier");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type12, false);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getReturnType("Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier14.newValue(type16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        boolean boolean23 = type18.equals((java.lang.Object) 177);
        java.lang.String str24 = type18.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        int int32 = type30.getOpcode(114);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) (byte) 100);
        java.lang.String str41 = type38.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type34, type37, type38, type42, type45 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray49);
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray49);
        boolean boolean52 = type18.equals((java.lang.Object) typeArray49);
        int int53 = type18.getSort();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int57 = type55.getOpcode(167);
        java.util.List list58 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type55, list58, true);
        boolean boolean62 = type55.equals((java.lang.Object) 100.0f);
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier14.newValue(type55);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        java.util.List list65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value66 = simpleVerifier14.naryOperation(abstractInsnNode64, list65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str11, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "F" + "'", str24, "F");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 118 + "'", int32 == 118);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(CBFCF)B" + "'", str50, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str51, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 171 + "'", int57 == 171);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(value63);
    }

    @Test
    public void test05139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05139");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        int int34 = type26.getSize();
        java.lang.String str35 = type26.getDescriptor();
        java.lang.String str36 = type26.getClassName();
        int int37 = type26.getSize();
        java.lang.String str38 = type26.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int39 = type26.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "F" + "'", str35, "F");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "F" + "'", str38, "F");
    }

    @Test
    public void test05140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05140");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type4, list5, false);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException10);
        java.lang.Class<?> wildcardClass12 = analyzerException10.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = type13.getElementType();
        java.lang.String str15 = type14.getClassName();
        java.lang.String str16 = type14.getDescriptor();
        org.mockito.asm.Type type17 = type14.getElementType();
        org.mockito.asm.tree.analysis.Value value18 = simpleVerifier7.newValue(type17);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier7.newValue(type20);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int24 = type22.getOpcode(48);
        java.lang.String str25 = type22.getClassName();
        java.lang.String str26 = type22.getClassName();
        java.lang.String str27 = type22.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type29, type32, type33, type37, type40 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type46, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type28, true);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list55 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type54, list55, true);
        java.util.List list58 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type54, list58, true);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/SimpleVerifier");
        org.mockito.asm.Type type63 = org.mockito.asm.Type.SHORT_TYPE;
        int int64 = type63.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter65 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter65.copyOperation(abstractInsnNode66, value67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str70 = type69.getDescriptor();
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter65.newValue(type69);
        org.mockito.asm.Type[] typeArray73 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type69, typeArray73);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray73);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray73);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier60.newValue(type62);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier60.newValue(type79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("LB", (java.lang.Object) value21, value80);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str15, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str16, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 48 + "'", int24 == 48);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "boolean" + "'", str25, "boolean");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "boolean" + "'", str26, "boolean");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "boolean" + "'", str27, "boolean");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(CBFCF)B" + "'", str45, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "I" + "'", str70, "I");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)I" + "'", str74, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)S" + "'", str75, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str76, "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(value80);
    }

    @Test
    public void test05141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05141");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.Type type10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.newValue(type10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.merge(value11, value17);
        java.lang.Class<?> wildcardClass19 = basicInterpreter0.getClass();
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        java.lang.String str22 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicInterpreter;" + "'", str20, "Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicInterpreter;" + "'", str21, "Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicInterpreter;" + "'", str22, "Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
    }

    @Test
    public void test05142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05142");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        java.lang.String str3 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass1);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        int int5 = type4.getDimensions();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str3, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test05143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05143");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.Type type10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.newValue(type10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.merge(value11, value17);
        java.lang.Class<?> wildcardClass19 = value17.getClass();
        java.lang.String str20 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        java.lang.String str21 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        java.lang.String str22 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        java.lang.String str23 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        java.lang.String str24 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str20, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str21, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str22, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str23, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str24, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test05144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05144");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException7);
        java.lang.Class<?> wildcardClass9 = analyzerException7.getClass();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        int int12 = type10.getOpcode(114);
        java.lang.Class<?> wildcardClass13 = type10.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        int int16 = type15.getSize();
        java.lang.String str17 = type15.getDescriptor();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type15, list18, true);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getReturnType("(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        int int24 = type22.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier20.newValue(type22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        java.util.List list27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value28 = simpleVerifier20.naryOperation(abstractInsnNode26, list27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 118 + "'", int12 == 118);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str17, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 105 + "'", int24 == 105);
        org.junit.Assert.assertNotNull(value25);
    }

    @Test
    public void test05145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05145");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier0.newValue(type77);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode81 = null;
        org.mockito.asm.tree.analysis.Value value82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value83 = simpleVerifier0.unaryOperation(abstractInsnNode81, value82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(value80);
    }

    @Test
    public void test05146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05146");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        int int2 = type0.getOpcode(0);
        java.lang.String str3 = type0.toString();
        int int4 = type0.getSize();
        java.lang.String str5 = type0.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "I" + "'", str3, "I");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "int" + "'", str5, "int");
    }

    @Test
    public void test05147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05147");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        int int28 = type26.getOpcode(101);
        int int30 = type26.getOpcode(191);
        int int31 = type26.getSort();
        java.lang.Class<?> wildcardClass32 = type26.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException");
        int int36 = type35.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type35, false);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier38.newValue(type39);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value41 = simpleVerifier22.unaryOperation(abstractInsnNode25, value40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 101 + "'", int28 == 101);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 191 + "'", int30 == 191);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(value40);
    }

    @Test
    public void test05148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05148");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicInterpreter");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("S", (java.lang.Throwable) analyzerException17);
        boolean boolean19 = type8.equals((java.lang.Object) analyzerException17);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type22 = type21.getElementType();
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type21, list23, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier27.newValue(type29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type33, true);
        java.lang.String str38 = type33.getClassName();
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type33, list39, true);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str44 = type43.getDescriptor();
        java.lang.String str45 = type43.getInternalName();
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier41.newValue(type43);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        java.lang.String str50 = type47.getClassName();
        int int52 = type47.getOpcode(138);
        int int53 = type47.getSize();
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier41.newValue(type47);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type56, true);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier60.newValue(type61);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        java.lang.String str68 = type65.getClassName();
        int int70 = type65.getOpcode(138);
        int int71 = type65.getSize();
        boolean boolean73 = type65.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier60.newValue(type65);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier27.merge(value54, value74);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value76 = simpleVerifier25.unaryOperation(abstractInsnNode26, value75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "void" + "'", str38, "void");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "LB;" + "'", str44, "LB;");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "B" + "'", str45, "B");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "char" + "'", str50, "char");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 138 + "'", int52 == 138);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "char" + "'", str68, "char");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 138 + "'", int70 == 138);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
    }

    @Test
    public void test05149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05149");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException15.addSuppressed((java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException19);
        boolean boolean21 = type9.equals((java.lang.Object) analyzerException20);
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException20);
        java.lang.Throwable[] throwableArray23 = analyzerException8.getSuppressed();
        java.lang.Class<?> wildcardClass24 = analyzerException8.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass24);
        java.lang.String str27 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str26, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str27, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str28, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test05150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05150");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier23.merge(value42, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.ternaryOperation(abstractInsnNode64, value65, value66, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter63.merge(value74, value80);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier22.merge(value62, value74);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type84 = null;
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type84, list85, false);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier22.newValue(type83);
        int int89 = type83.getSize();
        int int90 = type83.getSort();
        // The following exception was thrown during execution in test generation
        try {
            int int91 = type83.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNull(value88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test05151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05151");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        java.lang.String str5 = type0.getClassName();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type6 = type0.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "void" + "'", str5, "void");
    }

    @Test
    public void test05152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05152");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        boolean boolean16 = type14.equals((java.lang.Object) "Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        java.lang.String str17 = type14.getDescriptor();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type14, list18, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        java.util.List list22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value23 = simpleVerifier20.naryOperation(abstractInsnNode21, list22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Z" + "'", str6, "Z");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str13, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str17, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test05153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05153");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        boolean boolean7 = type1.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        int int8 = type1.getSize();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: LLB;;");
        int int12 = type10.getOpcode(197);
        java.util.List list13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type10, list13, false);
        int int17 = type10.getOpcode(52);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 201 + "'", int12 == 201);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 56 + "'", int17 == 56);
    }

    @Test
    public void test05154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05154");
        java.lang.Object obj5 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.ternaryOperation(abstractInsnNode13, value14, value15, value16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter24.copyOperation(abstractInsnNode25, value26);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter12.merge(value23, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.ternaryOperation(abstractInsnNode32, value33, value34, value35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter31.merge(value42, value48);
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier11.merge(value30, value42);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter6.copyOperation(abstractInsnNode10, value50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj5, value51);
        java.lang.Throwable[] throwableArray53 = analyzerException52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = analyzerException52.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException55);
        java.lang.Throwable[] throwableArray57 = analyzerException56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = analyzerException56.getSuppressed();
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException65.addSuppressed((java.lang.Throwable) analyzerException67);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException72.addSuppressed((java.lang.Throwable) analyzerException74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException76);
        analyzerException67.addSuppressed((java.lang.Throwable) analyzerException76);
        analyzerException63.addSuppressed((java.lang.Throwable) analyzerException67);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Throwable) analyzerException63);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException83.addSuppressed((java.lang.Throwable) analyzerException85);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException83);
        java.lang.Throwable[] throwableArray88 = analyzerException87.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        analyzerException87.addSuppressed((java.lang.Throwable) analyzerException90);
        analyzerException63.addSuppressed((java.lang.Throwable) analyzerException87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException94 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        analyzerException63.addSuppressed((java.lang.Throwable) analyzerException94);
        analyzerException56.addSuppressed((java.lang.Throwable) analyzerException94);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException97 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)LCBFCF)Lfloat;", (java.lang.Throwable) analyzerException94);
        java.lang.Throwable[] throwableArray98 = analyzerException94.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException99 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: LB;", (java.lang.Throwable) analyzerException94);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray98);
    }

    @Test
    public void test05155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05155");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int77 = type75.getOpcode(48);
        java.lang.String str78 = type75.getClassName();
        java.lang.String str79 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier0.newValue(type75);
        java.lang.Class<?> wildcardClass81 = value80.getClass();
        java.lang.String str82 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass81);
        java.lang.String str83 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass81);
        java.lang.String str84 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 48 + "'", int77 == 48);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str82, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str83, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str84, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test05156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05156");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 193);
        java.lang.Class<?> wildcardClass3 = type0.getClass();
        java.lang.String str4 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        java.lang.String str5 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass3);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass3);
        java.lang.String str9 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass3);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org/mockito/asm/Type" + "'", str5, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/Type" + "'", str7, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str9, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test05157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05157");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier0.newValue(type26);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type33, true);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier37.newValue(type38);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type44, true);
        java.lang.String str49 = type44.getClassName();
        java.util.List list50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type44, list50, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type44, true);
        java.lang.String str55 = type44.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type44, true);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getReturnType("(CBFCF)Lfloat;");
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type61 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray62);
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier57.newValue(type59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        java.util.List list66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value67 = simpleVerifier57.naryOperation(abstractInsnNode65, list66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "void" + "'", str49, "void");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "V" + "'", str55, "V");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(LLhi!;;)Lfloat;" + "'", str63, "(LLhi!;;)Lfloat;");
        org.junit.Assert.assertNotNull(value64);
    }

    @Test
    public void test05158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05158");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 151);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 100);
        java.lang.String str10 = type7.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type3, type6, type7, type11, type14 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type20, false);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier24.newValue(type25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type29, true);
        java.lang.String str34 = type29.getClassName();
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type29, list35, true);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str40 = type39.getDescriptor();
        java.lang.String str41 = type39.getInternalName();
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier37.newValue(type39);
        int int43 = value42.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.ternaryOperation(abstractInsnNode45, value46, value47, value48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter56 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter56.copyOperation(abstractInsnNode57, value58);
        org.mockito.asm.Type type60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter56.newValue(type60);
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter44.merge(value55, value61);
        int int63 = value62.getSize();
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier24.merge(value42, value62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: hi!", (java.lang.Object) "(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;", value42);
        java.lang.Class<?> wildcardClass66 = analyzerException65.getClass();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        java.lang.String str68 = type67.getDescriptor();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)B" + "'", str19, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "void" + "'", str34, "void");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "LB;" + "'", str40, "LB;");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "B" + "'", str41, "B");
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str68, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test05159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05159");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("Lmockito/asm/tree/analysis/SimpleVerifier;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05160");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: LLB;;");
        java.lang.String str2 = type1.getInternalName();
        org.mockito.asm.Type type3 = type1.getElementType();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        int int6 = type4.getSize();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        java.lang.Class<?> wildcardClass31 = analyzerException29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type34, list35, true);
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type26, list38, false);
        java.lang.String str41 = type26.getInternalName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getObjectType("(CBFCF)S");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type43, false);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        int int48 = type46.getOpcode(101);
        int int50 = type46.getOpcode(191);
        int int51 = type46.getSort();
        java.lang.Class<?> wildcardClass52 = type46.getClass();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        java.lang.String str54 = type53.getDescriptor();
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier45.newValue(type53);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        java.lang.String str58 = type57.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier45.newValue(type57);
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type57, list60, true);
        java.util.List list63 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, list63, false);
        java.lang.String str66 = type4.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "rg.mockito.asm.tree.analysis.AnalyzerException: LLB" + "'", str2, "rg.mockito.asm.tree.analysis.AnalyzerException: LLB");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str41, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 101 + "'", int48 == 101);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 191 + "'", int50 == 191);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str54, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str58, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "I" + "'", str66, "I");
    }

    @Test
    public void test05161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05161");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException3.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str8 = type7.getClassName();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type7, list9, false);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type13 = null;
        java.util.List list14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type13, list14, false);
        int int17 = type12.getSize();
        int int18 = type12.getSort();
        int int19 = type12.getSort();
        java.util.List list20 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type12, list20, true);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType("(CBFCF)LB;");
        java.lang.String str25 = type24.getClassName();
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier22.newValue(type24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type24, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getReturnType("LLB;;");
        int int32 = type31.getDimensions();
        java.lang.String str33 = type31.getDescriptor();
        int int34 = type31.getSort();
        org.mockito.asm.Type type35 = null;
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type35, list36, false);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type41 = type40.getElementType();
        java.lang.String str42 = type41.getInternalName();
        int int43 = type41.getSort();
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier38.newValue(type41);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value45 = simpleVerifier28.unaryOperation(abstractInsnNode29, value44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "byte" + "'", str8, "byte");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CBFCF)LB" + "'", str25, "CBFCF)LB");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "LLB;" + "'", str33, "LLB;");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "i!" + "'", str42, "i!");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertNotNull(value44);
    }

    @Test
    public void test05162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05162");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        int int3 = type1.getOpcode(258);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 262 + "'", int3 == 262);
    }

    @Test
    public void test05163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05163");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier32.newValue(type34);
        int int37 = type34.getOpcode(81);
        org.mockito.asm.Type type38 = type34.getElementType();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int41 = type39.getOpcode(48);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type43, type46, type47, type51, type54 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type60, false);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier64.newValue(type65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier64.newValue(type67);
        int int72 = type67.getSize();
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type67, list73, true);
        int int76 = type39.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type39, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        java.util.List list80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value81 = simpleVerifier78.naryOperation(abstractInsnNode79, list80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 85 + "'", int37 == 85);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 48 + "'", int41 == 48);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)B" + "'", str59, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test05164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05164");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.String str5 = type1.getClassName();
        java.lang.String str6 = type1.getDescriptor();
        java.lang.String str7 = type1.toString();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str10 = type9.getDescriptor();
        boolean boolean12 = type9.equals((java.lang.Object) "hi!");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        int int16 = type14.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier13.newValue(type14);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        boolean boolean23 = type18.equals((java.lang.Object) 177);
        java.lang.String str24 = type18.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        int int32 = type30.getOpcode(114);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) (byte) 100);
        java.lang.String str41 = type38.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type34, type37, type38, type42, type45 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray49);
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray49);
        boolean boolean52 = type18.equals((java.lang.Object) typeArray49);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray49);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray49);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray49);
        java.lang.String str56 = type1.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Z" + "'", str6, "Z");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Z" + "'", str7, "Z");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "LB;" + "'", str10, "LB;");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 101 + "'", int16 == 101);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "F" + "'", str24, "F");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 118 + "'", int32 == 118);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(CBFCF)B" + "'", str50, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str51, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)C" + "'", str53, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)LB;" + "'", str54, "(CBFCF)LB;");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)Z" + "'", str55, "(CBFCF)Z");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Z" + "'", str56, "Z");
    }

    @Test
    public void test05165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05165");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int6 = type4.getOpcode(8);
        int int8 = type4.getOpcode(163);
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, list9, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type15, type18, type19, type23, type26 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray30);
        int int32 = type14.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.ternaryOperation(abstractInsnNode36, value37, value38, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter62.ternaryOperation(abstractInsnNode63, value64, value65, value66);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter68.copyOperation(abstractInsnNode69, value70);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter68.newValue(type72);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter74.copyOperation(abstractInsnNode75, value76);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter74.newValue(type78);
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter62.merge(value73, value79);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier42.merge(value61, value73);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter35.copyOperation(abstractInsnNode41, value73);
        int int83 = value82.getSize();
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter33.copyOperation(abstractInsnNode34, value82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("C", (java.lang.Object) type14, value84);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value86 = simpleVerifier11.copyOperation(abstractInsnNode12, value84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 167 + "'", int8 == 167);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(CBFCF)B" + "'", str31, "(CBFCF)B");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
    }

    @Test
    public void test05166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05166");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        int int7 = type2.getOpcode(138);
        int int8 = type2.getSize();
        boolean boolean10 = type2.equals((java.lang.Object) 154);
        java.lang.String str11 = type2.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str22 = type21.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type21, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException28.addSuppressed((java.lang.Throwable) analyzerException30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type[] typeArray48 = new org.mockito.asm.Type[] { type33, type36, type37, type41, type44 };
        java.lang.String str49 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type50, false);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier54.newValue(type55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier54.newValue(type57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier54.newValue(type59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/AnalyzerException", (java.lang.Object) analyzerException28, value60);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value62 = simpleVerifier24.copyOperation(abstractInsnNode25, value60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 138 + "'", int7 == 138);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "C" + "'", str11, "C");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str22, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "(CBFCF)B" + "'", str49, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value60);
    }

    @Test
    public void test05167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05167");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value4 = simpleVerifier0.newValue(type1);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type23, false);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier27.newValue(type28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier27.newValue(type30);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type36 = null;
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type36, list37, false);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier27.newValue(type35);
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier0.newValue(type35);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        int int43 = type42.getSize();
        java.lang.String str44 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier0.newValue(type42);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        boolean boolean51 = type46.equals((java.lang.Object) 177);
        java.lang.String str52 = type46.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException55);
        java.lang.Class<?> wildcardClass57 = analyzerException55.getClass();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        int int60 = type58.getOpcode(114);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) 151);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.Type[] typeArray77 = new org.mockito.asm.Type[] { type62, type65, type66, type70, type73 };
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type61, typeArray77);
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray77);
        boolean boolean80 = type46.equals((java.lang.Object) typeArray77);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier0.newValue(type46);
        org.mockito.asm.Type type82 = null;
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier0.newValue(type82);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        java.util.List list85 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value86 = simpleVerifier0.naryOperation(abstractInsnNode84, list85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "F" + "'", str52, "F");
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 118 + "'", int60 == 118);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)B" + "'", str78, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str79, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value83);
    }

    @Test
    public void test05168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05168");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        java.lang.Class<?> wildcardClass77 = simpleVerifier0.getClass();
        java.lang.String str78 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type[] typeArray80 = new org.mockito.asm.Type[] {};
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type79, typeArray80);
        org.mockito.asm.Type type82 = type79.getElementType();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type84 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type84, list85, true);
        int int89 = type83.getOpcode(169);
        java.util.List list90 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type82, type83, list90, false);
        org.mockito.asm.Type type93 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier95 = new org.mockito.asm.tree.analysis.SimpleVerifier(type82, type93, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode96 = null;
        java.util.List list97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value98 = simpleVerifier95.naryOperation(abstractInsnNode96, list97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str78, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "()Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str81, "()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 170 + "'", int89 == 170);
    }

    @Test
    public void test05169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05169");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("B");
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException15.addSuppressed((java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException19);
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException19);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException10);
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicInterpreter", (java.lang.Throwable) analyzerException2);
    }

    @Test
    public void test05170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05170");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        java.lang.String str51 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type56, true);
        java.lang.String str61 = type56.getClassName();
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type56, list62, true);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str67 = type66.getDescriptor();
        java.lang.String str68 = type66.getInternalName();
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier64.newValue(type66);
        java.lang.String str70 = type66.getClassName();
        java.lang.String str71 = type66.getDescriptor();
        java.lang.String str72 = type66.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type66, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value76 = simpleVerifier74.newOperation(abstractInsnNode75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str50, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str51, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str53, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "void" + "'", str61, "void");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "LB;" + "'", str67, "LB;");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "B" + "'", str68, "B");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "B" + "'", str70, "B");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "LB;" + "'", str71, "LB;");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "LB;" + "'", str72, "LB;");
    }

    @Test
    public void test05171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05171");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.String str5 = type0.getDescriptor();
        int int6 = type0.getSort();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        java.lang.Class<?> wildcardClass13 = analyzerException11.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str15 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.util.List list17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type16, list17, true);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        boolean boolean25 = type20.equals((java.lang.Object) 177);
        int int27 = type20.getOpcode(167);
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier19.newValue(type20);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str30 = type29.getClassName();
        int int31 = type29.getSort();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier19.newValue(type29);
        int int33 = type29.getSize();
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type34, true);
        boolean boolean37 = type0.equals((java.lang.Object) simpleVerifier36);
        int int38 = type0.getSort();
        int int39 = type0.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "J" + "'", str5, "J");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str15, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 169 + "'", int27 == 169);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "void" + "'", str30, "void");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 7 + "'", int38 == 7);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test05172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05172");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        boolean boolean11 = type6.equals((java.lang.Object) 177);
        int int12 = type6.getSize();
        java.lang.String str13 = type6.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter0.newValue(type18);
        int int20 = value19.getSize();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test05173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05173");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int13 = type11.getOpcode(48);
        java.lang.String str14 = type11.getClassName();
        java.lang.String str15 = type11.getClassName();
        java.lang.String str16 = type11.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type18, type21, type22, type26, type29 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type35, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type17, true);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter7.newValue(type11);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type44, type47, type48, type52, type55 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type61, false);
        int int66 = type61.getSort();
        java.lang.String str67 = type61.getDescriptor();
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter7.newValue(type61);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier70.newValue(type72);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type76 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) 151);
        java.lang.String str79 = type76.getClassName();
        int int81 = type76.getOpcode(138);
        int int82 = type76.getSize();
        boolean boolean84 = type76.equals((java.lang.Object) 154);
        java.lang.String str85 = type76.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type75, type76, true);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier70.newValue(type76);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter7.copyOperation(abstractInsnNode69, value88);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = basicInterpreter0.unaryOperation(abstractInsnNode6, value89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 48 + "'", int13 == 48);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(CBFCF)B" + "'", str34, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(CBFCF)B" + "'", str60, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "C" + "'", str67, "C");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "char" + "'", str79, "char");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 138 + "'", int81 == 138);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "C" + "'", str85, "C");
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
    }

    @Test
    public void test05174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05174");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        boolean boolean11 = type6.equals((java.lang.Object) 177);
        int int12 = type6.getSize();
        java.lang.String str13 = type6.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        int int20 = type18.getOpcode(101);
        java.lang.String str21 = type18.toString();
        int int22 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type18);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType("Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type25, false);
        int int28 = type18.getSize();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type31, type34, type35, type39, type42 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type48, false);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier52.newValue(type53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier52.newValue(type55);
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type55, list60, true);
        int int64 = type55.getOpcode(100);
        org.mockito.asm.Type[] typeArray66 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray66);
        java.lang.Class<?> wildcardClass68 = type55.getClass();
        java.lang.String str69 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        java.lang.String str72 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass68);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type73, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = type18.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 101 + "'", int20 == 101);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "C" + "'", str21, "C");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)B" + "'", str47, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 102 + "'", int64 == 102);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)F" + "'", str67, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str69, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str72, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type73);
    }

    @Test
    public void test05175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05175");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: LLB;;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException7.addSuppressed((java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException7);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type17, true);
        java.lang.String str22 = type17.getClassName();
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type17, list23, true);
        java.lang.Object obj27 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.ternaryOperation(abstractInsnNode35, value36, value37, value38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.newValue(type50);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter34.merge(value45, value51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.ternaryOperation(abstractInsnNode54, value55, value56, value57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter59.copyOperation(abstractInsnNode60, value61);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter59.newValue(type63);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter65 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter65.copyOperation(abstractInsnNode66, value67);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter65.newValue(type69);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter53.merge(value64, value70);
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier33.merge(value52, value64);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter28.copyOperation(abstractInsnNode32, value72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj27, value73);
        java.lang.Class<?> wildcardClass75 = value73.getClass();
        java.lang.String str76 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass75);
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier25.newValue(type77);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.SHORT_TYPE;
        int int80 = type79.getSize();
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier25.newValue(type79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("g.mockito.asm.tree.analysis.AnalyzerException", (java.lang.Object) 163, value81);
        analyzerException7.addSuppressed((java.lang.Throwable) analyzerException82);
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicInterpreter;", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.Value value86 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;", (java.lang.Object) analyzerException85, value86);
        java.lang.Class<?> wildcardClass88 = analyzerException85.getClass();
        java.lang.String str89 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass88);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "void" + "'", str22, "void");
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str76, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str89, "org/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test05176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05176");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list3 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list3, true);
        java.lang.Class<?> wildcardClass6 = simpleVerifier5.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.ternaryOperation(abstractInsnNode29, value30, value31, value32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter28.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.ternaryOperation(abstractInsnNode40, value41, value42, value43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.newValue(type49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter51.copyOperation(abstractInsnNode52, value53);
        org.mockito.asm.Type type55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.newValue(type55);
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter39.merge(value50, value56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.ternaryOperation(abstractInsnNode59, value60, value61, value62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter64 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter64.copyOperation(abstractInsnNode65, value66);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter64.newValue(type68);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter70 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter70.copyOperation(abstractInsnNode71, value72);
        org.mockito.asm.Type type74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter70.newValue(type74);
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter58.merge(value69, value75);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier38.merge(value57, value69);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter28.copyOperation(abstractInsnNode37, value69);
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter8.copyOperation(abstractInsnNode27, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) wildcardClass6, value79);
        java.lang.String str81 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str83 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        java.lang.String str84 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNull(value73);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str81, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str83, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str84, "org/mockito/asm/tree/analysis/SimpleVerifier");
    }

    @Test
    public void test05177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05177");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str51 = type50.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str54 = type53.getDescriptor();
        int int55 = type53.getSort();
        int int56 = type53.getSize();
        java.util.List list57 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type53, list57, true);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int62 = type60.getOpcode(48);
        java.lang.String str63 = type60.getClassName();
        java.lang.String str64 = type60.getClassName();
        java.lang.String str65 = type60.getClassName();
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) 151);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = type78.getClassName();
        org.mockito.asm.Type[] typeArray82 = new org.mockito.asm.Type[] { type67, type70, type71, type75, type78 };
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray82);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean86 = type84.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type66, type84, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type66, true);
        java.lang.String str91 = type60.getClassName();
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier59.newValue(type60);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode93 = null;
        java.util.List list94 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = simpleVerifier59.naryOperation(abstractInsnNode93, list94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str51, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Lfloat;" + "'", str54, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 48 + "'", int62 == 48);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "boolean" + "'", str63, "boolean");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)B" + "'", str83, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "boolean" + "'", str91, "boolean");
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test05178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05178");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = type6.getInternalName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        java.lang.String str26 = type8.toString();
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, list27, true);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type30, true);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type34, list35, true);
        java.lang.Class<?> wildcardClass38 = simpleVerifier37.getClass();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type41 = type40.getElementType();
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier32.newValue(type41);
        int int44 = type41.getOpcode(158);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str7, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "B" + "'", str26, "B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 162 + "'", int44 == 162);
    }

    @Test
    public void test05179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05179");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        int int35 = type0.getSort();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int39 = type37.getOpcode(167);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type37, list40, true);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException47);
        java.lang.Class<?> wildcardClass49 = analyzerException47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str51 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type52, list53, true);
        org.mockito.asm.Type type56 = type52.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str63 = type62.getDescriptor();
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter58.newValue(type62);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier57.newValue(type62);
        boolean boolean66 = type56.equals((java.lang.Object) type62);
        java.lang.String str67 = type56.getClassName();
        int int68 = type56.getSize();
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier42.newValue(type56);
        int int71 = type56.getOpcode(113);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 171 + "'", int39 == 171);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str51, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "I" + "'", str63, "I");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str67, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 117 + "'", int71 == 117);
    }

    @Test
    public void test05180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05180");
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException7.addSuppressed((java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException14.addSuppressed((java.lang.Throwable) analyzerException16);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException18);
        analyzerException9.addSuppressed((java.lang.Throwable) analyzerException18);
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("Lfloat;", (java.lang.Throwable) analyzerException9);
        java.lang.Throwable[] throwableArray23 = analyzerException22.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicInterpreter;", (java.lang.Throwable) analyzerException22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException30.addSuppressed((java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("Z", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException39.addSuppressed((java.lang.Throwable) analyzerException41);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException46.addSuppressed((java.lang.Throwable) analyzerException48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException50);
        analyzerException41.addSuppressed((java.lang.Throwable) analyzerException50);
        analyzerException37.addSuppressed((java.lang.Throwable) analyzerException41);
        java.lang.Throwable[] throwableArray54 = analyzerException37.getSuppressed();
        analyzerException24.addSuppressed((java.lang.Throwable) analyzerException37);
        java.lang.Class<?> wildcardClass56 = analyzerException37.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
    }

    @Test
    public void test05181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05181");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: LLg/mockito/asm/tree/analysis/AnalyzerException;;");
    }

    @Test
    public void test05182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05182");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, list5, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter9.ternaryOperation(abstractInsnNode10, value11, value12, value13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.newValue(type25);
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter9.merge(value20, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.ternaryOperation(abstractInsnNode29, value30, value31, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter28.merge(value39, value45);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier8.merge(value27, value39);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type67, false);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier71.newValue(type72);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean76 = type74.equals((java.lang.Object) (byte) 100);
        java.lang.String str77 = type74.getClassName();
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier71.newValue(type74);
        java.util.List list79 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type74, list79, true);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier8.newValue(type74);
        java.lang.Class<?> wildcardClass83 = type74.getClass();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass83);
        java.lang.String str85 = type84.toString();
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier7.newValue(type84);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode87 = null;
        java.util.List list88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = simpleVerifier7.naryOperation(abstractInsnNode87, list88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLB;;" + "'", str2, "LLB;;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "float" + "'", str77, "float");
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str85, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value86);
    }

    @Test
    public void test05183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05183");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int3 = type1.getOpcode(8);
        int int5 = type1.getOpcode(163);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value9, value10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter7.merge(value18, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier6.merge(value25, value37);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type48, type51, type52, type56, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type65, false);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier69.newValue(type70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier69.newValue(type72);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type72, list77, true);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier6.newValue(type72);
        org.mockito.asm.Type[] typeArray82 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type72, typeArray82);
        boolean boolean84 = type1.equals((java.lang.Object) str83);
        int int85 = type1.getSize();
        int int86 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 167 + "'", int5 == 167);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)B" + "'", str64, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)F" + "'", str83, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
    }

    @Test
    public void test05184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05184");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str53 = type52.getDescriptor();
        boolean boolean54 = type51.equals((java.lang.Object) type52);
        int int55 = type52.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type56 = type52.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "I" + "'", str53, "I");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test05185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05185");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)LCBFCF)Lfloat;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test05186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05186");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type25, false);
        int int30 = type25.getSort();
        java.lang.String str31 = type25.getDescriptor();
        java.lang.String str32 = type25.getClassName();
        boolean boolean33 = type0.equals((java.lang.Object) str32);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "C" + "'", str6, "C");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "C" + "'", str31, "C");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "char" + "'", str32, "char");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test05187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05187");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.String str5 = type0.getDescriptor();
        int int6 = type0.getSort();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type7 = type0.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "J" + "'", str5, "J");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
    }

    @Test
    public void test05188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05188");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("LLg.mockito.asm.tree.analysis.AnalyzerException;;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test05189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05189");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicInterpreter");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("S", (java.lang.Throwable) analyzerException17);
        boolean boolean19 = type8.equals((java.lang.Object) analyzerException17);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type21, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier25.newValue(type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type31, true);
        java.lang.String str36 = type31.getClassName();
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type31, list37, true);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str42 = type41.getDescriptor();
        java.lang.String str43 = type41.getInternalName();
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier39.newValue(type41);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        java.lang.String str48 = type45.getClassName();
        int int50 = type45.getOpcode(138);
        int int51 = type45.getSize();
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier39.newValue(type45);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type54, true);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier58.newValue(type59);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        java.lang.String str66 = type63.getClassName();
        int int68 = type63.getOpcode(138);
        int int69 = type63.getSize();
        boolean boolean71 = type63.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier58.newValue(type63);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier25.merge(value52, value72);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value74 = simpleVerifier23.unaryOperation(abstractInsnNode24, value52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "void" + "'", str36, "void");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "LB;" + "'", str42, "LB;");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "B" + "'", str43, "B");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "char" + "'", str48, "char");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 138 + "'", int50 == 138);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "char" + "'", str66, "char");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 138 + "'", int68 == 138);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
    }

    @Test
    public void test05190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05190");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.getDescriptor();
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter2.newValue(type6);
        org.mockito.asm.Type[] typeArray10 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray10);
        java.lang.Class<?> wildcardClass12 = typeArray10.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException17);
        java.lang.Class<?> wildcardClass19 = analyzerException17.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        java.lang.String str22 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type24, type27, type28, type32, type35 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray39);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type41, false);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier45.newValue(type46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str22, value47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type13, value47);
        int int50 = type13.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type13, true);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getReturnType("(CBFCF)F");
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier52.newValue(type54);
        int int57 = type54.getOpcode(0);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type58 = type54.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "I" + "'", str7, "I");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(CBFCF)I" + "'", str11, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str21, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str22, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)B" + "'", str40, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
    }

    @Test
    public void test05191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05191");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicInterpreter");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("S", (java.lang.Throwable) analyzerException17);
        boolean boolean19 = type8.equals((java.lang.Object) analyzerException17);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type20, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newOperation(abstractInsnNode23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test05192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05192");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        boolean boolean78 = type75.equals((java.lang.Object) "I");
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/SimpleVerifier");
        org.mockito.asm.Type type81 = org.mockito.asm.Type.SHORT_TYPE;
        int int82 = type81.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter83 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter83.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str88 = type87.getDescriptor();
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter83.newValue(type87);
        org.mockito.asm.Type[] typeArray91 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type87, typeArray91);
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type81, typeArray91);
        java.lang.String str94 = org.mockito.asm.Type.getMethodDescriptor(type80, typeArray91);
        java.lang.String str95 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray91);
        java.lang.Class<?> wildcardClass96 = typeArray91.getClass();
        java.lang.String str97 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass96);
        java.lang.String str98 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass96);
        java.lang.String str99 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass96);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "I" + "'", str88, "I");
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(typeArray91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(CBFCF)I" + "'", str92, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(CBFCF)S" + "'", str93, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str94, "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "(CBFCF)C" + "'", str95, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str97, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str98, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str99, "[Lorg/mockito/asm/Type;");
    }

    @Test
    public void test05193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05193");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        int int2 = type1.getSort();
        int int3 = type1.getSize();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str5 = type4.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.Type type9 = null;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int12 = type10.getOpcode(48);
        java.lang.String str13 = type10.getClassName();
        int int14 = type10.getSize();
        int int15 = type10.getSort();
        java.util.List list16 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type10, list16, false);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str24 = type23.getDescriptor();
        int int25 = type23.getSort();
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type23, list26, false);
        int int29 = type23.getSize();
        int int30 = type23.getSort();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type31, false);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int36 = type34.getOpcode(48);
        java.lang.String str37 = type34.getClassName();
        java.lang.String str38 = type34.getClassName();
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type34, list39, true);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        int int43 = type42.getSize();
        java.lang.String str44 = type42.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type42, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type42, true);
        java.lang.String str49 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier18.newValue(type42);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value51 = simpleVerifier7.copyOperation(abstractInsnNode8, value50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "void" + "'", str5, "void");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lfloat;" + "'", str24, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 10 + "'", int30 == 10);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 48 + "'", int36 == 48);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "boolean" + "'", str37, "boolean");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "boolean" + "'", str38, "boolean");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(value50);
    }

    @Test
    public void test05194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05194");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        java.lang.Object obj5 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.ternaryOperation(abstractInsnNode13, value14, value15, value16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter24.copyOperation(abstractInsnNode25, value26);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter12.merge(value23, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.ternaryOperation(abstractInsnNode32, value33, value34, value35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter31.merge(value42, value48);
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier11.merge(value30, value42);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter6.copyOperation(abstractInsnNode10, value50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj5, value51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .", (java.lang.Object) analyzerException3, value51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: char: expected B, but found .", (java.lang.Throwable) analyzerException53);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
    }

    @Test
    public void test05195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05195");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(167);
        org.mockito.asm.Type type4 = type1.getElementType();
        int int5 = type1.getSort();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 24);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException31);
        java.lang.Class<?> wildcardClass33 = analyzerException31.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.lang.String str35 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type36, list37, true);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type28, list40, false);
        boolean boolean43 = type6.equals((java.lang.Object) type9);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, true);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type64, false);
        java.lang.String str69 = type46.toString();
        java.lang.String str70 = type46.toString();
        int int71 = type46.getSize();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type73 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type72, type73, list74, true);
        java.lang.Class<?> wildcardClass77 = simpleVerifier76.getClass();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str81 = type80.getDescriptor();
        int int82 = type80.getSort();
        int int83 = type80.getSize();
        java.lang.String str84 = type80.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type78, type80, true);
        boolean boolean87 = type46.equals((java.lang.Object) type80);
        java.lang.String str88 = type46.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type46, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode91 = null;
        org.mockito.asm.tree.analysis.Value value92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier90.unaryOperation(abstractInsnNode91, value92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str35, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "B" + "'", str69, "B");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "B" + "'", str70, "B");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Lfloat;" + "'", str81, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "float" + "'", str84, "float");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "B" + "'", str88, "B");
    }

    @Test
    public void test05196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05196");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier0.newValue(type26);
        java.lang.String str32 = type26.toString();
        java.lang.String str33 = type26.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "F" + "'", str32, "F");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "F" + "'", str33, "F");
    }

    @Test
    public void test05197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05197");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        java.lang.String str4 = type1.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray21);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException26);
        java.lang.Class<?> wildcardClass28 = analyzerException26.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        java.lang.String str30 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass28);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type31, true);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value36 = simpleVerifier33.newValue(type35);
        java.lang.String str37 = type35.toString();
        int int38 = type35.getSize();
        int int40 = type35.getOpcode(172);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier63.newValue(type66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("LLB;;", (java.lang.Object) type35, value67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str71 = type70.getDescriptor();
        int int73 = type70.getOpcode(98);
        java.lang.String str74 = type70.getClassName();
        boolean boolean75 = type35.equals((java.lang.Object) type70);
        int int76 = type35.getSort();
        int int77 = type35.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "char" + "'", str4, "char");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)C" + "'", str23, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str30, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "LLB;;" + "'", str37, "LLB;;");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 176 + "'", int40 == 176);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "LB;" + "'", str71, "LB;");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 102 + "'", int73 == 102);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "B" + "'", str74, "B");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test05198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05198");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str7 = type6.getDescriptor();
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter2.newValue(type6);
        org.mockito.asm.Type[] typeArray10 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str11 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray10);
        java.lang.Class<?> wildcardClass12 = typeArray10.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        java.lang.String str15 = type14.getInternalName();
        int int16 = type14.getDimensions();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        int int20 = type18.getOpcode(101);
        java.lang.String str21 = type18.toString();
        int int22 = type18.getSize();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type[] typeArray39 = new org.mockito.asm.Type[] { type24, type27, type28, type32, type35 };
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray39);
        java.lang.String str41 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray39);
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray39);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type[] typeArray60 = new org.mockito.asm.Type[] { type45, type48, type49, type53, type56 };
        java.lang.String str61 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type62, false);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier66.newValue(type67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) (byte) 100);
        java.lang.String str72 = type69.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier66.newValue(type69);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier43.newValue(type69);
        boolean boolean75 = type17.equals((java.lang.Object) value74);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type17, list76, false);
        java.util.List list79 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type17, list79, false);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: LLB;;");
        int int84 = type83.getSize();
        org.mockito.asm.Type type85 = type83.getElementType();
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier81.newValue(type83);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int89 = type87.getOpcode(48);
        int int91 = type87.getOpcode(0);
        java.lang.String str92 = type87.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier94 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type87, true);
        java.lang.String str95 = type83.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "I" + "'", str7, "I");
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "(CBFCF)I" + "'", str11, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str15, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 101 + "'", int20 == 101);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "C" + "'", str21, "C");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)B" + "'", str40, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "(CBFCF)C" + "'", str41, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)I" + "'", str42, "(CBFCF)I");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "(CBFCF)B" + "'", str61, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "float" + "'", str72, "float");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 48 + "'", int89 == 48);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Z" + "'", str92, "Z");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Lrg.mockito.asm.tree.analysis.AnalyzerException: LLB;" + "'", str95, "Lrg.mockito.asm.tree.analysis.AnalyzerException: LLB;");
    }

    @Test
    public void test05199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05199");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("byte");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        int int38 = type36.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier35.newValue(type36);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = type40.getClassName();
        boolean boolean45 = type40.equals((java.lang.Object) 177);
        java.lang.String str46 = type40.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException49);
        java.lang.Class<?> wildcardClass51 = analyzerException49.getClass();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        int int54 = type52.getOpcode(114);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.Type[] typeArray71 = new org.mockito.asm.Type[] { type56, type59, type60, type64, type67 };
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray71);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray71);
        boolean boolean74 = type40.equals((java.lang.Object) typeArray71);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray71);
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray71);
        int int77 = type34.getSize();
        int int78 = type34.getSort();
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier32.newValue(type34);
        int int81 = type34.getOpcode(72);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 101 + "'", int38 == 101);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "F" + "'", str46, "F");
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 118 + "'", int54 == 118);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)B" + "'", str72, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str73, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)C" + "'", str75, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)Lbyte;" + "'", str76, "(CBFCF)Lbyte;");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 10 + "'", int78 == 10);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 76 + "'", int81 == 76);
    }

    @Test
    public void test05200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05200");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) (byte) 100);
        java.lang.String str7 = type4.getClassName();
        boolean boolean9 = type4.equals((java.lang.Object) 177);
        java.lang.String str10 = type4.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException13);
        java.lang.Class<?> wildcardClass15 = analyzerException13.getClass();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass15);
        int int18 = type16.getOpcode(114);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray35);
        boolean boolean38 = type4.equals((java.lang.Object) typeArray35);
        int int39 = type4.getSort();
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier0.newValue(type4);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int42 = type41.getSize();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        int int45 = type43.getOpcode(101);
        java.lang.String str46 = type43.toString();
        int int47 = type43.getSort();
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type43, list48, false);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str54 = type53.getDescriptor();
        int int55 = type53.getSort();
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type53, list56, false);
        int int59 = type53.getSize();
        int int60 = type53.getSort();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type61, false);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int66 = type64.getOpcode(48);
        java.lang.String str67 = type64.getClassName();
        java.lang.String str68 = type64.getClassName();
        java.util.List list69 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type64, list69, true);
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier50.newValue(type53);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier0.newValue(type53);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.INT_TYPE;
        int int76 = type74.getOpcode(0);
        org.mockito.asm.Type type77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type74, type77, false);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier0.newValue(type74);
        java.lang.String str81 = type74.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "float" + "'", str7, "float");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "F" + "'", str10, "F");
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 118 + "'", int18 == 118);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str37, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 101 + "'", int45 == 101);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "C" + "'", str46, "C");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Lfloat;" + "'", str54, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 48 + "'", int66 == 48);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "boolean" + "'", str67, "boolean");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "boolean" + "'", str68, "boolean");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "I" + "'", str81, "I");
    }

    @Test
    public void test05201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05201");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = simpleVerifier5.newValue(type10);
        int int15 = type10.getSize();
        int int16 = type10.getSize();
        int int18 = type10.getOpcode(24);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 26 + "'", int18 == 26);
    }

    @Test
    public void test05202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05202");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        int int5 = type2.getOpcode(136);
        int int6 = type2.getSize();
        java.lang.String str7 = type2.toString();
        java.lang.Class<?> wildcardClass8 = type2.getClass();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 140 + "'", int5 == 140);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;" + "'", str7, "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;");
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test05203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05203");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lboolean;");
        int int2 = type1.getSize();
        int int3 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test05204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05204");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        int int9 = type7.getOpcode(188);
        int int10 = type7.getSize();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str6, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 192 + "'", int9 == 192);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test05205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05205");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)LLB;;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("B", (java.lang.Throwable) analyzerException2);
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException11.addSuppressed((java.lang.Throwable) analyzerException13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException18.addSuppressed((java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException22);
        analyzerException13.addSuppressed((java.lang.Throwable) analyzerException22);
        analyzerException9.addSuppressed((java.lang.Throwable) analyzerException13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("Lfloat;", (java.lang.Throwable) analyzerException13);
        java.lang.Throwable[] throwableArray27 = analyzerException26.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicInterpreter;", (java.lang.Throwable) analyzerException26);
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException28);
        java.lang.Throwable[] throwableArray30 = analyzerException28.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test05206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05206");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        int int2 = type1.getSize();
        int int3 = type1.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        int int7 = type5.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value8 = simpleVerifier4.newValue(type5);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type27, false);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier31.newValue(type32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier31.newValue(type34);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type40 = null;
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type40, list41, false);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier31.newValue(type39);
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier4.newValue(type39);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type48, type51, type52, type56, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type65, false);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier69.newValue(type70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier69.newValue(type72);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type72, list77, true);
        int int81 = type72.getOpcode(100);
        org.mockito.asm.Type[] typeArray83 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type72, typeArray83);
        java.lang.String str85 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray83);
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray83);
        java.lang.String str87 = type1.getInternalName();
        org.mockito.asm.Type[] typeArray89 = org.mockito.asm.Type.getArgumentTypes("()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray89);
        java.lang.String str91 = type1.getDescriptor();
        java.lang.String str92 = type1.getInternalName();
        int int93 = type1.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 101 + "'", int7 == 101);
        org.junit.Assert.assertNotNull(value8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)B" + "'", str64, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 102 + "'", int81 == 102);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(CBFCF)F" + "'", str84, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "(CBFCF)V" + "'", str85, "(CBFCF)V");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(CBFCF)Lfloat;" + "'", str86, "(CBFCF)Lfloat;");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "float" + "'", str87, "float");
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "()Lfloat;" + "'", str90, "()Lfloat;");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Lfloat;" + "'", str91, "Lfloat;");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "float" + "'", str92, "float");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 10 + "'", int93 == 10);
    }

    @Test
    public void test05207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05207");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value4 = simpleVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.ternaryOperation(abstractInsnNode26, value27, value28, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter25.merge(value36, value42);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier5.merge(value24, value36);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type64, false);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier68.newValue(type69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier68.newValue(type71);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type71, list76, true);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier5.newValue(type71);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier5.newValue(type80);
        boolean boolean83 = type80.equals((java.lang.Object) "I");
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier0.newValue(type80);
        int int85 = type80.getSort();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type86 = type80.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
    }

    @Test
    public void test05208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05208");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int77 = type75.getOpcode(48);
        java.lang.String str78 = type75.getClassName();
        java.lang.String str79 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier0.newValue(type75);
        java.lang.Class<?> wildcardClass81 = value80.getClass();
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        java.lang.String str83 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass81);
        java.lang.String str85 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        java.lang.String str86 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass81);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 48 + "'", int77 == 48);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "boolean" + "'", str78, "boolean");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str83, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str85, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str86, "Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test05209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05209");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("B");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str4 = type3.getInternalName();
        java.lang.String str5 = type3.toString();
        java.util.List list6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list6, true);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str11 = type10.getClassName();
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type10, list12, true);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type17 = type16.getElementType();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type37, false);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier41.newValue(type42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier41.newValue(type44);
        java.util.List list49 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type44, list49, true);
        int int53 = type44.getOpcode(100);
        java.util.List list54 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type44, list54, false);
        java.util.List list57 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type16, list57, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value61 = simpleVerifier59.newOperation(abstractInsnNode60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "LB;" + "'", str4, "LB;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LLB;;" + "'", str5, "LLB;;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 102 + "'", int53 == 102);
    }

    @Test
    public void test05210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05210");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("int");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType("()L(CBFCF)S;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, true);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        int int8 = type7.getSize();
        int int10 = type7.getOpcode(148);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier5.newValue(type7);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int16 = type14.getOpcode(48);
        java.lang.String str17 = type14.getClassName();
        java.lang.String str18 = type14.getClassName();
        java.lang.String str19 = type14.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type[] typeArray36 = new org.mockito.asm.Type[] { type21, type24, type25, type29, type32 };
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type38, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type20, true);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str46 = type45.getClassName();
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier44.newValue(type45);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier44.newValue(type48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.Type[] typeArray70 = new org.mockito.asm.Type[] { type55, type58, type59, type63, type66 };
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray70);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException75);
        java.lang.Class<?> wildcardClass77 = analyzerException75.getClass();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        java.lang.String str79 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass77);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass77);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type80, true);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier82.newValue(type84);
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str88 = type87.getInternalName();
        java.lang.String str89 = type87.toString();
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier82.newValue(type87);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) type48, value90);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value92 = simpleVerifier5.copyOperation(abstractInsnNode12, value90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 152 + "'", int10 == 152);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 48 + "'", int16 == 48);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)B" + "'", str37, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "long" + "'", str46, "long");
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "char" + "'", str53, "char");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)B" + "'", str71, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)C" + "'", str72, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str79, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "LB;" + "'", str88, "LB;");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "LLB;;" + "'", str89, "LLB;;");
        org.junit.Assert.assertNotNull(value90);
    }

    @Test
    public void test05211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05211");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.Class<?> wildcardClass2 = type1.getClass();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getReturnType("I");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type5, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value10 = simpleVerifier7.copyOperation(abstractInsnNode8, value9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type5);
    }

    @Test
    public void test05212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05212");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier3 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: boolean");
        org.mockito.asm.tree.analysis.Value value6 = simpleVerifier3.newValue(type5);
        java.lang.Object obj8 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.ternaryOperation(abstractInsnNode16, value17, value18, value19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.newValue(type25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter27.copyOperation(abstractInsnNode28, value29);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter15.merge(value26, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.ternaryOperation(abstractInsnNode35, value36, value37, value38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.newValue(type50);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter34.merge(value45, value51);
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier14.merge(value33, value45);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter9.copyOperation(abstractInsnNode13, value53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj8, value54);
        java.lang.Class<?> wildcardClass56 = value54.getClass();
        java.lang.String str57 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        java.lang.String str59 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        java.lang.String str63 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        java.lang.String str65 = type64.getClassName();
        java.lang.String str66 = type64.getDescriptor();
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier3.newValue(type64);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        java.util.List list69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value70 = simpleVerifier3.naryOperation(abstractInsnNode68, list69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str57, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str59, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str63, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str65, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str66, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(value67);
    }

    @Test
    public void test05213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05213");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 24);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        java.lang.Class<?> wildcardClass31 = analyzerException29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type34, list35, true);
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type26, list38, false);
        boolean boolean41 = type4.equals((java.lang.Object) type7);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray62);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray62);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray62);
        java.lang.Class<?> wildcardClass67 = type1.getClass();
        java.lang.String str68 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass67);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLB;;" + "'", str2, "LLB;;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "char" + "'", str45, "char");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)C" + "'", str64, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)V" + "'", str65, "(CBFCF)V");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)LLB;;" + "'", str66, "(CBFCF)LLB;;");
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str68, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test05214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05214");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("double");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int4 = type2.getOpcode(48);
        java.lang.String str5 = type2.getClassName();
        java.lang.String str6 = type2.getClassName();
        java.lang.String str7 = type2.getClassName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type26, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type8, true);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        int int35 = type33.getOpcode(101);
        int int37 = type33.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier32.newValue(type33);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type41, type44, type45, type49, type52 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type58, false);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier62.newValue(type63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier62.newValue(type65);
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type65, list70, true);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier32.newValue(type39);
        java.lang.String str74 = type39.getDescriptor();
        int int75 = type39.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type39, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = simpleVerifier77.newOperation(abstractInsnNode78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 48 + "'", int4 == 48);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "boolean" + "'", str6, "boolean");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 101 + "'", int35 == 101);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 191 + "'", int37 == 191);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)B" + "'", str57, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "S" + "'", str74, "S");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
    }

    @Test
    public void test05215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05215");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        int int3 = type1.getOpcode(165);
        java.lang.String str4 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 169 + "'", int3 == 169);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found ." + "'", str4, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
    }

    @Test
    public void test05216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05216");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        boolean boolean7 = type1.equals((java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.mockito.asm.Type type8 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, list10, true);
        java.lang.Class<?> wildcardClass13 = simpleVerifier12.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str15 = type14.getInternalName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type17, type20, type21, type25, type28 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray32);
        java.lang.String str34 = type16.toString();
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type16, list35, true);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type38, true);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type41, false);
        int int47 = type41.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type41, true);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type51 = null;
        java.util.List list52 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type51, list52, false);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type60, type63, type64, type68, type71 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray75);
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type55, typeArray75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException80 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException80);
        java.lang.Class<?> wildcardClass82 = analyzerException80.getClass();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        java.lang.String str84 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass82);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type85, true);
        boolean boolean89 = type85.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier54.newValue(type85);
        boolean boolean91 = type41.equals((java.lang.Object) value90);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str15, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)B" + "'", str33, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "B" + "'", str34, "B");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "char" + "'", str44, "char");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "char" + "'", str58, "char");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)B" + "'", str76, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)C" + "'", str77, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str84, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test05217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05217");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.mockito.asm.Type type2 = type1.getElementType();
        org.mockito.asm.Type type3 = type2.getElementType();
        int int5 = type2.getOpcode(4096);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4100 + "'", int5 == 4100);
    }

    @Test
    public void test05218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05218");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str3 = type2.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type7, true);
        java.lang.String str12 = type7.getClassName();
        int int13 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value14 = simpleVerifier5.newValue(type7);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type16, list17, true);
        java.lang.Class<?> wildcardClass20 = simpleVerifier19.getClass();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass20);
        java.lang.String str22 = type21.getInternalName();
        java.lang.String str23 = type21.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type21, true);
        java.lang.String str26 = type21.getInternalName();
        java.lang.String str27 = type21.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "B" + "'", str3, "B");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "void" + "'", str12, "void");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str22, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str23, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str26, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str27, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
    }

    @Test
    public void test05219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05219");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("rg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.Type");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05220");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type35, true);
        boolean boolean39 = type35.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier4.newValue(type35);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        java.lang.String str44 = type41.getClassName();
        int int46 = type41.getOpcode(138);
        java.lang.String str47 = type41.toString();
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier4.newValue(type41);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int51 = type49.getOpcode(48);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("double");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type54, true);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier56.newValue(type58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        int int62 = type60.getOpcode(101);
        java.lang.String str63 = type60.toString();
        int int64 = type60.getSize();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        int int66 = type65.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type65, false);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found .");
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier68.newValue(type70);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value72 = simpleVerifier4.merge(value59, value71);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: java.lang.ClassNotFoundException: rg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.SimpleVerifier");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "char" + "'", str8, "char");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)C" + "'", str27, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "char" + "'", str44, "char");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 138 + "'", int46 == 138);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "C" + "'", str47, "C");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 48 + "'", int51 == 48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 101 + "'", int62 == 101);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "C" + "'", str63, "C");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(value71);
    }

    @Test
    public void test05221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05221");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        int int35 = type26.getOpcode(100);
        org.mockito.asm.Type[] typeArray37 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray37);
        int int40 = type26.getOpcode(97);
        int int42 = type26.getOpcode(79);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int45 = type43.getOpcode(48);
        java.lang.String str46 = type43.getClassName();
        java.lang.String str47 = type43.getClassName();
        java.lang.String str48 = type43.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type67, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type49, true);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str75 = type74.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier73.newValue(type74);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str79 = type78.getDescriptor();
        int int80 = type78.getSort();
        int int81 = type78.getDimensions();
        int int83 = type78.getOpcode((int) (short) 10);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier73.newValue(type78);
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type78, list85, true);
        java.lang.Class<?> wildcardClass88 = simpleVerifier87.getClass();
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass88);
        org.mockito.asm.Type type90 = type89.getElementType();
        int int92 = type89.getOpcode(82);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 102 + "'", int35 == 102);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)F" + "'", str38, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 81 + "'", int42 == 81);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 48 + "'", int45 == 48);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "long" + "'", str75, "long");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Lfloat;" + "'", str79, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 14 + "'", int83 == 14);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 86 + "'", int92 == 86);
    }

    @Test
    public void test05222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05222");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)I");
        int int2 = type1.getSort();
        org.mockito.asm.Type[] typeArray4 = org.mockito.asm.Type.getArgumentTypes("()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        java.lang.String str5 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray4);
        org.mockito.asm.Type type6 = null;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int9 = type7.getOpcode(48);
        java.lang.String str10 = type7.getClassName();
        java.lang.String str11 = type7.getClassName();
        java.lang.String str12 = type7.getClassName();
        java.lang.String str13 = type7.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        boolean boolean23 = type21.equals((java.lang.Object) "Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        java.lang.String str24 = type21.getDescriptor();
        java.util.List list25 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type21, list25, false);
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type21, list28, false);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) (byte) 100);
        java.lang.String str39 = type36.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type32, type35, type36, type40, type43 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type49, false);
        java.lang.String str54 = type31.getClassName();
        int int55 = type31.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type31, false);
        java.util.List list58 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list58, false);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int63 = type61.getOpcode(48);
        java.lang.String str64 = type61.getClassName();
        java.lang.String str65 = type61.getClassName();
        java.lang.String str66 = type61.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.Type type76 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) 151);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) (byte) 100);
        java.lang.String str82 = type79.getClassName();
        org.mockito.asm.Type[] typeArray83 = new org.mockito.asm.Type[] { type68, type71, type72, type76, type79 };
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray83);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean87 = type85.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type67, type85, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier91 = new org.mockito.asm.tree.analysis.SimpleVerifier(type61, type67, true);
        int int93 = type61.getOpcode(139);
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier60.newValue(type61);
        org.mockito.asm.Type type95 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier97 = new org.mockito.asm.tree.analysis.SimpleVerifier(type61, type95, false);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "()L(CBFCF)I;" + "'", str5, "()L(CBFCF)I;");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 48 + "'", int9 == 48);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Z" + "'", str13, "Z");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str20, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str24, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "float" + "'", str39, "float");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(CBFCF)B" + "'", str48, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "byte" + "'", str54, "byte");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 48 + "'", int63 == 48);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "boolean" + "'", str64, "boolean");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "boolean" + "'", str65, "boolean");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "boolean" + "'", str66, "boolean");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "float" + "'", str82, "float");
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(CBFCF)B" + "'", str84, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 139 + "'", int93 == 139);
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test05223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05223");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str5 = type4.getDescriptor();
        int int6 = type4.getSort();
        java.util.List list7 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type4, list7, false);
        int int10 = type4.getSize();
        int int11 = type4.getSort();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type12, false);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int17 = type15.getOpcode(48);
        java.lang.String str18 = type15.getClassName();
        java.lang.String str19 = type15.getClassName();
        java.util.List list20 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type15, list20, true);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.FLOAT_TYPE;
        int int24 = type23.getSize();
        java.lang.String str25 = type23.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type23, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type23, true);
        java.lang.String str30 = type1.toString();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        java.lang.Class<?> wildcardClass37 = analyzerException35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type40, list41, true);
        org.mockito.asm.Type type44 = type40.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str51 = type50.getDescriptor();
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter46.newValue(type50);
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier45.newValue(type50);
        boolean boolean54 = type44.equals((java.lang.Object) type50);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type56 = null;
        java.util.List list57 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type56, list57, false);
        int int60 = type55.getSize();
        boolean boolean61 = type50.equals((java.lang.Object) int60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException64);
        java.lang.Class<?> wildcardClass66 = analyzerException64.getClass();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        int int69 = type67.getOpcode(114);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) 151);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean84 = type82.equals((java.lang.Object) (byte) 100);
        java.lang.String str85 = type82.getClassName();
        org.mockito.asm.Type[] typeArray86 = new org.mockito.asm.Type[] { type71, type74, type75, type79, type82 };
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type70, typeArray86);
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray86);
        java.util.List list89 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier91 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type67, list89, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier93 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type50, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode94 = null;
        java.util.List list95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value96 = simpleVerifier93.naryOperation(abstractInsnNode94, list95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lfloat;" + "'", str5, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 48 + "'", int17 == 48);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "boolean" + "'", str19, "boolean");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str30, "Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str39, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "I" + "'", str51, "I");
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 118 + "'", int69 == 118);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "float" + "'", str85, "float");
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(CBFCF)B" + "'", str87, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str88, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test05224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05224");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        boolean boolean8 = type0.equals((java.lang.Object) 154);
        java.lang.String str9 = type0.getDescriptor();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type10, true);
        int int17 = type10.getSize();
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type18, false);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/BasicVerifier");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type33, false);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getReturnType("Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier35.newValue(type37);
        boolean boolean39 = type10.equals((java.lang.Object) type37);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType("(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type43, type46, type47, type51, type54 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type60, false);
        java.lang.String str65 = type42.getClassName();
        int int66 = type42.getSort();
        int int68 = type42.getOpcode(148);
        java.lang.String str69 = type42.getClassName();
        java.lang.String str70 = type42.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type42, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type41, false);
        org.mockito.asm.Type type75 = null;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier74.newValue(type75);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        java.util.List list78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = simpleVerifier74.naryOperation(abstractInsnNode77, list78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str32, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)B" + "'", str59, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "byte" + "'", str65, "byte");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 148 + "'", int68 == 148);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "byte" + "'", str69, "byte");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "B" + "'", str70, "B");
        org.junit.Assert.assertNotNull(value76);
    }

    @Test
    public void test05225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05225");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type32, true);
        boolean boolean35 = type1.equals((java.lang.Object) type32);
        java.lang.String str36 = type32.getDescriptor();
        org.mockito.asm.Type type37 = type32.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type40, type43, type44, type48, type51 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type57, false);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier61.newValue(type62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier61.newValue(type64);
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier38.newValue(type64);
        java.lang.String str70 = type64.toString();
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type64, list71, true);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type75 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type74, type75, true);
        java.lang.String str80 = type75.getDescriptor();
        java.lang.String str81 = type75.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type75, true);
        int int85 = type64.getOpcode(56);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str36, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)B" + "'", str56, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "F" + "'", str70, "F");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "V" + "'", str80, "V");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "V" + "'", str81, "V");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 58 + "'", int85 == 58);
    }

    @Test
    public void test05226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05226");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        java.lang.String str11 = type2.toString();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str17 = type16.getDescriptor();
        int int18 = type16.getSort();
        java.util.List list19 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type16, list19, false);
        int int22 = type16.getSize();
        int int23 = type16.getSort();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type24, false);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int29 = type27.getOpcode(48);
        java.lang.String str30 = type27.getClassName();
        java.lang.String str31 = type27.getClassName();
        java.util.List list32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type27, list32, true);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        int int36 = type35.getSize();
        java.lang.String str37 = type35.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type35, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type35, true);
        java.lang.String str42 = type13.toString();
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list43, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        java.util.List list47 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value48 = simpleVerifier45.naryOperation(abstractInsnNode46, list47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "V" + "'", str11, "V");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lfloat;" + "'", str17, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 48 + "'", int29 == 48);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "boolean" + "'", str30, "boolean");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "boolean" + "'", str31, "boolean");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str42, "Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
    }

    @Test
    public void test05227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05227");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str4 = type3.getDescriptor();
        int int5 = type3.getSort();
        java.util.List list6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list6, false);
        int int9 = type3.getSize();
        int int10 = type3.getSort();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type11, false);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int16 = type14.getOpcode(48);
        java.lang.String str17 = type14.getClassName();
        java.lang.String str18 = type14.getClassName();
        java.util.List list19 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type14, list19, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException24);
        java.lang.Class<?> wildcardClass26 = analyzerException24.getClass();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type type28 = type27.getElementType();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier21.newValue(type28);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type32 = org.mockito.asm.Type.SHORT_TYPE;
        int int33 = type32.getSize();
        java.lang.String str34 = type32.toString();
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type32, list35, false);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier37.newValue(type38);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lboolean;: expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found Lorg.mockito.asm.tree.analysis.AnalyzerException: char;", (java.lang.Object) simpleVerifier21, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str63 = type62.getDescriptor();
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter43.newValue(type62);
        java.util.List list65 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type62, list65, true);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type69 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type68, type69, list70, true);
        int int74 = type68.getOpcode(169);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier67.newValue(type68);
        int int76 = value75.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value77 = simpleVerifier21.unaryOperation(abstractInsnNode41, value75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lfloat;" + "'", str4, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 48 + "'", int16 == 48);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "S" + "'", str34, "S");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "C" + "'", str63, "C");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 170 + "'", int74 == 170);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
    }

    @Test
    public void test05228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05228");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type35, true);
        boolean boolean39 = type35.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier4.newValue(type35);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier4.newValue(type41);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value44 = simpleVerifier4.newOperation(abstractInsnNode43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "char" + "'", str8, "char");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)C" + "'", str27, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value42);
    }

    @Test
    public void test05229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05229");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        boolean boolean11 = type6.equals((java.lang.Object) 177);
        int int12 = type6.getSize();
        java.lang.String str13 = type6.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type6);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type16 = null;
        java.util.List list17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type16, list17, false);
        int int20 = type15.getSize();
        int int21 = type15.getSort();
        int int22 = type15.getSort();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type28, type31, type32, type36, type39 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray43);
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException48);
        java.lang.Class<?> wildcardClass50 = analyzerException48.getClass();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        java.lang.String str52 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type53, true);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier55.newValue(type57);
        int int60 = type57.getOpcode(81);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type57, false);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        boolean boolean65 = type57.equals((java.lang.Object) analyzerException64);
        java.util.List list66 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type57, list66, true);
        int int69 = type57.getSize();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "char" + "'", str26, "char");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)B" + "'", str44, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(CBFCF)C" + "'", str45, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str52, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 85 + "'", int60 == 85);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test05230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05230");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        int int35 = type0.getSort();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int39 = type37.getOpcode(167);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type37, list40, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value44 = simpleVerifier42.newOperation(abstractInsnNode43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 171 + "'", int39 == 171);
    }

    @Test
    public void test05231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05231");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass8 = analyzerException6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type11, list12, true);
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type3, list15, false);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        boolean boolean23 = type18.equals((java.lang.Object) 177);
        java.lang.String str24 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier17.newValue(type18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        java.util.List list27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value28 = simpleVerifier17.naryOperation(abstractInsnNode26, list27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(value25);
    }

    @Test
    public void test05232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05232");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier32.newValue(type34);
        int int37 = type34.getOpcode(81);
        org.mockito.asm.Type type38 = type34.getElementType();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int41 = type39.getOpcode(48);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type43, type46, type47, type51, type54 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type60, false);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier64.newValue(type65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier64.newValue(type67);
        int int72 = type67.getSize();
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type67, list73, true);
        int int76 = type39.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type39, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException81);
        java.lang.Class<?> wildcardClass83 = analyzerException81.getClass();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass83);
        org.mockito.asm.Type type85 = type84.getElementType();
        java.lang.String str86 = type85.getClassName();
        java.lang.String str87 = type85.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type85, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode90 = null;
        java.util.List list91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value92 = simpleVerifier89.naryOperation(abstractInsnNode90, list91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 85 + "'", int37 == 85);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 48 + "'", int41 == 48);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)B" + "'", str59, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str86, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str87, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test05233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05233");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException14.addSuppressed((java.lang.Throwable) analyzerException16);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException18);
        analyzerException9.addSuppressed((java.lang.Throwable) analyzerException19);
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException24.addSuppressed((java.lang.Throwable) analyzerException26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException24);
        java.lang.Throwable[] throwableArray29 = analyzerException28.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        analyzerException28.addSuppressed((java.lang.Throwable) analyzerException31);
        analyzerException9.addSuppressed((java.lang.Throwable) analyzerException28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.ternaryOperation(abstractInsnNode42, value43, value44, value45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter53.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.newValue(type57);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter41.merge(value52, value58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode38, value59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException61);
        java.lang.Throwable[] throwableArray63 = analyzerException61.getSuppressed();
        analyzerException28.addSuppressed((java.lang.Throwable) analyzerException61);
        java.lang.Throwable[] throwableArray65 = analyzerException61.getSuppressed();
        java.lang.String str66 = analyzerException61.toString();
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)C" + "'", str66, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)C");
    }

    @Test
    public void test05234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05234");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException15);
        analyzerException12.addSuppressed((java.lang.Throwable) analyzerException16);
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException16);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("LB", (java.lang.Throwable) analyzerException8);
        java.lang.Throwable[] throwableArray20 = analyzerException8.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;", (java.lang.Throwable) analyzerException8);
        org.junit.Assert.assertNotNull(throwableArray20);
    }

    @Test
    public void test05235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05235");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier3 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter4.copyOperation(abstractInsnNode5, value6);
        org.mockito.asm.Type type8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter4.newValue(type8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        boolean boolean15 = type10.equals((java.lang.Object) 177);
        int int16 = type10.getSize();
        java.lang.String str17 = type10.toString();
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter4.newValue(type10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException21);
        java.lang.Class<?> wildcardClass23 = analyzerException21.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        java.lang.String str25 = type24.toString();
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter4.newValue(type24);
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier3.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value29 = simpleVerifier3.newOperation(abstractInsnNode28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "F" + "'", str17, "F");
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str25, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value27);
    }

    @Test
    public void test05236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05236");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        boolean boolean8 = type0.equals((java.lang.Object) 154);
        java.lang.String str9 = type0.getDescriptor();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type10, true);
        int int17 = type10.getSort();
        int int19 = type10.getOpcode(128);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 130 + "'", int19 == 130);
    }

    @Test
    public void test05237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05237");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) (byte) 100);
        java.lang.String str7 = type4.getClassName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type27, false);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier31.newValue(type32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier31.newValue(type34);
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type34, list39, true);
        int int43 = type34.getOpcode(100);
        org.mockito.asm.Type[] typeArray45 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray45);
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray45);
        java.lang.String str48 = type4.getDescriptor();
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value51 = simpleVerifier0.newOperation(abstractInsnNode50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "float" + "'", str7, "float");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 102 + "'", int43 == 102);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(CBFCF)F" + "'", str46, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)F" + "'", str47, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "F" + "'", str48, "F");
        org.junit.Assert.assertNotNull(value49);
    }

    @Test
    public void test05238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05238");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass8 = analyzerException6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type11, list12, true);
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type3, list15, false);
        java.lang.String str18 = type0.toString();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type20 = null;
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type20, list21, false);
        int int24 = type19.getSize();
        int int25 = type19.getSort();
        int int26 = type19.getSort();
        int int27 = type19.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type19, true);
        java.lang.String str30 = type19.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "J" + "'", str18, "J");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "V" + "'", str30, "V");
    }

    @Test
    public void test05239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05239");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter10.copyOperation(abstractInsnNode11, value12);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter10.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("double", (java.lang.Object) basicInterpreter10, value22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list26 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type25, list26, true);
        java.lang.Class<?> wildcardClass29 = simpleVerifier28.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str33 = type32.getDescriptor();
        int int34 = type32.getSort();
        int int35 = type32.getSize();
        java.lang.String str36 = type32.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type32, true);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        int int41 = type39.getOpcode(101);
        int int43 = type39.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier38.newValue(type39);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        boolean boolean50 = type45.equals((java.lang.Object) 177);
        java.lang.String str51 = type45.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException54);
        java.lang.Class<?> wildcardClass56 = analyzerException54.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        int int59 = type57.getOpcode(114);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.Type[] typeArray76 = new org.mockito.asm.Type[] { type61, type64, type65, type69, type72 };
        java.lang.String str77 = org.mockito.asm.Type.getMethodDescriptor(type60, typeArray76);
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray76);
        boolean boolean79 = type45.equals((java.lang.Object) typeArray76);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException82);
        java.lang.Throwable[] throwableArray84 = analyzerException83.getSuppressed();
        boolean boolean85 = type45.equals((java.lang.Object) analyzerException83);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        java.lang.Throwable[] throwableArray88 = analyzerException87.getSuppressed();
        boolean boolean89 = type45.equals((java.lang.Object) analyzerException87);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier38.newValue(type45);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter10.newValue(type45);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier93 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type45, true);
        int int95 = type45.getOpcode(118);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str7, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lfloat;" + "'", str33, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 10 + "'", int34 == 10);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 101 + "'", int41 == 101);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 191 + "'", int43 == 191);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "F" + "'", str51, "F");
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 118 + "'", int59 == 118);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "(CBFCF)B" + "'", str77, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str78, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 120 + "'", int95 == 120);
    }

    @Test
    public void test05240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05240");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier1 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter2.ternaryOperation(abstractInsnNode3, value4, value5, value6);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter8.copyOperation(abstractInsnNode9, value10);
        org.mockito.asm.Type type12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.newValue(type12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter2.merge(value13, value19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.ternaryOperation(abstractInsnNode22, value23, value24, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter27.copyOperation(abstractInsnNode28, value29);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.newValue(type31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter21.merge(value32, value38);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier1.merge(value20, value32);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type43, type46, type47, type51, type54 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type60, false);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier64.newValue(type65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier64.newValue(type67);
        java.util.List list72 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type67, list72, true);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier1.newValue(type67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter76 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        org.mockito.asm.tree.analysis.Value value78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter76.copyOperation(abstractInsnNode77, value78);
        org.mockito.asm.Type type80 = null;
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter76.newValue(type80);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean84 = type82.equals((java.lang.Object) (byte) 100);
        java.lang.String str85 = type82.getClassName();
        boolean boolean87 = type82.equals((java.lang.Object) 177);
        int int88 = type82.getSize();
        java.lang.String str89 = type82.toString();
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter76.newValue(type82);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Object) type67, value90);
        java.lang.Class<?> wildcardClass92 = type67.getClass();
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)B" + "'", str59, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNull(value79);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "float" + "'", str85, "float");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "F" + "'", str89, "F");
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test05241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05241");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str52 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str56 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str59 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str61 = type60.getClassName();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str50, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str52, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str56, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str59, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str61, "org.mockito.asm.tree.analysis.BasicValue");
    }

    @Test
    public void test05242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05242");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = type6.getDescriptor();
        java.lang.String str8 = type6.getDescriptor();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        java.lang.String str13 = type9.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lboolean;: expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        boolean boolean16 = type9.equals((java.lang.Object) type15);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type18, type21, type22, type26, type29 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type35, false);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier39.newValue(type40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier39.newValue(type42);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type48 = null;
        java.util.List list49 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type48, list49, false);
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier39.newValue(type47);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type47, false);
        java.lang.String str55 = type9.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.SHORT_TYPE;
        int int57 = type56.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str63 = type62.getDescriptor();
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter58.newValue(type62);
        org.mockito.asm.Type[] typeArray66 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray66);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray66);
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray66);
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray66);
        int int71 = type6.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str7, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str8, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(CBFCF)B" + "'", str34, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "I" + "'", str63, "I");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)I" + "'", str67, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)S" + "'", str68, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)F" + "'", str69, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str70, "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
    }

    @Test
    public void test05243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05243");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier21.newValue(type23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        java.lang.String str30 = type27.getClassName();
        int int32 = type27.getOpcode(138);
        int int33 = type27.getSize();
        boolean boolean35 = type27.equals((java.lang.Object) 154);
        java.lang.String str36 = type27.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type27, true);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier21.newValue(type27);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int42 = type40.getOpcode(48);
        java.lang.String str43 = type40.getClassName();
        java.lang.String str44 = type40.getClassName();
        java.lang.String str45 = type40.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type64, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type46, true);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str72 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier70.newValue(type71);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str76 = type75.getDescriptor();
        int int77 = type75.getSort();
        int int78 = type75.getDimensions();
        int int80 = type75.getOpcode((int) (short) 10);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier70.newValue(type75);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier20.merge(value39, value81);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value84 = simpleVerifier20.newOperation(abstractInsnNode83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "char" + "'", str30, "char");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 138 + "'", int32 == 138);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "C" + "'", str36, "C");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 48 + "'", int42 == 48);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "boolean" + "'", str43, "boolean");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "long" + "'", str72, "long");
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lfloat;" + "'", str76, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 14 + "'", int80 == 14);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
    }

    @Test
    public void test05244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05244");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier25.newValue(type28);
        int int33 = type28.getSize();
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type28, list34, true);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier36.newValue(type38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int43 = type41.getOpcode(8);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier36.newValue(type41);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str48 = type47.getDescriptor();
        int int49 = type47.getSort();
        int int50 = type47.getDimensions();
        int int52 = type47.getOpcode((int) (short) 10);
        int int53 = type47.getSort();
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier36.newValue(type47);
        java.lang.String str55 = type47.toString();
        int int56 = type47.getDimensions();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 12 + "'", int43 == 12);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str44, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Lfloat;" + "'", str48, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 14 + "'", int52 == 14);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Lfloat;" + "'", str55, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
    }

    @Test
    public void test05245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05245");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test05246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05246");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(167);
        org.mockito.asm.Type type4 = type1.getElementType();
        int int5 = type1.getSort();
        java.lang.String str6 = type1.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value10 = simpleVerifier7.newValue(type9);
        int int12 = type9.getOpcode(136);
        int int13 = type9.getSize();
        java.lang.String str14 = type9.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        java.util.List list18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value19 = simpleVerifier16.naryOperation(abstractInsnNode17, list18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str6, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 140 + "'", int12 == 140);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;" + "'", str14, "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;");
    }

    @Test
    public void test05247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05247");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type43, false);
        java.lang.String str48 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int52 = type50.getOpcode(48);
        java.lang.String str53 = type50.getClassName();
        java.lang.String str54 = type50.getClassName();
        java.lang.String str55 = type50.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.Type[] typeArray72 = new org.mockito.asm.Type[] { type57, type60, type61, type65, type68 };
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type56, typeArray72);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean76 = type74.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type74, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type56, true);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type82 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list83 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type81, type82, list83, true);
        java.util.List list86 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type82, list86, true);
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier22.newValue(type82);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value91 = simpleVerifier22.newOperation(abstractInsnNode90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "byte" + "'", str48, "byte");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 48 + "'", int52 == 48);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "boolean" + "'", str53, "boolean");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "boolean" + "'", str54, "boolean");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(CBFCF)B" + "'", str73, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertNotNull(value89);
    }

    @Test
    public void test05248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05248");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str1 = type0.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier2 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter3 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter3.ternaryOperation(abstractInsnNode4, value5, value6, value7);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.Type type13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter9.newValue(type13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter15.copyOperation(abstractInsnNode16, value17);
        org.mockito.asm.Type type19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.newValue(type19);
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter3.merge(value14, value20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.ternaryOperation(abstractInsnNode23, value24, value25, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter22.merge(value33, value39);
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier2.merge(value21, value33);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type44, type47, type48, type52, type55 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type61, false);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier65.newValue(type66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier65.newValue(type68);
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type68, list73, true);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier2.newValue(type68);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier2.newValue(type77);
        boolean boolean80 = type77.equals((java.lang.Object) "I");
        int int82 = type77.getOpcode(8);
        boolean boolean84 = type77.equals((java.lang.Object) (-1.0f));
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type77, list85, true);
        java.lang.String str88 = type77.getClassName();
        java.lang.String str89 = type77.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "void" + "'", str1, "void");
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value18);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(CBFCF)B" + "'", str60, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 8 + "'", int82 == 8);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "char" + "'", str88, "char");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "char" + "'", str89, "char");
    }

    @Test
    public void test05249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05249");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str8 = type7.getDescriptor();
        int int9 = type7.getSort();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list10, false);
        java.lang.String str13 = type7.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, false);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int19 = type17.getOpcode(167);
        org.mockito.asm.Type type20 = type17.getElementType();
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier15.newValue(type17);
        int int22 = type17.getSort();
        java.lang.String str23 = type17.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lfloat;" + "'", str8, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 171 + "'", int19 == 171);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str23, "org/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test05250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05250");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        int int7 = type2.getOpcode(138);
        int int8 = type2.getSize();
        boolean boolean10 = type2.equals((java.lang.Object) 154);
        java.lang.String str11 = type2.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str22 = type21.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type21, false);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        java.lang.String str28 = type25.getClassName();
        int int30 = type25.getOpcode(138);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException33);
        java.lang.Class<?> wildcardClass35 = analyzerException33.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        boolean boolean37 = type25.equals((java.lang.Object) wildcardClass35);
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier24.newValue(type25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type44, true);
        java.lang.String str49 = type44.getClassName();
        java.util.List list50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type44, list50, true);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str55 = type54.getDescriptor();
        java.lang.String str56 = type54.getInternalName();
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier52.newValue(type54);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        java.lang.String str61 = type58.getClassName();
        int int63 = type58.getOpcode(138);
        int int64 = type58.getSize();
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier52.newValue(type58);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass67 = type66.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        int int69 = type68.getDimensions();
        java.lang.String str70 = type68.getInternalName();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type68, type72, list73, true);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier52.newValue(type68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: double", (java.lang.Object) 96, value76);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value78 = simpleVerifier24.unaryOperation(abstractInsnNode39, value76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 138 + "'", int7 == 138);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "C" + "'", str11, "C");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str22, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "char" + "'", str28, "char");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 138 + "'", int30 == 138);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "void" + "'", str49, "void");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "LB;" + "'", str55, "LB;");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "B" + "'", str56, "B");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "char" + "'", str61, "char");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 138 + "'", int63 == 138);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org/mockito/asm/Type" + "'", str70, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(value76);
    }

    @Test
    public void test05251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05251");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        boolean boolean8 = type0.equals((java.lang.Object) 154);
        java.lang.String str9 = type0.getDescriptor();
        java.lang.Class<?> wildcardClass10 = type0.getClass();
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        int int14 = type12.getOpcode(170);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/Type" + "'", str11, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 174 + "'", int14 == 174);
    }

    @Test
    public void test05252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05252");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier32.newValue(type34);
        int int37 = type34.getOpcode(81);
        org.mockito.asm.Type type38 = type34.getElementType();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int41 = type39.getOpcode(48);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type43, type46, type47, type51, type54 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type60, false);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier64.newValue(type65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier64.newValue(type67);
        int int72 = type67.getSize();
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type67, list73, true);
        int int76 = type39.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type39, true);
        int int79 = type39.getSort();
        java.lang.String str80 = type39.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 85 + "'", int37 == 85);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 48 + "'", int41 == 48);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)B" + "'", str59, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Z" + "'", str80, "Z");
    }

    @Test
    public void test05253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05253");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        java.lang.String str3 = type0.toString();
        int int4 = type0.getSize();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        int int6 = type5.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type5, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int12 = type10.getOpcode(48);
        java.lang.String str13 = type10.getClassName();
        java.lang.String str14 = type10.getClassName();
        java.lang.String str15 = type10.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type17, type20, type21, type25, type28 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray32);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type34, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type16, true);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str42 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier40.newValue(type41);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier40.newValue(type44);
        int int46 = value45.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value47 = simpleVerifier8.unaryOperation(abstractInsnNode9, value45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 48 + "'", int12 == 48);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "boolean" + "'", str13, "boolean");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "boolean" + "'", str14, "boolean");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "boolean" + "'", str15, "boolean");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)B" + "'", str33, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "long" + "'", str42, "long");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
    }

    @Test
    public void test05254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05254");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)Z");
        java.lang.Object obj3 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter4.copyOperation(abstractInsnNode5, value6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter4.copyOperation(abstractInsnNode8, value48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj3, value49);
        java.lang.Class<?> wildcardClass51 = value49.getClass();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType("V");
        java.util.List list55 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type54, list55, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type52, true);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("(CBFCF)Lbyte;");
        int int62 = type61.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type61, true);
        java.lang.String str65 = type61.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)Lbyte;" + "'", str65, "(CBFCF)Lbyte;");
    }

    @Test
    public void test05255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05255");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        boolean boolean8 = type0.equals((java.lang.Object) 154);
        java.lang.String str9 = type0.getDescriptor();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type10, true);
        int int17 = type10.getSize();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type19 = null;
        java.util.List list20 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type19, list20, false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        java.lang.String str26 = type23.getClassName();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type28, type31, type32, type36, type39 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray43);
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException48);
        java.lang.Class<?> wildcardClass50 = analyzerException48.getClass();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        java.lang.String str52 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type53, true);
        boolean boolean57 = type53.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier22.newValue(type53);
        int int59 = type53.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type53, false);
        int int63 = type53.getOpcode(29);
        int int64 = type53.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "char" + "'", str26, "char");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)B" + "'", str44, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(CBFCF)C" + "'", str45, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str52, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 33 + "'", int63 == 33);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test05256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05256");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str2 = type1.getDescriptor();
        java.lang.String str3 = type1.toString();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("(CBFCF)S");
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        int int8 = type7.getSize();
        int int9 = type7.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        int int13 = type11.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value14 = simpleVerifier10.newValue(type11);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type33, false);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier37.newValue(type38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier37.newValue(type40);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type46 = null;
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type46, list47, false);
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier37.newValue(type45);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier10.newValue(type45);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type71, false);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier75.newValue(type76);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = type78.getClassName();
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier75.newValue(type78);
        java.util.List list83 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type78, list83, true);
        int int87 = type78.getOpcode(100);
        org.mockito.asm.Type[] typeArray89 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type78, typeArray89);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray89);
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray89);
        java.lang.String str93 = type7.getInternalName();
        org.mockito.asm.Type[] typeArray95 = org.mockito.asm.Type.getArgumentTypes("()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        java.lang.String str96 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray95);
        java.lang.String str97 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray95);
        java.lang.String str98 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray95);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LB;" + "'", str2, "LB;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "LB;" + "'", str3, "LB;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 101 + "'", int13 == 101);
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 102 + "'", int87 == 102);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(CBFCF)F" + "'", str90, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(CBFCF)V" + "'", str91, "(CBFCF)V");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(CBFCF)Lfloat;" + "'", str92, "(CBFCF)Lfloat;");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "float" + "'", str93, "float");
        org.junit.Assert.assertNotNull(typeArray95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "()Lfloat;" + "'", str96, "()Lfloat;");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "()L(CBFCF)S;" + "'", str97, "()L(CBFCF)S;");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "()LB;" + "'", str98, "()LB;");
    }

    @Test
    public void test05257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05257");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("J");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        java.lang.String str15 = type12.getClassName();
        int int17 = type12.getOpcode(138);
        int int18 = type12.getSize();
        boolean boolean20 = type12.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier7.newValue(type12);
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type12, list22, false);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type27, true);
        java.lang.String str32 = type27.getClassName();
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type27, list33, true);
        java.lang.String str36 = type27.toString();
        java.lang.String str37 = type27.toString();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type39, type42, type43, type47, type50 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray54);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException60);
        java.lang.Class<?> wildcardClass62 = analyzerException60.getClass();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass62);
        java.lang.String str64 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass62);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass62);
        java.util.List list66 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type57, type65, list66, true);
        java.util.List list69 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type57, list69, false);
        int int72 = type57.getDimensions();
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type57, list73, false);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type77 = null;
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type76, type77, list78, false);
        java.lang.String str81 = type76.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type76, true);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier24.newValue(type76);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType("Lbyte;");
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier24.newValue(type86);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = simpleVerifier24.newOperation(abstractInsnNode88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "char" + "'", str15, "char");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 138 + "'", int17 == 138);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "void" + "'", str32, "void");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "V" + "'", str36, "V");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "V" + "'", str37, "V");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)B" + "'", str55, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str64, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "V" + "'", str81, "V");
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(value87);
    }

    @Test
    public void test05258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05258");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type32, true);
        boolean boolean35 = type1.equals((java.lang.Object) type32);
        java.lang.String str36 = type32.getDescriptor();
        org.mockito.asm.Type type37 = type32.getElementType();
        java.lang.String str38 = type32.getInternalName();
        java.lang.String str39 = type32.toString();
        java.lang.String str40 = type32.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str36, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str38, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str39, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str40, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test05259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05259");
        java.lang.Throwable throwable1 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;", throwable1);
        java.lang.String str3 = analyzerException2.toString();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str3, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
    }

    @Test
    public void test05260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05260");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type32 = type31.getElementType();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier22.newValue(type32);
        java.lang.String str34 = type32.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str37 = type36.toString();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getReturnType("(CBFCF)Lbyte;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type39, true);
        int int43 = type39.getOpcode(141);
        java.lang.String str44 = type39.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type39, false);
        int int47 = type39.getDimensions();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "char" + "'", str34, "char");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;" + "'", str37, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 145 + "'", int43 == 145);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lbyte;" + "'", str44, "Lbyte;");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
    }

    @Test
    public void test05261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05261");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        int int3 = type2.getDimensions();
        java.lang.String str4 = type2.getInternalName();
        java.lang.Class<?> wildcardClass5 = type2.getClass();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "org/mockito/asm/Type" + "'", str4, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test05262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05262");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType("(CBFCF)Lbyte;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.mockito.asm.Type type8 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type9, true);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier13.newValue(type14);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        java.lang.String str21 = type18.getClassName();
        int int23 = type18.getOpcode(138);
        int int24 = type18.getSize();
        boolean boolean26 = type18.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier13.newValue(type18);
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type18, list28, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type36, type39, type40, type44, type47 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray51);
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException56);
        java.lang.Class<?> wildcardClass58 = analyzerException56.getClass();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        java.lang.String str60 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass58);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass58);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type61, true);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier63.newValue(type65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str69 = type68.getInternalName();
        java.lang.String str70 = type68.toString();
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier63.newValue(type68);
        int int73 = type68.getOpcode(125);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier30.newValue(type68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException79.addSuppressed((java.lang.Throwable) analyzerException81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!", (java.lang.Throwable) analyzerException81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException81);
        java.lang.Class<?> wildcardClass86 = analyzerException81.getClass();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass86);
        java.lang.String str88 = type87.getInternalName();
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier30.newValue(type87);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = simpleVerifier4.copyOperation(abstractInsnNode5, value89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "char" + "'", str21, "char");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 138 + "'", int23 == 138);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "char" + "'", str34, "char");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)B" + "'", str52, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)C" + "'", str53, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str60, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "LB;" + "'", str69, "LB;");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "LLB;;" + "'", str70, "LLB;;");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 129 + "'", int73 == 129);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str88, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(value89);
    }

    @Test
    public void test05263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05263");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = basicInterpreter1.copyOperation(abstractInsnNode2, value3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str6 = type5.getDescriptor();
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter1.newValue(type5);
        org.mockito.asm.Type[] typeArray9 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str10 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type23, type26, type27, type31, type34 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray38);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type40, false);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier44.newValue(type45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str21, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type12, value46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        java.lang.String str52 = type49.getClassName();
        int int53 = type49.getSize();
        int int55 = type49.getOpcode(148);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type49, false);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int61 = type59.getOpcode(8);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type59, true);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier63.newValue(type65);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value68 = simpleVerifier63.newOperation(abstractInsnNode67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "I" + "'", str6, "I");
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "(CBFCF)I" + "'", str10, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str21, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(CBFCF)B" + "'", str39, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "char" + "'", str52, "char");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 148 + "'", int55 == 148);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 12 + "'", int61 == 12);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test05264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05264");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException22);
        java.lang.Class<?> wildcardClass24 = analyzerException22.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type27, list28, true);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type19, list31, false);
        java.lang.String str34 = type19.getInternalName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("(CBFCF)S");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type36, false);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        int int41 = type39.getOpcode(101);
        int int43 = type39.getOpcode(191);
        int int44 = type39.getSort();
        java.lang.Class<?> wildcardClass45 = type39.getClass();
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        int int49 = type47.getOpcode(160);
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier38.newValue(type47);
        java.lang.String str51 = type47.toString();
        org.mockito.asm.Type type52 = type47.getElementType();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type54 = null;
        java.util.List list55 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type54, list55, false);
        java.util.List list58 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type53, list58, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter62.copyOperation(abstractInsnNode63, value64);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter62.newValue(type66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        boolean boolean73 = type68.equals((java.lang.Object) 177);
        int int74 = type68.getSize();
        java.lang.String str75 = type68.toString();
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter62.newValue(type68);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter78 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.Value value82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter78.ternaryOperation(abstractInsnNode79, value80, value81, value82);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter84 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        org.mockito.asm.tree.analysis.Value value86 = null;
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter84.copyOperation(abstractInsnNode85, value86);
        org.mockito.asm.Type type88 = null;
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter84.newValue(type88);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter90 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode91 = null;
        org.mockito.asm.tree.analysis.Value value92 = null;
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter90.copyOperation(abstractInsnNode91, value92);
        org.mockito.asm.Type type94 = null;
        org.mockito.asm.tree.analysis.Value value95 = basicInterpreter90.newValue(type94);
        org.mockito.asm.tree.analysis.Value value96 = basicInterpreter78.merge(value89, value95);
        org.mockito.asm.tree.analysis.Value value97 = basicInterpreter62.copyOperation(abstractInsnNode77, value96);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value98 = simpleVerifier60.unaryOperation(abstractInsnNode61, value97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str26, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str34, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 101 + "'", int41 == 101);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 191 + "'", int43 == 191);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str46, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 164 + "'", int49 == 164);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str51, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "F" + "'", str75, "F");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNull(value83);
        org.junit.Assert.assertNull(value87);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNull(value93);
        org.junit.Assert.assertNotNull(value95);
        org.junit.Assert.assertNotNull(value96);
        org.junit.Assert.assertNotNull(value97);
    }

    @Test
    public void test05265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05265");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        int int8 = type6.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        boolean boolean15 = type10.equals((java.lang.Object) 177);
        java.lang.String str16 = type10.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException19);
        java.lang.Class<?> wildcardClass21 = analyzerException19.getClass();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass21);
        int int24 = type22.getOpcode(114);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray41);
        boolean boolean44 = type10.equals((java.lang.Object) typeArray41);
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray41);
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray41);
        org.mockito.asm.Type type47 = null;
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type47, list48, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        java.util.List list52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value53 = simpleVerifier50.naryOperation(abstractInsnNode51, list52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 101 + "'", int8 == 101);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "F" + "'", str16, "F");
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 118 + "'", int24 == 118);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str43, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(CBFCF)C" + "'", str45, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(CBFCF)Z" + "'", str46, "(CBFCF)Z");
    }

    @Test
    public void test05266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05266");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        java.lang.Class<?> wildcardClass40 = value19.getClass();
        java.lang.String str41 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        int int43 = type42.getDimensions();
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str41, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test05267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05267");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException3);
        java.lang.Class<?> wildcardClass5 = analyzerException3.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        int int7 = type6.getSize();
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test05268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05268");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        java.lang.Class<?> wildcardClass23 = type6.getClass();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass23);
        int int25 = type24.getSort();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str27 = type26.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type26, true);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        int int33 = type31.getOpcode(101);
        java.lang.String str34 = type31.toString();
        int int35 = type31.getSize();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type37, type40, type41, type45, type48 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray52);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray52);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray52);
        java.lang.String str56 = type30.getClassName();
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier29.newValue(type30);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str59 = type58.getDescriptor();
        java.lang.String str60 = type58.getDescriptor();
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier29.newValue(type58);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "void" + "'", str27, "void");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 101 + "'", int33 == 101);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "C" + "'", str34, "C");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)B" + "'", str53, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)C" + "'", str54, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)I" + "'", str55, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "int" + "'", str56, "int");
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Z" + "'", str59, "Z");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Z" + "'", str60, "Z");
        org.junit.Assert.assertNotNull(value61);
    }

    @Test
    public void test05269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05269");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException");
        int int2 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test05270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05270");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str9 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str6, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str9, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str11, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str12, "org/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test05271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05271");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type14, true);
        java.lang.String str19 = type14.getClassName();
        java.util.List list20 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type14, list20, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type14, true);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean26 = type14.equals((java.lang.Object) type25);
        boolean boolean27 = type1.equals((java.lang.Object) type14);
        // The following exception was thrown during execution in test generation
        try {
            int int28 = type14.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "void" + "'", str19, "void");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test05272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05272");
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Object) 171, value6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException9.addSuppressed((java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException16.addSuppressed((java.lang.Throwable) analyzerException18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException16);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException20);
        analyzerException11.addSuppressed((java.lang.Throwable) analyzerException20);
        analyzerException7.addSuppressed((java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("Lfloat;", (java.lang.Throwable) analyzerException11);
        java.lang.Throwable[] throwableArray25 = analyzerException24.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicInterpreter;", (java.lang.Throwable) analyzerException24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException32.addSuppressed((java.lang.Throwable) analyzerException34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("Z", (java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException41.addSuppressed((java.lang.Throwable) analyzerException43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException48.addSuppressed((java.lang.Throwable) analyzerException50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException52);
        analyzerException43.addSuppressed((java.lang.Throwable) analyzerException52);
        analyzerException39.addSuppressed((java.lang.Throwable) analyzerException43);
        java.lang.Throwable[] throwableArray56 = analyzerException39.getSuppressed();
        analyzerException26.addSuppressed((java.lang.Throwable) analyzerException39);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter59.ternaryOperation(abstractInsnNode60, value61, value62, value63);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter65 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter65.copyOperation(abstractInsnNode66, value67);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter65.newValue(type69);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter71.copyOperation(abstractInsnNode72, value73);
        org.mockito.asm.Type type75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter71.newValue(type75);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter59.merge(value70, value76);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter78 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        org.mockito.asm.tree.analysis.Value value80 = null;
        org.mockito.asm.tree.analysis.Value value81 = null;
        org.mockito.asm.tree.analysis.Value value82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter78.ternaryOperation(abstractInsnNode79, value80, value81, value82);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter84 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        org.mockito.asm.tree.analysis.Value value86 = null;
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter84.copyOperation(abstractInsnNode85, value86);
        org.mockito.asm.Type type88 = null;
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter84.newValue(type88);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter90 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode91 = null;
        org.mockito.asm.tree.analysis.Value value92 = null;
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter90.copyOperation(abstractInsnNode91, value92);
        org.mockito.asm.Type type94 = null;
        org.mockito.asm.tree.analysis.Value value95 = basicInterpreter90.newValue(type94);
        org.mockito.asm.tree.analysis.Value value96 = basicInterpreter78.merge(value89, value95);
        org.mockito.asm.tree.analysis.Value value97 = simpleVerifier58.merge(value77, value89);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException98 = new org.mockito.asm.tree.analysis.AnalyzerException("CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException", (java.lang.Object) analyzerException26, value77);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException99 = new org.mockito.asm.tree.analysis.AnalyzerException("Lfloat;", (java.lang.Throwable) analyzerException98);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNull(value74);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNull(value83);
        org.junit.Assert.assertNull(value87);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNull(value93);
        org.junit.Assert.assertNotNull(value95);
        org.junit.Assert.assertNotNull(value96);
        org.junit.Assert.assertNotNull(value97);
    }

    @Test
    public void test05273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05273");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected F, but found F");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05274");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier23.merge(value42, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.ternaryOperation(abstractInsnNode64, value65, value66, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter63.merge(value74, value80);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier22.merge(value62, value74);
        int int83 = value62.getSize();
        int int84 = value62.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test05275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05275");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType(".mockito.asm.tree.analysis.AnalyzerException: LB");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05276");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("()L(CBFCF)S;");
        java.lang.Class<?> wildcardClass2 = analyzerException1.getClass();
        java.lang.String str3 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass2);
        java.lang.String str4 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass2);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str3, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str4, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test05277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05277");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value9, value10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter7.merge(value18, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier6.merge(value25, value37);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) 151);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) (byte) 100);
        java.lang.String str62 = type59.getClassName();
        org.mockito.asm.Type[] typeArray63 = new org.mockito.asm.Type[] { type48, type51, type52, type56, type59 };
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type65, false);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier69.newValue(type70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier69.newValue(type72);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type72, list77, true);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier6.newValue(type72);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier6.newValue(type81);
        boolean boolean84 = type81.equals((java.lang.Object) "I");
        int int86 = type81.getOpcode(8);
        java.util.List list87 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type81, list87, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode90 = null;
        java.util.List list91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value92 = simpleVerifier89.naryOperation(abstractInsnNode90, list91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Z" + "'", str5, "Z");
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "float" + "'", str62, "float");
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)B" + "'", str64, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 8 + "'", int86 == 8);
    }

    @Test
    public void test05278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05278");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getReturnType("Lboolean;");
        int int9 = type8.getDimensions();
        int int10 = type8.getDimensions();
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type8);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        int int16 = type14.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier13.newValue(type14);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        int int21 = type20.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str27 = type26.getDescriptor();
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter22.newValue(type26);
        org.mockito.asm.Type[] typeArray30 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray30);
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray30);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray30);
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier13.newValue(type19);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        boolean boolean40 = type35.equals((java.lang.Object) 177);
        java.lang.String str41 = type35.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException44);
        java.lang.Class<?> wildcardClass46 = analyzerException44.getClass();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        int int49 = type47.getOpcode(114);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type51, type54, type55, type59, type62 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray66);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray66);
        boolean boolean69 = type35.equals((java.lang.Object) typeArray66);
        java.lang.String str70 = type35.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier13.newValue(type35);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType("B");
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier13.newValue(type73);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getReturnType("S");
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier13.newValue(type76);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter0.copyOperation(abstractInsnNode12, value77);
        int int79 = value77.getSize();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 101 + "'", int16 == 101);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "I" + "'", str27, "I");
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(CBFCF)I" + "'", str31, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)S" + "'", str32, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str33, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "F" + "'", str41, "F");
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 118 + "'", int49 == 118);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)B" + "'", str67, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str68, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test05279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05279");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        java.lang.Class<?> wildcardClass7 = analyzerException5.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, false);
        int int11 = type1.getSort();
        java.lang.String str12 = type1.toString();
        org.mockito.asm.Type type13 = null;
        java.util.List list14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type13, list14, true);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type18, type21, type22, type26, type29 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type35, false);
        java.lang.String str40 = type17.toString();
        java.lang.String str41 = type17.toString();
        int int42 = type17.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int49 = type47.getOpcode(48);
        java.lang.String str50 = type47.getClassName();
        java.lang.String str51 = type47.getClassName();
        java.lang.String str52 = type47.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type71, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type53, true);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter43.newValue(type47);
        java.lang.String str79 = type47.getClassName();
        int int80 = type47.getSort();
        java.util.List list81 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type47, list81, true);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier16.newValue(type17);
        int int85 = value84.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "B" + "'", str12, "B");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(CBFCF)B" + "'", str34, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "B" + "'", str40, "B");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "B" + "'", str41, "B");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 48 + "'", int49 == 48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test05280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05280");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.mockito.asm.Type type2 = type1.getElementType();
        org.mockito.asm.Type type3 = type2.getElementType();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getReturnType("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException7.addSuppressed((java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type12, false);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type17 = type16.getElementType();
        java.lang.String str18 = type17.getInternalName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type20, list21, true);
        java.lang.Class<?> wildcardClass24 = simpleVerifier23.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) (byte) 100);
        java.lang.String str41 = type38.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type34, type37, type38, type42, type45 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type51, false);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier55.newValue(type56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier55.newValue(type58);
        java.util.List list63 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type58, list63, true);
        int int67 = type58.getOpcode(100);
        org.mockito.asm.Type[] typeArray69 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray69);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray69);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray69);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray69);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray69);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "i!" + "'", str18, "i!");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str26, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(CBFCF)B" + "'", str50, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 102 + "'", int67 == 102);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)F" + "'", str70, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)F" + "'", str71, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str72, "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(CBFCF)Li!;" + "'", str73, "(CBFCF)Li!;");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str74, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)B" + "'", str75, "(CBFCF)B");
    }

    @Test
    public void test05281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05281");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException9.addSuppressed((java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException13);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException20.addSuppressed((java.lang.Throwable) analyzerException22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException25);
        analyzerException13.addSuppressed((java.lang.Throwable) analyzerException25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("I", (java.lang.Throwable) analyzerException25);
        java.lang.Throwable[] throwableArray29 = analyzerException28.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException32);
        analyzerException28.addSuppressed((java.lang.Throwable) analyzerException32);
        java.lang.Class<?> wildcardClass35 = analyzerException32.getClass();
        java.lang.String str36 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.lang.String str37 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.lang.String str38 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass35);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str36, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str37, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str38, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str39, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test05282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05282");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str2 = type1.getDescriptor();
        int int4 = type1.getOpcode(98);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type5 = type1.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LB;" + "'", str2, "LB;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 102 + "'", int4 == 102);
    }

    @Test
    public void test05283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05283");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException28.addSuppressed((java.lang.Throwable) analyzerException30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException33);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("Z", (java.lang.Throwable) analyzerException33);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException37.addSuppressed((java.lang.Throwable) analyzerException39);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException44.addSuppressed((java.lang.Throwable) analyzerException46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException44);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException48);
        analyzerException39.addSuppressed((java.lang.Throwable) analyzerException48);
        analyzerException35.addSuppressed((java.lang.Throwable) analyzerException39);
        boolean boolean52 = type12.equals((java.lang.Object) analyzerException35);
        int int53 = type12.getSort();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test05284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05284");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        int int6 = type0.getOpcode(169);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        int int9 = type7.getOpcode(101);
        int int11 = type7.getOpcode(191);
        int int12 = type7.getSort();
        java.lang.Class<?> wildcardClass13 = type7.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        java.lang.String str15 = type14.getDescriptor();
        java.util.List list16 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type14, list16, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.ternaryOperation(abstractInsnNode41, value42, value43, value44);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter40.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.ternaryOperation(abstractInsnNode52, value53, value54, value55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.newValue(type61);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter63.copyOperation(abstractInsnNode64, value65);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.newValue(type67);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter51.merge(value62, value68);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter70 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode71 = null;
        org.mockito.asm.tree.analysis.Value value72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter70.ternaryOperation(abstractInsnNode71, value72, value73, value74);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter76 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        org.mockito.asm.tree.analysis.Value value78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter76.copyOperation(abstractInsnNode77, value78);
        org.mockito.asm.Type type80 = null;
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter76.newValue(type80);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter82 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode83 = null;
        org.mockito.asm.tree.analysis.Value value84 = null;
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter82.copyOperation(abstractInsnNode83, value84);
        org.mockito.asm.Type type86 = null;
        org.mockito.asm.tree.analysis.Value value87 = basicInterpreter82.newValue(type86);
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter70.merge(value81, value87);
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier50.merge(value69, value81);
        org.mockito.asm.tree.analysis.Value value90 = basicInterpreter40.copyOperation(abstractInsnNode49, value81);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter20.copyOperation(abstractInsnNode39, value81);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value92 = simpleVerifier18.unaryOperation(abstractInsnNode19, value91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 170 + "'", int6 == 170);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 101 + "'", int9 == 101);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 191 + "'", int11 == 191);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str15, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNull(value79);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNull(value85);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
    }

    @Test
    public void test05285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05285");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        int int7 = type0.getOpcode(167);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException12);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException18.addSuppressed((java.lang.Throwable) analyzerException20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException18);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException30.addSuppressed((java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException34);
        boolean boolean36 = type24.equals((java.lang.Object) analyzerException35);
        analyzerException23.addSuppressed((java.lang.Throwable) analyzerException35);
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException23);
        boolean boolean39 = type0.equals((java.lang.Object) analyzerException23);
        int int40 = type0.getSize();
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int43 = type41.getOpcode(48);
        java.lang.String str44 = type41.getClassName();
        java.lang.String str45 = type41.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        int int49 = type47.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier46.newValue(type47);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        boolean boolean56 = type51.equals((java.lang.Object) 177);
        java.lang.String str57 = type51.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException60);
        java.lang.Class<?> wildcardClass62 = analyzerException60.getClass();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass62);
        int int65 = type63.getOpcode(114);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) 151);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = type78.getClassName();
        org.mockito.asm.Type[] typeArray82 = new org.mockito.asm.Type[] { type67, type70, type71, type75, type78 };
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray82);
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type63, typeArray82);
        boolean boolean85 = type51.equals((java.lang.Object) typeArray82);
        java.lang.String str86 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray82);
        java.lang.String str87 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray82);
        java.util.List list88 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type41, list88, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode91 = null;
        java.util.List list92 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier90.naryOperation(abstractInsnNode91, list92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 169 + "'", int7 == 169);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 48 + "'", int43 == 48);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "boolean" + "'", str44, "boolean");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "boolean" + "'", str45, "boolean");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 101 + "'", int49 == 101);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "F" + "'", str57, "F");
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 118 + "'", int65 == 118);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)B" + "'", str83, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str84, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "(CBFCF)C" + "'", str86, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "(CBFCF)Z" + "'", str87, "(CBFCF)Z");
    }

    @Test
    public void test05286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05286");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType("V");
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type52, list53, true);
        java.lang.String str56 = type52.getDescriptor();
        java.lang.String str57 = type52.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str60 = type59.getClassName();
        java.lang.String str61 = type59.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type59, false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = type59.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "V" + "'", str56, "V");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "void" + "'", str57, "void");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "byte" + "'", str60, "byte");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "B" + "'", str61, "B");
    }

    @Test
    public void test05287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05287");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException15.addSuppressed((java.lang.Throwable) analyzerException17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException19 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException15);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException19);
        boolean boolean21 = type9.equals((java.lang.Object) analyzerException20);
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException20);
        java.lang.Throwable[] throwableArray23 = analyzerException8.getSuppressed();
        java.lang.Class<?> wildcardClass24 = analyzerException8.getClass();
        java.lang.String str25 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str27 = type26.getInternalName();
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str25, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str27, "org/mockito/asm/tree/analysis/AnalyzerException");
    }

    @Test
    public void test05288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05288");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        int int2 = type1.getSize();
        java.lang.String str3 = type1.toString();
        int int4 = type1.getDimensions();
        org.mockito.asm.Type type5 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str12 = type11.getDescriptor();
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter7.newValue(type11);
        org.mockito.asm.Type[] typeArray15 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str16 = org.mockito.asm.Type.getMethodDescriptor(type11, typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray15.getClass();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException22 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException22);
        java.lang.Class<?> wildcardClass24 = analyzerException22.getClass();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass24);
        java.lang.String str26 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        java.lang.String str27 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass24);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.Type[] typeArray44 = new org.mockito.asm.Type[] { type29, type32, type33, type37, type40 };
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type46, false);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier50.newValue(type51);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str27, value52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type18, value52);
        int int55 = type18.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type18, true);
        java.lang.String str58 = type18.getInternalName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type18, true);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list63 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type61, type62, list63, true);
        java.lang.Class<?> wildcardClass66 = simpleVerifier65.getClass();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass66);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str70 = type69.getDescriptor();
        int int71 = type69.getSort();
        int int72 = type69.getSize();
        java.lang.String str73 = type69.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type67, type69, true);
        org.mockito.asm.Type type76 = type67.getElementType();
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type67, list77, false);
        java.lang.String str80 = type67.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lhi!;" + "'", str3, "Lhi!;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "I" + "'", str12, "I");
        org.junit.Assert.assertNotNull(value13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(CBFCF)I" + "'", str16, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str26, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str27, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(CBFCF)B" + "'", str45, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "[Lorg/mockito/asm/Type;" + "'", str58, "[Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Lfloat;" + "'", str70, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str80, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
    }

    @Test
    public void test05289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05289");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type[] typeArray19 = new org.mockito.asm.Type[] { type4, type7, type8, type12, type15 };
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray19);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type21, false);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier25.newValue(type28);
        int int33 = type28.getSize();
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type28, list34, true);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier36.newValue(type38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int43 = type41.getOpcode(8);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier36.newValue(type41);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str48 = type47.getDescriptor();
        int int49 = type47.getSort();
        int int50 = type47.getDimensions();
        int int52 = type47.getOpcode((int) (short) 10);
        int int53 = type47.getSort();
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier36.newValue(type47);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        java.lang.String str60 = type57.getClassName();
        int int62 = type57.getOpcode(138);
        int int63 = type57.getSize();
        boolean boolean65 = type57.equals((java.lang.Object) 154);
        java.lang.String str66 = type57.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type57, true);
        java.lang.String str69 = type57.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier36.newValue(type57);
        int int71 = type57.getSize();
        int int73 = type57.getOpcode(164);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)B" + "'", str20, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 12 + "'", int43 == 12);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str44, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Lfloat;" + "'", str48, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10 + "'", int49 == 10);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 14 + "'", int52 == 14);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "char" + "'", str60, "char");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 138 + "'", int62 == 138);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "C" + "'", str66, "C");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "char" + "'", str69, "char");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 164 + "'", int73 == 164);
    }

    @Test
    public void test05290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05290");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("byte");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier2 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.CHAR_TYPE;
        int int5 = type3.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value6 = simpleVerifier2.newValue(type3);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 100);
        java.lang.String str10 = type7.getClassName();
        boolean boolean12 = type7.equals((java.lang.Object) 177);
        java.lang.String str13 = type7.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        int int21 = type19.getOpcode(114);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type[] typeArray38 = new org.mockito.asm.Type[] { type23, type26, type27, type31, type34 };
        java.lang.String str39 = org.mockito.asm.Type.getMethodDescriptor(type22, typeArray38);
        java.lang.String str40 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray38);
        boolean boolean41 = type7.equals((java.lang.Object) typeArray38);
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type3, typeArray38);
        java.lang.String str43 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray38);
        int int44 = type1.getDimensions();
        int int45 = type1.getDimensions();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getReturnType("(CBFCF)LLB;;");
        int int49 = type47.getOpcode(25);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type52, type55, type56, type60, type63 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray67);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type69, false);
        org.mockito.asm.Type type74 = null;
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier73.newValue(type74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) (byte) 100);
        java.lang.String str79 = type76.getClassName();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier73.newValue(type76);
        java.util.List list81 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type76, list81, true);
        int int85 = type76.getOpcode(100);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.SHORT_TYPE;
        java.lang.String str87 = type86.toString();
        org.mockito.asm.Type[] typeArray89 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type86, typeArray89);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type76, typeArray89);
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray89);
        java.lang.String str93 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray89);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type94 = type1.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 101 + "'", int5 == 101);
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 118 + "'", int21 == 118);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "(CBFCF)B" + "'", str39, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str40, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)C" + "'", str42, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "(CBFCF)Lbyte;" + "'", str43, "(CBFCF)Lbyte;");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 29 + "'", int49 == 29);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)B" + "'", str68, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "float" + "'", str79, "float");
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 102 + "'", int85 == 102);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "S" + "'", str87, "S");
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(CBFCF)S" + "'", str90, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(CBFCF)F" + "'", str91, "(CBFCF)F");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(CBFCF)LLB;" + "'", str92, "(CBFCF)LLB;");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "(CBFCF)Lbyte;" + "'", str93, "(CBFCF)Lbyte;");
    }

    @Test
    public void test05291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05291");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean24 = type12.equals((java.lang.Object) type23);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getReturnType("Lboolean;");
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type26, list27, true);
        int int30 = type26.getSize();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type32, true);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier36.newValue(type37);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type43, true);
        java.lang.String str48 = type43.getClassName();
        java.util.List list49 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type43, list49, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type43, true);
        int int54 = type43.getSort();
        int int56 = type43.getOpcode(57);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type59 = type58.getElementType();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type61 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type60, type61, true);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier65.newValue(type66);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier65.newValue(type70);
        int int75 = type70.getSize();
        int int77 = type70.getOpcode(114);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type70, true);
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type58, list80, false);
        org.mockito.asm.Type type83 = type58.getElementType();
        java.util.List list84 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type83, list84, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode87 = null;
        org.mockito.asm.tree.analysis.Value value88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = simpleVerifier86.copyOperation(abstractInsnNode87, value88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "void" + "'", str48, "void");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 62 + "'", int56 == 62);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 116 + "'", int77 == 116);
        org.junit.Assert.assertNotNull(type83);
    }

    @Test
    public void test05292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05292");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        java.lang.String str3 = type0.toString();
        int int4 = type0.getSize();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray21);
        int int24 = type0.getSize();
        int int26 = type0.getOpcode(100);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 193);
        java.lang.Class<?> wildcardClass30 = type27.getClass();
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type34, false);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type38, type41, type42, type46, type49 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type55, false);
        java.lang.String str60 = type37.toString();
        java.lang.String str61 = type37.toString();
        int int62 = type37.getSize();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list65 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type64, list65, true);
        java.lang.Class<?> wildcardClass68 = simpleVerifier67.getClass();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str72 = type71.getDescriptor();
        int int73 = type71.getSort();
        int int74 = type71.getSize();
        java.lang.String str75 = type71.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type69, type71, true);
        boolean boolean78 = type37.equals((java.lang.Object) type71);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type80 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean82 = type80.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier84 = new org.mockito.asm.tree.analysis.SimpleVerifier(type79, type80, true);
        java.lang.String str85 = type80.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type80, false);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier36.newValue(type37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = type37.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)C" + "'", str23, "(CBFCF)C");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/asm/Type" + "'", str31, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/Type" + "'", str32, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)B" + "'", str54, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "B" + "'", str60, "B");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "B" + "'", str61, "B");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Lfloat;" + "'", str72, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "void" + "'", str85, "void");
        org.junit.Assert.assertNotNull(value88);
    }

    @Test
    public void test05293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05293");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: int;");
        java.lang.Throwable[] throwableArray2 = analyzerException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test05294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05294");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        int int35 = type26.getOpcode(100);
        org.mockito.asm.Type[] typeArray37 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray37);
        int int40 = type26.getOpcode(97);
        int int42 = type26.getOpcode(79);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int45 = type43.getOpcode(48);
        java.lang.String str46 = type43.getClassName();
        java.lang.String str47 = type43.getClassName();
        java.lang.String str48 = type43.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type67, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type49, true);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str75 = type74.getClassName();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier73.newValue(type74);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str79 = type78.getDescriptor();
        int int80 = type78.getSort();
        int int81 = type78.getDimensions();
        int int83 = type78.getOpcode((int) (short) 10);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier73.newValue(type78);
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type78, list85, true);
        java.lang.Class<?> wildcardClass88 = simpleVerifier87.getClass();
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass88);
        org.mockito.asm.Type type90 = type89.getElementType();
        int int91 = type89.getDimensions();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 102 + "'", int35 == 102);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)F" + "'", str38, "(CBFCF)F");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 81 + "'", int42 == 81);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 48 + "'", int45 == 48);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "boolean" + "'", str46, "boolean");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "long" + "'", str75, "long");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Lfloat;" + "'", str79, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 10 + "'", int80 == 10);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 14 + "'", int83 == 14);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
    }

    @Test
    public void test05295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05295");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.SimpleVerifier");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05296");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        boolean boolean4 = type2.equals((java.lang.Object) 112);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type23, false);
        java.lang.String str28 = type5.toString();
        java.lang.String str29 = type5.toString();
        int int30 = type5.getSize();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type32, list33, true);
        java.lang.Class<?> wildcardClass36 = simpleVerifier35.getClass();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str40 = type39.getDescriptor();
        int int41 = type39.getSort();
        int int42 = type39.getSize();
        java.lang.String str43 = type39.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type39, true);
        boolean boolean46 = type5.equals((java.lang.Object) type39);
        java.lang.String str47 = type5.getDescriptor();
        java.lang.String str48 = type5.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type5, true);
        java.lang.String str51 = type2.getInternalName();
        int int53 = type2.getOpcode(131080);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "B" + "'", str28, "B");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "B" + "'", str29, "B");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Lfloat;" + "'", str40, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "B" + "'", str47, "B");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "B" + "'", str48, "B");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org/mockito/asm/Type" + "'", str51, "org/mockito/asm/Type");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 131084 + "'", int53 == 131084);
    }

    @Test
    public void test05297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05297");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str13 = type12.getDescriptor();
        java.lang.String str14 = type12.getInternalName();
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier10.newValue(type12);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str18 = type17.getDescriptor();
        int int19 = type17.getSort();
        int int20 = type17.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type17, false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type25, true);
        java.lang.String str30 = type25.getClassName();
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type25, list31, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException40.addSuppressed((java.lang.Throwable) analyzerException42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException44);
        boolean boolean46 = type34.equals((java.lang.Object) analyzerException45);
        java.lang.String str47 = type34.getDescriptor();
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier33.newValue(type34);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        java.lang.String str54 = type51.getClassName();
        int int56 = type51.getOpcode(138);
        int int57 = type51.getSize();
        boolean boolean59 = type51.equals((java.lang.Object) 154);
        java.lang.String str60 = type51.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type51, true);
        boolean boolean63 = type34.equals((java.lang.Object) type51);
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier22.newValue(type51);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier22.newValue(type65);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        java.util.List list68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = simpleVerifier22.naryOperation(abstractInsnNode67, list68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LB;" + "'", str13, "LB;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "B" + "'", str14, "B");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lfloat;" + "'", str18, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "void" + "'", str30, "void");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "F" + "'", str47, "F");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "char" + "'", str54, "char");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 138 + "'", int56 == 138);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test05298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05298");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str23 = type22.getDescriptor();
        int int25 = type22.getOpcode(98);
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier20.newValue(type22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter28.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type38, true);
        java.lang.String str43 = type38.getClassName();
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type38, list44, true);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException53.addSuppressed((java.lang.Throwable) analyzerException55);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException57);
        boolean boolean59 = type47.equals((java.lang.Object) analyzerException58);
        java.lang.String str60 = type47.getDescriptor();
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier46.newValue(type47);
        int int62 = value61.getSize();
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter28.copyOperation(abstractInsnNode35, value61);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter28.newValue(type64);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value66 = simpleVerifier20.unaryOperation(abstractInsnNode27, value65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "LB;" + "'", str23, "LB;");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 102 + "'", int25 == 102);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "void" + "'", str43, "void");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "F" + "'", str60, "F");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value65);
    }

    @Test
    public void test05299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05299");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type26, false);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier30.newValue(type31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier30.newValue(type33);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter0.copyOperation(abstractInsnNode7, value37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int41 = type39.getOpcode(48);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter0.newValue(type39);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type51, type54, type55, type59, type62 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray66);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray66);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException71);
        java.lang.Class<?> wildcardClass73 = analyzerException71.getClass();
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        java.lang.String str75 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass73);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type76, true);
        boolean boolean79 = type45.equals((java.lang.Object) type76);
        int int81 = type76.getOpcode(0);
        java.lang.String str82 = type76.getDescriptor();
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter0.newValue(type76);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter0.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = basicInterpreter0.newOperation(abstractInsnNode87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 48 + "'", int41 == 48);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "boolean" + "'", str42, "boolean");
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "char" + "'", str49, "char");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)B" + "'", str67, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)C" + "'", str68, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str75, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 4 + "'", int81 == 4);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str82, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNull(value86);
    }

    @Test
    public void test05300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05300");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int3 = type1.getOpcode(8);
        java.lang.String str4 = type1.getDescriptor();
        int int5 = type1.getDimensions();
        int int7 = type1.getOpcode(52);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str4, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 56 + "'", int7 == 56);
    }

    @Test
    public void test05301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05301");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        java.lang.String str4 = type1.getClassName();
        int int5 = type1.getSize();
        int int7 = type1.getOpcode(148);
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list8, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.ternaryOperation(abstractInsnNode13, value14, value15, value16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str19 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter12.newValue(type18);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getObjectType("L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter12.newValue(type22);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value24 = simpleVerifier10.copyOperation(abstractInsnNode11, value23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "char" + "'", str4, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 148 + "'", int7 == 148);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "long" + "'", str19, "long");
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
    }

    @Test
    public void test05302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05302");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type6 = type5.getElementType();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type25, false);
        java.lang.String str30 = type7.toString();
        java.lang.String str31 = type7.toString();
        int int32 = type7.getSize();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list35 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type34, list35, true);
        java.lang.Class<?> wildcardClass38 = simpleVerifier37.getClass();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str42 = type41.getDescriptor();
        int int43 = type41.getSort();
        int int44 = type41.getSize();
        java.lang.String str45 = type41.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type41, true);
        boolean boolean48 = type7.equals((java.lang.Object) type41);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type50, true);
        java.lang.String str55 = type50.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type50, false);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        int int60 = type58.getOpcode(101);
        java.lang.String str61 = type58.toString();
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type58, list62, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier66 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type58, false);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException69);
        java.lang.Class<?> wildcardClass71 = analyzerException69.getClass();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass71);
        org.mockito.asm.Type type73 = type72.getElementType();
        java.lang.String str74 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier66.newValue(type73);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.Type type77 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str79 = type78.getClassName();
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type77, type78, list80, false);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type84 = null;
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type84, list85, false);
        int int88 = type83.getSize();
        int int89 = type83.getSort();
        int int90 = type83.getSort();
        java.util.List list91 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier93 = new org.mockito.asm.tree.analysis.SimpleVerifier(type78, type83, list91, true);
        org.mockito.asm.Type type95 = org.mockito.asm.Type.getType("(CBFCF)LB;");
        java.lang.String str96 = type95.getClassName();
        org.mockito.asm.tree.analysis.Value value97 = simpleVerifier93.newValue(type95);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value98 = simpleVerifier66.copyOperation(abstractInsnNode76, value97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "B" + "'", str30, "B");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "B" + "'", str31, "B");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Lfloat;" + "'", str42, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "void" + "'", str55, "void");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 101 + "'", int60 == 101);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "C" + "'", str61, "C");
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str74, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "byte" + "'", str79, "byte");
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(type95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "CBFCF)LB" + "'", str96, "CBFCF)LB");
        org.junit.Assert.assertNotNull(value97);
    }

    @Test
    public void test05303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05303");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        int int35 = type0.getSort();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int39 = type37.getOpcode(167);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type37, list40, true);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: F: expected 1.0, but found .");
        int int45 = type44.getSort();
        java.util.List list46 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type44, list46, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value50 = simpleVerifier48.newOperation(abstractInsnNode49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 171 + "'", int39 == 171);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
    }

    @Test
    public void test05304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05304");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        int int7 = type2.getOpcode(138);
        int int8 = type2.getSize();
        boolean boolean10 = type2.equals((java.lang.Object) 154);
        java.lang.String str11 = type2.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException16);
        java.lang.Class<?> wildcardClass18 = analyzerException16.getClass();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str20 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass18);
        java.lang.String str22 = type21.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type21, false);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        java.lang.String str28 = type25.getClassName();
        int int30 = type25.getOpcode(138);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException33);
        java.lang.Class<?> wildcardClass35 = analyzerException33.getClass();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass35);
        boolean boolean37 = type25.equals((java.lang.Object) wildcardClass35);
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier24.newValue(type25);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str41 = type40.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int45 = type43.getOpcode(8);
        int int47 = type43.getOpcode(163);
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type43, list48, false);
        java.lang.String str51 = type43.getInternalName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type43, false);
        java.lang.Class<?> wildcardClass54 = simpleVerifier53.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 138 + "'", int7 == 138);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "C" + "'", str11, "C");
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str20, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str22, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "char" + "'", str28, "char");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 138 + "'", int30 == 138);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hi!" + "'", str41, "hi!");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 12 + "'", int45 == 12);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 167 + "'", int47 == 167);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str51, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test05305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05305");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        int int23 = type18.getSort();
        java.lang.String str24 = type18.getDescriptor();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException47);
        java.lang.Class<?> wildcardClass49 = analyzerException47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.lang.String str51 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type52, list53, true);
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type44, list56, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type44, false);
        java.lang.String str61 = type44.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str51, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str61, "org.mockito.asm.tree.analysis.AnalyzerException: ");
    }

    @Test
    public void test05306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05306");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        boolean boolean8 = type0.equals((java.lang.Object) 154);
        java.lang.String str9 = type0.getDescriptor();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type10, true);
        int int17 = type10.getSort();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getType("Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        java.lang.String str20 = type19.getClassName();
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type19, list21, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str31 = type30.getDescriptor();
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        java.lang.Object obj35 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.ternaryOperation(abstractInsnNode43, value44, value45, value46);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter48.copyOperation(abstractInsnNode49, value50);
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter48.newValue(type52);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter54.copyOperation(abstractInsnNode55, value56);
        org.mockito.asm.Type type58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter54.newValue(type58);
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter42.merge(value53, value59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter61.ternaryOperation(abstractInsnNode62, value63, value64, value65);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter67 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter67.copyOperation(abstractInsnNode68, value69);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter67.newValue(type71);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter73 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter73.copyOperation(abstractInsnNode74, value75);
        org.mockito.asm.Type type77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter73.newValue(type77);
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter61.merge(value72, value78);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier41.merge(value60, value72);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter36.copyOperation(abstractInsnNode40, value80);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj35, value81);
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter26.copyOperation(abstractInsnNode33, value81);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str87 = type86.getDescriptor();
        int int88 = type86.getSort();
        java.util.List list89 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier91 = new org.mockito.asm.tree.analysis.SimpleVerifier(type84, type86, list89, false);
        org.mockito.asm.Type type92 = null;
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier91.newValue(type92);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException94 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: F", (java.lang.Object) basicInterpreter26, value93);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = simpleVerifier23.unaryOperation(abstractInsnNode24, value93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 6 + "'", int17 == 6);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B" + "'", str20, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "I" + "'", str31, "I");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNull(value70);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Lfloat;" + "'", str87, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 10 + "'", int88 == 10);
        org.junit.Assert.assertNotNull(value93);
    }

    @Test
    public void test05307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05307");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str3 = type2.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.Type type6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type6, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        java.lang.Object obj22 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter48.ternaryOperation(abstractInsnNode49, value50, value51, value52);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter54 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter54.copyOperation(abstractInsnNode55, value56);
        org.mockito.asm.Type type58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter54.newValue(type58);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter60.copyOperation(abstractInsnNode61, value62);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.newValue(type64);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter48.merge(value59, value65);
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier28.merge(value47, value59);
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter23.copyOperation(abstractInsnNode27, value67);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException69 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj22, value68);
        java.lang.Class<?> wildcardClass70 = value68.getClass();
        java.lang.String str71 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass70);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier20.newValue(type72);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.SHORT_TYPE;
        int int75 = type74.getSize();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier20.newValue(type74);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list79 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type77, type78, list79, true);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier20.newValue(type78);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value83 = simpleVerifier8.unaryOperation(abstractInsnNode9, value82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "B" + "'", str3, "B");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str71, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(value82);
    }

    @Test
    public void test05308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05308");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) (byte) 100);
        java.lang.String str4 = type1.getClassName();
        boolean boolean6 = type1.equals((java.lang.Object) 177);
        java.lang.String str7 = type1.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException10);
        java.lang.Class<?> wildcardClass12 = analyzerException10.getClass();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass12);
        int int15 = type13.getOpcode(114);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) (byte) 100);
        java.lang.String str31 = type28.getClassName();
        org.mockito.asm.Type[] typeArray32 = new org.mockito.asm.Type[] { type17, type20, type21, type25, type28 };
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray32);
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray32);
        boolean boolean35 = type1.equals((java.lang.Object) typeArray32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException38);
        java.lang.Throwable[] throwableArray40 = analyzerException39.getSuppressed();
        boolean boolean41 = type1.equals((java.lang.Object) analyzerException39);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        java.lang.Throwable[] throwableArray44 = analyzerException43.getSuppressed();
        boolean boolean45 = type1.equals((java.lang.Object) analyzerException43);
        java.lang.String str46 = type1.toString();
        java.lang.String str47 = type1.toString();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type49, true);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier53.newValue(type54);
        int int58 = value57.getSize();
        int int59 = value57.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("()Lfloat;", (java.lang.Object) str47, value57);
        java.lang.Throwable[] throwableArray61 = analyzerException60.getSuppressed();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "float" + "'", str4, "float");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "F" + "'", str7, "F");
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 118 + "'", int15 == 118);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "float" + "'", str31, "float");
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)B" + "'", str33, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "F" + "'", str46, "F");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "F" + "'", str47, "F");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(throwableArray61);
    }

    @Test
    public void test05309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05309");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test05310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05310");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 151);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 100);
        java.lang.String str10 = type7.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type3, type6, type7, type11, type14 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray18);
        int int20 = type2.getSize();
        java.lang.String str21 = type2.toString();
        int int23 = type2.getOpcode(9);
        java.util.List list24 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list24, true);
        int int28 = type1.getOpcode(172);
        int int29 = type1.getSize();
        java.lang.String str30 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)B" + "'", str19, "(CBFCF)B");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "B" + "'", str21, "B");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 176 + "'", int28 == 176);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str30, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test05311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05311");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str3 = type2.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type7, true);
        java.lang.String str12 = type7.getClassName();
        int int13 = type7.getSize();
        org.mockito.asm.tree.analysis.Value value14 = simpleVerifier5.newValue(type7);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException17);
        java.lang.Class<?> wildcardClass19 = analyzerException17.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        java.lang.String str21 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        java.lang.String str23 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        java.lang.String str24 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        int int26 = type25.getSize();
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier5.newValue(type25);
        int int28 = type25.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "B" + "'", str3, "B");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "void" + "'", str12, "void");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str21, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str23, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str24, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test05312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05312");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.Type type6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter2.newValue(type6);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) (byte) 100);
        java.lang.String str11 = type8.getClassName();
        boolean boolean13 = type8.equals((java.lang.Object) 177);
        int int14 = type8.getSize();
        java.lang.String str15 = type8.toString();
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter2.newValue(type8);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter2.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        int int22 = type20.getOpcode(101);
        java.lang.String str23 = type20.toString();
        int int24 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter2.newValue(type20);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter27.copyOperation(abstractInsnNode28, value29);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.newValue(type31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = type33.getClassName();
        boolean boolean38 = type33.equals((java.lang.Object) 177);
        int int39 = type33.getSize();
        java.lang.String str40 = type33.toString();
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter27.newValue(type33);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter2.copyOperation(abstractInsnNode26, value41);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("", obj1, value41);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        java.lang.Throwable[] throwableArray46 = analyzerException45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = analyzerException45.getSuppressed();
        analyzerException43.addSuppressed((java.lang.Throwable) analyzerException45);
        java.lang.String str49 = analyzerException43.toString();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNotNull(value7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "float" + "'", str11, "float");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "F" + "'", str15, "F");
        org.junit.Assert.assertNotNull(value16);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 101 + "'", int22 == 101);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "C" + "'", str23, "C");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "F" + "'", str40, "F");
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: : expected null, but found F" + "'", str49, "org.mockito.asm.tree.analysis.AnalyzerException: : expected null, but found F");
    }

    @Test
    public void test05313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05313");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier22.newValue(type24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException28);
        java.lang.Class<?> wildcardClass30 = analyzerException28.getClass();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        int int33 = type31.getOpcode(114);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type[] typeArray50 = new org.mockito.asm.Type[] { type35, type38, type39, type43, type46 };
        java.lang.String str51 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray50);
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray50);
        java.lang.String str53 = type31.getDescriptor();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list56 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type55, list56, true);
        int int60 = type54.getOpcode(169);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        int int63 = type61.getOpcode(101);
        int int65 = type61.getOpcode(191);
        int int66 = type61.getSort();
        java.lang.Class<?> wildcardClass67 = type61.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.lang.String str69 = type68.getDescriptor();
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type54, type68, list70, true);
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type54, list73, false);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier22.newValue(type54);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getObjectType("LLg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier22.newValue(type78);
        java.lang.String str80 = type78.getClassName();
        java.lang.String str81 = type78.toString();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 118 + "'", int33 == 118);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "(CBFCF)B" + "'", str51, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str52, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str53, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 170 + "'", int60 == 170);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 101 + "'", int63 == 101);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 191 + "'", int65 == 191);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str69, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "LLg.mockito.asm.tree.analysis.AnalyzerException;;" + "'", str80, "LLg.mockito.asm.tree.analysis.AnalyzerException;;");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "LLLg/mockito/asm/tree/analysis/AnalyzerException;;;" + "'", str81, "LLLg/mockito/asm/tree/analysis/AnalyzerException;;;");
    }

    @Test
    public void test05314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05314");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        java.lang.String str6 = type1.getClassName();
        int int7 = type1.getSize();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass9 = type8.getClass();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        boolean boolean12 = type1.equals((java.lang.Object) type11);
        java.lang.Class<?> wildcardClass13 = type11.getClass();
        java.lang.String str14 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass13);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "void" + "'", str6, "void");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "org/mockito/asm/Type" + "'", str14, "org/mockito/asm/Type");
    }

    @Test
    public void test05315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05315");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str8 = type7.getDescriptor();
        int int9 = type7.getSort();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list10, false);
        java.lang.String str13 = type7.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        java.util.List list17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value18 = simpleVerifier15.naryOperation(abstractInsnNode16, list17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lfloat;" + "'", str8, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
    }

    @Test
    public void test05316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05316");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.toString();
        java.lang.String str24 = type0.toString();
        int int25 = type0.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type27, list28, true);
        java.lang.Class<?> wildcardClass31 = simpleVerifier30.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str35 = type34.getDescriptor();
        int int36 = type34.getSort();
        int int37 = type34.getSize();
        java.lang.String str38 = type34.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type34, true);
        boolean boolean41 = type0.equals((java.lang.Object) type34);
        java.lang.String str42 = type0.getDescriptor();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getObjectType("C");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type44, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        java.util.List list48 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value49 = simpleVerifier46.naryOperation(abstractInsnNode47, list48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B" + "'", str23, "B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lfloat;" + "'", str35, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "B" + "'", str42, "B");
        org.junit.Assert.assertNotNull(type44);
    }

    @Test
    public void test05317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05317");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("double");
        java.lang.Throwable[] throwableArray2 = analyzerException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test05318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05318");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        int int5 = type2.getSize();
        java.lang.String str6 = type2.getClassName();
        int int7 = type2.getSize();
        java.lang.String str8 = type2.toString();
        java.lang.String str9 = type2.getDescriptor();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list10, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type16, true);
        java.lang.String str21 = type16.getClassName();
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type16, list22, true);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException31.addSuppressed((java.lang.Throwable) analyzerException33);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException35);
        boolean boolean37 = type25.equals((java.lang.Object) analyzerException36);
        java.lang.String str38 = type25.getDescriptor();
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier24.newValue(type25);
        int int40 = value39.getSize();
        int int41 = value39.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value42 = simpleVerifier12.unaryOperation(abstractInsnNode13, value39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "float" + "'", str6, "float");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lfloat;" + "'", str8, "Lfloat;");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "void" + "'", str21, "void");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "F" + "'", str38, "F");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test05319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05319");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException23);
        java.lang.Class<?> wildcardClass25 = analyzerException23.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = type26.getElementType();
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier20.newValue(type27);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        java.util.List list30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value31 = simpleVerifier20.naryOperation(abstractInsnNode29, list30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(value28);
    }

    @Test
    public void test05320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05320");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: boolean");
        int int2 = type1.getDimensions();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int5 = type3.getOpcode(48);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier28.newValue(type29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier28.newValue(type31);
        int int36 = type31.getSize();
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type31, list37, true);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type31, list40, true);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 48 + "'", int5 == 48);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test05321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05321");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException16.addSuppressed((java.lang.Throwable) analyzerException18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException16);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException20);
        boolean boolean22 = type10.equals((java.lang.Object) analyzerException21);
        analyzerException9.addSuppressed((java.lang.Throwable) analyzerException21);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("int", (java.lang.Throwable) analyzerException21);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test05322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05322");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray22);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray22);
        int int26 = type1.getSort();
        java.lang.Class<?> wildcardClass27 = type1.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str25, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test05323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05323");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int2 = type1.getSort();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getType("I");
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, list5, true);
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type27, false);
        java.lang.String str32 = type9.getClassName();
        int int33 = type9.getSort();
        int int35 = type9.getOpcode(148);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        java.lang.String str39 = type36.getClassName();
        int int40 = type36.getSize();
        int int42 = type36.getOpcode(148);
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type36, list43, true);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType("B");
        org.mockito.asm.Type type48 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type49, list50, true);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 193);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean76 = type74.equals((java.lang.Object) (byte) 100);
        java.lang.String str77 = type74.getClassName();
        org.mockito.asm.Type[] typeArray78 = new org.mockito.asm.Type[] { type63, type66, type67, type71, type74 };
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray78);
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray78);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray78);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray78);
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray78);
        java.lang.String str84 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray78);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type47, false);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException88 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException90 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException88.addSuppressed((java.lang.Throwable) analyzerException90);
        java.lang.Class<?> wildcardClass92 = analyzerException90.getClass();
        org.mockito.asm.Type type93 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass92);
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier86.newValue(type93);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value95 = simpleVerifier7.merge(value8, value94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "byte" + "'", str32, "byte");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3 + "'", int33 == 3);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 148 + "'", int35 == 148);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "char" + "'", str39, "char");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 148 + "'", int42 == 148);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "char" + "'", str61, "char");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "float" + "'", str77, "float");
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(CBFCF)B" + "'", str79, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(CBFCF)C" + "'", str80, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str81, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(CBFCF)S" + "'", str82, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)J" + "'", str83, "(CBFCF)J");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "(CBFCF)B" + "'", str84, "(CBFCF)B");
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(type93);
        org.junit.Assert.assertNotNull(value94);
    }

    @Test
    public void test05324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05324");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = simpleVerifier5.newValue(type10);
        int int15 = type10.getSize();
        int int17 = type10.getOpcode(114);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("char");
        java.util.List list20 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type19, list20, false);
        java.lang.Class<?> wildcardClass23 = type19.getClass();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 116 + "'", int17 == 116);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test05325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05325");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        int int6 = type0.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) (byte) 100);
        java.lang.String str63 = type60.getClassName();
        org.mockito.asm.Type[] typeArray64 = new org.mockito.asm.Type[] { type49, type52, type53, type57, type60 };
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type66, false);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier70.newValue(type71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean75 = type73.equals((java.lang.Object) (byte) 100);
        java.lang.String str76 = type73.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier70.newValue(type73);
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type73, list78, true);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier7.newValue(type73);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type73, true);
        java.lang.String str84 = type0.toString();
        java.lang.String str85 = type0.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "float" + "'", str63, "float");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)B" + "'", str65, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Z" + "'", str84, "Z");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "boolean" + "'", str85, "boolean");
    }

    @Test
    public void test05326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05326");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lg.mockito.asm.tree.analysis.AnalyzerException;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test05327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05327");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean24 = type12.equals((java.lang.Object) type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type43, false);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier47.newValue(type48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier47.newValue(type50);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int56 = type55.getSize();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        int int59 = type57.getOpcode(101);
        java.lang.String str60 = type57.toString();
        int int61 = type57.getSort();
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type55, type57, list62, false);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier47.newValue(type55);
        java.util.List list66 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type55, list66, false);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getObjectType("float");
        int int71 = type70.getSize();
        boolean boolean72 = type12.equals((java.lang.Object) type70);
        java.lang.String str73 = type12.toString();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: Lfloat;");
        int int76 = type75.getDimensions();
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type75, list77, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode80 = null;
        java.util.List list81 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value82 = simpleVerifier79.naryOperation(abstractInsnNode80, list81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 101 + "'", int59 == 101);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "V" + "'", str73, "V");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test05328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05328");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier28.newValue(type29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) (byte) 100);
        java.lang.String str39 = type36.getClassName();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type[] typeArray47 = new org.mockito.asm.Type[] { type32, type35, type36, type40, type43 };
        java.lang.String str48 = org.mockito.asm.Type.getMethodDescriptor(type31, typeArray47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type49, false);
        java.lang.String str54 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier28.newValue(type31);
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("LLg/mockito/asm/tree/analysis/AnalyzerException;;", (java.lang.Object) value55, value56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.newValue(type62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        boolean boolean69 = type64.equals((java.lang.Object) 177);
        int int70 = type64.getSize();
        java.lang.String str71 = type64.toString();
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter58.newValue(type64);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter74.ternaryOperation(abstractInsnNode75, value76, value77, value78);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter80 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode81 = null;
        org.mockito.asm.tree.analysis.Value value82 = null;
        org.mockito.asm.tree.analysis.Value value83 = basicInterpreter80.copyOperation(abstractInsnNode81, value82);
        org.mockito.asm.Type type84 = null;
        org.mockito.asm.tree.analysis.Value value85 = basicInterpreter80.newValue(type84);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter86 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode87 = null;
        org.mockito.asm.tree.analysis.Value value88 = null;
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter86.copyOperation(abstractInsnNode87, value88);
        org.mockito.asm.Type type90 = null;
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter86.newValue(type90);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter74.merge(value85, value91);
        org.mockito.asm.tree.analysis.Value value93 = basicInterpreter58.copyOperation(abstractInsnNode73, value92);
        int int94 = value92.getSize();
        int int95 = value92.getSize();
        org.mockito.asm.tree.analysis.Value value96 = simpleVerifier4.merge(value55, value92);
        int int97 = value96.getSize();
        int int98 = value96.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "float" + "'", str39, "float");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(CBFCF)B" + "'", str48, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "byte" + "'", str54, "byte");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "F" + "'", str71, "F");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNull(value79);
        org.junit.Assert.assertNull(value83);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNull(value89);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(value93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertNotNull(value96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test05329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05329");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.Type type10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.newValue(type10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.merge(value11, value17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter0.newValue(type19);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type23 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier27 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type23, true);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier27.newValue(type28);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) 151);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type37, type40, type41, type45, type48 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray52);
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray52);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type28, typeArray52);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter0.newValue(type28);
        java.lang.Class<?> wildcardClass57 = type28.getClass();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "C" + "'", str20, "C");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "char" + "'", str35, "char");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)B" + "'", str53, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)C" + "'", str54, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)C" + "'", str55, "(CBFCF)C");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test05330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05330");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found .");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.String str3 = type1.getDescriptor();
        int int4 = type1.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found .;" + "'", str3, "Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found .;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test05331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05331");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        java.lang.String str3 = type0.toString();
        int int4 = type0.getSize();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        int int6 = type5.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type5, false);
        java.lang.String str9 = type0.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "char" + "'", str9, "char");
    }

    @Test
    public void test05332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05332");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)V");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05333");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, true);
        java.lang.String str17 = type12.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type12, list18, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type12, true);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.INT_TYPE;
        boolean boolean24 = type12.equals((java.lang.Object) type23);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        int int28 = type26.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier25.newValue(type26);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        boolean boolean35 = type30.equals((java.lang.Object) 177);
        java.lang.String str36 = type30.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException39);
        java.lang.Class<?> wildcardClass41 = analyzerException39.getClass();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        int int44 = type42.getOpcode(114);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type46, type49, type50, type54, type57 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray61);
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray61);
        boolean boolean64 = type30.equals((java.lang.Object) typeArray61);
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type26, typeArray61);
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray61);
        org.mockito.asm.Type[] typeArray68 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type23, typeArray68);
        int int71 = type23.getOpcode(207);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "void" + "'", str17, "void");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 101 + "'", int28 == 101);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "F" + "'", str36, "F");
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 118 + "'", int44 == 118);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)B" + "'", str62, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str63, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)C" + "'", str65, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)I" + "'", str66, "(CBFCF)I");
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)I" + "'", str69, "(CBFCF)I");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 207 + "'", int71 == 207);
    }

    @Test
    public void test05334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05334");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter4.copyOperation(abstractInsnNode5, value6);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode5, value26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException30.addSuppressed((java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException32.addSuppressed((java.lang.Throwable) analyzerException35);
        analyzerException28.addSuppressed((java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException43.addSuppressed((java.lang.Throwable) analyzerException45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException43);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException49 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("Z", (java.lang.Throwable) analyzerException48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException52.addSuppressed((java.lang.Throwable) analyzerException54);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException59.addSuppressed((java.lang.Throwable) analyzerException61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException59);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException63);
        analyzerException54.addSuppressed((java.lang.Throwable) analyzerException63);
        analyzerException50.addSuppressed((java.lang.Throwable) analyzerException54);
        analyzerException35.addSuppressed((java.lang.Throwable) analyzerException50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException74);
        analyzerException71.addSuppressed((java.lang.Throwable) analyzerException75);
        analyzerException35.addSuppressed((java.lang.Throwable) analyzerException71);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;", (java.lang.Throwable) analyzerException35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected F, but found F;", (java.lang.Throwable) analyzerException78);
        java.lang.String str80 = analyzerException78.toString();
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;" + "'", str80, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
    }

    @Test
    public void test05335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05335");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str2 = type1.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str2, "Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
    }

    @Test
    public void test05336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05336");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value4 = simpleVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.ternaryOperation(abstractInsnNode26, value27, value28, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter25.merge(value36, value42);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier5.merge(value24, value36);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type64, false);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier68.newValue(type69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier68.newValue(type71);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type71, list76, true);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier5.newValue(type71);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier5.newValue(type80);
        boolean boolean83 = type80.equals((java.lang.Object) "I");
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier0.newValue(type80);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getObjectType("boolean");
        java.lang.String str87 = type86.getDescriptor();
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier0.newValue(type86);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode89 = null;
        org.mockito.asm.tree.analysis.Value value90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value91 = simpleVerifier0.unaryOperation(abstractInsnNode89, value90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Lboolean;" + "'", str87, "Lboolean;");
        org.junit.Assert.assertNotNull(value88);
    }

    @Test
    public void test05337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05337");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        boolean boolean11 = type6.equals((java.lang.Object) 177);
        int int12 = type6.getSize();
        java.lang.String str13 = type6.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        int int20 = type18.getOpcode(101);
        java.lang.String str21 = type18.toString();
        int int22 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter0.newValue(type18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException26);
        java.lang.Class<?> wildcardClass28 = analyzerException27.getClass();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter0.newValue(type29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        boolean boolean36 = type31.equals((java.lang.Object) 177);
        int int38 = type31.getOpcode(167);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str41 = type40.getDescriptor();
        int int42 = type40.getSort();
        int int43 = type40.getDimensions();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str46 = type45.getDescriptor();
        int int47 = type45.getSort();
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type45, list48, true);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str53 = type52.getDescriptor();
        int int54 = type52.getSort();
        int int55 = type52.getDimensions();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str58 = type57.getDescriptor();
        int int59 = type57.getSort();
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type57, list60, true);
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier50.newValue(type57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException66);
        java.lang.Class<?> wildcardClass68 = analyzerException66.getClass();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        java.lang.String str70 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass68);
        java.lang.String str71 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass68);
        java.lang.String str72 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass68);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier50.newValue(type73);
        java.lang.String str75 = type73.getDescriptor();
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type73, list76, true);
        int int80 = type31.getOpcode(81);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter0.newValue(type31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode82 = null;
        java.util.List list83 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value84 = basicInterpreter0.naryOperation(abstractInsnNode82, list83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 101 + "'", int20 == 101);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "C" + "'", str21, "C");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 169 + "'", int38 == 169);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lfloat;" + "'", str41, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Lfloat;" + "'", str46, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Lfloat;" + "'", str53, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lfloat;" + "'", str58, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str70, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str71, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str72, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str75, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 83 + "'", int80 == 83);
        org.junit.Assert.assertNotNull(value81);
    }

    @Test
    public void test05338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05338");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException37);
        java.lang.Throwable[] throwableArray39 = analyzerException38.getSuppressed();
        boolean boolean40 = type0.equals((java.lang.Object) analyzerException38);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        java.lang.Throwable[] throwableArray43 = analyzerException42.getSuppressed();
        boolean boolean44 = type0.equals((java.lang.Object) analyzerException42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException47);
        java.lang.Class<?> wildcardClass49 = analyzerException48.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        java.lang.String str51 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        java.lang.String str52 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass49);
        boolean boolean53 = type0.equals((java.lang.Object) str52);
        java.lang.String str54 = type0.toString();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException59);
        java.lang.Class<?> wildcardClass61 = analyzerException59.getClass();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        java.lang.String str63 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass61);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass61);
        java.util.List list65 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type64, list65, true);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        boolean boolean73 = type68.equals((java.lang.Object) 177);
        int int75 = type68.getOpcode(167);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier67.newValue(type68);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str78 = type77.getClassName();
        int int79 = type77.getSort();
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier67.newValue(type77);
        int int81 = type77.getSize();
        org.mockito.asm.Type type82 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier84 = new org.mockito.asm.tree.analysis.SimpleVerifier(type77, type82, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type82, false);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getReturnType("Lvoid;");
        int int89 = type88.getSort();
        java.lang.String str90 = type88.getDescriptor();
        java.lang.String str91 = type88.getInternalName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier93 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type88, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode94 = null;
        java.util.List list95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value96 = simpleVerifier93.naryOperation(abstractInsnNode94, list95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str50, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str51, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str52, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "F" + "'", str54, "F");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str63, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 169 + "'", int75 == 169);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "void" + "'", str78, "void");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Lvoid;" + "'", str90, "Lvoid;");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "void" + "'", str91, "void");
    }

    @Test
    public void test05339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05339");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("J");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        java.lang.String str15 = type12.getClassName();
        int int17 = type12.getOpcode(138);
        int int18 = type12.getSize();
        boolean boolean20 = type12.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier7.newValue(type12);
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type12, list22, false);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        int int27 = type25.getOpcode(101);
        java.lang.String str28 = type25.toString();
        int int29 = type25.getSort();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier24.newValue(type25);
        org.mockito.asm.Type type31 = null;
        java.util.List list32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type31, list32, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        java.util.List list36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value37 = simpleVerifier34.naryOperation(abstractInsnNode35, list36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "char" + "'", str15, "char");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 138 + "'", int17 == 138);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 101 + "'", int27 == 101);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "C" + "'", str28, "C");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(value30);
    }

    @Test
    public void test05340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05340");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        java.lang.String str3 = type0.toString();
        int int4 = type0.getSize();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray21);
        int int24 = type0.getSize();
        int int26 = type0.getOpcode(100);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 193);
        java.lang.Class<?> wildcardClass30 = type27.getClass();
        java.lang.String str31 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type34, false);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: LB;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type38, false);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier40.newValue(type42);
        java.lang.Class<?> wildcardClass44 = simpleVerifier40.getClass();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)C" + "'", str23, "(CBFCF)C");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "org/mockito/asm/Type" + "'", str31, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/Type" + "'", str32, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test05341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05341");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        int int32 = type0.getOpcode(171);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type34, true);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value42 = simpleVerifier38.newValue(type39);
        boolean boolean43 = type0.equals((java.lang.Object) simpleVerifier38);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value45 = simpleVerifier38.newOperation(abstractInsnNode44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 171 + "'", int32 == 171);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test05342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05342");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.ternaryOperation(abstractInsnNode15, value16, value17, value18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.ternaryOperation(abstractInsnNode23, value24, value25, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter22.merge(value33, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.ternaryOperation(abstractInsnNode42, value43, value44, value45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter53.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.newValue(type57);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter41.merge(value52, value58);
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier21.merge(value40, value52);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter14.copyOperation(abstractInsnNode20, value52);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value62 = simpleVerifier12.copyOperation(abstractInsnNode13, value61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
    }

    @Test
    public void test05343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05343");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
    }

    @Test
    public void test05344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05344");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException7);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: LLB;;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException16.addSuppressed((java.lang.Throwable) analyzerException18);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException20 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException16);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException21 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException16);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type26, true);
        java.lang.String str31 = type26.getClassName();
        java.util.List list32 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type26, list32, true);
        java.lang.Object obj36 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter62 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter62.ternaryOperation(abstractInsnNode63, value64, value65, value66);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter68 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        org.mockito.asm.tree.analysis.Value value70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter68.copyOperation(abstractInsnNode69, value70);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter68.newValue(type72);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter74 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter74.copyOperation(abstractInsnNode75, value76);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter74.newValue(type78);
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter62.merge(value73, value79);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier42.merge(value61, value73);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter37.copyOperation(abstractInsnNode41, value81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj36, value82);
        java.lang.Class<?> wildcardClass84 = value82.getClass();
        java.lang.String str85 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass84);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass84);
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier34.newValue(type86);
        org.mockito.asm.Type type88 = org.mockito.asm.Type.SHORT_TYPE;
        int int89 = type88.getSize();
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier34.newValue(type88);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("g.mockito.asm.tree.analysis.AnalyzerException", (java.lang.Object) 163, value90);
        analyzerException16.addSuppressed((java.lang.Throwable) analyzerException91);
        analyzerException12.addSuppressed((java.lang.Throwable) analyzerException16);
        analyzerException10.addSuppressed((java.lang.Throwable) analyzerException12);
        java.lang.Throwable[] throwableArray95 = analyzerException10.getSuppressed();
        java.lang.String str96 = analyzerException10.toString();
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "void" + "'", str31, "void");
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNull(value71);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str85, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(throwableArray95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str96, "org.mockito.asm.tree.analysis.AnalyzerException: ");
    }

    @Test
    public void test05345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05345");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        int int5 = type0.getSize();
        int int6 = type0.getSort();
        int int7 = type0.getSort();
        int int8 = type0.getSort();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type10 = null;
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type10, list11, false);
        int int14 = type9.getSize();
        int int15 = type9.getSort();
        int int16 = type9.getSort();
        java.util.List list17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type9, list17, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        int int23 = type21.getOpcode(101);
        java.lang.String str24 = type21.toString();
        int int25 = type21.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        int int27 = type26.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type26, false);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found .");
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier29.newValue(type31);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value33 = simpleVerifier19.unaryOperation(abstractInsnNode20, value32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 101 + "'", int23 == 101);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "C" + "'", str24, "C");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(value32);
    }

    @Test
    public void test05346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05346");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier23.merge(value42, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.ternaryOperation(abstractInsnNode64, value65, value66, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter63.merge(value74, value80);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier22.merge(value62, value74);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type84 = null;
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type84, list85, false);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier22.newValue(type83);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode89 = null;
        java.util.List list90 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value91 = simpleVerifier22.naryOperation(abstractInsnNode89, list90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNull(value88);
    }

    @Test
    public void test05347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05347");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        java.lang.Object obj12 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.ternaryOperation(abstractInsnNode20, value21, value22, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter19.merge(value30, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.ternaryOperation(abstractInsnNode39, value40, value41, value42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter38.merge(value49, value55);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier18.merge(value37, value49);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter13.copyOperation(abstractInsnNode17, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj12, value58);
        java.lang.Class<?> wildcardClass60 = value58.getClass();
        java.lang.String str61 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier10.newValue(type62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.SHORT_TYPE;
        int int65 = type64.getSize();
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier10.newValue(type64);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("(CBFCF)Lfloat;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type68, true);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = type64.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str61, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
    }

    @Test
    public void test05348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05348");
        java.lang.Object obj1 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 151);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 100);
        java.lang.String str10 = type7.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type3, type6, type7, type11, type14 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray18);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException24);
        java.lang.Class<?> wildcardClass26 = analyzerException24.getClass();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        java.util.List list30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type29, list30, true);
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type21, list33, false);
        java.lang.String str36 = type21.getInternalName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        int int40 = type38.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier37.newValue(type38);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type43, type46, type47, type51, type54 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type60, false);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier64.newValue(type65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier64.newValue(type67);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type73 = null;
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type72, type73, list74, false);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier64.newValue(type72);
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier37.newValue(type72);
        java.util.List list79 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type72, list79, false);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException84);
        java.lang.Class<?> wildcardClass86 = analyzerException85.getClass();
        java.lang.String str87 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass86);
        java.lang.String str88 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass86);
        java.lang.String str89 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass86);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass86);
        org.mockito.asm.Type type91 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass86);
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier81.newValue(type91);
        org.mockito.asm.Type type94 = org.mockito.asm.Type.getObjectType("hi!");
        int int95 = type94.getSize();
        int int96 = type94.getSize();
        java.lang.String str97 = type94.getDescriptor();
        org.mockito.asm.tree.analysis.Value value98 = simpleVerifier81.newValue(type94);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException99 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .", obj1, value98);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)B" + "'", str19, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str28, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: " + "'", str36, "org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 101 + "'", int40 == 101);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)B" + "'", str59, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNull(value77);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str87, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str88, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str89, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Lhi!;" + "'", str97, "Lhi!;");
        org.junit.Assert.assertNotNull(value98);
    }

    @Test
    public void test05349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05349");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        java.lang.Class<?> wildcardClass7 = analyzerException5.getClass();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass7);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, false);
        int int11 = type1.getSort();
        java.lang.String str12 = type1.toString();
        org.mockito.asm.Type type13 = null;
        java.util.List list14 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type13, list14, true);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        org.mockito.asm.Type[] typeArray33 = new org.mockito.asm.Type[] { type18, type21, type22, type26, type29 };
        java.lang.String str34 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type35, false);
        java.lang.String str40 = type17.toString();
        java.lang.String str41 = type17.toString();
        int int42 = type17.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int49 = type47.getOpcode(48);
        java.lang.String str50 = type47.getClassName();
        java.lang.String str51 = type47.getClassName();
        java.lang.String str52 = type47.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type71, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type53, true);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter43.newValue(type47);
        java.lang.String str79 = type47.getClassName();
        int int80 = type47.getSort();
        java.util.List list81 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type47, list81, true);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier16.newValue(type17);
        org.mockito.asm.Type type85 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str86 = type85.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type85, false);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: hi!");
        java.lang.String str91 = type90.getDescriptor();
        java.util.List list92 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier94 = new org.mockito.asm.tree.analysis.SimpleVerifier(type85, type90, list92, true);
        int int95 = type90.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "B" + "'", str12, "B");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "(CBFCF)B" + "'", str34, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "B" + "'", str40, "B");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "B" + "'", str41, "B");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 48 + "'", int49 == 48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "boolean" + "'", str51, "boolean");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "boolean" + "'", str52, "boolean");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "boolean" + "'", str79, "boolean");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "C" + "'", str86, "C");
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: hi!;" + "'", str91, "Lorg.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: hi!;");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test05350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05350");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier0.newValue(type26);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type33 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type33, true);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier37.newValue(type38);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type44, true);
        java.lang.String str49 = type44.getClassName();
        java.util.List list50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type44, list50, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier54 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type44, true);
        java.lang.String str55 = type44.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type44, true);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) (byte) 100);
        java.lang.String str73 = type70.getClassName();
        org.mockito.asm.Type[] typeArray74 = new org.mockito.asm.Type[] { type59, type62, type63, type67, type70 };
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray74);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type58, type76, false);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier57.newValue(type76);
        java.lang.Class<?> wildcardClass82 = value81.getClass();
        java.lang.String str83 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass82);
        java.lang.String str84 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass82);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "void" + "'", str49, "void");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "V" + "'", str55, "V");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "float" + "'", str73, "float");
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)B" + "'", str75, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str83, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str84, "org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test05351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05351");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type4 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type6, list9, false);
        int int12 = type6.getSize();
        int int13 = type6.getSort();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type14, false);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int19 = type17.getOpcode(48);
        java.lang.String str20 = type17.getClassName();
        java.lang.String str21 = type17.getClassName();
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type17, list22, true);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        int int26 = type25.getSize();
        java.lang.String str27 = type25.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type25, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type25, true);
        java.lang.String str32 = type3.toString();
        int int33 = type3.getDimensions();
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list34, false);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int39 = type37.getOpcode(48);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type41, type44, type45, type49, type52 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type58, false);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier62.newValue(type63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier62.newValue(type65);
        int int70 = type65.getSize();
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type65, list71, true);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int75 = type74.getSize();
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier73.newValue(type74);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier73.newValue(type78);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier36.newValue(type78);
        int int81 = type78.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 48 + "'", int19 == 48);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "boolean" + "'", str21, "boolean");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str32, "Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 48 + "'", int39 == 48);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)B" + "'", str57, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test05352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05352");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("org/mockito/asm/Type");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05353");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("LB;");
        int int3 = type2.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int9 = type7.getOpcode(48);
        java.lang.String str10 = type7.getClassName();
        java.lang.String str11 = type7.getClassName();
        java.lang.String str12 = type7.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type[] typeArray29 = new org.mockito.asm.Type[] { type14, type17, type18, type22, type25 };
        java.lang.String str30 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type31, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type13, true);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str39 = type38.getClassName();
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier37.newValue(type38);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str43 = type42.getDescriptor();
        int int44 = type42.getSort();
        int int45 = type42.getDimensions();
        int int47 = type42.getOpcode((int) (short) 10);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier37.newValue(type42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException51);
        java.lang.Class<?> wildcardClass53 = analyzerException52.getClass();
        java.lang.String str54 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass53);
        java.lang.String str55 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass53);
        java.lang.String str56 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass53);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass53);
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier37.newValue(type58);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value60 = simpleVerifier5.copyOperation(abstractInsnNode6, value59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 48 + "'", int9 == 48);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "boolean" + "'", str10, "boolean");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "boolean" + "'", str11, "boolean");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "boolean" + "'", str12, "boolean");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "(CBFCF)B" + "'", str30, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "long" + "'", str39, "long");
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lfloat;" + "'", str43, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 14 + "'", int47 == 14);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str54, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str55, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str56, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(value59);
    }

    @Test
    public void test05354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05354");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str1 = type0.getDescriptor();
        java.lang.String str2 = type0.getClassName();
        int int3 = type0.getSize();
        java.lang.String str4 = type0.toString();
        java.lang.String str5 = type0.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "C" + "'", str1, "C");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "char" + "'", str2, "char");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "C" + "'", str4, "C");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "C" + "'", str5, "C");
    }

    @Test
    public void test05355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05355");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        boolean boolean8 = type0.equals((java.lang.Object) 154);
        java.lang.String str9 = type0.getDescriptor();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type10, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        java.util.List list18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value19 = simpleVerifier16.naryOperation(abstractInsnNode17, list18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
    }

    @Test
    public void test05356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05356");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter51.copyOperation(abstractInsnNode52, value53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.ternaryOperation(abstractInsnNode56, value57, value58, value59);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter61 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter61.copyOperation(abstractInsnNode62, value63);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter61.newValue(type65);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter67 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        org.mockito.asm.tree.analysis.Value value69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter67.copyOperation(abstractInsnNode68, value69);
        org.mockito.asm.Type type71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter67.newValue(type71);
        org.mockito.asm.tree.analysis.Value value73 = basicInterpreter55.merge(value66, value72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode52, value73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException79.addSuppressed((java.lang.Throwable) analyzerException81);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException83 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException79);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException83);
        analyzerException74.addSuppressed((java.lang.Throwable) analyzerException83);
        analyzerException48.addSuppressed((java.lang.Throwable) analyzerException74);
        java.lang.Throwable[] throwableArray87 = analyzerException48.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException93 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException91.addSuppressed((java.lang.Throwable) analyzerException93);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException95 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException91);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException96 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException95);
        analyzerException48.addSuppressed((java.lang.Throwable) analyzerException95);
        java.lang.String str98 = analyzerException48.toString();
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value54);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNull(value64);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNull(value70);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found ." + "'", str98, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
    }

    @Test
    public void test05357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05357");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("CBFCF)Lorg.mockito.asm.Type");
    }

    @Test
    public void test05358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05358");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int3 = type1.getOpcode(8);
        java.lang.String str4 = type1.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type7, true);
        java.lang.String str12 = type7.getClassName();
        java.util.List list13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list13, true);
        java.lang.Object obj17 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier23.merge(value42, value54);
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter18.copyOperation(abstractInsnNode22, value62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException64 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj17, value63);
        java.lang.Class<?> wildcardClass65 = value63.getClass();
        java.lang.String str66 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier15.newValue(type67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType("(CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier15.newValue(type70);
        boolean boolean72 = type1.equals((java.lang.Object) simpleVerifier15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        java.util.List list74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value75 = simpleVerifier15.naryOperation(abstractInsnNode73, list74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str4, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "void" + "'", str12, "void");
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str66, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test05359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05359");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = type6.getInternalName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        java.lang.String str26 = type8.toString();
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, list27, true);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type30, true);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) 151);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type33, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.ternaryOperation(abstractInsnNode41, value42, value43, value44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.newValue(type50);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter52.copyOperation(abstractInsnNode53, value54);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.newValue(type56);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter40.merge(value51, value57);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier59.newValue(type61);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        java.lang.String str68 = type65.getClassName();
        int int70 = type65.getOpcode(138);
        int int71 = type65.getSize();
        boolean boolean73 = type65.equals((java.lang.Object) 154);
        java.lang.String str74 = type65.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type65, true);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier59.newValue(type65);
        java.lang.String str78 = type65.getClassName();
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter40.newValue(type65);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value80 = simpleVerifier38.unaryOperation(abstractInsnNode39, value79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str7, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "B" + "'", str26, "B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "char" + "'", str36, "char");
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "char" + "'", str68, "char");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 138 + "'", int70 == 138);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "C" + "'", str74, "C");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "char" + "'", str78, "char");
        org.junit.Assert.assertNotNull(value79);
    }

    @Test
    public void test05360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05360");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.BasicValue");
        java.lang.String str3 = type2.getDescriptor();
        org.mockito.asm.tree.analysis.Value value4 = simpleVerifier0.newValue(type2);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int7 = type5.getOpcode(48);
        java.lang.String str8 = type5.getClassName();
        java.lang.String str9 = type5.getClassName();
        int int11 = type5.getOpcode(119);
        int int12 = type5.getSort();
        int int13 = type5.getSort();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getObjectType("float");
        int int18 = type17.getSize();
        int int19 = type17.getDimensions();
        org.mockito.asm.Type[] typeArray21 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type17, typeArray21);
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray21);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier0.newValue(type5);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("LB;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("void", (java.lang.Throwable) analyzerException31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException31);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("D");
        analyzerException33.addSuppressed((java.lang.Throwable) analyzerException35);
        java.lang.Throwable[] throwableArray37 = analyzerException33.getSuppressed();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type39, true);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier43.newValue(type44);
        int int48 = value47.getSize();
        int int49 = value47.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("LLg/mockito/asm/tree/analysis/AnalyzerException;;", (java.lang.Object) throwableArray37, value47);
        int int51 = value47.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value52 = simpleVerifier0.copyOperation(abstractInsnNode26, value47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg.mockito.asm.tree.analysis.BasicValue;" + "'", str3, "Lorg.mockito.asm.tree.analysis.BasicValue;");
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 48 + "'", int7 == 48);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 119 + "'", int11 == 119);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)Lfloat;" + "'", str22, "(CBFCF)Lfloat;");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/BasicInterpreter;" + "'", str23, "(CBFCF)Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)Z" + "'", str24, "(CBFCF)Z");
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test05361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05361");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        java.lang.String str6 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        int int10 = type9.getSort();
        int int11 = type9.getDimensions();
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str6, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str7, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test05362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05362");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        java.lang.String str4 = type1.toString();
        int int5 = type1.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray22);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray22);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type28, type31, type32, type36, type39 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type45, false);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier49.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier49.newValue(type52);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier26.newValue(type52);
        boolean boolean58 = type0.equals((java.lang.Object) value57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type60, true);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier64.newValue(type65);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type70, type71, true);
        java.lang.String str76 = type71.getClassName();
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type69, type71, list77, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type65, type71, true);
        java.lang.Class<?> wildcardClass82 = type65.getClass();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        int int84 = type83.getSort();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str86 = type85.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type85, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type83, true);
        int int91 = type83.getDimensions();
        int int93 = type83.getOpcode(0);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "C" + "'", str4, "C");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)I" + "'", str25, "(CBFCF)I");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)B" + "'", str44, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "void" + "'", str76, "void");
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "void" + "'", str86, "void");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 4 + "'", int93 == 4);
    }

    @Test
    public void test05363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05363");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("()L(CBFCF)S;");
        int int3 = type1.getOpcode(154);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 158 + "'", int3 == 158);
    }

    @Test
    public void test05364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05364");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str2 = type1.getClassName();
        java.util.List list3 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list3, false);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int9 = type7.getOpcode(167);
        org.mockito.asm.Type type10 = type7.getElementType();
        int int11 = type7.getSort();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 24);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException37);
        java.lang.Class<?> wildcardClass39 = analyzerException37.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        java.lang.String str41 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type42, list43, true);
        java.util.List list46 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type34, list46, false);
        boolean boolean49 = type12.equals((java.lang.Object) type15);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type15, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier52.newValue(type54);
        int int57 = type54.getOpcode(136);
        int int58 = type54.getSize();
        java.lang.String str59 = type54.getInternalName();
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type54, list60, false);
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier5.newValue(type15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        java.util.List list65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value66 = simpleVerifier5.naryOperation(abstractInsnNode64, list65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "byte" + "'", str2, "byte");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 171 + "'", int9 == 171);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str41, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 140 + "'", int57 == 140);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found ." + "'", str59, "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.junit.Assert.assertNotNull(value63);
    }

    @Test
    public void test05365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05365");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: LLB;;");
        org.mockito.asm.tree.analysis.Value value23 = simpleVerifier20.newValue(type22);
        int int24 = value23.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test05366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05366");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: float;", (java.lang.Throwable) analyzerException2);
    }

    @Test
    public void test05367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05367");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test05368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05368");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/Type;");
        int int2 = type1.getDimensions();
        java.lang.String str3 = type1.toString();
        int int5 = type1.getOpcode(148);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str3, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 152 + "'", int5 == 152);
    }

    @Test
    public void test05369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05369");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        java.lang.Throwable[] throwableArray2 = analyzerException1.getSuppressed();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode7, value28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException32.addSuppressed((java.lang.Throwable) analyzerException34);
        analyzerException29.addSuppressed((java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: I", (java.lang.Throwable) analyzerException29);
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException29);
        java.lang.String str39 = analyzerException1.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found ." + "'", str39, "org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
    }

    @Test
    public void test05370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05370");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = type6.getInternalName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        java.lang.String str26 = type8.toString();
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, list27, true);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type30, true);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) (byte) 100);
        java.lang.String str41 = type38.getClassName();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type[] typeArray49 = new org.mockito.asm.Type[] { type34, type37, type38, type42, type45 };
        java.lang.String str50 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type51, false);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier55.newValue(type56);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier55.newValue(type58);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.DOUBLE_TYPE;
        int int64 = type63.getSize();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        int int67 = type65.getOpcode(101);
        java.lang.String str68 = type65.toString();
        int int69 = type65.getSort();
        java.util.List list70 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type65, list70, false);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier55.newValue(type63);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str76 = type75.getDescriptor();
        int int77 = type75.getSort();
        org.mockito.asm.Type type78 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list79 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type75, type78, list79, false);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException84 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException84);
        java.lang.Class<?> wildcardClass86 = analyzerException84.getClass();
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass86);
        java.lang.String str88 = type87.toString();
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier81.newValue(type87);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier32.merge(value73, value89);
        org.mockito.asm.Type type91 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.lang.String str92 = type91.getDescriptor();
        org.mockito.asm.tree.analysis.Value value93 = simpleVerifier32.newValue(type91);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode94 = null;
        org.mockito.asm.tree.analysis.Value value95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value96 = simpleVerifier32.unaryOperation(abstractInsnNode94, value95);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str7, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "B" + "'", str26, "B");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "float" + "'", str41, "float");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "(CBFCF)B" + "'", str50, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 101 + "'", int67 == 101);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "C" + "'", str68, "C");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "LLB;;" + "'", str76, "LLB;;");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str88, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Z" + "'", str92, "Z");
        org.junit.Assert.assertNotNull(value93);
    }

    @Test
    public void test05371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05371");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        java.lang.Class<?> wildcardClass10 = analyzerException8.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = type11.getElementType();
        java.lang.String str13 = type12.getClassName();
        java.lang.String str14 = type12.getDescriptor();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type12, list15, false);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str20 = type19.getInternalName();
        int int21 = type19.getSort();
        int int23 = type19.getOpcode(82);
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier17.newValue(type19);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        java.util.List list26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value27 = simpleVerifier17.naryOperation(abstractInsnNode25, list26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str13, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str14, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LB;" + "'", str20, "LB;");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 86 + "'", int23 == 86);
        org.junit.Assert.assertNotNull(value24);
    }

    @Test
    public void test05372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05372");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        boolean boolean78 = type75.equals((java.lang.Object) "I");
        int int80 = type75.getOpcode(96);
        int int81 = type75.getSize();
        java.lang.String str82 = type75.toString();
        int int84 = type75.getOpcode(91);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.getReturnType("(CBFCF)Lfloat;");
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type[] typeArray89 = new org.mockito.asm.Type[] { type88 };
        java.lang.String str90 = org.mockito.asm.Type.getMethodDescriptor(type86, typeArray89);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type75, typeArray89);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 96 + "'", int80 == 96);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "C" + "'", str82, "C");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 91 + "'", int84 == 91);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "(LLhi!;;)Lfloat;" + "'", str90, "(LLhi!;;)Lfloat;");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(LLhi!;;)C" + "'", str91, "(LLhi!;;)C");
    }

    @Test
    public void test05373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05373");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        boolean boolean8 = type0.equals((java.lang.Object) 154);
        java.lang.String str9 = type0.getDescriptor();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type10, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        boolean boolean29 = type24.equals((java.lang.Object) 177);
        int int30 = type24.getSize();
        java.lang.String str31 = type24.toString();
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter18.newValue(type24);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter18.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        int int38 = type36.getOpcode(101);
        java.lang.String str39 = type36.toString();
        int int40 = type36.getSize();
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter18.newValue(type36);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str44 = type43.toString();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getReturnType("(CBFCF)Lbyte;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type46, true);
        int int50 = type46.getOpcode(141);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter18.newValue(type46);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value52 = simpleVerifier16.unaryOperation(abstractInsnNode17, value51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "F" + "'", str31, "F");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 101 + "'", int38 == 101);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "C" + "'", str39, "C");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;" + "'", str44, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 145 + "'", int50 == 145);
        org.junit.Assert.assertNotNull(value51);
    }

    @Test
    public void test05374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05374");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type5, true);
        java.lang.String str10 = type5.getClassName();
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type5, list11, true);
        java.lang.Object obj15 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.ternaryOperation(abstractInsnNode23, value24, value25, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter22.merge(value33, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.ternaryOperation(abstractInsnNode42, value43, value44, value45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter53.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.newValue(type57);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter41.merge(value52, value58);
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier21.merge(value40, value52);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter16.copyOperation(abstractInsnNode20, value60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj15, value61);
        java.lang.Class<?> wildcardClass63 = value61.getClass();
        java.lang.String str64 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier13.newValue(type65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.SHORT_TYPE;
        int int68 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier13.newValue(type67);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("g.mockito.asm.tree.analysis.AnalyzerException", (java.lang.Object) 163, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicInterpreter;", (java.lang.Throwable) analyzerException70);
        java.lang.String str72 = analyzerException70.toString();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "void" + "'", str10, "void");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str64, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: g.mockito.asm.tree.analysis.AnalyzerException: expected 163, but found I" + "'", str72, "org.mockito.asm.tree.analysis.AnalyzerException: g.mockito.asm.tree.analysis.AnalyzerException: expected 163, but found I");
    }

    @Test
    public void test05375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05375");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        org.mockito.asm.Type[] typeArray3 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lfloat;");
        java.lang.String str4 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray3);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list7 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type6, list7, true);
        java.lang.Class<?> wildcardClass10 = simpleVerifier9.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str14 = type13.getDescriptor();
        int int15 = type13.getSort();
        int int16 = type13.getSize();
        java.lang.String str17 = type13.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type13, true);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        int int22 = type20.getOpcode(101);
        int int24 = type20.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier19.newValue(type20);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException32.addSuppressed((java.lang.Throwable) analyzerException34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException32);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException36);
        boolean boolean38 = type26.equals((java.lang.Object) analyzerException37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier19.newValue(type26);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type26, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value43 = simpleVerifier41.newOperation(abstractInsnNode42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;" + "'", str4, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lfloat;" + "'", str14, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 101 + "'", int22 == 101);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 191 + "'", int24 == 191);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(value39);
    }

    @Test
    public void test05376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05376");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value4 = simpleVerifier0.newValue(type1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        int int8 = type7.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str14 = type13.getDescriptor();
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter9.newValue(type13);
        org.mockito.asm.Type[] typeArray17 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray17);
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray17);
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray17);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier0.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value23 = simpleVerifier0.newOperation(abstractInsnNode22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "I" + "'", str14, "I");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)I" + "'", str18, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)S" + "'", str19, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str20, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value21);
    }

    @Test
    public void test05377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05377");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("B");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str4 = type3.getInternalName();
        java.lang.String str5 = type3.toString();
        java.util.List list6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list6, true);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str11 = type10.getClassName();
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type10, list12, true);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type17 = type16.getElementType();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type19, type37, false);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = simpleVerifier41.newValue(type42);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier41.newValue(type44);
        java.util.List list49 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type44, list49, true);
        int int53 = type44.getOpcode(100);
        java.util.List list54 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type44, list54, false);
        java.util.List list57 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type16, list57, false);
        org.mockito.asm.Type type60 = type3.getElementType();
        int int61 = type3.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "LB;" + "'", str4, "LB;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LLB;;" + "'", str5, "LLB;;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 102 + "'", int53 == 102);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test05378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05378");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier22.newValue(type27);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        java.util.List list30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value31 = simpleVerifier22.naryOperation(abstractInsnNode29, list30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(value28);
    }

    @Test
    public void test05379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05379");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getDimensions();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list9, true);
        java.lang.String str12 = type1.getDescriptor();
        int int13 = type1.getSize();
        int int15 = type1.getOpcode(52);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lfloat;" + "'", str12, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 56 + "'", int15 == 56);
    }

    @Test
    public void test05380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05380");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        int int11 = type8.getSize();
        java.lang.String str12 = type8.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        int int17 = type15.getOpcode(101);
        int int19 = type15.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier14.newValue(type15);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException27.addSuppressed((java.lang.Throwable) analyzerException29);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException31);
        boolean boolean33 = type21.equals((java.lang.Object) analyzerException32);
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier14.newValue(type21);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier14.newValue(type35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        boolean boolean50 = type45.equals((java.lang.Object) 177);
        int int51 = type45.getSize();
        java.lang.String str52 = type45.toString();
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter39.newValue(type45);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter39.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        int int59 = type57.getOpcode(101);
        java.lang.String str60 = type57.toString();
        int int61 = type57.getSize();
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter39.newValue(type57);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter39.newValue(type63);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier14.newValue(type63);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value67 = simpleVerifier14.newOperation(abstractInsnNode66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 101 + "'", int17 == 101);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 191 + "'", int19 == 191);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "F" + "'", str52, "F");
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 101 + "'", int59 == 101);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
    }

    @Test
    public void test05381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05381");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.String str3 = type1.getInternalName();
        java.lang.String str4 = type1.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException7);
        java.lang.Class<?> wildcardClass9 = analyzerException7.getClass();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass9);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass9);
        java.lang.String str13 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        java.lang.String str16 = type15.getInternalName();
        int int17 = type15.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type15, false);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) 151);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.Type[] typeArray37 = new org.mockito.asm.Type[] { type22, type25, type26, type30, type33 };
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type21, typeArray37);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type39, false);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier43.newValue(type44);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier43.newValue(type46);
        java.util.List list51 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type46, list51, true);
        int int55 = type46.getOpcode(100);
        org.mockito.asm.Type[] typeArray57 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray57);
        java.lang.Class<?> wildcardClass59 = type46.getClass();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass59);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier19.newValue(type61);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value66 = simpleVerifier19.binaryOperation(abstractInsnNode63, value64, value65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str3, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str4, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str11, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str12, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str13, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str16, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)B" + "'", str38, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 102 + "'", int55 == 102);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)F" + "'", str58, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(value62);
    }

    @Test
    public void test05382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05382");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str1 = type0.toString();
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException6);
        java.lang.Class<?> wildcardClass8 = analyzerException6.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type11, list12, true);
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type3, list15, false);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        boolean boolean23 = type18.equals((java.lang.Object) 177);
        java.lang.String str24 = type18.getClassName();
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier17.newValue(type18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        java.util.List list27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value28 = simpleVerifier17.naryOperation(abstractInsnNode26, list27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "J" + "'", str1, "J");
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(value25);
    }

    @Test
    public void test05383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05383");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)LCBFCF)Lfloat;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test05384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05384");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str32 = type31.getClassName();
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier30.newValue(type31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type34, type35, list36, true);
        java.lang.Class<?> wildcardClass39 = simpleVerifier38.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str43 = type42.getDescriptor();
        int int44 = type42.getSort();
        int int45 = type42.getSize();
        java.lang.String str46 = type42.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type42, true);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier30.newValue(type42);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getObjectType("short");
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier30.newValue(type51);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str55 = type54.toString();
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type56, type57, true);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier61.newValue(type62);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) 151);
        java.lang.String str69 = type66.getClassName();
        int int71 = type66.getOpcode(138);
        int int72 = type66.getSize();
        boolean boolean74 = type66.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier61.newValue(type66);
        int int77 = type66.getOpcode(0);
        int int79 = type66.getOpcode(0);
        org.mockito.asm.Type[] typeArray81 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray81);
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type54, typeArray81);
        int int84 = type54.getSort();
        java.lang.String str85 = type54.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type54, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode88 = null;
        java.util.List list89 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value90 = simpleVerifier87.naryOperation(abstractInsnNode88, list89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "long" + "'", str32, "long");
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lfloat;" + "'", str43, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str55, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "char" + "'", str69, "char");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 138 + "'", int71 == 138);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(CBFCF)C" + "'", str82, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str83, "(CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str85, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
    }

    @Test
    public void test05385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05385");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: ");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05386");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException8);
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.ternaryOperation(abstractInsnNode18, value19, value20, value21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.newValue(type33);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter17.merge(value28, value34);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode14, value35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException39.addSuppressed((java.lang.Throwable) analyzerException41);
        analyzerException36.addSuppressed((java.lang.Throwable) analyzerException39);
        analyzerException9.addSuppressed((java.lang.Throwable) analyzerException36);
        java.lang.Throwable[] throwableArray45 = analyzerException9.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException47 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Lvoid;: expected LLB;;, but found null", (java.lang.Throwable) analyzerException46);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(throwableArray45);
    }

    @Test
    public void test05387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05387");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type32, true);
        boolean boolean35 = type1.equals((java.lang.Object) type32);
        java.lang.String str36 = type32.getDescriptor();
        org.mockito.asm.Type type37 = type32.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 151);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) (byte) 100);
        java.lang.String str47 = type44.getClassName();
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type[] typeArray55 = new org.mockito.asm.Type[] { type40, type43, type44, type48, type51 };
        java.lang.String str56 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray55);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type57, false);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier61.newValue(type62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier61.newValue(type64);
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier38.newValue(type64);
        java.lang.String str70 = type64.toString();
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type64, list71, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value76 = simpleVerifier73.copyOperation(abstractInsnNode74, value75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str36, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "float" + "'", str47, "float");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "(CBFCF)B" + "'", str56, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "F" + "'", str70, "F");
    }

    @Test
    public void test05388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05388");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        java.lang.Object obj12 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.ternaryOperation(abstractInsnNode20, value21, value22, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter19.merge(value30, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.ternaryOperation(abstractInsnNode39, value40, value41, value42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter38.merge(value49, value55);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier18.merge(value37, value49);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter13.copyOperation(abstractInsnNode17, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj12, value58);
        java.lang.Class<?> wildcardClass60 = value58.getClass();
        java.lang.String str61 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier10.newValue(type62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type65 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier69 = new org.mockito.asm.tree.analysis.SimpleVerifier(type64, type65, true);
        java.lang.String str70 = type64.getDescriptor();
        int int71 = type64.getSort();
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier10.newValue(type64);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier10.newValue(type74);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        java.util.List list77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value78 = simpleVerifier10.naryOperation(abstractInsnNode76, list77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str61, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "I" + "'", str70, "I");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 5 + "'", int71 == 5);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertNotNull(value75);
    }

    @Test
    public void test05389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05389");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value4 = simpleVerifier0.newValue(type1);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        int int8 = type7.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str14 = type13.getDescriptor();
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter9.newValue(type13);
        org.mockito.asm.Type[] typeArray17 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray17);
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray17);
        java.lang.String str20 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray17);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier0.newValue(type6);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        boolean boolean27 = type22.equals((java.lang.Object) 177);
        java.lang.String str28 = type22.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException31);
        java.lang.Class<?> wildcardClass33 = analyzerException31.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        int int36 = type34.getOpcode(114);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type38, type41, type42, type46, type49 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray53);
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type34, typeArray53);
        boolean boolean56 = type22.equals((java.lang.Object) typeArray53);
        java.lang.String str57 = type22.getClassName();
        org.mockito.asm.tree.analysis.Value value58 = simpleVerifier0.newValue(type22);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getObjectType("(CBFCF)B");
        org.mockito.asm.Type type61 = type60.getElementType();
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier0.newValue(type61);
        java.lang.Class<?> wildcardClass63 = simpleVerifier0.getClass();
        java.lang.String str64 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass63);
        java.lang.String str65 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass63);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "I" + "'", str14, "I");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)I" + "'", str18, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)S" + "'", str19, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str20, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "F" + "'", str28, "F");
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 118 + "'", int36 == 118);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)B" + "'", str54, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str55, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str64, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str65, "org/mockito/asm/tree/analysis/SimpleVerifier");
    }

    @Test
    public void test05390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05390");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException5);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: LLB;;", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/tree/analysis/BasicValue;");
        java.lang.Throwable[] throwableArray10 = analyzerException9.getSuppressed();
        analyzerException3.addSuppressed((java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("Z", (java.lang.Throwable) analyzerException3);
        java.lang.String str13 = analyzerException3.toString();
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str13, "org.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
    }

    @Test
    public void test05391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05391");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: : expected 179, but found F: expected 2, but found .");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05392");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.SimpleVerifier");
        int int2 = type1.getSort();
        java.lang.String str3 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.mockito.asm.tree.analysis.SimpleVerifier" + "'", str3, "org.mockito.asm.tree.analysis.SimpleVerifier");
    }

    @Test
    public void test05393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05393");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lbyte;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) 151);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type[] typeArray21 = new org.mockito.asm.Type[] { type6, type9, type10, type14, type17 };
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray21);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type24, type32, list33, true);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type24, list36, false);
        boolean boolean39 = type2.equals((java.lang.Object) type5);
        java.lang.String str40 = type2.getClassName();
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list41, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type46, list47, true);
        java.lang.Class<?> wildcardClass50 = type45.getClass();
        java.lang.String str51 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass50);
        org.mockito.asm.Type type53 = type52.getElementType();
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type54, true);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) 151);
        java.lang.String str60 = type57.getClassName();
        int int62 = type57.getOpcode(138);
        int int63 = type57.getSize();
        boolean boolean65 = type57.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier56.newValue(type57);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value67 = simpleVerifier43.copyOperation(abstractInsnNode44, value66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)B" + "'", str22, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "void" + "'", str40, "void");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str51, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "char" + "'", str60, "char");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 138 + "'", int62 == 138);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test05394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05394");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)C");
        java.lang.String str2 = type1.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)C" + "'", str2, "org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)C");
    }

    @Test
    public void test05395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05395");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(167);
        org.mockito.asm.Type type4 = type1.getElementType();
        int int5 = type1.getSort();
        java.lang.String str6 = type1.getClassName();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        int int9 = type7.getOpcode(101);
        int int11 = type7.getOpcode(191);
        int int12 = type7.getSort();
        java.lang.Class<?> wildcardClass13 = type7.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException");
        int int17 = type16.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier19 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type16, false);
        java.lang.String str20 = type14.getDescriptor();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        java.lang.Object obj25 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.ternaryOperation(abstractInsnNode33, value34, value35, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter32.merge(value43, value49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter51 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode52 = null;
        org.mockito.asm.tree.analysis.Value value53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter51.ternaryOperation(abstractInsnNode52, value53, value54, value55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter57.copyOperation(abstractInsnNode58, value59);
        org.mockito.asm.Type type61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.newValue(type61);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter63.copyOperation(abstractInsnNode64, value65);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.newValue(type67);
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter51.merge(value62, value68);
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier31.merge(value50, value62);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter26.copyOperation(abstractInsnNode30, value70);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj25, value71);
        java.lang.Class<?> wildcardClass73 = value71.getClass();
        java.lang.String str74 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass73);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass73);
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type76, list77, false);
        java.util.List list80 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type14, type21, list80, false);
        java.util.List list83 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type14, list83, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode86 = null;
        java.util.List list87 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value88 = simpleVerifier85.naryOperation(abstractInsnNode86, list87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str6, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 101 + "'", int9 == 101);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 191 + "'", int11 == 191);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str20, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNull(value60);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str74, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
    }

    @Test
    public void test05396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05396");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        int int6 = type0.getSize();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type26, false);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier30.newValue(type31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean35 = type33.equals((java.lang.Object) (byte) 100);
        java.lang.String str36 = type33.getClassName();
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier30.newValue(type33);
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type33, list38, true);
        int int42 = type33.getOpcode(100);
        org.mockito.asm.Type[] typeArray44 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str45 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray44);
        java.lang.Class<?> wildcardClass46 = type33.getClass();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        int int49 = type47.getOpcode(203);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type47, false);
        org.mockito.asm.Type type52 = type47.getElementType();
        java.lang.String str53 = type52.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "float" + "'", str36, "float");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 102 + "'", int42 == 102);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "(CBFCF)F" + "'", str45, "(CBFCF)F");
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 207 + "'", int49 == 207);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "g/mockito/asm/Type" + "'", str53, "g/mockito/asm/Type");
    }

    @Test
    public void test05397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05397");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException6.addSuppressed((java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException6);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException10);
        boolean boolean12 = type0.equals((java.lang.Object) analyzerException11);
        java.lang.String str13 = type0.getDescriptor();
        java.lang.String str14 = type0.getClassName();
        java.lang.String str15 = type0.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
    }

    @Test
    public void test05398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05398");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, list10, true);
        org.mockito.asm.Type type13 = type9.getElementType();
        int int14 = type9.getSize();
        java.lang.String str15 = type9.getClassName();
        int int16 = type9.getSize();
        java.lang.Class<?> wildcardClass17 = type9.getClass();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str15, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test05399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05399");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getDimensions();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list9, true);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str14 = type13.getDescriptor();
        int int15 = type13.getSort();
        int int16 = type13.getDimensions();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str19 = type18.getDescriptor();
        int int20 = type18.getSort();
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type13, type18, list21, true);
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier11.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        boolean boolean36 = type31.equals((java.lang.Object) 177);
        int int37 = type31.getSize();
        java.lang.String str38 = type31.toString();
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter25.newValue(type31);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter25.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        int int45 = type43.getOpcode(101);
        java.lang.String str46 = type43.toString();
        int int47 = type43.getSize();
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter25.newValue(type43);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        boolean boolean61 = type56.equals((java.lang.Object) 177);
        int int62 = type56.getSize();
        java.lang.String str63 = type56.toString();
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter50.newValue(type56);
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter25.copyOperation(abstractInsnNode49, value64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) 151);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean80 = type78.equals((java.lang.Object) (byte) 100);
        java.lang.String str81 = type78.getClassName();
        org.mockito.asm.Type[] typeArray82 = new org.mockito.asm.Type[] { type67, type70, type71, type75, type78 };
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray82);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean86 = type84.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type66, type84, false);
        org.mockito.asm.Type type90 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.mockito.asm.tree.analysis.Value value91 = simpleVerifier88.newValue(type90);
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier11.merge(value65, value91);
        int int93 = value92.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lfloat;" + "'", str14, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lfloat;" + "'", str19, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "F" + "'", str38, "F");
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 101 + "'", int45 == 101);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "C" + "'", str46, "C");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "F" + "'", str63, "F");
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "float" + "'", str81, "float");
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)B" + "'", str83, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(type90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
    }

    @Test
    public void test05400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05400");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) (byte) 100);
        java.lang.String str12 = type9.getClassName();
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) (byte) 100);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type[] typeArray20 = new org.mockito.asm.Type[] { type5, type8, type9, type13, type16 };
        java.lang.String str21 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray20);
        java.lang.String str22 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type30, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier32.newValue(type34);
        int int37 = type34.getOpcode(81);
        org.mockito.asm.Type type38 = type34.getElementType();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int41 = type39.getOpcode(48);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type43, type46, type47, type51, type54 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type60, false);
        org.mockito.asm.Type type65 = null;
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier64.newValue(type65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.tree.analysis.Value value71 = simpleVerifier64.newValue(type67);
        int int72 = type67.getSize();
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type67, list73, true);
        int int76 = type39.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type39, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException81 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException82 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException81);
        java.lang.Class<?> wildcardClass83 = analyzerException81.getClass();
        org.mockito.asm.Type type84 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass83);
        org.mockito.asm.Type type85 = type84.getElementType();
        java.lang.String str86 = type85.getClassName();
        java.lang.String str87 = type85.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier89 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type85, false);
        org.mockito.asm.Type type91 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: LB;");
        int int93 = type91.getOpcode(15);
        org.mockito.asm.Type type94 = type91.getElementType();
        org.mockito.asm.tree.analysis.Value value95 = simpleVerifier89.newValue(type94);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode96 = null;
        java.util.List list97 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value98 = simpleVerifier89.naryOperation(abstractInsnNode96, list97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "float" + "'", str12, "float");
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "float" + "'", str19, "float");
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "(CBFCF)B" + "'", str21, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "(CBFCF)C" + "'", str22, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 85 + "'", int37 == 85);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 48 + "'", int41 == 48);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)B" + "'", str59, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str86, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str87, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 19 + "'", int93 == 19);
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertNotNull(value95);
    }

    @Test
    public void test05401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05401");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("B");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str4 = type3.getInternalName();
        java.lang.String str5 = type3.toString();
        java.util.List list6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list6, true);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str11 = type10.getClassName();
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type10, list12, true);
        java.lang.String str15 = type10.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "LB;" + "'", str4, "LB;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LLB;;" + "'", str5, "LLB;;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lhi!;" + "'", str15, "Lhi!;");
    }

    @Test
    public void test05402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05402");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str8 = type7.getDescriptor();
        int int9 = type7.getSort();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type7, list10, false);
        java.lang.String str13 = type7.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type7, false);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type[] typeArray36 = new org.mockito.asm.Type[] { type21, type24, type25, type29, type32 };
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray36);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException41);
        java.lang.Class<?> wildcardClass43 = analyzerException41.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.lang.String str45 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type46, true);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("byte");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        int int54 = type52.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier51.newValue(type52);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        boolean boolean61 = type56.equals((java.lang.Object) 177);
        java.lang.String str62 = type56.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException65);
        java.lang.Class<?> wildcardClass67 = analyzerException65.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        int int70 = type68.getOpcode(114);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type72 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) 151);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type76 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean78 = type76.equals((java.lang.Object) (byte) 100);
        java.lang.String str79 = type76.getClassName();
        org.mockito.asm.Type type80 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean82 = type80.equals((java.lang.Object) 151);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean85 = type83.equals((java.lang.Object) (byte) 100);
        java.lang.String str86 = type83.getClassName();
        org.mockito.asm.Type[] typeArray87 = new org.mockito.asm.Type[] { type72, type75, type76, type80, type83 };
        java.lang.String str88 = org.mockito.asm.Type.getMethodDescriptor(type71, typeArray87);
        java.lang.String str89 = org.mockito.asm.Type.getMethodDescriptor(type68, typeArray87);
        boolean boolean90 = type56.equals((java.lang.Object) typeArray87);
        java.lang.String str91 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray87);
        java.lang.String str92 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray87);
        int int93 = type50.getSize();
        int int94 = type50.getSort();
        org.mockito.asm.tree.analysis.Value value95 = simpleVerifier48.newValue(type50);
        boolean boolean96 = type7.equals((java.lang.Object) simpleVerifier48);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode97 = null;
        java.util.List list98 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value99 = simpleVerifier48.naryOperation(abstractInsnNode97, list98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lfloat;" + "'", str8, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "char" + "'", str19, "char");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)B" + "'", str37, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)C" + "'", str38, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str45, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 101 + "'", int54 == 101);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "F" + "'", str62, "F");
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 118 + "'", int70 == 118);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "float" + "'", str79, "float");
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "float" + "'", str86, "float");
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "(CBFCF)B" + "'", str88, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str89, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "(CBFCF)C" + "'", str91, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "(CBFCF)Lbyte;" + "'", str92, "(CBFCF)Lbyte;");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 10 + "'", int94 == 10);
        org.junit.Assert.assertNotNull(value95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test05403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05403");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        int int2 = type1.getSize();
        int int3 = type1.getSize();
        java.lang.String str4 = type1.toString();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 24);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.util.List list36 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type35, list36, true);
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type27, list39, false);
        boolean boolean42 = type5.equals((java.lang.Object) type8);
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, list43, true);
        java.lang.Class<?> wildcardClass46 = type8.getClass();
        java.lang.String str47 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lhi!;" + "'", str4, "Lhi!;");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "org/mockito/asm/Type" + "'", str47, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type48);
    }

    @Test
    public void test05404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05404");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        boolean boolean22 = type13.equals((java.lang.Object) '4');
        int int23 = type13.getSort();
        int int24 = type13.getSort();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type25 = type13.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test05405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05405");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        java.lang.Object obj12 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.ternaryOperation(abstractInsnNode20, value21, value22, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter19.merge(value30, value36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.ternaryOperation(abstractInsnNode39, value40, value41, value42);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter44 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter44.copyOperation(abstractInsnNode45, value46);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter44.newValue(type48);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter50 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.Value value52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter50.copyOperation(abstractInsnNode51, value52);
        org.mockito.asm.Type type54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter50.newValue(type54);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter38.merge(value49, value55);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier18.merge(value37, value49);
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter13.copyOperation(abstractInsnNode17, value57);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException59 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj12, value58);
        java.lang.Class<?> wildcardClass60 = value58.getClass();
        java.lang.String str61 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass60);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass60);
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier10.newValue(type62);
        java.lang.String str64 = type62.getDescriptor();
        java.lang.Class<?> wildcardClass65 = type62.getClass();
        java.lang.String str66 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass65);
        java.lang.String str67 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass65);
        java.lang.String str68 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass65);
        java.lang.String str69 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass65);
        java.lang.String str70 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass65);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass65);
        java.lang.String str72 = type71.getInternalName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNull(value47);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNull(value53);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str61, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str64, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org/mockito/asm/Type" + "'", str66, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org/mockito/asm/Type" + "'", str67, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "org/mockito/asm/Type" + "'", str68, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str69, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "org/mockito/asm/Type" + "'", str70, "org/mockito/asm/Type");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org/mockito/asm/Type" + "'", str72, "org/mockito/asm/Type");
    }

    @Test
    public void test05406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05406");
        java.lang.Throwable throwable3 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ", throwable3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: Z", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("g/mockito/asm/tree/analysis/AnalyzerException", (java.lang.Throwable) analyzerException4);
    }

    @Test
    public void test05407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05407");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.ternaryOperation(abstractInsnNode1, value2, value3, value4);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = basicInterpreter6.copyOperation(abstractInsnNode7, value8);
        org.mockito.asm.Type type10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.newValue(type10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter0.merge(value11, value17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str20 = type19.getDescriptor();
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter0.newValue(type19);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter23.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.ternaryOperation(abstractInsnNode32, value33, value34, value35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter31.merge(value42, value48);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter23.copyOperation(abstractInsnNode30, value49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter0.copyOperation(abstractInsnNode22, value49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException54);
        java.lang.Class<?> wildcardClass56 = analyzerException54.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        java.lang.String str58 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        java.lang.String str60 = type59.toString();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.newValue(type59);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        java.util.List list63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value64 = basicInterpreter0.naryOperation(abstractInsnNode62, list63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value9);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "C" + "'", str20, "C");
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str58, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str60, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(value61);
    }

    @Test
    public void test05408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05408");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value9, value10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter7.merge(value18, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier6.merge(value25, value37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.ternaryOperation(abstractInsnNode53, value54, value55, value56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.newValue(type62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter64 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter64.copyOperation(abstractInsnNode65, value66);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter64.newValue(type68);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter52.merge(value63, value69);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter71.ternaryOperation(abstractInsnNode72, value73, value74, value75);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter77.copyOperation(abstractInsnNode78, value79);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter77.newValue(type81);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter83 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter83.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.Type type87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter83.newValue(type87);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter71.merge(value82, value88);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier51.merge(value70, value82);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter46.copyOperation(abstractInsnNode50, value90);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter0.merge(value25, value90);
        int int93 = value25.getSize();
        int int94 = value25.getSize();
        java.lang.Class<?> wildcardClass95 = value25.getClass();
        java.lang.String str96 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass95);
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str96, "org/mockito/asm/tree/analysis/BasicValue");
    }

    @Test
    public void test05409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05409");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(167);
        org.mockito.asm.Type type4 = type1.getElementType();
        int int5 = type1.getSort();
        java.lang.String str6 = type1.getClassName();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        org.mockito.asm.Type type13 = type12.getElementType();
        java.lang.String str14 = type13.getClassName();
        java.lang.String str15 = type13.toString();
        java.lang.String str16 = type13.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type13, false);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.ternaryOperation(abstractInsnNode20, value21, value22, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter25.copyOperation(abstractInsnNode26, value27);
        org.mockito.asm.Type type29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.newValue(type29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter19.merge(value30, value36);
        int int38 = value30.getSize();
        int int39 = value30.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.ternaryOperation(abstractInsnNode42, value43, value44, value45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter53.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.newValue(type57);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter41.merge(value52, value58);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.ternaryOperation(abstractInsnNode61, value62, value63, value64);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter66.copyOperation(abstractInsnNode67, value68);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter66.newValue(type70);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter72.copyOperation(abstractInsnNode73, value74);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter72.newValue(type76);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter60.merge(value71, value77);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier40.merge(value59, value71);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier18.merge(value30, value79);
        int int81 = value79.getSize();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str6, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str14, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str15, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str16, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value28);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test05410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05410");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)Lrg.mockito.asm.tree.analysis.AnalyzerException: LLB;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test05411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05411");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getDimensions();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str7 = type6.getDescriptor();
        int int8 = type6.getSort();
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type6, list9, true);
        java.lang.String str12 = type1.getDescriptor();
        int int13 = type1.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException17 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException18 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException17);
        java.lang.Class<?> wildcardClass19 = analyzerException18.getClass();
        java.lang.String str20 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.ternaryOperation(abstractInsnNode47, value48, value49, value50);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter52.copyOperation(abstractInsnNode53, value54);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.newValue(type56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.newValue(type62);
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter46.merge(value57, value63);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier26.merge(value45, value57);
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter21.copyOperation(abstractInsnNode25, value65);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .", (java.lang.Object) wildcardClass19, value65);
        java.lang.String str68 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        java.lang.String str69 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass19);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        boolean boolean71 = type1.equals((java.lang.Object) type70);
        org.mockito.asm.Type type72 = null;
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type70, type72, list73, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value77 = simpleVerifier75.newOperation(abstractInsnNode76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lfloat;" + "'", str7, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lfloat;" + "'", str12, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str20, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str68, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str69, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test05412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05412");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.String str3 = type2.getInternalName();
        java.lang.Object obj4 = null;
        boolean boolean5 = type2.equals(obj4);
        org.mockito.asm.Type type6 = type2.getElementType();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type9 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 24);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 151);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) (byte) 100);
        java.lang.String str20 = type17.getClassName();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type[] typeArray28 = new org.mockito.asm.Type[] { type13, type16, type17, type21, type24 };
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray28);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException34);
        java.lang.Class<?> wildcardClass36 = analyzerException34.getClass();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        java.lang.String str38 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type39, list40, true);
        java.util.List list43 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type31, list43, false);
        boolean boolean46 = type9.equals((java.lang.Object) type12);
        int int47 = type12.getSize();
        java.util.List list48 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier50 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type12, list48, true);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType("J");
        org.mockito.asm.Type type53 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 193);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type67 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) (byte) 100);
        java.lang.String str70 = type67.getClassName();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 151);
        org.mockito.asm.Type type74 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean76 = type74.equals((java.lang.Object) (byte) 100);
        java.lang.String str77 = type74.getClassName();
        org.mockito.asm.Type[] typeArray78 = new org.mockito.asm.Type[] { type63, type66, type67, type71, type74 };
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type62, typeArray78);
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type58, typeArray78);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type57, typeArray78);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray78);
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray78);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier50.newValue(type52);
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type52, list85, false);
        int int89 = type2.getOpcode(175);
        int int90 = type2.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "i!" + "'", str3, "i!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "float" + "'", str20, "float");
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(CBFCF)B" + "'", str29, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str38, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "char" + "'", str61, "char");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(type74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "float" + "'", str77, "float");
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(CBFCF)B" + "'", str79, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(CBFCF)C" + "'", str80, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str81, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(CBFCF)S" + "'", str82, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)J" + "'", str83, "(CBFCF)J");
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 179 + "'", int89 == 179);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 10 + "'", int90 == 10);
    }

    @Test
    public void test05413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05413");
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type[] typeArray1 = org.mockito.asm.Type.getArgumentTypes("(LLhi!;;)Lfloat;");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05414");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier3 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type6, true);
        java.lang.String str11 = type6.getClassName();
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type6, list12, true);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str17 = type16.getDescriptor();
        java.lang.String str18 = type16.getInternalName();
        org.mockito.asm.tree.analysis.Value value19 = simpleVerifier14.newValue(type16);
        org.mockito.asm.tree.analysis.Value value20 = simpleVerifier3.newValue(type16);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int24 = type22.getOpcode(167);
        org.mockito.asm.Type type25 = type22.getElementType();
        int int26 = type22.getSort();
        java.lang.String str27 = type22.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier28.newValue(type30);
        int int33 = type30.getOpcode(136);
        int int34 = type30.getSize();
        java.lang.String str35 = type30.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type30, true);
        int int38 = type30.getSize();
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier3.newValue(type30);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value41 = simpleVerifier3.newOperation(abstractInsnNode40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "void" + "'", str11, "void");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LB;" + "'", str17, "LB;");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "B" + "'", str18, "B");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(value20);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 171 + "'", int24 == 171);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 10 + "'", int26 == 10);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str27, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 140 + "'", int33 == 140);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;" + "'", str35, "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(value39);
    }

    @Test
    public void test05415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05415");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.getClassName();
        int int24 = type0.getSort();
        int int26 = type0.getOpcode(148);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 151);
        java.lang.String str30 = type27.getClassName();
        int int31 = type27.getSize();
        int int33 = type27.getOpcode(148);
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type27, list34, true);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType("B");
        org.mockito.asm.Type type39 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list41 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type39, type40, list41, true);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.SHORT_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 193);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.getReturnType("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray69);
        java.lang.String str72 = org.mockito.asm.Type.getMethodDescriptor(type48, typeArray69);
        java.lang.String str73 = org.mockito.asm.Type.getMethodDescriptor(type44, typeArray69);
        java.lang.String str74 = org.mockito.asm.Type.getMethodDescriptor(type39, typeArray69);
        java.lang.String str75 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray69);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type38, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        java.util.List list79 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value80 = simpleVerifier77.naryOperation(abstractInsnNode78, list79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "byte" + "'", str23, "byte");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 148 + "'", int26 == 148);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "char" + "'", str30, "char");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 148 + "'", int33 == 148);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "char" + "'", str52, "char");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)C" + "'", str71, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str72, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "(CBFCF)S" + "'", str73, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "(CBFCF)J" + "'", str74, "(CBFCF)J");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "(CBFCF)B" + "'", str75, "(CBFCF)B");
    }

    @Test
    public void test05416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05416");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        java.lang.String str3 = type0.toString();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType("V");
        int int6 = type5.getSort();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type5, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        int int49 = value40.getSize();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getReturnType("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException53.addSuppressed((java.lang.Throwable) analyzerException55);
        java.lang.Class<?> wildcardClass57 = analyzerException55.getClass();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass57);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type58, false);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str64 = type63.getDescriptor();
        int int65 = type63.getSort();
        java.util.List list66 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type61, type63, list66, false);
        int int69 = type63.getSize();
        int int70 = type63.getSort();
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type63, type71, false);
        int int75 = type63.getOpcode(154);
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier60.newValue(type63);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier8.merge(value40, value76);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = simpleVerifier8.newOperation(abstractInsnNode78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "C" + "'", str3, "C");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lfloat;" + "'", str64, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 10 + "'", int65 == 10);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 10 + "'", int70 == 10);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 158 + "'", int75 == 158);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(value77);
    }

    @Test
    public void test05417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05417");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean77 = type75.equals((java.lang.Object) (byte) 100);
        java.lang.String str78 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier0.newValue(type75);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value81 = simpleVerifier0.newOperation(abstractInsnNode80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "float" + "'", str78, "float");
        org.junit.Assert.assertNotNull(value79);
    }

    @Test
    public void test05418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05418");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException2);
        java.lang.Class<?> wildcardClass4 = analyzerException2.getClass();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass4);
        int int7 = type5.getOpcode(114);
        java.lang.Class<?> wildcardClass8 = type5.getClass();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass8);
        java.lang.String str11 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        java.lang.String str12 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass8);
        java.lang.String str13 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 118 + "'", int7 == 118);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str11, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "org/mockito/asm/Type" + "'", str12, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str13, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test05419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05419");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B");
        java.lang.String str2 = type1.toString();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getReturnType("(CBFCF)Lbyte;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, true);
        java.lang.Object obj8 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.ternaryOperation(abstractInsnNode16, value17, value18, value19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.newValue(type25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter27.copyOperation(abstractInsnNode28, value29);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter15.merge(value26, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.ternaryOperation(abstractInsnNode35, value36, value37, value38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.newValue(type50);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter34.merge(value45, value51);
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier14.merge(value33, value45);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter9.copyOperation(abstractInsnNode13, value53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj8, value54);
        java.lang.Class<?> wildcardClass56 = value54.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getType("V");
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type57, type59, list60, true);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) 151);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier62.newValue(type63);
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier6.newValue(type63);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value70 = simpleVerifier6.newOperation(abstractInsnNode69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;" + "'", str2, "Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "char" + "'", str66, "char");
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(value68);
    }

    @Test
    public void test05420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05420");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        java.lang.String str15 = type12.getClassName();
        int int17 = type12.getOpcode(138);
        int int18 = type12.getSize();
        boolean boolean20 = type12.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier7.newValue(type12);
        int int23 = type12.getOpcode(0);
        int int25 = type12.getOpcode(0);
        int int26 = type12.getSort();
        int int27 = type12.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type12, false);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type31, type34, type35, type39, type42 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray46);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException52);
        java.lang.Class<?> wildcardClass54 = analyzerException52.getClass();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        java.lang.String str56 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass54);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass54);
        java.util.List list58 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier60 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type57, list58, true);
        java.util.List list61 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type49, list61, false);
        int int64 = type49.getSize();
        int int66 = type49.getOpcode(146);
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier29.newValue(type49);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        java.util.List list69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value70 = simpleVerifier29.naryOperation(abstractInsnNode68, list69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "char" + "'", str15, "char");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 138 + "'", int17 == 138);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)B" + "'", str47, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str56, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 150 + "'", int66 == 150);
        org.junit.Assert.assertNotNull(value67);
    }

    @Test
    public void test05421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05421");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        java.lang.String str2 = type1.getDescriptor();
        java.lang.String str3 = type1.getClassName();
        org.mockito.asm.Type type4 = type1.getElementType();
        java.lang.String str5 = type4.getDescriptor();
        int int7 = type4.getOpcode(106);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LCBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str2, "LCBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException" + "'", str3, "CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "B" + "'", str5, "B");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 106 + "'", int7 == 106);
    }

    @Test
    public void test05422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05422");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException3);
        java.lang.Class<?> wildcardClass5 = analyzerException3.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        boolean boolean10 = type8.equals((java.lang.Object) "Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
        java.lang.String str11 = type8.getClassName();
        java.lang.String str12 = type8.toString();
        java.util.List list13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type8, list13, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        java.util.List list17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value18 = simpleVerifier15.naryOperation(abstractInsnNode16, list17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str7, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str11, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str12, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test05423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05423");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lboolean;: expected Lorg/mockito/asm/tree/analysis/AnalyzerException;, but found Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        boolean boolean7 = type0.equals((java.lang.Object) type6);
        org.mockito.asm.Type[] typeArray9 = org.mockito.asm.Type.getArgumentTypes("CBFCF)LB");
        boolean boolean10 = type6.equals((java.lang.Object) typeArray9);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier15 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type12, list13, true);
        java.lang.Class<?> wildcardClass16 = simpleVerifier15.getClass();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass16);
        java.lang.String str18 = type17.getInternalName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type24 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) (byte) 100);
        java.lang.String str27 = type24.getClassName();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) (byte) 100);
        java.lang.String str34 = type31.getClassName();
        org.mockito.asm.Type[] typeArray35 = new org.mockito.asm.Type[] { type20, type23, type24, type28, type31 };
        java.lang.String str36 = org.mockito.asm.Type.getMethodDescriptor(type19, typeArray35);
        java.lang.String str37 = type19.toString();
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type17, type19, list38, true);
        org.mockito.asm.Type type41 = type17.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier43 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type17, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode51 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter53.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.ternaryOperation(abstractInsnNode58, value59, value60, value61);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter63.copyOperation(abstractInsnNode64, value65);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.newValue(type67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter57.merge(value68, value74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("float", (java.lang.Object) abstractInsnNode54, value75);
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter47.copyOperation(abstractInsnNode51, value75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("Lg/mockito/asm/tree/analysis/AnalyzerException;", (java.lang.Object) "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .", value77);
        int int79 = value77.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value80 = simpleVerifier43.copyOperation(abstractInsnNode44, value77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "float" + "'", str4, "float");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str18, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "float" + "'", str27, "float");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "float" + "'", str34, "float");
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "(CBFCF)B" + "'", str36, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "B" + "'", str37, "B");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test05424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05424");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("LCBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        java.lang.Throwable[] throwableArray2 = analyzerException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
    }

    @Test
    public void test05425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05425");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException9);
        java.lang.Class<?> wildcardClass11 = analyzerException9.getClass();
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass11);
        int int14 = type12.getOpcode(114);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) (byte) 100);
        java.lang.String str30 = type27.getClassName();
        org.mockito.asm.Type[] typeArray31 = new org.mockito.asm.Type[] { type16, type19, type20, type24, type27 };
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type15, typeArray31);
        java.lang.String str33 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray31);
        boolean boolean34 = type0.equals((java.lang.Object) typeArray31);
        java.lang.String str35 = type0.getClassName();
        java.lang.String str36 = type0.getDescriptor();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type38 = null;
        java.util.List list39 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier41 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type38, list39, false);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        java.lang.String str64 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException67);
        java.lang.Class<?> wildcardClass69 = analyzerException67.getClass();
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        java.lang.String str71 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass69);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass69);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type72, true);
        boolean boolean76 = type72.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier41.newValue(type72);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier41.newValue(type78);
        boolean boolean80 = type0.equals((java.lang.Object) type78);
        java.lang.String str81 = type0.getDescriptor();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getObjectType("int");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier85 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type83, false);
        java.lang.Class<?> wildcardClass86 = type83.getClass();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 118 + "'", int14 == 118);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "float" + "'", str30, "float");
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)B" + "'", str32, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "F" + "'", str36, "F");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "char" + "'", str45, "char");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "(CBFCF)C" + "'", str64, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str71, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "F" + "'", str81, "F");
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test05426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05426");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        int int2 = type0.getOpcode(101);
        int int4 = type0.getOpcode(191);
        int int5 = type0.getSort();
        java.lang.Class<?> wildcardClass6 = type0.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException");
        int int10 = type9.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type9, false);
        org.mockito.asm.Type type13 = type7.getElementType();
        java.lang.Class<?> wildcardClass14 = type13.getClass();
        java.lang.String str15 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass14);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 101 + "'", int2 == 101);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 191 + "'", int4 == 191);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org/mockito/asm/Type" + "'", str15, "org/mockito/asm/Type");
    }

    @Test
    public void test05427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05427");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int3 = type1.getOpcode(167);
        org.mockito.asm.Type type4 = type1.getElementType();
        int int5 = type1.getSort();
        java.lang.String str6 = type1.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value10 = simpleVerifier7.newValue(type9);
        int int12 = type9.getOpcode(136);
        int int13 = type9.getSize();
        java.lang.String str14 = type9.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type9, true);
        java.lang.Object obj17 = null;
        boolean boolean18 = type9.equals(obj17);
        int int19 = type9.getSort();
        java.lang.String str20 = type9.toString();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 171 + "'", int3 == 171);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str6, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 140 + "'", int12 == 140);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;" + "'", str14, "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;" + "'", str20, "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;");
    }

    @Test
    public void test05428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05428");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int3 = type1.getOpcode(8);
        int int5 = type1.getOpcode(163);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, list11, false);
        int int14 = type8.getSize();
        int int15 = type8.getSort();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier18 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type16, false);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int21 = type19.getOpcode(48);
        java.lang.String str22 = type19.getClassName();
        java.lang.String str23 = type19.getClassName();
        java.util.List list24 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type8, type19, list24, true);
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type8, list27, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int34 = type32.getOpcode(167);
        org.mockito.asm.Type type35 = type32.getElementType();
        int int36 = type32.getSort();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 24);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type45 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) (byte) 100);
        java.lang.String str48 = type45.getClassName();
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.Type[] typeArray56 = new org.mockito.asm.Type[] { type41, type44, type45, type49, type52 };
        java.lang.String str57 = org.mockito.asm.Type.getMethodDescriptor(type40, typeArray56);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException62);
        java.lang.Class<?> wildcardClass64 = analyzerException62.getClass();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.lang.String str66 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass64);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass64);
        java.util.List list68 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier70 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type67, list68, true);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type59, list71, false);
        boolean boolean74 = type37.equals((java.lang.Object) type40);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type40, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier77.newValue(type79);
        int int82 = type79.getOpcode(136);
        int int83 = type79.getSize();
        java.lang.String str84 = type79.getInternalName();
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type79, list85, false);
        org.mockito.asm.Type type89 = org.mockito.asm.Type.getReturnType("Z");
        java.lang.String str90 = type89.toString();
        java.lang.String str91 = type89.getClassName();
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier87.newValue(type89);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value93 = simpleVerifier29.unaryOperation(abstractInsnNode30, value92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 12 + "'", int3 == 12);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 167 + "'", int5 == 167);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 48 + "'", int21 == 48);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "boolean" + "'", str22, "boolean");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "boolean" + "'", str23, "boolean");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 171 + "'", int34 == 171);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "float" + "'", str48, "float");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "(CBFCF)B" + "'", str57, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str66, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 140 + "'", int82 == 140);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found ." + "'", str84, "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Z" + "'", str90, "Z");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "boolean" + "'", str91, "boolean");
        org.junit.Assert.assertNotNull(value92);
    }

    @Test
    public void test05429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05429");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        int int1 = type0.getSort();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 151);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) (byte) 100);
        java.lang.String str10 = type7.getClassName();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type[] typeArray18 = new org.mockito.asm.Type[] { type3, type6, type7, type11, type14 };
        java.lang.String str19 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type20, false);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier24.newValue(type25);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type28, type31, type32, type36, type39 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type45, false);
        java.lang.String str50 = type27.getClassName();
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier24.newValue(type27);
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.ternaryOperation(abstractInsnNode54, value55, value56, value57);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter59 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter59.copyOperation(abstractInsnNode60, value61);
        org.mockito.asm.Type type63 = null;
        org.mockito.asm.tree.analysis.Value value64 = basicInterpreter59.newValue(type63);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter65 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter65.copyOperation(abstractInsnNode66, value67);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter65.newValue(type69);
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter53.merge(value64, value70);
        org.mockito.asm.Type type72 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str73 = type72.getDescriptor();
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter53.newValue(type72);
        java.util.List list75 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier77 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type72, list75, true);
        boolean boolean78 = type27.equals((java.lang.Object) type52);
        java.util.List list79 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type52, list79, true);
        java.lang.Class<?> wildcardClass82 = type0.getClass();
        java.lang.String str83 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass82);
        java.lang.String str84 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass82);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 7 + "'", int1 == 7);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "float" + "'", str10, "float");
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "(CBFCF)B" + "'", str19, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)B" + "'", str44, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "byte" + "'", str50, "byte");
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "C" + "'", str73, "C");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org/mockito/asm/Type" + "'", str83, "org/mockito/asm/Type");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "org/mockito/asm/Type" + "'", str84, "org/mockito/asm/Type");
    }

    @Test
    public void test05430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05430");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value10 = simpleVerifier6.newValue(type7);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type13, true);
        java.lang.String str18 = type13.getClassName();
        java.util.List list19 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type11, type13, list19, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type13, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type13, true);
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type28 = type27.getElementType();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type31, type34, type35, type39, type42 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type48, false);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier52.newValue(type53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier52.newValue(type55);
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type55, list60, true);
        int int64 = type55.getOpcode(100);
        java.util.List list65 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier67 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type55, list65, false);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        int int69 = type68.getSize();
        java.lang.String str70 = type68.getClassName();
        int int71 = type68.getSize();
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier67.newValue(type68);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier25.newValue(type68);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getReturnType("()L(CBFCF)S;");
        int int76 = type75.getSort();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier25.newValue(type75);
        int int78 = type75.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "void" + "'", str18, "void");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)B" + "'", str47, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 102 + "'", int64 == 102);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "float" + "'", str70, "float");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 10 + "'", int76 == 10);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test05431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05431");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type43, false);
        java.lang.String str48 = type25.getClassName();
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier22.newValue(type25);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier22.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int54 = type52.getOpcode(48);
        java.lang.String str55 = type52.getClassName();
        java.lang.String str56 = type52.getClassName();
        int int58 = type52.getOpcode(119);
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier22.newValue(type52);
        java.lang.String str60 = type52.getDescriptor();
        int int61 = type52.getSize();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "byte" + "'", str48, "byte");
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 48 + "'", int54 == 48);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "boolean" + "'", str55, "boolean");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 119 + "'", int58 == 119);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Z" + "'", str60, "Z");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test05432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05432");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str3 = type2.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.Type type11 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type[] typeArray23 = new org.mockito.asm.Type[] { type8, type11, type12, type16, type19 };
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type7, typeArray23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type7, type25, false);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = simpleVerifier29.newValue(type30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value36 = simpleVerifier29.newValue(type32);
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type32, list37, true);
        java.lang.String str40 = type32.getClassName();
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier5.newValue(type32);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        java.util.List list43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value44 = simpleVerifier5.naryOperation(abstractInsnNode42, list43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "B" + "'", str3, "B");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)B" + "'", str24, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(value41);
    }

    @Test
    public void test05433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05433");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("LB;");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/Type", (java.lang.Object) basicInterpreter8, value27);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.SimpleVerifier", (java.lang.Throwable) analyzerException28);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        analyzerException4.addSuppressed((java.lang.Throwable) analyzerException30);
        java.lang.Throwable[] throwableArray32 = analyzerException4.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException33 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicInterpreter;", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException34 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;", (java.lang.Throwable) analyzerException4);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException37);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/BasicValue", (java.lang.Throwable) analyzerException41);
        analyzerException38.addSuppressed((java.lang.Throwable) analyzerException42);
        analyzerException34.addSuppressed((java.lang.Throwable) analyzerException42);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("L(CBFCF)[Lorg/mockito/asm/Type;;", (java.lang.Throwable) analyzerException42);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(throwableArray32);
    }

    @Test
    public void test05434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05434");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, true);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value9 = simpleVerifier5.newValue(type6);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.tree.analysis.Value value14 = simpleVerifier5.newValue(type10);
        int int15 = type10.getSize();
        int int16 = type10.getSize();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int19 = type18.getSort();
        org.mockito.asm.Type type21 = org.mockito.asm.Type.getType("I");
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type18, type21, list22, true);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getReturnType("(CBFCF)C");
        org.mockito.asm.Type type27 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list29 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type28, list29, true);
        java.lang.Class<?> wildcardClass32 = simpleVerifier31.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = type33.getInternalName();
        org.mockito.asm.Type type35 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type40 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) (byte) 100);
        java.lang.String str43 = type40.getClassName();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type[] typeArray51 = new org.mockito.asm.Type[] { type36, type39, type40, type44, type47 };
        java.lang.String str52 = org.mockito.asm.Type.getMethodDescriptor(type35, typeArray51);
        java.lang.String str53 = type35.toString();
        java.util.List list54 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier56 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type35, list54, true);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type57, true);
        java.util.List list60 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier62 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type33, list60, false);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.getObjectType("rg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.Type type66 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: char");
        org.mockito.asm.Type type67 = org.mockito.asm.Type.SHORT_TYPE;
        int int68 = type67.getSize();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str74 = type73.getDescriptor();
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter69.newValue(type73);
        org.mockito.asm.Type[] typeArray77 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str78 = org.mockito.asm.Type.getMethodDescriptor(type73, typeArray77);
        java.lang.String str79 = org.mockito.asm.Type.getMethodDescriptor(type67, typeArray77);
        java.lang.String str80 = org.mockito.asm.Type.getMethodDescriptor(type66, typeArray77);
        java.lang.String str81 = org.mockito.asm.Type.getMethodDescriptor(type64, typeArray77);
        java.lang.String str82 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray77);
        java.lang.String str83 = org.mockito.asm.Type.getMethodDescriptor(type18, typeArray77);
        java.util.List list84 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier86 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type18, list84, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode87 = null;
        java.util.List list88 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value89 = simpleVerifier86.naryOperation(abstractInsnNode87, list88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(value9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str34, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "(CBFCF)B" + "'", str52, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "B" + "'", str53, "B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "I" + "'", str74, "I");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "(CBFCF)I" + "'", str78, "(CBFCF)I");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "(CBFCF)S" + "'", str79, "(CBFCF)S");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;" + "'", str80, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "(CBFCF)Lrg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str81, "(CBFCF)Lrg.mockito.asm.tree.analysis.AnalyzerException: Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str82, "(CBFCF)Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str83, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
    }

    @Test
    public void test05435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05435");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        java.lang.String str4 = type1.toString();
        int int5 = type1.getSize();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray22);
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray22);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type type36 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean38 = type36.equals((java.lang.Object) 151);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) (byte) 100);
        java.lang.String str42 = type39.getClassName();
        org.mockito.asm.Type[] typeArray43 = new org.mockito.asm.Type[] { type28, type31, type32, type36, type39 };
        java.lang.String str44 = org.mockito.asm.Type.getMethodDescriptor(type27, typeArray43);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type45, false);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier49.newValue(type50);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        java.lang.String str55 = type52.getClassName();
        org.mockito.asm.tree.analysis.Value value56 = simpleVerifier49.newValue(type52);
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier26.newValue(type52);
        boolean boolean58 = type0.equals((java.lang.Object) value57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type60, true);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier64.newValue(type65);
        org.mockito.asm.Type type69 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type70 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type71 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type70, type71, true);
        java.lang.String str76 = type71.getClassName();
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type69, type71, list77, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type65, type71, true);
        java.lang.Class<?> wildcardClass82 = type65.getClass();
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass82);
        int int84 = type83.getSort();
        org.mockito.asm.Type type85 = org.mockito.asm.Type.VOID_TYPE;
        java.lang.String str86 = type85.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier88 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type85, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier90 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type83, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode91 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value92 = simpleVerifier90.newOperation(abstractInsnNode91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "C" + "'", str4, "C");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)I" + "'", str25, "(CBFCF)I");
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "float" + "'", str42, "float");
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "(CBFCF)B" + "'", str44, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "float" + "'", str55, "float");
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(value57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "void" + "'", str76, "void");
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "void" + "'", str86, "void");
    }

    @Test
    public void test05436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05436");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        int int3 = type1.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value4 = simpleVerifier0.newValue(type1);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter6 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode7 = null;
        org.mockito.asm.tree.analysis.Value value8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter6.ternaryOperation(abstractInsnNode7, value8, value9, value10);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter12.copyOperation(abstractInsnNode13, value14);
        org.mockito.asm.Type type16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.newValue(type16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter6.merge(value17, value23);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter25 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter25.ternaryOperation(abstractInsnNode26, value27, value28, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter31.copyOperation(abstractInsnNode32, value33);
        org.mockito.asm.Type type35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.newValue(type35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter25.merge(value36, value42);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier5.merge(value24, value36);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type64, false);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier68.newValue(type69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier68.newValue(type71);
        java.util.List list76 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type45, type71, list76, true);
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier5.newValue(type71);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier5.newValue(type80);
        boolean boolean83 = type80.equals((java.lang.Object) "I");
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier0.newValue(type80);
        int int85 = type80.getSort();
        java.lang.String str86 = type80.getDescriptor();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 101 + "'", int3 == 101);
        org.junit.Assert.assertNotNull(value4);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNotNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2 + "'", int85 == 2);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "C" + "'", str86, "C");
    }

    @Test
    public void test05437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05437");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        java.lang.String str13 = type10.getClassName();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type19 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) (byte) 100);
        java.lang.String str22 = type19.getClassName();
        org.mockito.asm.Type type23 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean25 = type23.equals((java.lang.Object) 151);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.Type[] typeArray30 = new org.mockito.asm.Type[] { type15, type18, type19, type23, type26 };
        java.lang.String str31 = org.mockito.asm.Type.getMethodDescriptor(type14, typeArray30);
        java.lang.String str32 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException36 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException35);
        java.lang.Class<?> wildcardClass37 = analyzerException35.getClass();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        java.lang.String str39 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass37);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass37);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type40, true);
        boolean boolean43 = type9.equals((java.lang.Object) type40);
        org.mockito.asm.tree.analysis.Value value44 = simpleVerifier7.newValue(type40);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getObjectType("float");
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type56 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean58 = type56.equals((java.lang.Object) (byte) 100);
        java.lang.String str59 = type56.getClassName();
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean65 = type63.equals((java.lang.Object) (byte) 100);
        java.lang.String str66 = type63.getClassName();
        org.mockito.asm.Type[] typeArray67 = new org.mockito.asm.Type[] { type52, type55, type56, type60, type63 };
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type51, typeArray67);
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray67);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException72);
        java.lang.Class<?> wildcardClass74 = analyzerException72.getClass();
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass74);
        java.lang.String str76 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass74);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass74);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type47, type77, true);
        boolean boolean80 = type46.equals((java.lang.Object) type77);
        int int82 = type46.getOpcode(88);
        int int83 = type46.getSize();
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier7.newValue(type46);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode85 = null;
        java.util.List list86 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value87 = simpleVerifier7.naryOperation(abstractInsnNode85, list86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "char" + "'", str13, "char");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "float" + "'", str22, "float");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "(CBFCF)B" + "'", str31, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "(CBFCF)C" + "'", str32, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str39, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "char" + "'", str50, "char");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "float" + "'", str59, "float");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "float" + "'", str66, "float");
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)B" + "'", str68, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)C" + "'", str69, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str76, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 92 + "'", int82 == 92);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(value84);
    }

    @Test
    public void test05438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05438");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str1 = type0.getClassName();
        int int3 = type0.getOpcode(115);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 151);
        java.lang.String str7 = type4.getClassName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type4, typeArray24);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        java.lang.Class<?> wildcardClass31 = analyzerException29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type34, true);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier36.newValue(type38);
        int int41 = type38.getOpcode(81);
        org.mockito.asm.Type type42 = type38.getElementType();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int45 = type43.getOpcode(48);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) (byte) 100);
        java.lang.String str54 = type51.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type[] typeArray62 = new org.mockito.asm.Type[] { type47, type50, type51, type55, type58 };
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray62);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type64, false);
        org.mockito.asm.Type type69 = null;
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier68.newValue(type69);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier68.newValue(type71);
        int int76 = type71.getSize();
        java.util.List list77 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type71, list77, true);
        int int80 = type43.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier82 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type43, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException85 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException86 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException85);
        java.lang.Class<?> wildcardClass87 = analyzerException85.getClass();
        org.mockito.asm.Type type88 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass87);
        org.mockito.asm.Type type89 = type88.getElementType();
        java.lang.String str90 = type89.getClassName();
        java.lang.String str91 = type89.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier93 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type89, false);
        boolean boolean94 = type0.equals((java.lang.Object) simpleVerifier93);
        org.mockito.asm.Type type95 = null;
        java.util.List list96 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier98 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type95, list96, false);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "byte" + "'", str1, "byte");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 115 + "'", int3 == 115);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "char" + "'", str7, "char");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)C" + "'", str26, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str33, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 85 + "'", int41 == 85);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 48 + "'", int45 == 48);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "float" + "'", str54, "float");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)B" + "'", str63, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(type88);
        org.junit.Assert.assertNotNull(type89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str90, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str91, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test05439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05439");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        java.lang.Class<?> wildcardClass40 = value19.getClass();
        java.lang.String str41 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass40);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass40);
        int int44 = type42.getOpcode(109);
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str41, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 113 + "'", int44 == 113);
    }

    @Test
    public void test05440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05440");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)LCBFCF)Lfloat;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException11 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException9.addSuppressed((java.lang.Throwable) analyzerException11);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException9);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException14 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException13);
        boolean boolean15 = type3.equals((java.lang.Object) analyzerException14);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException14);
        analyzerException1.addSuppressed((java.lang.Throwable) analyzerException14);
        java.lang.Class<?> wildcardClass18 = analyzerException1.getClass();
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test05441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05441");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        java.lang.String str15 = type12.getClassName();
        int int17 = type12.getOpcode(138);
        int int18 = type12.getSize();
        boolean boolean20 = type12.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier7.newValue(type12);
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type12, list22, true);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) 151);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) 151);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type34 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) (byte) 100);
        java.lang.String str37 = type34.getClassName();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type[] typeArray45 = new org.mockito.asm.Type[] { type30, type33, type34, type38, type41 };
        java.lang.String str46 = org.mockito.asm.Type.getMethodDescriptor(type29, typeArray45);
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray45);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException50);
        java.lang.Class<?> wildcardClass52 = analyzerException50.getClass();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        java.lang.String str54 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier57 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type55, true);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier57.newValue(type59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str63 = type62.getInternalName();
        java.lang.String str64 = type62.toString();
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier57.newValue(type62);
        int int67 = type62.getOpcode(125);
        org.mockito.asm.tree.analysis.Value value68 = simpleVerifier24.newValue(type62);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException73 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException73.addSuppressed((java.lang.Throwable) analyzerException75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException77 = new org.mockito.asm.tree.analysis.AnalyzerException("F", (java.lang.Throwable) analyzerException75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException78 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!", (java.lang.Throwable) analyzerException75);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException79 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean", (java.lang.Throwable) analyzerException75);
        java.lang.Class<?> wildcardClass80 = analyzerException75.getClass();
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass80);
        java.lang.String str82 = type81.getInternalName();
        org.mockito.asm.tree.analysis.Value value83 = simpleVerifier24.newValue(type81);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.Type type85 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type87 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str88 = type87.getDescriptor();
        int int89 = type87.getSort();
        java.util.List list90 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type85, type87, list90, false);
        org.mockito.asm.Type type93 = null;
        org.mockito.asm.tree.analysis.Value value94 = simpleVerifier92.newValue(type93);
        org.mockito.asm.Type type96 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected F, but found F");
        org.mockito.asm.tree.analysis.Value value97 = simpleVerifier92.newValue(type96);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value98 = simpleVerifier24.copyOperation(abstractInsnNode84, value97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "char" + "'", str15, "char");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 138 + "'", int17 == 138);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "char" + "'", str28, "char");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "(CBFCF)B" + "'", str46, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)C" + "'", str47, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str54, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "LB;" + "'", str63, "LB;");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "LLB;;" + "'", str64, "LLB;;");
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 129 + "'", int67 == 129);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str82, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(value83);
        org.junit.Assert.assertNotNull(type85);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Lfloat;" + "'", str88, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 10 + "'", int89 == 10);
        org.junit.Assert.assertNotNull(value94);
        org.junit.Assert.assertNotNull(type96);
        org.junit.Assert.assertNotNull(value97);
    }

    @Test
    public void test05442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05442");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier28.newValue(type29);
        org.mockito.asm.Type type31 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.tree.analysis.Value value32 = simpleVerifier28.newValue(type31);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.Value value34 = simpleVerifier28.newValue(type33);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException35 = new org.mockito.asm.tree.analysis.AnalyzerException("org/mockito/asm/tree/analysis/AnalyzerException", (java.lang.Object) analyzerException2, value34);
        java.lang.Throwable[] throwableArray36 = analyzerException35.getSuppressed();
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(throwableArray36);
    }

    @Test
    public void test05443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05443");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/tree/analysis/BasicInterpreter;");
    }

    @Test
    public void test05444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05444");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/BasicVerifier");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException4);
        java.lang.Class<?> wildcardClass6 = analyzerException4.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str10 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        java.lang.String str11 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type12, false);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getReturnType("Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier14.newValue(type16);
        java.lang.Class<?> wildcardClass18 = type16.getClass();
        java.lang.String str19 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass18);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str10, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str11, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str19, "Lorg/mockito/asm/Type;");
    }

    @Test
    public void test05445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05445");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type6, true);
        java.lang.String str11 = type6.getClassName();
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type6, list12, true);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str17 = type16.getDescriptor();
        java.lang.String str18 = type16.getInternalName();
        org.mockito.asm.tree.analysis.Value value19 = simpleVerifier14.newValue(type16);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) 151);
        java.lang.String str23 = type20.getClassName();
        int int25 = type20.getOpcode(138);
        int int26 = type20.getSize();
        org.mockito.asm.tree.analysis.Value value27 = simpleVerifier14.newValue(type20);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type29 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type28, type29, true);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier33.newValue(type34);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        java.lang.String str41 = type38.getClassName();
        int int43 = type38.getOpcode(138);
        int int44 = type38.getSize();
        boolean boolean46 = type38.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value47 = simpleVerifier33.newValue(type38);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier0.merge(value27, value47);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) 151);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type58 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) (byte) 100);
        java.lang.String str61 = type58.getClassName();
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean67 = type65.equals((java.lang.Object) (byte) 100);
        java.lang.String str68 = type65.getClassName();
        org.mockito.asm.Type[] typeArray69 = new org.mockito.asm.Type[] { type54, type57, type58, type62, type65 };
        java.lang.String str70 = org.mockito.asm.Type.getMethodDescriptor(type53, typeArray69);
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException74);
        java.lang.Class<?> wildcardClass76 = analyzerException74.getClass();
        org.mockito.asm.Type type77 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass76);
        java.lang.String str78 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass76);
        org.mockito.asm.Type type79 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass76);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type79, true);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier81.newValue(type83);
        int int86 = type83.getOpcode(81);
        org.mockito.asm.Type type87 = type83.getElementType();
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier0.newValue(type83);
        java.lang.String str89 = type83.getClassName();
        java.lang.String str90 = type83.getClassName();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "void" + "'", str11, "void");
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "LB;" + "'", str17, "LB;");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "B" + "'", str18, "B");
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "char" + "'", str23, "char");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 138 + "'", int25 == 138);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "char" + "'", str41, "char");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 138 + "'", int43 == 138);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "char" + "'", str52, "char");
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "float" + "'", str61, "float");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "float" + "'", str68, "float");
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "(CBFCF)B" + "'", str70, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)C" + "'", str71, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str78, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 85 + "'", int86 == 85);
        org.junit.Assert.assertNotNull(type87);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "LB;" + "'", str89, "LB;");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "LB;" + "'", str90, "LB;");
    }

    @Test
    public void test05446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05446");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, true);
        java.lang.String str7 = type2.getClassName();
        java.util.List list8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str13 = type12.getDescriptor();
        java.lang.String str14 = type12.getInternalName();
        org.mockito.asm.tree.analysis.Value value15 = simpleVerifier10.newValue(type12);
        org.mockito.asm.Type type16 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean18 = type16.equals((java.lang.Object) 151);
        java.lang.String str19 = type16.getClassName();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) 151);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type25 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean27 = type25.equals((java.lang.Object) (byte) 100);
        java.lang.String str28 = type25.getClassName();
        org.mockito.asm.Type type29 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) 151);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean34 = type32.equals((java.lang.Object) (byte) 100);
        java.lang.String str35 = type32.getClassName();
        org.mockito.asm.Type[] typeArray36 = new org.mockito.asm.Type[] { type21, type24, type25, type29, type32 };
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray36);
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type16, typeArray36);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException41 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException42 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException41);
        java.lang.Class<?> wildcardClass43 = analyzerException41.getClass();
        org.mockito.asm.Type type44 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        java.lang.String str45 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass43);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass43);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier48 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type46, true);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier48.newValue(type50);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter53.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode57 = null;
        org.mockito.asm.tree.analysis.Value value58 = null;
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter53.copyOperation(abstractInsnNode57, value58);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter60.copyOperation(abstractInsnNode61, value62);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.newValue(type64);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("double", (java.lang.Object) basicInterpreter53, value65);
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier10.merge(value51, value65);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = simpleVerifier10.newOperation(abstractInsnNode68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "void" + "'", str7, "void");
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "LB;" + "'", str13, "LB;");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "B" + "'", str14, "B");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "char" + "'", str19, "char");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "float" + "'", str28, "float");
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "float" + "'", str35, "float");
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)B" + "'", str37, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)C" + "'", str38, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str45, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNull(value59);
        org.junit.Assert.assertNull(value63);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(value67);
    }

    @Test
    public void test05447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05447");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        java.lang.String str50 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter52.copyOperation(abstractInsnNode53, value54);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str57 = type56.getDescriptor();
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter52.newValue(type56);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter60 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode61 = null;
        org.mockito.asm.tree.analysis.Value value62 = null;
        org.mockito.asm.tree.analysis.Value value63 = null;
        org.mockito.asm.tree.analysis.Value value64 = null;
        org.mockito.asm.tree.analysis.Value value65 = basicInterpreter60.ternaryOperation(abstractInsnNode61, value62, value63, value64);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter66 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        org.mockito.asm.tree.analysis.Value value68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter66.copyOperation(abstractInsnNode67, value68);
        org.mockito.asm.Type type70 = null;
        org.mockito.asm.tree.analysis.Value value71 = basicInterpreter66.newValue(type70);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter72 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter72.copyOperation(abstractInsnNode73, value74);
        org.mockito.asm.Type type76 = null;
        org.mockito.asm.tree.analysis.Value value77 = basicInterpreter72.newValue(type76);
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter60.merge(value71, value77);
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter52.copyOperation(abstractInsnNode59, value71);
        boolean boolean80 = type51.equals((java.lang.Object) basicInterpreter52);
        int int82 = type51.getOpcode(99);
        java.lang.String str83 = type51.getClassName();
        int int85 = type51.getOpcode(33);
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str50, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNull(value55);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "I" + "'", str57, "I");
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNull(value65);
        org.junit.Assert.assertNull(value69);
        org.junit.Assert.assertNotNull(value71);
        org.junit.Assert.assertNull(value75);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value78);
        org.junit.Assert.assertNotNull(value79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 103 + "'", int82 == 103);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str83, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 37 + "'", int85 == 37);
    }

    @Test
    public void test05448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05448");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.toString();
        int int5 = type0.getSize();
        java.lang.Object obj7 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter8.copyOperation(abstractInsnNode9, value10);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.ternaryOperation(abstractInsnNode15, value16, value17, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter14.merge(value25, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.ternaryOperation(abstractInsnNode34, value35, value36, value37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.newValue(type49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter33.merge(value44, value50);
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier13.merge(value32, value44);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter8.copyOperation(abstractInsnNode12, value52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj7, value53);
        java.lang.Class<?> wildcardClass55 = value53.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass55);
        java.lang.String str57 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.util.List list59 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type58, list59, true);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) 151);
        java.lang.String str65 = type62.getClassName();
        int int67 = type62.getOpcode(138);
        int int68 = type62.getSize();
        boolean boolean70 = type62.equals((java.lang.Object) 154);
        java.lang.String str71 = type62.getDescriptor();
        org.mockito.asm.Type type72 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean74 = type72.equals((java.lang.Object) (byte) 100);
        java.lang.String str75 = type72.getClassName();
        java.lang.String str76 = type72.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type62, type72, true);
        java.lang.String str79 = type72.getDescriptor();
        int int81 = type72.getOpcode(151);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier61.newValue(type72);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode83 = null;
        java.util.List list84 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value85 = simpleVerifier61.naryOperation(abstractInsnNode83, list84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "F" + "'", str4, "F");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str56, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str57, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "char" + "'", str65, "char");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 138 + "'", int67 == 138);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "C" + "'", str71, "C");
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "float" + "'", str75, "float");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "float" + "'", str76, "float");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "F" + "'", str79, "F");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 153 + "'", int81 == 153);
        org.junit.Assert.assertNotNull(value82);
    }

    @Test
    public void test05449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05449");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list3 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier5 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type2, list3, true);
        java.lang.Class<?> wildcardClass6 = simpleVerifier5.getClass();
        org.mockito.asm.Type type7 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter9.ternaryOperation(abstractInsnNode10, value11, value12, value13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.ternaryOperation(abstractInsnNode18, value19, value20, value21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.Type type33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.newValue(type33);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter17.merge(value28, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.ternaryOperation(abstractInsnNode37, value38, value39, value40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter48 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode49 = null;
        org.mockito.asm.tree.analysis.Value value50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter48.copyOperation(abstractInsnNode49, value50);
        org.mockito.asm.Type type52 = null;
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter48.newValue(type52);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter36.merge(value47, value53);
        org.mockito.asm.tree.analysis.Value value55 = simpleVerifier16.merge(value35, value47);
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter9.copyOperation(abstractInsnNode15, value47);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Object) wildcardClass6, value47);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        java.lang.String str59 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass6);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass6);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNull(value14);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNull(value51);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNotNull(value56);
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Lorg/mockito/asm/tree/analysis/SimpleVerifier;" + "'", str59, "Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.junit.Assert.assertNotNull(type60);
    }

    @Test
    public void test05450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05450");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = org.mockito.asm.Type.BOOLEAN_TYPE;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) 151);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean36 = type34.equals((java.lang.Object) 151);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) (byte) 100);
        java.lang.String str40 = type37.getClassName();
        org.mockito.asm.Type[] typeArray41 = new org.mockito.asm.Type[] { type26, type29, type30, type34, type37 };
        java.lang.String str42 = org.mockito.asm.Type.getMethodDescriptor(type25, typeArray41);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier47 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type43, false);
        org.mockito.asm.Type type48 = null;
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier47.newValue(type48);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type51, type54, type55, type59, type62 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type68, false);
        java.lang.String str73 = type50.getClassName();
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier47.newValue(type50);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type23, type50, true);
        java.lang.String str77 = type23.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int78 = type23.getDimensions();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "float" + "'", str40, "float");
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(CBFCF)B" + "'", str42, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)B" + "'", str67, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "byte" + "'", str73, "byte");
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Z" + "'", str77, "Z");
    }

    @Test
    public void test05451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05451");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException9 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException8);
        java.lang.Class<?> wildcardClass10 = analyzerException8.getClass();
        org.mockito.asm.Type type11 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass10);
        org.mockito.asm.Type type12 = type11.getElementType();
        java.lang.String str13 = type12.getClassName();
        java.lang.String str14 = type12.getDescriptor();
        java.util.List list15 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier17 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type12, list15, false);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str20 = type19.getInternalName();
        int int21 = type19.getSort();
        int int23 = type19.getOpcode(82);
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier17.newValue(type19);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str33 = type32.getDescriptor();
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter28.newValue(type32);
        org.mockito.asm.Type[] typeArray36 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str37 = org.mockito.asm.Type.getMethodDescriptor(type32, typeArray36);
        java.lang.Class<?> wildcardClass38 = typeArray36.getClass();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass38);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException43 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException43);
        java.lang.Class<?> wildcardClass45 = analyzerException43.getClass();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        java.lang.String str47 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass45);
        java.lang.String str48 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass45);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type type58 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean60 = type58.equals((java.lang.Object) 151);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) (byte) 100);
        java.lang.String str64 = type61.getClassName();
        org.mockito.asm.Type[] typeArray65 = new org.mockito.asm.Type[] { type50, type53, type54, type58, type61 };
        java.lang.String str66 = org.mockito.asm.Type.getMethodDescriptor(type49, typeArray65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean69 = type67.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type49, type67, false);
        org.mockito.asm.Type type72 = null;
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier71.newValue(type72);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException74 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str48, value73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type39, value73);
        int int76 = type39.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier78 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type39, true);
        org.mockito.asm.Type type80 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        int int82 = type80.getOpcode(113);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean85 = type83.equals((java.lang.Object) (byte) 100);
        java.lang.String str86 = type83.getClassName();
        boolean boolean88 = type83.equals((java.lang.Object) 177);
        java.util.List list89 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier91 = new org.mockito.asm.tree.analysis.SimpleVerifier(type80, type83, list89, false);
        org.mockito.asm.tree.analysis.Value value92 = simpleVerifier78.newValue(type80);
        org.mockito.asm.Type type94 = org.mockito.asm.Type.getReturnType("Lvoid;");
        int int95 = type94.getSort();
        org.mockito.asm.tree.analysis.Value value96 = simpleVerifier78.newValue(type94);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value97 = simpleVerifier17.unaryOperation(abstractInsnNode25, value96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str13, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str14, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "LB;" + "'", str20, "LB;");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 86 + "'", int23 == 86);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "I" + "'", str33, "I");
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "(CBFCF)I" + "'", str37, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str47, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str48, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "(CBFCF)B" + "'", str66, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(type80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 113 + "'", int82 == 113);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "float" + "'", str86, "float");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(type94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 10 + "'", int95 == 10);
        org.junit.Assert.assertNotNull(value96);
    }

    @Test
    public void test05452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05452");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("Lhi!;");
        org.mockito.asm.Type type2 = type1.getElementType();
        java.lang.String str3 = type2.getInternalName();
        java.lang.Object obj4 = null;
        boolean boolean5 = type2.equals(obj4);
        org.mockito.asm.Type type6 = type2.getElementType();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getType("org.mockito.asm.tree.analysis.AnalyzerException: ()Lorg/mockito/asm/tree/analysis/SimpleVerifier;");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, true);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException16 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException15);
        java.lang.Class<?> wildcardClass17 = analyzerException15.getClass();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        java.lang.String str19 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass17);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass17);
        java.util.List list21 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type12, type20, list21, true);
        org.mockito.asm.Type type24 = type20.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str31 = type30.getDescriptor();
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.Value value33 = simpleVerifier25.newValue(type30);
        boolean boolean34 = type24.equals((java.lang.Object) type30);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type36 = null;
        java.util.List list37 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type36, list37, false);
        int int40 = type35.getSize();
        boolean boolean41 = type30.equals((java.lang.Object) int40);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException44);
        java.lang.Class<?> wildcardClass46 = analyzerException44.getClass();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        int int49 = type47.getOpcode(114);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type51, type54, type55, type59, type62 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray66);
        java.lang.String str68 = org.mockito.asm.Type.getMethodDescriptor(type47, typeArray66);
        java.util.List list69 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type47, list69, false);
        java.lang.String str72 = type47.getClassName();
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier10.newValue(type47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode74 = null;
        java.util.List list75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value76 = simpleVerifier10.naryOperation(abstractInsnNode74, list75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "i!" + "'", str3, "i!");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str19, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "I" + "'", str31, "I");
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 118 + "'", int49 == 118);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)B" + "'", str67, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str68, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str72, "org.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertNotNull(value73);
    }

    @Test
    public void test05453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05453");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str5 = type4.getDescriptor();
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getReturnType("Lboolean;");
        int int9 = type8.getDimensions();
        int int10 = type8.getDimensions();
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter0.newValue(type8);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value13 = basicInterpreter0.newOperation(abstractInsnNode12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "I" + "'", str5, "I");
        org.junit.Assert.assertNotNull(value6);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(value11);
    }

    @Test
    public void test05454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05454");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int6 = type4.getOpcode(48);
        java.lang.String str7 = type4.getClassName();
        java.lang.String str8 = type4.getClassName();
        java.lang.String str9 = type4.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) 151);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type15 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) (byte) 100);
        java.lang.String str18 = type15.getClassName();
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) (byte) 100);
        java.lang.String str25 = type22.getClassName();
        org.mockito.asm.Type[] typeArray26 = new org.mockito.asm.Type[] { type11, type14, type15, type19, type22 };
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type10, typeArray26);
        org.mockito.asm.Type type28 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type28, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type10, true);
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type37 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean39 = type37.equals((java.lang.Object) 151);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) (byte) 100);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean47 = type45.equals((java.lang.Object) 151);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type[] typeArray52 = new org.mockito.asm.Type[] { type37, type40, type41, type45, type48 };
        java.lang.String str53 = org.mockito.asm.Type.getMethodDescriptor(type36, typeArray52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type54, false);
        int int59 = type54.getSort();
        java.lang.String str60 = type54.getDescriptor();
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter0.newValue(type54);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier63.newValue(type65);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getObjectType("hi!");
        org.mockito.asm.Type type69 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean71 = type69.equals((java.lang.Object) 151);
        java.lang.String str72 = type69.getClassName();
        int int74 = type69.getOpcode(138);
        int int75 = type69.getSize();
        boolean boolean77 = type69.equals((java.lang.Object) 154);
        java.lang.String str78 = type69.getDescriptor();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type68, type69, true);
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier63.newValue(type69);
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter0.copyOperation(abstractInsnNode62, value81);
        int int83 = value82.getSize();
        int int84 = value82.getSize();
        int int85 = value82.getSize();
        java.lang.Class<?> wildcardClass86 = value82.getClass();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "boolean" + "'", str7, "boolean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "boolean" + "'", str9, "boolean");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "float" + "'", str18, "float");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "float" + "'", str25, "float");
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)B" + "'", str27, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "float" + "'", str44, "float");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "(CBFCF)B" + "'", str53, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "C" + "'", str60, "C");
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "char" + "'", str72, "char");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 138 + "'", int74 == 138);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "C" + "'", str78, "C");
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test05455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05455");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: char;");
    }

    @Test
    public void test05456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05456");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) (byte) 100);
        java.lang.String str3 = type0.getClassName();
        boolean boolean5 = type0.equals((java.lang.Object) 177);
        java.lang.String str6 = type0.toString();
        int int7 = type0.getSize();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getType("(CBFCF)Lbyte;");
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type9, list10, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType("Z");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.ternaryOperation(abstractInsnNode17, value18, value19, value20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter16.merge(value27, value33);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str36 = type35.getDescriptor();
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter16.newValue(type35);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value41 = simpleVerifier38.newValue(type40);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type44, type47, type48, type52, type55 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray59);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier65 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type61, false);
        org.mockito.asm.Type type66 = null;
        org.mockito.asm.tree.analysis.Value value67 = simpleVerifier65.newValue(type66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) (byte) 100);
        java.lang.String str71 = type68.getClassName();
        org.mockito.asm.tree.analysis.Value value72 = simpleVerifier65.newValue(type68);
        org.mockito.asm.tree.analysis.Value value73 = simpleVerifier42.newValue(type68);
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter16.merge(value41, value73);
        int int75 = value41.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: org.mockito.asm.tree.analysis.AnalyzerException: hi!", (java.lang.Object) type15, value41);
        java.lang.String str77 = type15.toString();
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier12.newValue(type15);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode79 = null;
        java.util.List list80 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value81 = simpleVerifier12.naryOperation(abstractInsnNode79, list80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "float" + "'", str3, "float");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "F" + "'", str6, "F");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNotNull(value34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "C" + "'", str36, "C");
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(CBFCF)B" + "'", str60, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(value67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "float" + "'", str71, "float");
        org.junit.Assert.assertNotNull(value72);
        org.junit.Assert.assertNotNull(value73);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Z" + "'", str77, "Z");
        org.junit.Assert.assertNotNull(value78);
    }

    @Test
    public void test05457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05457");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str6 = type5.getDescriptor();
        int int7 = type5.getSort();
        int int8 = type5.getSize();
        java.lang.String str9 = type5.getClassName();
        int int10 = type5.getSize();
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type5, list11, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getDescriptor();
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter16.newValue(type20);
        org.mockito.asm.Type[] typeArray24 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type20, typeArray24);
        java.lang.Class<?> wildcardClass26 = typeArray24.getClass();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException32 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException31);
        java.lang.Class<?> wildcardClass33 = analyzerException31.getClass();
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass33);
        java.lang.String str35 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        java.lang.String str36 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass33);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type38 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean40 = type38.equals((java.lang.Object) 151);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean51 = type49.equals((java.lang.Object) (byte) 100);
        java.lang.String str52 = type49.getClassName();
        org.mockito.asm.Type[] typeArray53 = new org.mockito.asm.Type[] { type38, type41, type42, type46, type49 };
        java.lang.String str54 = org.mockito.asm.Type.getMethodDescriptor(type37, typeArray53);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type55, false);
        org.mockito.asm.Type type60 = null;
        org.mockito.asm.tree.analysis.Value value61 = simpleVerifier59.newValue(type60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str36, value61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type27, value61);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) 151);
        java.lang.String str67 = type64.getClassName();
        int int68 = type64.getSize();
        int int70 = type64.getOpcode(148);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type64, false);
        org.mockito.asm.Type type73 = org.mockito.asm.Type.CHAR_TYPE;
        java.lang.String str74 = type73.getDescriptor();
        java.lang.String str75 = type73.getClassName();
        int int76 = type73.getSize();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier72.newValue(type73);
        org.mockito.asm.Type type78 = null;
        org.mockito.asm.tree.analysis.Value value79 = simpleVerifier72.newValue(type78);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value80 = simpleVerifier13.copyOperation(abstractInsnNode14, value79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLB;;" + "'", str2, "LLB;;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Lfloat;" + "'", str6, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "I" + "'", str21, "I");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)I" + "'", str25, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str35, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str36, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "float" + "'", str52, "float");
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "(CBFCF)B" + "'", str54, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "char" + "'", str67, "char");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 148 + "'", int70 == 148);
        org.junit.Assert.assertNotNull(type73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "C" + "'", str74, "C");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "char" + "'", str75, "char");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(value79);
    }

    @Test
    public void test05458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05458");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("Ldouble;");
        int int2 = type1.getDimensions();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test05459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05459");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("Lorg/mockito/asm/tree/analysis/BasicVerifier;");
        org.junit.Assert.assertNotNull(type1);
    }

    @Test
    public void test05460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05460");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException2 = new org.mockito.asm.tree.analysis.AnalyzerException("g.mockito.asm.tree.analysis.AnalyzerException");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("i!", (java.lang.Throwable) analyzerException2);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B;");
        java.lang.Object obj8 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter15 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter15.ternaryOperation(abstractInsnNode16, value17, value18, value19);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter21 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter21.copyOperation(abstractInsnNode22, value23);
        org.mockito.asm.Type type25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter21.newValue(type25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter27.copyOperation(abstractInsnNode28, value29);
        org.mockito.asm.Type type31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.newValue(type31);
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter15.merge(value26, value32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.ternaryOperation(abstractInsnNode35, value36, value37, value38);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter40 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode41 = null;
        org.mockito.asm.tree.analysis.Value value42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter40.copyOperation(abstractInsnNode41, value42);
        org.mockito.asm.Type type44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter40.newValue(type44);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.Type type50 = null;
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter46.newValue(type50);
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter34.merge(value45, value51);
        org.mockito.asm.tree.analysis.Value value53 = simpleVerifier14.merge(value33, value45);
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter9.copyOperation(abstractInsnNode13, value53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj8, value54);
        java.lang.Throwable[] throwableArray56 = analyzerException55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = analyzerException55.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("LB;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("void", (java.lang.Throwable) analyzerException60);
        analyzerException55.addSuppressed((java.lang.Throwable) analyzerException60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException60);
        analyzerException5.addSuppressed((java.lang.Throwable) analyzerException60);
        analyzerException2.addSuppressed((java.lang.Throwable) analyzerException5);
        java.lang.String str66 = analyzerException2.toString();
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNull(value24);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value30);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNull(value43);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: g.mockito.asm.tree.analysis.AnalyzerException" + "'", str66, "org.mockito.asm.tree.analysis.AnalyzerException: g.mockito.asm.tree.analysis.AnalyzerException");
    }

    @Test
    public void test05461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05461");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        java.lang.String str4 = type0.getClassName();
        java.lang.String str5 = type0.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean26 = type24.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier28 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type24, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type6, true);
        int int32 = type0.getOpcode(171);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str36 = type35.getDescriptor();
        int int37 = type35.getSort();
        java.util.List list38 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type33, type35, list38, false);
        int int41 = type35.getSize();
        int int42 = type35.getSort();
        org.mockito.asm.Type type43 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type43, false);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int48 = type46.getOpcode(48);
        java.lang.String str49 = type46.getClassName();
        java.lang.String str50 = type46.getClassName();
        java.util.List list51 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier53 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type46, list51, true);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        int int55 = type54.getSize();
        java.lang.String str56 = type54.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier58 = new org.mockito.asm.tree.analysis.SimpleVerifier(type46, type54, true);
        boolean boolean59 = type0.equals((java.lang.Object) type54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = type54.getInternalName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "boolean" + "'", str4, "boolean");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "boolean" + "'", str5, "boolean");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 171 + "'", int32 == 171);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Lfloat;" + "'", str36, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 10 + "'", int42 == 10);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 48 + "'", int48 == 48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "boolean" + "'", str50, "boolean");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test05462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05462");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        java.lang.String str15 = type12.getClassName();
        int int17 = type12.getOpcode(138);
        int int18 = type12.getSize();
        boolean boolean20 = type12.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier7.newValue(type12);
        int int23 = type12.getOpcode(0);
        int int25 = type12.getOpcode(0);
        org.mockito.asm.Type[] typeArray27 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)B");
        java.lang.String str28 = org.mockito.asm.Type.getMethodDescriptor(type12, typeArray27);
        java.lang.String str29 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray27);
        int int30 = type1.getSize();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type32 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type32, list33, true);
        java.lang.Class<?> wildcardClass36 = simpleVerifier35.getClass();
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass36);
        org.mockito.asm.Type type39 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str40 = type39.getDescriptor();
        int int41 = type39.getSort();
        int int42 = type39.getSize();
        java.lang.String str43 = type39.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier45 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type39, true);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        int int48 = type46.getOpcode(101);
        int int50 = type46.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value51 = simpleVerifier45.newValue(type46);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException58 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException58.addSuppressed((java.lang.Throwable) analyzerException60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException58);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException63 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException62);
        boolean boolean64 = type52.equals((java.lang.Object) analyzerException63);
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier45.newValue(type52);
        java.lang.String str66 = type52.getDescriptor();
        java.lang.String str67 = type52.getDescriptor();
        java.lang.String str68 = type52.getDescriptor();
        org.mockito.asm.Type[] typeArray70 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str71 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray70);
        java.util.List list72 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type52, list72, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.Value value76 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value77 = simpleVerifier74.copyOperation(abstractInsnNode75, value76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "char" + "'", str15, "char");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 138 + "'", int17 == 138);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "(CBFCF)C" + "'", str28, "(CBFCF)C");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;" + "'", str29, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Lfloat;" + "'", str40, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 101 + "'", int48 == 101);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 191 + "'", int50 == 191);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "F" + "'", str66, "F");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "F" + "'", str67, "F");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "F" + "'", str68, "F");
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "(CBFCF)F" + "'", str71, "(CBFCF)F");
    }

    @Test
    public void test05463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05463");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str2 = type1.getDescriptor();
        int int3 = type1.getSort();
        int int4 = type1.getDimensions();
        int int6 = type1.getOpcode((int) (short) 10);
        int int7 = type1.getSort();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter9 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter9.copyOperation(abstractInsnNode10, value11);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str14 = type13.getDescriptor();
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter9.newValue(type13);
        org.mockito.asm.Type[] typeArray17 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type13, typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray17.getClass();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass19);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException24);
        java.lang.Class<?> wildcardClass26 = analyzerException24.getClass();
        org.mockito.asm.Type type27 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass26);
        java.lang.String str28 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass26);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass26);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type31 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean33 = type31.equals((java.lang.Object) 151);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type35 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean37 = type35.equals((java.lang.Object) (byte) 100);
        java.lang.String str38 = type35.getClassName();
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) (byte) 100);
        java.lang.String str45 = type42.getClassName();
        org.mockito.asm.Type[] typeArray46 = new org.mockito.asm.Type[] { type31, type34, type35, type39, type42 };
        java.lang.String str47 = org.mockito.asm.Type.getMethodDescriptor(type30, typeArray46);
        org.mockito.asm.Type type48 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier52 = new org.mockito.asm.tree.analysis.SimpleVerifier(type30, type48, false);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = simpleVerifier52.newValue(type53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException55 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str29, value54);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type20, value54);
        int int58 = type20.getOpcode(113);
        java.lang.Class<?> wildcardClass59 = type20.getClass();
        java.lang.String str60 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass59);
        boolean boolean61 = type1.equals((java.lang.Object) str60);
        int int63 = type1.getOpcode(168);
        java.lang.String str64 = type1.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Lfloat;" + "'", str2, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 14 + "'", int6 == 14);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "I" + "'", str14, "I");
        org.junit.Assert.assertNotNull(value15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)I" + "'", str18, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str28, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "float" + "'", str45, "float");
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "(CBFCF)B" + "'", str47, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 117 + "'", int58 == 117);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "org/mockito/asm/Type" + "'", str60, "org/mockito/asm/Type");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 172 + "'", int63 == 172);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "float" + "'", str64, "float");
    }

    @Test
    public void test05464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05464");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        java.lang.String str23 = type0.toString();
        java.lang.String str24 = type0.toString();
        int int25 = type0.getSize();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type27, list28, true);
        java.lang.Class<?> wildcardClass31 = simpleVerifier30.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type34 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str35 = type34.getDescriptor();
        int int36 = type34.getSort();
        int int37 = type34.getSize();
        java.lang.String str38 = type34.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type34, true);
        boolean boolean41 = type0.equals((java.lang.Object) type34);
        java.lang.String str42 = type34.toString();
        java.lang.String str43 = type34.getInternalName();
        java.lang.String str44 = type34.getDescriptor();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type45 = type34.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B" + "'", str23, "B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B" + "'", str24, "B");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Lfloat;" + "'", str35, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 10 + "'", int36 == 10);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "float" + "'", str38, "float");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Lfloat;" + "'", str42, "Lfloat;");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "float" + "'", str43, "float");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Lfloat;" + "'", str44, "Lfloat;");
    }

    @Test
    public void test05465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05465");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: (CBFCF)B: expected null, but found .");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)J", (java.lang.Throwable) analyzerException3);
        java.lang.Throwable[] throwableArray5 = analyzerException3.getSuppressed();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException6 = new org.mockito.asm.tree.analysis.AnalyzerException("CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Throwable) analyzerException3);
        java.lang.String str7 = analyzerException6.toString();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: " + "'", str7, "org.mockito.asm.tree.analysis.AnalyzerException: CBFCF)L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ");
    }

    @Test
    public void test05466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05466");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        boolean boolean11 = type6.equals((java.lang.Object) 177);
        int int12 = type6.getSize();
        java.lang.String str13 = type6.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter0.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter0.newValue(type18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type21 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type22 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier26 = new org.mockito.asm.tree.analysis.SimpleVerifier(type21, type22, true);
        java.lang.String str27 = type22.getClassName();
        java.util.List list28 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier30 = new org.mockito.asm.tree.analysis.SimpleVerifier(type20, type22, list28, true);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str33 = type32.getDescriptor();
        java.lang.String str34 = type32.getInternalName();
        org.mockito.asm.tree.analysis.Value value35 = simpleVerifier30.newValue(type32);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str38 = type37.getDescriptor();
        int int39 = type37.getSort();
        int int40 = type37.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type32, type37, false);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter0.newValue(type37);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        java.util.List list45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value46 = basicInterpreter0.naryOperation(abstractInsnNode44, list45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "void" + "'", str27, "void");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "LB;" + "'", str33, "LB;");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "B" + "'", str34, "B");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Lfloat;" + "'", str38, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(value43);
    }

    @Test
    public void test05467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05467");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException3);
        java.lang.Class<?> wildcardClass5 = analyzerException3.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        java.lang.String str8 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass5);
        org.mockito.asm.Type type9 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type9, type10, list11, true);
        java.lang.Class<?> wildcardClass14 = simpleVerifier13.getClass();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass14);
        org.mockito.asm.Type type17 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str18 = type17.getDescriptor();
        int int19 = type17.getSort();
        int int20 = type17.getSize();
        java.lang.String str21 = type17.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type17, true);
        org.mockito.asm.Type type24 = org.mockito.asm.Type.CHAR_TYPE;
        int int26 = type24.getOpcode(101);
        int int28 = type24.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value29 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean32 = type30.equals((java.lang.Object) (byte) 100);
        java.lang.String str33 = type30.getClassName();
        boolean boolean35 = type30.equals((java.lang.Object) 177);
        java.lang.String str36 = type30.toString();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException39 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException40 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException39);
        java.lang.Class<?> wildcardClass41 = analyzerException39.getClass();
        org.mockito.asm.Type type42 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass41);
        int int44 = type42.getOpcode(114);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type46, type49, type50, type54, type57 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray61);
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray61);
        boolean boolean64 = type30.equals((java.lang.Object) typeArray61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException68 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException67);
        java.lang.Throwable[] throwableArray69 = analyzerException68.getSuppressed();
        boolean boolean70 = type30.equals((java.lang.Object) analyzerException68);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException72 = new org.mockito.asm.tree.analysis.AnalyzerException("boolean");
        java.lang.Throwable[] throwableArray73 = analyzerException72.getSuppressed();
        boolean boolean74 = type30.equals((java.lang.Object) analyzerException72);
        org.mockito.asm.tree.analysis.Value value75 = simpleVerifier23.newValue(type30);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("void", (java.lang.Object) wildcardClass5, value75);
        int int77 = value75.getSize();
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str7, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str8, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Lfloat;" + "'", str18, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 10 + "'", int19 == 10);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 101 + "'", int26 == 101);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 191 + "'", int28 == 191);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "float" + "'", str33, "float");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "F" + "'", str36, "F");
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 118 + "'", int44 == 118);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)B" + "'", str62, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str63, "(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test05468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05468");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        boolean boolean8 = type0.equals((java.lang.Object) 154);
        java.lang.String str9 = type0.getDescriptor();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) (byte) 100);
        java.lang.String str13 = type10.getClassName();
        java.lang.String str14 = type10.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier16 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type10, true);
        int int17 = type10.getSize();
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type10, type18, false);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getObjectType("org/mockito/asm/tree/analysis/BasicVerifier");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException25 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException26 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException25);
        java.lang.Class<?> wildcardClass27 = analyzerException25.getClass();
        org.mockito.asm.Type type28 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str29 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass27);
        java.lang.String str32 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass27);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass27);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type33, false);
        org.mockito.asm.Type type37 = org.mockito.asm.Type.getReturnType("Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.tree.analysis.Value value38 = simpleVerifier35.newValue(type37);
        boolean boolean39 = type10.equals((java.lang.Object) type37);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.getType("(CBFCF)Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) 151);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) (byte) 100);
        java.lang.String str57 = type54.getClassName();
        org.mockito.asm.Type[] typeArray58 = new org.mockito.asm.Type[] { type43, type46, type47, type51, type54 };
        java.lang.String str59 = org.mockito.asm.Type.getMethodDescriptor(type42, typeArray58);
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type42, type60, false);
        java.lang.String str65 = type42.getClassName();
        int int66 = type42.getSort();
        int int68 = type42.getOpcode(148);
        java.lang.String str69 = type42.getClassName();
        java.lang.String str70 = type42.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type42, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type37, type41, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode75 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter76 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode77 = null;
        org.mockito.asm.tree.analysis.Value value78 = null;
        org.mockito.asm.tree.analysis.Value value79 = basicInterpreter76.copyOperation(abstractInsnNode77, value78);
        org.mockito.asm.Type type80 = null;
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter76.newValue(type80);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value82 = simpleVerifier74.unaryOperation(abstractInsnNode75, value81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "C" + "'", str9, "C");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "float" + "'", str13, "float");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str29, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str32, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "float" + "'", str57, "float");
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "(CBFCF)B" + "'", str59, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "byte" + "'", str65, "byte");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 148 + "'", int68 == 148);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "byte" + "'", str69, "byte");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "B" + "'", str70, "B");
        org.junit.Assert.assertNull(value79);
        org.junit.Assert.assertNotNull(value81);
    }

    @Test
    public void test05469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05469");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("org.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        java.lang.String str15 = type12.getClassName();
        int int17 = type12.getOpcode(138);
        int int18 = type12.getSize();
        boolean boolean20 = type12.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier7.newValue(type12);
        int int23 = type12.getOpcode(0);
        int int25 = type12.getOpcode(0);
        int int26 = type12.getSort();
        int int27 = type12.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type12, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        java.util.List list31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value32 = simpleVerifier29.naryOperation(abstractInsnNode30, list31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "char" + "'", str15, "char");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 138 + "'", int17 == 138);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test05470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05470");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        java.lang.String str5 = type2.getClassName();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type7 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean9 = type7.equals((java.lang.Object) 151);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type11 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean13 = type11.equals((java.lang.Object) (byte) 100);
        java.lang.String str14 = type11.getClassName();
        org.mockito.asm.Type type15 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean17 = type15.equals((java.lang.Object) 151);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) (byte) 100);
        java.lang.String str21 = type18.getClassName();
        org.mockito.asm.Type[] typeArray22 = new org.mockito.asm.Type[] { type7, type10, type11, type15, type18 };
        java.lang.String str23 = org.mockito.asm.Type.getMethodDescriptor(type6, typeArray22);
        java.lang.String str24 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray22);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException27 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException28 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException27);
        java.lang.Class<?> wildcardClass29 = analyzerException27.getClass();
        org.mockito.asm.Type type30 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        java.lang.String str31 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass29);
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass29);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier34 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type32, true);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier34.newValue(type36);
        org.mockito.asm.Type type38 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list40 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier42 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type39, list40, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier44 = new org.mockito.asm.tree.analysis.SimpleVerifier(type36, type38, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type36, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str51 = type50.getDescriptor();
        int int52 = type50.getSort();
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type48, type50, list53, false);
        org.mockito.asm.Type type56 = null;
        org.mockito.asm.tree.analysis.Value value57 = simpleVerifier55.newValue(type56);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value58 = simpleVerifier46.unaryOperation(abstractInsnNode47, value57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "char" + "'", str5, "char");
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertNotNull(type7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "float" + "'", str14, "float");
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "float" + "'", str21, "float");
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "(CBFCF)B" + "'", str23, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "(CBFCF)C" + "'", str24, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str31, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Lfloat;" + "'", str51, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
        org.junit.Assert.assertNotNull(value57);
    }

    @Test
    public void test05471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05471");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException10 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException8.addSuppressed((java.lang.Throwable) analyzerException10);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException12 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException8);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException13 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException12);
        boolean boolean14 = type2.equals((java.lang.Object) analyzerException13);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException15 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)C", (java.lang.Throwable) analyzerException13);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str21 = type20.getDescriptor();
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter16.copyOperation(abstractInsnNode23, value35);
        org.mockito.asm.Type type44 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int46 = type44.getOpcode(48);
        java.lang.String str47 = type44.getClassName();
        java.lang.String str48 = type44.getClassName();
        java.lang.String str49 = type44.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type51, type54, type55, type59, type62 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type68, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type44, type50, true);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.LONG_TYPE;
        java.lang.String str76 = type75.getClassName();
        org.mockito.asm.tree.analysis.Value value77 = simpleVerifier74.newValue(type75);
        org.mockito.asm.Type type78 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type79 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean81 = type79.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type78, type79, true);
        org.mockito.asm.Type type84 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean86 = type84.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier83.newValue(type84);
        int int88 = value87.getSize();
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter16.merge(value77, value87);
        int int90 = value87.getSize();
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException91 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: hi!: expected 171, but found null", (java.lang.Object) analyzerException13, value87);
        java.lang.String str92 = analyzerException13.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "I" + "'", str21, "I");
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 48 + "'", int46 == 48);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "boolean" + "'", str47, "boolean");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "boolean" + "'", str48, "boolean");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "boolean" + "'", str49, "boolean");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)B" + "'", str67, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "long" + "'", str76, "long");
        org.junit.Assert.assertNotNull(value77);
        org.junit.Assert.assertNotNull(type78);
        org.junit.Assert.assertNotNull(type79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(type84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: char" + "'", str92, "org.mockito.asm.tree.analysis.AnalyzerException: char");
    }

    @Test
    public void test05472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05472");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException23);
        java.lang.Class<?> wildcardClass25 = analyzerException23.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = type26.getElementType();
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier20.newValue(type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        boolean boolean34 = type29.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException37);
        java.lang.Class<?> wildcardClass39 = analyzerException37.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type41 = type40.getElementType();
        java.lang.String str42 = type41.getClassName();
        java.lang.String str43 = type41.getDescriptor();
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type41, list44, false);
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type29, list47, true);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.LONG_TYPE;
        int int51 = type50.getSort();
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier49.newValue(type50);
        int int53 = type50.getSize();
        java.lang.String str54 = type50.getDescriptor();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str42, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str43, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "J" + "'", str54, "J");
    }

    @Test
    public void test05473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05473");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType("V");
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type52, list53, true);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str58 = type57.getDescriptor();
        int int59 = type57.getSort();
        int int60 = type57.getDimensions();
        int int62 = type57.getOpcode((int) (short) 10);
        int int63 = type57.getSort();
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier55.newValue(type57);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str66 = type65.getClassName();
        int int68 = type65.getOpcode(115);
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier55.newValue(type65);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        java.util.List list71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value72 = simpleVerifier55.naryOperation(abstractInsnNode70, list71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lfloat;" + "'", str58, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 14 + "'", int62 == 14);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "byte" + "'", str66, "byte");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 115 + "'", int68 == 115);
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test05474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05474");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean2 = type0.equals((java.lang.Object) 151);
        java.lang.String str3 = type0.getClassName();
        int int5 = type0.getOpcode(138);
        int int6 = type0.getSize();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value10 = simpleVerifier7.newValue(type9);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter12 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter12.ternaryOperation(abstractInsnNode13, value14, value15, value16);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter18 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode19 = null;
        org.mockito.asm.tree.analysis.Value value20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter18.copyOperation(abstractInsnNode19, value20);
        org.mockito.asm.Type type22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter18.newValue(type22);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter24.copyOperation(abstractInsnNode25, value26);
        org.mockito.asm.Type type28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.newValue(type28);
        org.mockito.asm.tree.analysis.Value value30 = basicInterpreter12.merge(value23, value29);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter31 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter31.ternaryOperation(abstractInsnNode32, value33, value34, value35);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter37 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode38 = null;
        org.mockito.asm.tree.analysis.Value value39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter37.copyOperation(abstractInsnNode38, value39);
        org.mockito.asm.Type type41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter37.newValue(type41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter43.copyOperation(abstractInsnNode44, value45);
        org.mockito.asm.Type type47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.newValue(type47);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter31.merge(value42, value48);
        org.mockito.asm.tree.analysis.Value value50 = simpleVerifier11.merge(value30, value42);
        org.mockito.asm.Type type51 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type52 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type53 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) 151);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type type61 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean63 = type61.equals((java.lang.Object) 151);
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type[] typeArray68 = new org.mockito.asm.Type[] { type53, type56, type57, type61, type64 };
        java.lang.String str69 = org.mockito.asm.Type.getMethodDescriptor(type52, typeArray68);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean72 = type70.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier74 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type70, false);
        org.mockito.asm.Type type75 = null;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier74.newValue(type75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) (byte) 100);
        java.lang.String str80 = type77.getClassName();
        org.mockito.asm.tree.analysis.Value value81 = simpleVerifier74.newValue(type77);
        java.util.List list82 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier84 = new org.mockito.asm.tree.analysis.SimpleVerifier(type51, type77, list82, true);
        org.mockito.asm.tree.analysis.Value value85 = simpleVerifier11.newValue(type77);
        org.mockito.asm.Type type86 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value87 = simpleVerifier11.newValue(type86);
        java.lang.String str88 = type86.toString();
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier7.newValue(type86);
        java.util.List list90 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier92 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type86, list90, true);
        java.lang.String str93 = type86.getClassName();
        int int95 = type86.getOpcode(135);
        java.lang.String str96 = type86.getClassName();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "char" + "'", str3, "char");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 138 + "'", int5 == 138);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(value10);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNull(value21);
        org.junit.Assert.assertNotNull(value23);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNull(value40);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "(CBFCF)B" + "'", str69, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "float" + "'", str80, "float");
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value85);
        org.junit.Assert.assertNotNull(type86);
        org.junit.Assert.assertNotNull(value87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "C" + "'", str88, "C");
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "char" + "'", str93, "char");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 135 + "'", int95 == 135);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "char" + "'", str96, "char");
    }

    @Test
    public void test05475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05475");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        java.lang.Class<?> wildcardClass5 = simpleVerifier4.getClass();
        org.mockito.asm.Type type6 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass5);
        java.lang.String str7 = type6.getInternalName();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type type17 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 151);
        org.mockito.asm.Type type20 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean22 = type20.equals((java.lang.Object) (byte) 100);
        java.lang.String str23 = type20.getClassName();
        org.mockito.asm.Type[] typeArray24 = new org.mockito.asm.Type[] { type9, type12, type13, type17, type20 };
        java.lang.String str25 = org.mockito.asm.Type.getMethodDescriptor(type8, typeArray24);
        java.lang.String str26 = type8.toString();
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type6, type8, list27, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        java.util.List list31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value32 = simpleVerifier29.naryOperation(abstractInsnNode30, list31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "org/mockito/asm/tree/analysis/SimpleVerifier" + "'", str7, "org/mockito/asm/tree/analysis/SimpleVerifier");
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "float" + "'", str23, "float");
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "(CBFCF)B" + "'", str25, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "B" + "'", str26, "B");
    }

    @Test
    public void test05476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05476");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        int int1 = type0.getSize();
        java.lang.String str2 = type0.getClassName();
        int int3 = type0.getSort();
        int int4 = type0.getSize();
        int int5 = type0.getSize();
        int int6 = type0.getSize();
        int int8 = type0.getOpcode(0);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "float" + "'", str2, "float");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 6 + "'", int3 == 6);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
    }

    @Test
    public void test05477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05477");
        org.mockito.asm.Type type0 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        int int3 = type2.getSize();
        int int4 = type2.getDimensions();
        org.mockito.asm.Type[] typeArray6 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        java.lang.String str7 = org.mockito.asm.Type.getMethodDescriptor(type2, typeArray6);
        boolean boolean9 = type2.equals((java.lang.Object) 49);
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.lang.String str18 = type13.getClassName();
        int int19 = type13.getSize();
        java.lang.String str20 = type13.getClassName();
        int int21 = type13.getSort();
        org.mockito.asm.tree.analysis.Value value22 = simpleVerifier12.newValue(type13);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        java.util.List list24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value25 = simpleVerifier12.naryOperation(abstractInsnNode23, list24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "(CBFCF)Lfloat;" + "'", str7, "(CBFCF)Lfloat;");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "boolean" + "'", str18, "boolean");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "boolean" + "'", str20, "boolean");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(value22);
    }

    @Test
    public void test05478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05478");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        boolean boolean11 = type6.equals((java.lang.Object) 177);
        int int12 = type6.getSize();
        java.lang.String str13 = type6.toString();
        org.mockito.asm.tree.analysis.Value value14 = basicInterpreter0.newValue(type6);
        java.lang.Class<?> wildcardClass15 = basicInterpreter0.getClass();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F" + "'", str13, "F");
        org.junit.Assert.assertNotNull(value14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test05479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05479");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter1 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode2 = null;
        org.mockito.asm.tree.analysis.Value value3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = null;
        org.mockito.asm.tree.analysis.Value value6 = basicInterpreter1.ternaryOperation(abstractInsnNode2, value3, value4, value5);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = basicInterpreter7.copyOperation(abstractInsnNode8, value9);
        org.mockito.asm.Type type11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.newValue(type11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter1.merge(value12, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.ternaryOperation(abstractInsnNode21, value22, value23, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter20.merge(value31, value37);
        org.mockito.asm.tree.analysis.Value value39 = simpleVerifier0.merge(value19, value31);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type41 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type42 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean44 = type42.equals((java.lang.Object) 151);
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        java.lang.String str49 = type46.getClassName();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) 151);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean55 = type53.equals((java.lang.Object) (byte) 100);
        java.lang.String str56 = type53.getClassName();
        org.mockito.asm.Type[] typeArray57 = new org.mockito.asm.Type[] { type42, type45, type46, type50, type53 };
        java.lang.String str58 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray57);
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier63 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type59, false);
        org.mockito.asm.Type type64 = null;
        org.mockito.asm.tree.analysis.Value value65 = simpleVerifier63.newValue(type64);
        org.mockito.asm.Type type66 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean68 = type66.equals((java.lang.Object) (byte) 100);
        java.lang.String str69 = type66.getClassName();
        org.mockito.asm.tree.analysis.Value value70 = simpleVerifier63.newValue(type66);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type40, type66, list71, true);
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier0.newValue(type66);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.CHAR_TYPE;
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier0.newValue(type75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        int int79 = type77.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier0.newValue(type77);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type81 = type77.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value6);
        org.junit.Assert.assertNull(value10);
        org.junit.Assert.assertNotNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "float" + "'", str49, "float");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "float" + "'", str56, "float");
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "(CBFCF)B" + "'", str58, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(value65);
        org.junit.Assert.assertNotNull(type66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "float" + "'", str69, "float");
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 101 + "'", int79 == 101);
        org.junit.Assert.assertNotNull(value80);
    }

    @Test
    public void test05480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05480");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException3 = new org.mockito.asm.tree.analysis.AnalyzerException("V");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException4 = new org.mockito.asm.tree.analysis.AnalyzerException("Lrg.mockito.asm.tree.analysis.AnalyzerException: Lorg/mockito/asm/Type;", (java.lang.Throwable) analyzerException3);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException5 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException3);
        java.lang.String str6 = analyzerException3.toString();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: V" + "'", str6, "org.mockito.asm.tree.analysis.AnalyzerException: V");
    }

    @Test
    public void test05481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05481");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter24 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter24.ternaryOperation(abstractInsnNode25, value26, value27, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter30.copyOperation(abstractInsnNode31, value32);
        org.mockito.asm.Type type34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.newValue(type34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter24.merge(value35, value41);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter43 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter43.ternaryOperation(abstractInsnNode44, value45, value46, value47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = null;
        org.mockito.asm.tree.analysis.Value value54 = basicInterpreter49.newValue(type53);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter55 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.Value value57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter55.copyOperation(abstractInsnNode56, value57);
        org.mockito.asm.Type type59 = null;
        org.mockito.asm.tree.analysis.Value value60 = basicInterpreter55.newValue(type59);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter43.merge(value54, value60);
        org.mockito.asm.tree.analysis.Value value62 = simpleVerifier23.merge(value42, value54);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.ternaryOperation(abstractInsnNode64, value65, value66, value67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter75 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode76 = null;
        org.mockito.asm.tree.analysis.Value value77 = null;
        org.mockito.asm.tree.analysis.Value value78 = basicInterpreter75.copyOperation(abstractInsnNode76, value77);
        org.mockito.asm.Type type79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter75.newValue(type79);
        org.mockito.asm.tree.analysis.Value value81 = basicInterpreter63.merge(value74, value80);
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier22.merge(value62, value74);
        org.mockito.asm.Type type83 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type84 = null;
        java.util.List list85 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier87 = new org.mockito.asm.tree.analysis.SimpleVerifier(type83, type84, list85, false);
        org.mockito.asm.tree.analysis.Value value88 = simpleVerifier22.newValue(type83);
        int int89 = type83.getSize();
        java.lang.Class<?> wildcardClass90 = type83.getClass();
        org.mockito.asm.Type type91 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass90);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNull(value33);
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNotNull(value42);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(value54);
        org.junit.Assert.assertNull(value58);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(value62);
        org.junit.Assert.assertNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNull(value78);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(value81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNotNull(type83);
        org.junit.Assert.assertNull(value88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(type91);
    }

    @Test
    public void test05482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05482");
        java.lang.Object obj1 = null;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean6 = type4.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type4, true);
        java.lang.String str9 = type4.getClassName();
        java.util.List list10 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type4, list10, true);
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getObjectType("B");
        java.lang.String str15 = type14.getDescriptor();
        java.lang.String str16 = type14.getInternalName();
        org.mockito.asm.tree.analysis.Value value17 = simpleVerifier12.newValue(type14);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        java.lang.String str21 = type18.getClassName();
        int int23 = type18.getOpcode(138);
        int int24 = type18.getSize();
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier12.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        java.lang.Class<?> wildcardClass45 = value43.getClass();
        java.lang.String str46 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass45);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier12.newValue(type47);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter49 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.Value value51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter49.copyOperation(abstractInsnNode50, value51);
        org.mockito.asm.Type type53 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int55 = type53.getOpcode(48);
        java.lang.String str56 = type53.getClassName();
        java.lang.String str57 = type53.getClassName();
        java.lang.String str58 = type53.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type60 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean62 = type60.equals((java.lang.Object) 151);
        org.mockito.asm.Type type63 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type64 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean66 = type64.equals((java.lang.Object) (byte) 100);
        java.lang.String str67 = type64.getClassName();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean73 = type71.equals((java.lang.Object) (byte) 100);
        java.lang.String str74 = type71.getClassName();
        org.mockito.asm.Type[] typeArray75 = new org.mockito.asm.Type[] { type60, type63, type64, type68, type71 };
        java.lang.String str76 = org.mockito.asm.Type.getMethodDescriptor(type59, typeArray75);
        org.mockito.asm.Type type77 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean79 = type77.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier81 = new org.mockito.asm.tree.analysis.SimpleVerifier(type59, type77, false);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type53, type59, true);
        org.mockito.asm.tree.analysis.Value value84 = basicInterpreter49.newValue(type53);
        java.lang.String str85 = type53.getClassName();
        org.mockito.asm.tree.analysis.Value value86 = simpleVerifier12.newValue(type53);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException87 = new org.mockito.asm.tree.analysis.AnalyzerException("float", obj1, value86);
        int int88 = value86.getSize();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "void" + "'", str9, "void");
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "LB;" + "'", str15, "LB;");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "B" + "'", str16, "B");
        org.junit.Assert.assertNotNull(value17);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "char" + "'", str21, "char");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 138 + "'", int23 == 138);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str46, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNull(value52);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 48 + "'", int55 == 48);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "boolean" + "'", str56, "boolean");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "boolean" + "'", str57, "boolean");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "boolean" + "'", str58, "boolean");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(type64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "float" + "'", str67, "float");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "float" + "'", str74, "float");
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "(CBFCF)B" + "'", str76, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(value84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "boolean" + "'", str85, "boolean");
        org.junit.Assert.assertNotNull(value86);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test05483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05483");
        java.lang.Object obj1 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter2 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode3 = null;
        org.mockito.asm.tree.analysis.Value value4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter2.copyOperation(abstractInsnNode3, value4);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = basicInterpreter8.ternaryOperation(abstractInsnNode9, value10, value11, value12);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = basicInterpreter14.copyOperation(abstractInsnNode15, value16);
        org.mockito.asm.Type type18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.newValue(type18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter8.merge(value19, value25);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter27 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter27.ternaryOperation(abstractInsnNode28, value29, value30, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = basicInterpreter33.copyOperation(abstractInsnNode34, value35);
        org.mockito.asm.Type type37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.newValue(type37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter27.merge(value38, value44);
        org.mockito.asm.tree.analysis.Value value46 = simpleVerifier7.merge(value26, value38);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter2.copyOperation(abstractInsnNode6, value46);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj1, value47);
        java.lang.Class<?> wildcardClass49 = value47.getClass();
        org.mockito.asm.Type type50 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass49);
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType("V");
        java.util.List list53 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier55 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type52, list53, true);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str58 = type57.getDescriptor();
        int int59 = type57.getSort();
        int int60 = type57.getDimensions();
        int int62 = type57.getOpcode((int) (short) 10);
        int int63 = type57.getSort();
        org.mockito.asm.tree.analysis.Value value64 = simpleVerifier55.newValue(type57);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.BYTE_TYPE;
        java.lang.String str66 = type65.getClassName();
        int int68 = type65.getOpcode(115);
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier55.newValue(type65);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value71 = simpleVerifier55.newOperation(abstractInsnNode70);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(value5);
        org.junit.Assert.assertNull(value13);
        org.junit.Assert.assertNull(value17);
        org.junit.Assert.assertNotNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNull(value36);
        org.junit.Assert.assertNotNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Lfloat;" + "'", str58, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 10 + "'", int59 == 10);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 14 + "'", int62 == 14);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 10 + "'", int63 == 10);
        org.junit.Assert.assertNotNull(value64);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "byte" + "'", str66, "byte");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 115 + "'", int68 == 115);
        org.junit.Assert.assertNotNull(value69);
    }

    @Test
    public void test05484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05484");
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter0 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode1 = null;
        org.mockito.asm.tree.analysis.Value value2 = null;
        org.mockito.asm.tree.analysis.Value value3 = basicInterpreter0.copyOperation(abstractInsnNode1, value2);
        org.mockito.asm.Type type4 = null;
        org.mockito.asm.tree.analysis.Value value5 = basicInterpreter0.newValue(type4);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier6 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter7 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.Value value9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = null;
        org.mockito.asm.tree.analysis.Value value12 = basicInterpreter7.ternaryOperation(abstractInsnNode8, value9, value10, value11);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter13 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter13.copyOperation(abstractInsnNode14, value15);
        org.mockito.asm.Type type17 = null;
        org.mockito.asm.tree.analysis.Value value18 = basicInterpreter13.newValue(type17);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter19 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.Value value21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter19.copyOperation(abstractInsnNode20, value21);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = basicInterpreter19.newValue(type23);
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter7.merge(value18, value24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.ternaryOperation(abstractInsnNode27, value28, value29, value30);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter32 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter32.copyOperation(abstractInsnNode33, value34);
        org.mockito.asm.Type type36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter32.newValue(type36);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter38 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode39 = null;
        org.mockito.asm.tree.analysis.Value value40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter38.copyOperation(abstractInsnNode39, value40);
        org.mockito.asm.Type type42 = null;
        org.mockito.asm.tree.analysis.Value value43 = basicInterpreter38.newValue(type42);
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter26.merge(value37, value43);
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier6.merge(value25, value37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter46 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode47 = null;
        org.mockito.asm.tree.analysis.Value value48 = null;
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter46.copyOperation(abstractInsnNode47, value48);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode50 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier51 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter52 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode53 = null;
        org.mockito.asm.tree.analysis.Value value54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = null;
        org.mockito.asm.tree.analysis.Value value57 = basicInterpreter52.ternaryOperation(abstractInsnNode53, value54, value55, value56);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter58 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter58.copyOperation(abstractInsnNode59, value60);
        org.mockito.asm.Type type62 = null;
        org.mockito.asm.tree.analysis.Value value63 = basicInterpreter58.newValue(type62);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter64 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        org.mockito.asm.tree.analysis.Value value66 = null;
        org.mockito.asm.tree.analysis.Value value67 = basicInterpreter64.copyOperation(abstractInsnNode65, value66);
        org.mockito.asm.Type type68 = null;
        org.mockito.asm.tree.analysis.Value value69 = basicInterpreter64.newValue(type68);
        org.mockito.asm.tree.analysis.Value value70 = basicInterpreter52.merge(value63, value69);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter71 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode72 = null;
        org.mockito.asm.tree.analysis.Value value73 = null;
        org.mockito.asm.tree.analysis.Value value74 = null;
        org.mockito.asm.tree.analysis.Value value75 = null;
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter71.ternaryOperation(abstractInsnNode72, value73, value74, value75);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter77 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode78 = null;
        org.mockito.asm.tree.analysis.Value value79 = null;
        org.mockito.asm.tree.analysis.Value value80 = basicInterpreter77.copyOperation(abstractInsnNode78, value79);
        org.mockito.asm.Type type81 = null;
        org.mockito.asm.tree.analysis.Value value82 = basicInterpreter77.newValue(type81);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter83 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode84 = null;
        org.mockito.asm.tree.analysis.Value value85 = null;
        org.mockito.asm.tree.analysis.Value value86 = basicInterpreter83.copyOperation(abstractInsnNode84, value85);
        org.mockito.asm.Type type87 = null;
        org.mockito.asm.tree.analysis.Value value88 = basicInterpreter83.newValue(type87);
        org.mockito.asm.tree.analysis.Value value89 = basicInterpreter71.merge(value82, value88);
        org.mockito.asm.tree.analysis.Value value90 = simpleVerifier51.merge(value70, value82);
        org.mockito.asm.tree.analysis.Value value91 = basicInterpreter46.copyOperation(abstractInsnNode50, value90);
        org.mockito.asm.tree.analysis.Value value92 = basicInterpreter0.merge(value25, value90);
        java.lang.Class<?> wildcardClass93 = basicInterpreter0.getClass();
        org.junit.Assert.assertNull(value3);
        org.junit.Assert.assertNotNull(value5);
        org.junit.Assert.assertNull(value12);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNotNull(value18);
        org.junit.Assert.assertNull(value22);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value41);
        org.junit.Assert.assertNotNull(value43);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNull(value49);
        org.junit.Assert.assertNull(value57);
        org.junit.Assert.assertNull(value61);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNull(value67);
        org.junit.Assert.assertNotNull(value69);
        org.junit.Assert.assertNotNull(value70);
        org.junit.Assert.assertNull(value76);
        org.junit.Assert.assertNull(value80);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertNull(value86);
        org.junit.Assert.assertNotNull(value88);
        org.junit.Assert.assertNotNull(value89);
        org.junit.Assert.assertNotNull(value90);
        org.junit.Assert.assertNotNull(value91);
        org.junit.Assert.assertNotNull(value92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test05485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05485");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int2 = type0.getOpcode(48);
        java.lang.String str3 = type0.getClassName();
        org.mockito.asm.Type type5 = org.mockito.asm.Type.getObjectType("double");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type5, true);
        java.lang.String str8 = type0.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.FLOAT_TYPE;
        int int10 = type9.getSize();
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type9, list11, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode14 = null;
        org.mockito.asm.Type type15 = null;
        org.mockito.asm.Type type16 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type17 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean19 = type17.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier(type16, type17, true);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean24 = type22.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier21.newValue(type22);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type28 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean30 = type28.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier32 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type28, true);
        java.lang.String str33 = type28.getClassName();
        java.util.List list34 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier36 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type28, list34, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier38 = new org.mockito.asm.tree.analysis.SimpleVerifier(type22, type28, true);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier40 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type28, true);
        org.mockito.asm.Type type41 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean43 = type41.equals((java.lang.Object) 151);
        java.lang.String str44 = type41.getClassName();
        org.mockito.asm.Type type45 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type46 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) 151);
        org.mockito.asm.Type type49 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type type54 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean56 = type54.equals((java.lang.Object) 151);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean59 = type57.equals((java.lang.Object) (byte) 100);
        java.lang.String str60 = type57.getClassName();
        org.mockito.asm.Type[] typeArray61 = new org.mockito.asm.Type[] { type46, type49, type50, type54, type57 };
        java.lang.String str62 = org.mockito.asm.Type.getMethodDescriptor(type45, typeArray61);
        java.lang.String str63 = org.mockito.asm.Type.getMethodDescriptor(type41, typeArray61);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException67 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException66);
        java.lang.Class<?> wildcardClass68 = analyzerException66.getClass();
        org.mockito.asm.Type type69 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        java.lang.String str70 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass68);
        org.mockito.asm.Type type71 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass68);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type41, type71, true);
        org.mockito.asm.Type type75 = org.mockito.asm.Type.getObjectType("LB;");
        org.mockito.asm.tree.analysis.Value value76 = simpleVerifier73.newValue(type75);
        java.lang.String str77 = type75.getDescriptor();
        org.mockito.asm.tree.analysis.Value value78 = simpleVerifier40.newValue(type75);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = simpleVerifier13.copyOperation(abstractInsnNode14, value78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 48 + "'", int2 == 48);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "boolean" + "'", str3, "boolean");
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "boolean" + "'", str8, "boolean");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(type16);
        org.junit.Assert.assertNotNull(type17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "void" + "'", str33, "void");
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "char" + "'", str44, "char");
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "float" + "'", str60, "float");
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "(CBFCF)B" + "'", str62, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "(CBFCF)C" + "'", str63, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(type69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str70, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(type75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "LLB;;" + "'", str77, "LLB;;");
        org.junit.Assert.assertNotNull(value78);
    }

    @Test
    public void test05486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05486");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getType("J");
        org.mockito.asm.Type type2 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type3 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean5 = type3.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type3, true);
        org.mockito.asm.Type type8 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean10 = type8.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.Value value11 = simpleVerifier7.newValue(type8);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) 151);
        java.lang.String str15 = type12.getClassName();
        int int17 = type12.getOpcode(138);
        int int18 = type12.getSize();
        boolean boolean20 = type12.equals((java.lang.Object) 154);
        org.mockito.asm.tree.analysis.Value value21 = simpleVerifier7.newValue(type12);
        java.util.List list22 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier24 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type12, list22, false);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type27 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean29 = type27.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier31 = new org.mockito.asm.tree.analysis.SimpleVerifier(type26, type27, true);
        java.lang.String str32 = type27.getClassName();
        java.util.List list33 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier35 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type27, list33, true);
        java.lang.String str36 = type27.toString();
        java.lang.String str37 = type27.toString();
        org.mockito.asm.Type type38 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type39 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean41 = type39.equals((java.lang.Object) 151);
        org.mockito.asm.Type type42 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type43 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean45 = type43.equals((java.lang.Object) (byte) 100);
        java.lang.String str46 = type43.getClassName();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) 151);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean52 = type50.equals((java.lang.Object) (byte) 100);
        java.lang.String str53 = type50.getClassName();
        org.mockito.asm.Type[] typeArray54 = new org.mockito.asm.Type[] { type39, type42, type43, type47, type50 };
        java.lang.String str55 = org.mockito.asm.Type.getMethodDescriptor(type38, typeArray54);
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException60 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException61 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException60);
        java.lang.Class<?> wildcardClass62 = analyzerException60.getClass();
        org.mockito.asm.Type type63 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass62);
        java.lang.String str64 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass62);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass62);
        java.util.List list66 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier68 = new org.mockito.asm.tree.analysis.SimpleVerifier(type57, type65, list66, true);
        java.util.List list69 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier71 = new org.mockito.asm.tree.analysis.SimpleVerifier(type38, type57, list69, false);
        int int72 = type57.getDimensions();
        java.util.List list73 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier75 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type57, list73, false);
        org.mockito.asm.Type type76 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type77 = null;
        java.util.List list78 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier80 = new org.mockito.asm.tree.analysis.SimpleVerifier(type76, type77, list78, false);
        java.lang.String str81 = type76.toString();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier83 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type76, true);
        org.mockito.asm.tree.analysis.Value value84 = simpleVerifier24.newValue(type76);
        int int85 = type76.getSort();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(value11);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "char" + "'", str15, "char");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 138 + "'", int17 == 138);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "void" + "'", str32, "void");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "V" + "'", str36, "V");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "V" + "'", str37, "V");
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(type39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(type42);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "float" + "'", str46, "float");
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "float" + "'", str53, "float");
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "(CBFCF)B" + "'", str55, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str64, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(type76);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "V" + "'", str81, "V");
        org.junit.Assert.assertNull(value84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test05487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05487");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException1 = new org.mockito.asm.tree.analysis.AnalyzerException("L(CBFCF)I;");
    }

    @Test
    public void test05488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05488");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str2 = type1.getClassName();
        org.mockito.asm.Type type4 = org.mockito.asm.Type.getObjectType("(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
        int int6 = type4.getOpcode(8);
        int int8 = type4.getOpcode(163);
        java.util.List list9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier11 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type4, list9, false);
        java.lang.String str12 = type4.toString();
        java.lang.String str13 = type4.getClassName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 167 + "'", int8 == 167);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;" + "'", str12, "L(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;" + "'", str13, "(CBFCF)Lorg.mockito.asm.tree.analysis.AnalyzerException: ;");
    }

    @Test
    public void test05489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05489");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        java.lang.Class<?> wildcardClass1 = type0.getClass();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass1);
        boolean boolean4 = type2.equals((java.lang.Object) 112);
        java.lang.String str5 = type2.toString();
        java.lang.Object obj7 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter8 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.Value value10 = null;
        org.mockito.asm.tree.analysis.Value value11 = basicInterpreter8.copyOperation(abstractInsnNode9, value10);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter14 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        org.mockito.asm.tree.analysis.Value value16 = null;
        org.mockito.asm.tree.analysis.Value value17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter14.ternaryOperation(abstractInsnNode15, value16, value17, value18);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter20 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode21 = null;
        org.mockito.asm.tree.analysis.Value value22 = null;
        org.mockito.asm.tree.analysis.Value value23 = basicInterpreter20.copyOperation(abstractInsnNode21, value22);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter20.newValue(type24);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter26 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode27 = null;
        org.mockito.asm.tree.analysis.Value value28 = null;
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter26.copyOperation(abstractInsnNode27, value28);
        org.mockito.asm.Type type30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter26.newValue(type30);
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter14.merge(value25, value31);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter33 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode34 = null;
        org.mockito.asm.tree.analysis.Value value35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter33.ternaryOperation(abstractInsnNode34, value35, value36, value37);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter39 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.Value value41 = null;
        org.mockito.asm.tree.analysis.Value value42 = basicInterpreter39.copyOperation(abstractInsnNode40, value41);
        org.mockito.asm.Type type43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter39.newValue(type43);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter45 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode46 = null;
        org.mockito.asm.tree.analysis.Value value47 = null;
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter45.copyOperation(abstractInsnNode46, value47);
        org.mockito.asm.Type type49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter45.newValue(type49);
        org.mockito.asm.tree.analysis.Value value51 = basicInterpreter33.merge(value44, value50);
        org.mockito.asm.tree.analysis.Value value52 = simpleVerifier13.merge(value32, value44);
        org.mockito.asm.tree.analysis.Value value53 = basicInterpreter8.copyOperation(abstractInsnNode12, value52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj7, value53);
        java.lang.Class<?> wildcardClass55 = value53.getClass();
        java.lang.String str56 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass55);
        java.lang.String str57 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass55);
        org.mockito.asm.Type type58 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass55);
        java.lang.String str59 = type58.toString();
        org.mockito.asm.Type type60 = type58.getElementType();
        boolean boolean61 = type2.equals((java.lang.Object) type58);
        int int63 = type58.getOpcode(55);
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str5, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNull(value11);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNull(value23);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value29);
        org.junit.Assert.assertNotNull(value31);
        org.junit.Assert.assertNotNull(value32);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNull(value42);
        org.junit.Assert.assertNotNull(value44);
        org.junit.Assert.assertNull(value48);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(value51);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNotNull(value53);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str56, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str57, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str59, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 59 + "'", int63 == 59);
    }

    @Test
    public void test05490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05490");
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier0 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value3 = simpleVerifier0.newValue(type2);
        int int4 = type2.getSize();
        java.lang.String str5 = type2.toString();
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertNotNull(value3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;" + "'", str5, "Lorg.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .;");
    }

    @Test
    public void test05491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05491");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean3 = type1.equals((java.lang.Object) 151);
        org.mockito.asm.Type type4 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) (byte) 100);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean11 = type9.equals((java.lang.Object) 151);
        org.mockito.asm.Type type12 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean14 = type12.equals((java.lang.Object) (byte) 100);
        java.lang.String str15 = type12.getClassName();
        org.mockito.asm.Type[] typeArray16 = new org.mockito.asm.Type[] { type1, type4, type5, type9, type12 };
        java.lang.String str17 = org.mockito.asm.Type.getMethodDescriptor(type0, typeArray16);
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier22 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type18, false);
        org.mockito.asm.Type type23 = null;
        org.mockito.asm.tree.analysis.Value value24 = simpleVerifier22.newValue(type23);
        org.mockito.asm.Type type25 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type26 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list27 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier29 = new org.mockito.asm.tree.analysis.SimpleVerifier(type25, type26, list27, true);
        java.lang.Class<?> wildcardClass30 = simpleVerifier29.getClass();
        org.mockito.asm.Type type31 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass30);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str34 = type33.getDescriptor();
        int int35 = type33.getSort();
        int int36 = type33.getSize();
        java.lang.String str37 = type33.getClassName();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type31, type33, true);
        org.mockito.asm.Type type40 = org.mockito.asm.Type.CHAR_TYPE;
        int int42 = type40.getOpcode(101);
        int int44 = type40.getOpcode(191);
        org.mockito.asm.tree.analysis.Value value45 = simpleVerifier39.newValue(type40);
        org.mockito.asm.Type type46 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean48 = type46.equals((java.lang.Object) (byte) 100);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException52 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException54 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException52.addSuppressed((java.lang.Throwable) analyzerException54);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException56 = new org.mockito.asm.tree.analysis.AnalyzerException("hi!", (java.lang.Throwable) analyzerException52);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException57 = new org.mockito.asm.tree.analysis.AnalyzerException("char", (java.lang.Throwable) analyzerException56);
        boolean boolean58 = type46.equals((java.lang.Object) analyzerException57);
        org.mockito.asm.tree.analysis.Value value59 = simpleVerifier39.newValue(type46);
        java.lang.String str60 = type46.getDescriptor();
        java.lang.String str61 = type46.getDescriptor();
        java.lang.String str62 = type46.getDescriptor();
        org.mockito.asm.Type[] typeArray64 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str65 = org.mockito.asm.Type.getMethodDescriptor(type46, typeArray64);
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier22.newValue(type46);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode67 = null;
        java.util.List list68 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value69 = simpleVerifier22.naryOperation(abstractInsnNode67, list68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "float" + "'", str8, "float");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "float" + "'", str15, "float");
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "(CBFCF)B" + "'", str17, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(value24);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lfloat;" + "'", str34, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 10 + "'", int35 == 10);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "float" + "'", str37, "float");
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 101 + "'", int42 == 101);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 191 + "'", int44 == 191);
        org.junit.Assert.assertNotNull(value45);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "F" + "'", str60, "F");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "F" + "'", str61, "F");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "F" + "'", str62, "F");
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "(CBFCF)F" + "'", str65, "(CBFCF)F");
        org.junit.Assert.assertNotNull(value66);
    }

    @Test
    public void test05492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05492");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.Type type1 = null;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, false);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 151);
        java.lang.String str8 = type5.getClassName();
        org.mockito.asm.Type type9 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type14 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean16 = type14.equals((java.lang.Object) (byte) 100);
        java.lang.String str17 = type14.getClassName();
        org.mockito.asm.Type type18 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean20 = type18.equals((java.lang.Object) 151);
        org.mockito.asm.Type type21 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean23 = type21.equals((java.lang.Object) (byte) 100);
        java.lang.String str24 = type21.getClassName();
        org.mockito.asm.Type[] typeArray25 = new org.mockito.asm.Type[] { type10, type13, type14, type18, type21 };
        java.lang.String str26 = org.mockito.asm.Type.getMethodDescriptor(type9, typeArray25);
        java.lang.String str27 = org.mockito.asm.Type.getMethodDescriptor(type5, typeArray25);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException31 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException30);
        java.lang.Class<?> wildcardClass32 = analyzerException30.getClass();
        org.mockito.asm.Type type33 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        java.lang.String str34 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass32);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass32);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier37 = new org.mockito.asm.tree.analysis.SimpleVerifier(type5, type35, true);
        boolean boolean39 = type35.equals((java.lang.Object) 81);
        org.mockito.asm.tree.analysis.Value value40 = simpleVerifier4.newValue(type35);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("LB;");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("void", (java.lang.Throwable) analyzerException44);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException46 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", (java.lang.Throwable) analyzerException44);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException48 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException48.addSuppressed((java.lang.Throwable) analyzerException50);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException53 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        analyzerException50.addSuppressed((java.lang.Throwable) analyzerException53);
        analyzerException46.addSuppressed((java.lang.Throwable) analyzerException50);
        java.lang.Class<?> wildcardClass56 = analyzerException50.getClass();
        org.mockito.asm.Type type57 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass56);
        java.lang.String str58 = type57.getClassName();
        java.util.List list59 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type57, list59, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value63 = simpleVerifier61.newOperation(abstractInsnNode62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "char" + "'", str8, "char");
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "float" + "'", str17, "float");
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "float" + "'", str24, "float");
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "(CBFCF)B" + "'", str26, "(CBFCF)B");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "(CBFCF)C" + "'", str27, "(CBFCF)C");
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str34, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException" + "'", str58, "org.mockito.asm.tree.analysis.AnalyzerException");
    }

    @Test
    public void test05493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05493");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getReturnType("(CBFCF)L(CBFCF)Lorg/mockito/asm/tree/analysis/AnalyzerException;;");
        java.lang.Object obj3 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter4 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode5 = null;
        org.mockito.asm.tree.analysis.Value value6 = null;
        org.mockito.asm.tree.analysis.Value value7 = basicInterpreter4.copyOperation(abstractInsnNode5, value6);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode8 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter10 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode11 = null;
        org.mockito.asm.tree.analysis.Value value12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = basicInterpreter10.ternaryOperation(abstractInsnNode11, value12, value13, value14);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.Type type20 = null;
        org.mockito.asm.tree.analysis.Value value21 = basicInterpreter16.newValue(type20);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = basicInterpreter22.copyOperation(abstractInsnNode23, value24);
        org.mockito.asm.Type type26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.newValue(type26);
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter10.merge(value21, value27);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = basicInterpreter29.ternaryOperation(abstractInsnNode30, value31, value32, value33);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter35 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode36 = null;
        org.mockito.asm.tree.analysis.Value value37 = null;
        org.mockito.asm.tree.analysis.Value value38 = basicInterpreter35.copyOperation(abstractInsnNode36, value37);
        org.mockito.asm.Type type39 = null;
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter35.newValue(type39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter29.merge(value40, value46);
        org.mockito.asm.tree.analysis.Value value48 = simpleVerifier9.merge(value28, value40);
        org.mockito.asm.tree.analysis.Value value49 = basicInterpreter4.copyOperation(abstractInsnNode8, value48);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException50 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj3, value49);
        java.lang.Class<?> wildcardClass51 = value49.getClass();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass51);
        java.lang.String str53 = type52.getClassName();
        org.mockito.asm.Type type55 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str56 = type55.getDescriptor();
        int int57 = type55.getSort();
        int int58 = type55.getSize();
        java.util.List list59 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier61 = new org.mockito.asm.tree.analysis.SimpleVerifier(type52, type55, list59, true);
        java.util.List list62 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier64 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type52, list62, false);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value66 = simpleVerifier64.newOperation(abstractInsnNode65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNull(value7);
        org.junit.Assert.assertNull(value15);
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNotNull(value21);
        org.junit.Assert.assertNull(value25);
        org.junit.Assert.assertNotNull(value27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNull(value34);
        org.junit.Assert.assertNull(value38);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "org.mockito.asm.tree.analysis.BasicValue" + "'", str53, "org.mockito.asm.tree.analysis.BasicValue");
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Lfloat;" + "'", str56, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 10 + "'", int57 == 10);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test05494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05494");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.LONG_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BOOLEAN_TYPE;
        java.util.List list2 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier4 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type1, list2, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException7 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException8 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException7);
        java.lang.Class<?> wildcardClass9 = analyzerException7.getClass();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass9);
        int int12 = type10.getOpcode(114);
        java.lang.Class<?> wildcardClass13 = type10.getClass();
        org.mockito.asm.Type type14 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass13);
        int int16 = type15.getSize();
        java.lang.String str17 = type15.getDescriptor();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type15, list18, true);
        org.mockito.asm.Type type22 = org.mockito.asm.Type.getReturnType("(CBFCF)Lorg/mockito/asm/tree/analysis/BasicValue;");
        int int24 = type22.getOpcode(101);
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier20.newValue(type22);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode26 = null;
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter29 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode30 = null;
        org.mockito.asm.tree.analysis.Value value31 = null;
        org.mockito.asm.tree.analysis.Value value32 = basicInterpreter29.copyOperation(abstractInsnNode30, value31);
        org.mockito.asm.Type type33 = org.mockito.asm.Type.INT_TYPE;
        java.lang.String str34 = type33.getDescriptor();
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter29.newValue(type33);
        org.mockito.asm.Type[] typeArray37 = org.mockito.asm.Type.getArgumentTypes("(CBFCF)C");
        java.lang.String str38 = org.mockito.asm.Type.getMethodDescriptor(type33, typeArray37);
        java.lang.Class<?> wildcardClass39 = typeArray37.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException44 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException45 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException44);
        java.lang.Class<?> wildcardClass46 = analyzerException44.getClass();
        org.mockito.asm.Type type47 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass46);
        java.lang.String str48 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass46);
        java.lang.String str49 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass46);
        org.mockito.asm.Type type50 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type51 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean53 = type51.equals((java.lang.Object) 151);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type type59 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean61 = type59.equals((java.lang.Object) 151);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean64 = type62.equals((java.lang.Object) (byte) 100);
        java.lang.String str65 = type62.getClassName();
        org.mockito.asm.Type[] typeArray66 = new org.mockito.asm.Type[] { type51, type54, type55, type59, type62 };
        java.lang.String str67 = org.mockito.asm.Type.getMethodDescriptor(type50, typeArray66);
        org.mockito.asm.Type type68 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean70 = type68.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier72 = new org.mockito.asm.tree.analysis.SimpleVerifier(type50, type68, false);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = simpleVerifier72.newValue(type73);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException75 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: ", (java.lang.Object) str49, value74);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException76 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Object) type40, value74);
        int int77 = type40.getDimensions();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type40, true);
        org.mockito.asm.Type type81 = org.mockito.asm.Type.getReturnType("(CBFCF)F");
        org.mockito.asm.tree.analysis.Value value82 = simpleVerifier79.newValue(type81);
        int int83 = value82.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value84 = simpleVerifier20.unaryOperation(abstractInsnNode26, value82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 118 + "'", int12 == 118);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(type14);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Lorg/mockito/asm/Type;" + "'", str17, "Lorg/mockito/asm/Type;");
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 105 + "'", int24 == 105);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNull(value32);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "I" + "'", str34, "I");
        org.junit.Assert.assertNotNull(value35);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "(CBFCF)I" + "'", str38, "(CBFCF)I");
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str48, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str49, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(type51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "float" + "'", str65, "float");
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "(CBFCF)B" + "'", str67, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(type81);
        org.junit.Assert.assertNotNull(value82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
    }

    @Test
    public void test05495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05495");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.FLOAT_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str3 = type2.getDescriptor();
        int int4 = type2.getSort();
        java.util.List list5 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier7 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type2, list5, false);
        int int8 = type2.getSize();
        int int9 = type2.getSort();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.VOID_TYPE;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier12 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type10, false);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.BOOLEAN_TYPE;
        int int15 = type13.getOpcode(48);
        java.lang.String str16 = type13.getClassName();
        java.lang.String str17 = type13.getClassName();
        java.util.List list18 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier20 = new org.mockito.asm.tree.analysis.SimpleVerifier(type2, type13, list18, true);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException23 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException24 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException23);
        java.lang.Class<?> wildcardClass25 = analyzerException23.getClass();
        org.mockito.asm.Type type26 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass25);
        org.mockito.asm.Type type27 = type26.getElementType();
        org.mockito.asm.tree.analysis.Value value28 = simpleVerifier20.newValue(type27);
        org.mockito.asm.Type type29 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean31 = type29.equals((java.lang.Object) (byte) 100);
        java.lang.String str32 = type29.getClassName();
        boolean boolean34 = type29.equals((java.lang.Object) 177);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException37 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException38 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException37);
        java.lang.Class<?> wildcardClass39 = analyzerException37.getClass();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass39);
        org.mockito.asm.Type type41 = type40.getElementType();
        java.lang.String str42 = type41.getClassName();
        java.lang.String str43 = type41.getDescriptor();
        java.util.List list44 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier46 = new org.mockito.asm.tree.analysis.SimpleVerifier(type29, type41, list44, false);
        java.util.List list47 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier49 = new org.mockito.asm.tree.analysis.SimpleVerifier(type27, type29, list47, true);
        java.lang.Class<?> wildcardClass50 = type27.getClass();
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Lfloat;" + "'", str3, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 48 + "'", int15 == 48);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "boolean" + "'", str16, "boolean");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "boolean" + "'", str17, "boolean");
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(type27);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "float" + "'", str32, "float");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "g.mockito.asm.tree.analysis.AnalyzerException" + "'", str42, "g.mockito.asm.tree.analysis.AnalyzerException");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Lg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str43, "Lg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test05496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05496");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("B");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("LB;");
        java.lang.String str4 = type3.getInternalName();
        java.lang.String str5 = type3.toString();
        java.util.List list6 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier8 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type3, list6, true);
        org.mockito.asm.Type type10 = org.mockito.asm.Type.getObjectType("hi!");
        java.lang.String str11 = type10.getClassName();
        java.util.List list12 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier14 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type10, list12, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode15 = null;
        java.util.List list16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value17 = simpleVerifier14.naryOperation(abstractInsnNode15, list16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "LB;" + "'", str4, "LB;");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "LLB;;" + "'", str5, "LLB;;");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
    }

    @Test
    public void test05497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05497");
        org.mockito.asm.Type type0 = org.mockito.asm.Type.SHORT_TYPE;
        org.mockito.asm.Type type1 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type2 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean4 = type2.equals((java.lang.Object) 151);
        org.mockito.asm.Type type5 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type6 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean8 = type6.equals((java.lang.Object) (byte) 100);
        java.lang.String str9 = type6.getClassName();
        org.mockito.asm.Type type10 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean12 = type10.equals((java.lang.Object) 151);
        org.mockito.asm.Type type13 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean15 = type13.equals((java.lang.Object) (byte) 100);
        java.lang.String str16 = type13.getClassName();
        org.mockito.asm.Type[] typeArray17 = new org.mockito.asm.Type[] { type2, type5, type6, type10, type13 };
        java.lang.String str18 = org.mockito.asm.Type.getMethodDescriptor(type1, typeArray17);
        org.mockito.asm.Type type19 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean21 = type19.equals((java.lang.Object) 151);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier23 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type19, false);
        org.mockito.asm.Type type24 = null;
        org.mockito.asm.tree.analysis.Value value25 = simpleVerifier23.newValue(type24);
        org.mockito.asm.Type type26 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean28 = type26.equals((java.lang.Object) (byte) 100);
        java.lang.String str29 = type26.getClassName();
        org.mockito.asm.tree.analysis.Value value30 = simpleVerifier23.newValue(type26);
        java.util.List list31 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier33 = new org.mockito.asm.tree.analysis.SimpleVerifier(type0, type26, list31, true);
        org.mockito.asm.Type type35 = org.mockito.asm.Type.getType("Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        int int37 = type35.getOpcode(167);
        org.mockito.asm.Type type38 = type35.getElementType();
        int int39 = type35.getSort();
        org.mockito.asm.Type type40 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean42 = type40.equals((java.lang.Object) 24);
        org.mockito.asm.Type type43 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type44 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean46 = type44.equals((java.lang.Object) 151);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.BYTE_TYPE;
        org.mockito.asm.Type type48 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean50 = type48.equals((java.lang.Object) (byte) 100);
        java.lang.String str51 = type48.getClassName();
        org.mockito.asm.Type type52 = org.mockito.asm.Type.CHAR_TYPE;
        boolean boolean54 = type52.equals((java.lang.Object) 151);
        org.mockito.asm.Type type55 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean57 = type55.equals((java.lang.Object) (byte) 100);
        java.lang.String str58 = type55.getClassName();
        org.mockito.asm.Type[] typeArray59 = new org.mockito.asm.Type[] { type44, type47, type48, type52, type55 };
        java.lang.String str60 = org.mockito.asm.Type.getMethodDescriptor(type43, typeArray59);
        org.mockito.asm.Type type62 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: ");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException65 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException66 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException65);
        java.lang.Class<?> wildcardClass67 = analyzerException65.getClass();
        org.mockito.asm.Type type68 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.lang.String str69 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass67);
        org.mockito.asm.Type type70 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass67);
        java.util.List list71 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier73 = new org.mockito.asm.tree.analysis.SimpleVerifier(type62, type70, list71, true);
        java.util.List list74 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier76 = new org.mockito.asm.tree.analysis.SimpleVerifier(type43, type62, list74, false);
        boolean boolean77 = type40.equals((java.lang.Object) type43);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier79 = new org.mockito.asm.tree.analysis.SimpleVerifier(type35, type43, true);
        org.mockito.asm.tree.analysis.Value value80 = simpleVerifier33.newValue(type35);
        org.mockito.asm.Type type82 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str83 = type82.getDescriptor();
        int int84 = type82.getSort();
        int int85 = type82.getDimensions();
        int int87 = type82.getOpcode((int) (short) 10);
        int int88 = type82.getSort();
        org.mockito.asm.tree.analysis.Value value89 = simpleVerifier33.newValue(type82);
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.Type type90 = type82.getElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type0);
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(type6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "float" + "'", str9, "float");
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "float" + "'", str16, "float");
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "(CBFCF)B" + "'", str18, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(value25);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "float" + "'", str29, "float");
        org.junit.Assert.assertNotNull(value30);
        org.junit.Assert.assertNotNull(type35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 171 + "'", int37 == 171);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 10 + "'", int39 == 10);
        org.junit.Assert.assertNotNull(type40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(type48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "float" + "'", str51, "float");
        org.junit.Assert.assertNotNull(type52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "float" + "'", str58, "float");
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "(CBFCF)B" + "'", str60, "(CBFCF)B");
        org.junit.Assert.assertNotNull(type62);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(type68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Lorg/mockito/asm/tree/analysis/AnalyzerException;" + "'", str69, "Lorg/mockito/asm/tree/analysis/AnalyzerException;");
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(value80);
        org.junit.Assert.assertNotNull(type82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Lfloat;" + "'", str83, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 10 + "'", int84 == 10);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 14 + "'", int87 == 14);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 10 + "'", int88 == 10);
        org.junit.Assert.assertNotNull(value89);
    }

    @Test
    public void test05498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05498");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("(CBFCF)Lboolean;");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str4 = type3.getDescriptor();
        int int5 = type3.getSort();
        int int6 = type3.getDimensions();
        org.mockito.asm.Type type8 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str9 = type8.getDescriptor();
        int int10 = type8.getSort();
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type8, list11, true);
        org.mockito.asm.Type type15 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str16 = type15.getDescriptor();
        int int17 = type15.getSort();
        int int18 = type15.getDimensions();
        org.mockito.asm.Type type20 = org.mockito.asm.Type.getObjectType("float");
        java.lang.String str21 = type20.getDescriptor();
        int int22 = type20.getSort();
        java.util.List list23 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier25 = new org.mockito.asm.tree.analysis.SimpleVerifier(type15, type20, list23, true);
        org.mockito.asm.tree.analysis.Value value26 = simpleVerifier13.newValue(type20);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException29 = new org.mockito.asm.tree.analysis.AnalyzerException("");
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException30 = new org.mockito.asm.tree.analysis.AnalyzerException("", (java.lang.Throwable) analyzerException29);
        java.lang.Class<?> wildcardClass31 = analyzerException29.getClass();
        org.mockito.asm.Type type32 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        java.lang.String str33 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        java.lang.String str34 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        java.lang.String str35 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass31);
        org.mockito.asm.Type type36 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass31);
        org.mockito.asm.tree.analysis.Value value37 = simpleVerifier13.newValue(type36);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier39 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type36, true);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode40 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = basicInterpreter41.copyOperation(abstractInsnNode42, value43);
        org.mockito.asm.Type type45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.newValue(type45);
        org.mockito.asm.Type type47 = org.mockito.asm.Type.FLOAT_TYPE;
        boolean boolean49 = type47.equals((java.lang.Object) (byte) 100);
        java.lang.String str50 = type47.getClassName();
        boolean boolean52 = type47.equals((java.lang.Object) 177);
        int int53 = type47.getSize();
        java.lang.String str54 = type47.toString();
        org.mockito.asm.tree.analysis.Value value55 = basicInterpreter41.newValue(type47);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode56 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter57 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode58 = null;
        org.mockito.asm.tree.analysis.Value value59 = null;
        org.mockito.asm.tree.analysis.Value value60 = null;
        org.mockito.asm.tree.analysis.Value value61 = null;
        org.mockito.asm.tree.analysis.Value value62 = basicInterpreter57.ternaryOperation(abstractInsnNode58, value59, value60, value61);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter63 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode64 = null;
        org.mockito.asm.tree.analysis.Value value65 = null;
        org.mockito.asm.tree.analysis.Value value66 = basicInterpreter63.copyOperation(abstractInsnNode64, value65);
        org.mockito.asm.Type type67 = null;
        org.mockito.asm.tree.analysis.Value value68 = basicInterpreter63.newValue(type67);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter69 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode70 = null;
        org.mockito.asm.tree.analysis.Value value71 = null;
        org.mockito.asm.tree.analysis.Value value72 = basicInterpreter69.copyOperation(abstractInsnNode70, value71);
        org.mockito.asm.Type type73 = null;
        org.mockito.asm.tree.analysis.Value value74 = basicInterpreter69.newValue(type73);
        org.mockito.asm.tree.analysis.Value value75 = basicInterpreter57.merge(value68, value74);
        org.mockito.asm.tree.analysis.Value value76 = basicInterpreter41.copyOperation(abstractInsnNode56, value75);
        int int77 = value75.getSize();
        int int78 = value75.getSize();
        // The following exception was thrown during execution in test generation
        try {
            org.mockito.asm.tree.analysis.Value value79 = simpleVerifier39.unaryOperation(abstractInsnNode40, value75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Lfloat;" + "'", str4, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(type8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Lfloat;" + "'", str9, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Lfloat;" + "'", str16, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Lfloat;" + "'", str21, "Lfloat;");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertNotNull(value26);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str33, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str34, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org/mockito/asm/tree/analysis/AnalyzerException" + "'", str35, "org/mockito/asm/tree/analysis/AnalyzerException");
        org.junit.Assert.assertNotNull(type36);
        org.junit.Assert.assertNotNull(value37);
        org.junit.Assert.assertNull(value44);
        org.junit.Assert.assertNotNull(value46);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "float" + "'", str50, "float");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "F" + "'", str54, "F");
        org.junit.Assert.assertNotNull(value55);
        org.junit.Assert.assertNull(value62);
        org.junit.Assert.assertNull(value66);
        org.junit.Assert.assertNotNull(value68);
        org.junit.Assert.assertNull(value72);
        org.junit.Assert.assertNotNull(value74);
        org.junit.Assert.assertNotNull(value75);
        org.junit.Assert.assertNotNull(value76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test05499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05499");
        org.mockito.asm.Type type1 = org.mockito.asm.Type.getObjectType("LB;");
        int int2 = type1.getDimensions();
        java.lang.Object obj4 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter5 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode6 = null;
        org.mockito.asm.tree.analysis.Value value7 = null;
        org.mockito.asm.tree.analysis.Value value8 = basicInterpreter5.copyOperation(abstractInsnNode6, value7);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode9 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier10 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter11 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode12 = null;
        org.mockito.asm.tree.analysis.Value value13 = null;
        org.mockito.asm.tree.analysis.Value value14 = null;
        org.mockito.asm.tree.analysis.Value value15 = null;
        org.mockito.asm.tree.analysis.Value value16 = basicInterpreter11.ternaryOperation(abstractInsnNode12, value13, value14, value15);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter17 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode18 = null;
        org.mockito.asm.tree.analysis.Value value19 = null;
        org.mockito.asm.tree.analysis.Value value20 = basicInterpreter17.copyOperation(abstractInsnNode18, value19);
        org.mockito.asm.Type type21 = null;
        org.mockito.asm.tree.analysis.Value value22 = basicInterpreter17.newValue(type21);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter23 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = basicInterpreter23.copyOperation(abstractInsnNode24, value25);
        org.mockito.asm.Type type27 = null;
        org.mockito.asm.tree.analysis.Value value28 = basicInterpreter23.newValue(type27);
        org.mockito.asm.tree.analysis.Value value29 = basicInterpreter11.merge(value22, value28);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter30 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode31 = null;
        org.mockito.asm.tree.analysis.Value value32 = null;
        org.mockito.asm.tree.analysis.Value value33 = null;
        org.mockito.asm.tree.analysis.Value value34 = null;
        org.mockito.asm.tree.analysis.Value value35 = basicInterpreter30.ternaryOperation(abstractInsnNode31, value32, value33, value34);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter36 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode37 = null;
        org.mockito.asm.tree.analysis.Value value38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter36.copyOperation(abstractInsnNode37, value38);
        org.mockito.asm.Type type40 = null;
        org.mockito.asm.tree.analysis.Value value41 = basicInterpreter36.newValue(type40);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter42 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = basicInterpreter42.copyOperation(abstractInsnNode43, value44);
        org.mockito.asm.Type type46 = null;
        org.mockito.asm.tree.analysis.Value value47 = basicInterpreter42.newValue(type46);
        org.mockito.asm.tree.analysis.Value value48 = basicInterpreter30.merge(value41, value47);
        org.mockito.asm.tree.analysis.Value value49 = simpleVerifier10.merge(value29, value41);
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter5.copyOperation(abstractInsnNode9, value49);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException51 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj4, value50);
        java.lang.Class<?> wildcardClass52 = value50.getClass();
        java.lang.String str53 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type54 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        java.lang.String str55 = org.mockito.asm.Type.getInternalName((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type56 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass52);
        org.mockito.asm.Type type57 = type56.getElementType();
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier59 = new org.mockito.asm.tree.analysis.SimpleVerifier(type1, type57, false);
        org.mockito.asm.Type type61 = org.mockito.asm.Type.getObjectType("hi!");
        int int62 = type61.getDimensions();
        org.mockito.asm.tree.analysis.Value value63 = simpleVerifier59.newValue(type61);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getObjectType("org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier59.newValue(type65);
        java.lang.String str67 = type65.getInternalName();
        org.junit.Assert.assertNotNull(type1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNull(value8);
        org.junit.Assert.assertNull(value16);
        org.junit.Assert.assertNull(value20);
        org.junit.Assert.assertNotNull(value22);
        org.junit.Assert.assertNull(value26);
        org.junit.Assert.assertNotNull(value28);
        org.junit.Assert.assertNotNull(value29);
        org.junit.Assert.assertNull(value35);
        org.junit.Assert.assertNull(value39);
        org.junit.Assert.assertNotNull(value41);
        org.junit.Assert.assertNull(value45);
        org.junit.Assert.assertNotNull(value47);
        org.junit.Assert.assertNotNull(value48);
        org.junit.Assert.assertNotNull(value49);
        org.junit.Assert.assertNotNull(value50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str53, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org/mockito/asm/tree/analysis/BasicValue" + "'", str55, "org/mockito/asm/tree/analysis/BasicValue");
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(type57);
        org.junit.Assert.assertNotNull(type61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(value63);
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found ." + "'", str67, "org.mockito.asm.tree.analysis.AnalyzerException: float: expected null, but found .");
    }

    @Test
    public void test05500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05500");
        org.mockito.asm.Type type3 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type4 = org.mockito.asm.Type.INT_TYPE;
        org.mockito.asm.Type type5 = org.mockito.asm.Type.VOID_TYPE;
        boolean boolean7 = type5.equals((java.lang.Object) 24);
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier9 = new org.mockito.asm.tree.analysis.SimpleVerifier(type4, type5, true);
        java.lang.String str10 = type5.getClassName();
        java.util.List list11 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier13 = new org.mockito.asm.tree.analysis.SimpleVerifier(type3, type5, list11, true);
        java.lang.Object obj15 = null;
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter16 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode17 = null;
        org.mockito.asm.tree.analysis.Value value18 = null;
        org.mockito.asm.tree.analysis.Value value19 = basicInterpreter16.copyOperation(abstractInsnNode17, value18);
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode20 = null;
        org.mockito.asm.tree.analysis.SimpleVerifier simpleVerifier21 = new org.mockito.asm.tree.analysis.SimpleVerifier();
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter22 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode23 = null;
        org.mockito.asm.tree.analysis.Value value24 = null;
        org.mockito.asm.tree.analysis.Value value25 = null;
        org.mockito.asm.tree.analysis.Value value26 = null;
        org.mockito.asm.tree.analysis.Value value27 = basicInterpreter22.ternaryOperation(abstractInsnNode23, value24, value25, value26);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter28 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode29 = null;
        org.mockito.asm.tree.analysis.Value value30 = null;
        org.mockito.asm.tree.analysis.Value value31 = basicInterpreter28.copyOperation(abstractInsnNode29, value30);
        org.mockito.asm.Type type32 = null;
        org.mockito.asm.tree.analysis.Value value33 = basicInterpreter28.newValue(type32);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter34 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode35 = null;
        org.mockito.asm.tree.analysis.Value value36 = null;
        org.mockito.asm.tree.analysis.Value value37 = basicInterpreter34.copyOperation(abstractInsnNode35, value36);
        org.mockito.asm.Type type38 = null;
        org.mockito.asm.tree.analysis.Value value39 = basicInterpreter34.newValue(type38);
        org.mockito.asm.tree.analysis.Value value40 = basicInterpreter22.merge(value33, value39);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter41 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode42 = null;
        org.mockito.asm.tree.analysis.Value value43 = null;
        org.mockito.asm.tree.analysis.Value value44 = null;
        org.mockito.asm.tree.analysis.Value value45 = null;
        org.mockito.asm.tree.analysis.Value value46 = basicInterpreter41.ternaryOperation(abstractInsnNode42, value43, value44, value45);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter47 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode48 = null;
        org.mockito.asm.tree.analysis.Value value49 = null;
        org.mockito.asm.tree.analysis.Value value50 = basicInterpreter47.copyOperation(abstractInsnNode48, value49);
        org.mockito.asm.Type type51 = null;
        org.mockito.asm.tree.analysis.Value value52 = basicInterpreter47.newValue(type51);
        org.mockito.asm.tree.analysis.BasicInterpreter basicInterpreter53 = new org.mockito.asm.tree.analysis.BasicInterpreter();
        org.mockito.asm.tree.AbstractInsnNode abstractInsnNode54 = null;
        org.mockito.asm.tree.analysis.Value value55 = null;
        org.mockito.asm.tree.analysis.Value value56 = basicInterpreter53.copyOperation(abstractInsnNode54, value55);
        org.mockito.asm.Type type57 = null;
        org.mockito.asm.tree.analysis.Value value58 = basicInterpreter53.newValue(type57);
        org.mockito.asm.tree.analysis.Value value59 = basicInterpreter41.merge(value52, value58);
        org.mockito.asm.tree.analysis.Value value60 = simpleVerifier21.merge(value40, value52);
        org.mockito.asm.tree.analysis.Value value61 = basicInterpreter16.copyOperation(abstractInsnNode20, value60);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException62 = new org.mockito.asm.tree.analysis.AnalyzerException("(CBFCF)B", obj15, value61);
        java.lang.Class<?> wildcardClass63 = value61.getClass();
        java.lang.String str64 = org.mockito.asm.Type.getDescriptor((java.lang.Class) wildcardClass63);
        org.mockito.asm.Type type65 = org.mockito.asm.Type.getType((java.lang.Class) wildcardClass63);
        org.mockito.asm.tree.analysis.Value value66 = simpleVerifier13.newValue(type65);
        org.mockito.asm.Type type67 = org.mockito.asm.Type.SHORT_TYPE;
        int int68 = type67.getSize();
        org.mockito.asm.tree.analysis.Value value69 = simpleVerifier13.newValue(type67);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException70 = new org.mockito.asm.tree.analysis.AnalyzerException("g.mockito.asm.tree.analysis.AnalyzerException", (java.lang.Object) 163, value69);
        org.mockito.asm.tree.analysis.AnalyzerException analyzerException71 = new org.mockito.asm.tree.analysis.AnalyzerException("org.mockito.asm.tree.analysis.AnalyzerException: C: expected B, but found .", (java.lang.Throwable) analyzerException70);
        org.junit.Assert.assertNotNull(type3);
        org.junit.Assert.assertNotNull(type4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "void" + "'", str10, "void");
        org.junit.Assert.assertNull(value19);
        org.junit.Assert.assertNull(value27);
        org.junit.Assert.assertNull(value31);
        org.junit.Assert.assertNotNull(value33);
        org.junit.Assert.assertNull(value37);
        org.junit.Assert.assertNotNull(value39);
        org.junit.Assert.assertNotNull(value40);
        org.junit.Assert.assertNull(value46);
        org.junit.Assert.assertNull(value50);
        org.junit.Assert.assertNotNull(value52);
        org.junit.Assert.assertNull(value56);
        org.junit.Assert.assertNotNull(value58);
        org.junit.Assert.assertNotNull(value59);
        org.junit.Assert.assertNotNull(value60);
        org.junit.Assert.assertNotNull(value61);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Lorg/mockito/asm/tree/analysis/BasicValue;" + "'", str64, "Lorg/mockito/asm/tree/analysis/BasicValue;");
        org.junit.Assert.assertNotNull(type65);
        org.junit.Assert.assertNotNull(value66);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(value69);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest43 {

    public static boolean debug = false;

    @Test
    public void test21501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21501");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node9.isReturn();
        boolean boolean22 = node9.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str24 = jSDocInfo23.getVersion();
        boolean boolean25 = jSDocInfo23.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo23.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList27 = jSDocInfo23.getImplementedInterfaces();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean32 = node31.isThrow();
        java.lang.String str36 = node31.toString(true, false, true);
        jSDocInfo23.setAssociatedNode(node31);
        com.google.javascript.rhino.Node node38 = node31.removeFirstChild();
        boolean boolean39 = node31.isNumber();
        node9.addChildToBack(node31);
        boolean boolean41 = node31.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean46 = node45.isThrow();
        java.lang.String str50 = node45.toString(true, false, true);
        java.lang.String str51 = node45.getQualifiedName();
        boolean boolean52 = node45.isIn();
        com.google.javascript.rhino.Node node53 = node45.cloneTree();
        boolean boolean54 = node53.isRegExp();
        int int55 = node53.getSourcePosition();
        node31.addChildrenToBack(node53);
        node53.setLineno((int) (byte) -1);
        boolean boolean59 = node53.isFor();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(jSTypeExpressionList27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  0" + "'", str36, "STRING  0");
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "STRING  0" + "'", str50, "STRING  0");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test21502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21502");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
    }

    @Test
    public void test21503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21503");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getStartLine();
        int int3 = typePosition0.getEndLine();
        typePosition0.setPositionInformation(3, 39, 45, 19);
        int int9 = typePosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 45 + "'", int9 == 45);
    }

    @Test
    public void test21504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21504");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isTypeOf();
        boolean boolean23 = node19.isAssignAdd();
        boolean boolean24 = node19.isStringKey();
        boolean boolean25 = node19.isVoid();
        int int26 = node19.getLength();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nOR 0\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: OR 0\n)", (int) ' ', 97);
        com.google.javascript.rhino.Node node31 = node19.copyInformationFromForTree(node30);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(45);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        boolean boolean44 = node38.isDo();
        boolean boolean45 = node38.isDefaultCase();
        node38.setQuotedString();
        boolean boolean47 = node38.isDec();
        boolean boolean48 = node38.hasMoreThanOneChild();
        boolean boolean49 = node38.isTrue();
        com.google.javascript.rhino.Node node50 = node33.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node33.getStaticSourceFile();
        // The following exception was thrown during execution in test generation
        try {
            node31.removeChild(node33);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(staticSourceFile51);
    }

    @Test
    public void test21505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21505");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        boolean boolean2 = typePosition0.hasBrackets();
        boolean boolean3 = typePosition0.hasBrackets();
        boolean boolean4 = typePosition0.hasBrackets();
        boolean boolean5 = typePosition0.hasBrackets();
        int int6 = typePosition0.getPositionOnStartLine();
        typePosition0.setPositionInformation(29, 100, 37, 21);
        typePosition0.setPositionInformation(12, 0, (int) '4', 44);
        int int17 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(53, "OR 51");
        boolean boolean21 = node20.isLabel();
        java.util.Set<java.lang.String> strSet22 = node20.getDirectives();
        java.lang.Object obj24 = node20.getProp(44);
        boolean boolean25 = node20.isQualifiedName();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        java.lang.String str36 = node30.toStringTree();
        boolean boolean37 = node30.isStringKey();
        boolean boolean38 = node30.isAnd();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = node30.getStaticSourceFile();
        boolean boolean40 = node30.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable41 = node30.children();
        com.google.javascript.rhino.Node node42 = node20.clonePropsFrom(node30);
        boolean boolean43 = node20.isUnscopedQualifiedName();
        typePosition0.setItem(node20);
        com.google.javascript.rhino.Node node45 = node20.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node45.children();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  0\n" + "'", str36, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(staticSourceFile39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(nodeIterable41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(node45);
    }

    @Test
    public void test21506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21506");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        boolean boolean7 = jSDocInfo0.hasReturnType();
        java.lang.String str8 = jSDocInfo0.getBlockDescription();
        boolean boolean9 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getReturnType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str12 = jSDocInfo0.getDeprecationReason();
        boolean boolean13 = jSDocInfo0.isInterface();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test21507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21507");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        boolean boolean24 = node11.isVarArgs();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean29 = node28.isThrow();
        java.lang.String str33 = node28.toString(true, false, true);
        node28.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(53, "OR 51");
        boolean boolean39 = node38.isLabel();
        java.util.Set<java.lang.String> strSet40 = node38.getDirectives();
        java.lang.Object obj42 = node38.getProp(44);
        node38.setSourceEncodedPosition(8);
        node28.addChildrenToBack(node38);
        boolean boolean46 = node11.isEquivalentTo(node38);
        boolean boolean47 = node38.isUnscopedQualifiedName();
        boolean boolean48 = node38.isNE();
        java.lang.String str49 = node38.getSourceFileName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node38.siblings();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "STRING  0" + "'", str33, "STRING  0");
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(nodeIterable50);
    }

    @Test
    public void test21508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21508");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        int int2 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean7 = node6.isThrow();
        java.lang.String str11 = node6.toString(true, false, true);
        java.lang.String str12 = node6.getQualifiedName();
        boolean boolean13 = node6.isIn();
        com.google.javascript.rhino.Node node14 = node6.cloneTree();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node18.setCharno(1);
        java.util.Set<java.lang.String> strSet21 = node18.getDirectives();
        boolean boolean22 = node18.isHook();
        node14.addChildToFront(node18);
        boolean boolean24 = node18.isGetElem();
        boolean boolean25 = node18.isRegExp();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node18.siblings();
        boolean boolean27 = node18.isContinue();
        boolean boolean28 = node18.isQualifiedName();
        boolean boolean29 = node18.isLabel();
        int int30 = node18.getSourcePosition();
        boolean boolean31 = node18.hasOneChild();
        typePosition0.setItem(node18);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  0" + "'", str11, "STRING  0");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test21509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21509");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getThisType();
        boolean boolean4 = jSDocInfo0.hasBaseType();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        boolean boolean7 = jSDocInfo0.isExport();
        jSDocInfo0.addSuppression("false");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test21510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21510");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        boolean boolean28 = node17.hasChild(node27);
        int int29 = node17.getCharno();
        com.google.javascript.rhino.Node node30 = node7.useSourceInfoIfMissingFrom(node17);
        node30.setLength((int) ' ');
        node3.addChildrenToBack(node30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node30.getJSDocInfo();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node30.children();
        boolean boolean37 = node30.getBooleanProp((int) (byte) 0);
        boolean boolean38 = node30.isTrue();
        // The following exception was thrown during execution in test generation
        try {
            node30.setString("JSDocInfo");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR 1 [length: 32] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertNotNull(nodeIterable35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test21511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21511");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isName();
        java.lang.String str18 = node4.toStringTree();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node36 = node34.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) -1, node34, (int) (byte) 1, (int) '#');
        boolean boolean40 = node29.hasChild(node39);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node44 = node29.clonePropsFrom(node43);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        boolean boolean59 = node53.isScript();
        com.google.javascript.rhino.Node node60 = node53.detachFromParent();
        node60.setOptionalArg(false);
        boolean boolean64 = node60.getBooleanProp(31);
        com.google.javascript.rhino.Node node65 = node48.copyInformationFrom(node60);
        boolean boolean66 = node65.isLabel();
        com.google.javascript.rhino.Node node67 = node43.useSourceInfoIfMissingFrom(node65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(32, node67, 16, 97);
        node4.addChildrenToFront(node70);
        java.util.Set<java.lang.String> strSet72 = node4.getDirectives();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "STRING  0 [quoted: 1]\n" + "'", str18, "STRING  0 [quoted: 1]\n");
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(strSet72);
    }

    @Test
    public void test21512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21512");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int4 = node3.getType();
        boolean boolean5 = node3.isArrayLit();
        boolean boolean6 = node3.isComma();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean11 = node10.isThrow();
        java.lang.String str15 = node10.toString(true, false, true);
        java.lang.String str16 = node10.getQualifiedName();
        boolean boolean17 = node10.isIn();
        com.google.javascript.rhino.Node node18 = node10.cloneTree();
        boolean boolean19 = node18.isRegExp();
        boolean boolean20 = node18.isDebugger();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        node24.removeProp(47);
        boolean boolean27 = node24.isFromExterns();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double32 = node31.getDouble();
        boolean boolean33 = node31.isAdd();
        com.google.javascript.rhino.Node node34 = node31.cloneNode();
        boolean boolean35 = node34.isNE();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node57 = node55.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node55, (int) (byte) 1, (int) '#');
        boolean boolean61 = node50.hasChild(node60);
        int int62 = node50.getCharno();
        com.google.javascript.rhino.Node node63 = node40.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node68 = node40.srcref(node67);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean73 = node72.isFromExterns();
        boolean boolean74 = node68.hasChild(node72);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(52, node72);
        node34.addChildToBack(node75);
        java.lang.String str77 = node24.checkTreeEquals(node34);
        node24.setSourceFileForTesting("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        node24.setLength((int) (byte) 1);
        node24.setSourceEncodedPositionForTree(151562);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile84 = node24.getStaticSourceFile();
        node18.setStaticSourceFile(staticSourceFile84);
        node3.setStaticSourceFile(staticSourceFile84);
        node3.setSourceFileForTesting("(ERROR)");
        boolean boolean89 = node3.isNot();
        // The following exception was thrown during execution in test generation
        try {
            int int90 = node3.getSourceOffset();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Should not call getLineOffset with line number 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING  0" + "'", str15, "STRING  0");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4095.0d + "'", double32 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n" + "'", str77, "Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n");
        org.junit.Assert.assertNotNull(staticSourceFile84);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test21513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21513");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(37, 35, 1);
        boolean boolean4 = node3.isThrow();
        java.util.Set<java.lang.String> strSet5 = node3.getDirectives();
        node3.setSourceEncodedPositionForTree(50);
        boolean boolean8 = node3.isSyntheticBlock();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test21514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21514");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(8, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node9 = node7.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1, node7, (int) (byte) 1, (int) '#');
        boolean boolean13 = node7.isDo();
        boolean boolean14 = node7.isDefaultCase();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node28.hasChild(node38);
        int int40 = node28.getCharno();
        com.google.javascript.rhino.Node node41 = node18.useSourceInfoIfMissingFrom(node28);
        int int42 = node18.getSourcePosition();
        java.lang.String str43 = node18.toString();
        int int44 = node7.getIndexOfChild(node18);
        int int45 = node2.getIndexOfChild(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str47 = jSDocInfo46.getVersion();
        boolean boolean48 = jSDocInfo46.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo46.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo46.getImplementedInterfaces();
        java.lang.String str51 = jSDocInfo46.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo46.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = jSDocInfo46.getTypedefType();
        node2.setJSDocInfo(jSDocInfo46);
        boolean boolean56 = node2.isParamList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str58 = jSDocInfo57.getVersion();
        boolean boolean59 = jSDocInfo57.hasEnumParameterType();
        java.lang.String str61 = jSDocInfo57.getDescriptionForParameter("STRING  0\n");
        java.lang.String str62 = jSDocInfo57.getDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList63 = jSDocInfo57.getExtendedInterfaces();
        boolean boolean64 = jSDocInfo57.hasThisType();
        boolean boolean65 = jSDocInfo57.hasTypedefType();
        node2.setJSDocInfo(jSDocInfo57);
        boolean boolean67 = jSDocInfo57.isConstructor();
        com.google.common.collect.ImmutableList<java.lang.String> strList68 = jSDocInfo57.getTemplateTypeNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList69 = jSDocInfo57.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo57.getParameterType("OR 1");
        java.lang.String str72 = jSDocInfo57.toString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4131 + "'", int42 == 4131);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR 1" + "'", str43, "OR 1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "JSDocInfo" + "'", str51, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertNull(jSTypeExpression54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(jSTypeExpressionList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "JSDocInfo" + "'", str72, "JSDocInfo");
    }

    @Test
    public void test21515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21515");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str8 = jSDocInfo0.getFileOverview();
        boolean boolean9 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo11.getEnumParameterType();
        jSDocInfo11.setLicense("()");
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str16 = jSDocInfo15.getVersion();
        boolean boolean17 = jSDocInfo15.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo15.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo15.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList20 = jSDocInfo15.getThrownTypes();
        java.lang.String str21 = jSDocInfo15.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str23 = jSDocInfo22.getVersion();
        boolean boolean24 = jSDocInfo22.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo22.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo22.setVisibility(visibility26);
        jSDocInfo15.setVisibility(visibility26);
        jSDocInfo11.setVisibility(visibility26);
        jSDocInfo0.setVisibility(visibility26);
        boolean boolean32 = jSDocInfo0.hasParameterType("STRING  0\n");
        boolean boolean33 = jSDocInfo0.isConsistentIdGenerator();
        java.lang.String str34 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo0.getThisType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertNotNull(jSTypeExpressionList20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + visibility26 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility26.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(jSTypeExpression35);
    }

    @Test
    public void test21516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21516");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = jSDocInfo0.getTypeNodes();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        boolean boolean9 = jSDocInfo0.isNoAlias();
        boolean boolean10 = jSDocInfo0.isDefine();
        int int11 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str13 = jSDocInfo0.getDescriptionForParameter("STRING ");
        boolean boolean14 = jSDocInfo0.isConsistentIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList15 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo0.getParameterType("unknown");
        boolean boolean18 = jSDocInfo0.isNoShadow();
        boolean boolean19 = jSDocInfo0.isHidden();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList15);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test21517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21517");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(12, "STRING  0 [synthetic: 1]\n");
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoFromForTree(node24);
        boolean boolean26 = node25.isParamList();
        boolean boolean27 = node25.isNumber();
        boolean boolean28 = node25.isDefaultCase();
        boolean boolean29 = node25.hasOneChild();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node25.children();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder31 = node25.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node25.getJsDocBuilderForNode();
        fileLevelJsDocBuilder32.append("ERROR 1\n    STRING  0\n    STRING  0\n");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder31);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder32);
    }

    @Test
    public void test21518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21518");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        boolean boolean7 = jSDocInfo0.isNoCompile();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node13.setCharno(1);
        boolean boolean16 = node13.isRegExp();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        boolean boolean27 = node21.isDo();
        boolean boolean28 = node21.isDefaultCase();
        node21.setQuotedString();
        com.google.javascript.rhino.Node node30 = node13.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node34.setCharno(1);
        java.util.Set<java.lang.String> strSet37 = node34.getDirectives();
        node34.setLength(0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node46 = node44.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node44, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(0, node30, node34, node49, (int) 'a', (int) (short) 0);
        boolean boolean53 = node30.isNull();
        com.google.javascript.rhino.jstype.JSType jSType54 = node30.getJSType();
        jSDocInfo0.setAssociatedNode(node30);
        int int56 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean57 = jSDocInfo0.isNoAlias();
        java.lang.String str58 = jSDocInfo0.toString();
        boolean boolean59 = jSDocInfo0.isConstructor();
        boolean boolean60 = jSDocInfo0.isNoTypeCheck();
        boolean boolean61 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "JSDocInfo" + "'", str58, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test21519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21519");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = ternaryValue1.or(ternaryValue3);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue1.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = ternaryValue5.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue6.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue11.or(ternaryValue13);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue13.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue9.xor(ternaryValue13);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue7.xor(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue7.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue18.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue21.or(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue21.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue25.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue26.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue31.or(ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue33.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue29.xor(ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue27.xor(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean41 = ternaryValue39.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean45 = ternaryValue43.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue46.or(ternaryValue47);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue43.xor(ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = ternaryValue39.xor(ternaryValue43);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue50.xor(ternaryValue51);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = ternaryValue37.or(ternaryValue52);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue37.not();
        boolean boolean56 = ternaryValue37.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = ternaryValue18.or(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNull(ternaryValue52);
        org.junit.Assert.assertNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(ternaryValue57);
    }

    @Test
    public void test21520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21520");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        java.lang.String str8 = jSDocInfo0.getDescription();
        java.lang.String str9 = jSDocInfo0.getVersion();
        boolean boolean10 = jSDocInfo0.isExpose();
        boolean boolean11 = jSDocInfo0.shouldPreserveTry();
        boolean boolean13 = jSDocInfo0.hasDescriptionForParameter("OR 0 [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test21521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21521");
        com.google.javascript.rhino.Node[] nodeArray2 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray2);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(41, nodeArray2, (int) (byte) 100, 4131);
        com.google.javascript.rhino.Node node7 = node6.getLastSibling();
        boolean boolean8 = node7.isFunction();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile9 = node7.getStaticSourceFile();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node14.isDo();
        boolean boolean21 = node14.isDefaultCase();
        node14.setQuotedString();
        boolean boolean23 = node14.isDec();
        boolean boolean24 = node14.isLabel();
        boolean boolean25 = node14.isSetterDef();
        boolean boolean26 = node14.isRegExp();
        boolean boolean27 = node14.isName();
        boolean boolean28 = node14.isVoid();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node33.isDo();
        com.google.javascript.rhino.Node node40 = node14.useSourceInfoIfMissingFrom(node33);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        int int51 = node50.getType();
        boolean boolean52 = node50.isFor();
        node33.addChildToFront(node50);
        java.lang.String str54 = node33.getQualifiedName();
        com.google.javascript.rhino.Node node55 = node33.cloneTree();
        boolean boolean56 = node55.isLabel();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean61 = node60.isThrow();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean66 = node65.isThrow();
        java.lang.String str70 = node65.toString(true, false, true);
        java.lang.String str71 = node65.getQualifiedName();
        boolean boolean72 = node65.isIn();
        com.google.javascript.rhino.Node node73 = node65.cloneTree();
        boolean boolean74 = node73.isRegExp();
        boolean boolean75 = node73.isDebugger();
        node60.addChildToBack(node73);
        boolean boolean77 = node73.hasMoreThanOneChild();
        boolean boolean78 = node73.isSyntheticBlock();
        java.lang.String str79 = node55.checkTreeEquals(node73);
        boolean boolean80 = node55.isHook();
        boolean boolean81 = node55.wasEmptyNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str83 = jSDocInfo82.getVersion();
        boolean boolean84 = jSDocInfo82.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet85 = jSDocInfo82.getParameterNames();
        jSDocInfo82.addSuppression("");
        com.google.common.collect.ImmutableList<java.lang.String> strList88 = jSDocInfo82.getTemplateTypeNames();
        java.lang.String str89 = jSDocInfo82.getOriginalCommentString();
        boolean boolean90 = jSDocInfo82.isNoCompile();
        java.lang.String str91 = jSDocInfo82.getSourceName();
        node55.setJSDocInfo(jSDocInfo82);
        node7.addChildToFront(node55);
        org.junit.Assert.assertNotNull(nodeArray2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(staticSourceFile9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "STRING  0" + "'", str70, "STRING  0");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0\n    ERROR 1\n        STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: STRING  0\n    ERROR 1\n        STRING  0\n\n\nSubtree2: STRING  0\n" + "'", str79, "Node tree inequality:\nTree1:\nSTRING  0\n    ERROR 1\n        STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: STRING  0\n    ERROR 1\n        STRING  0\n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test21522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21522");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.Node node5 = node3.getLastChild();
        boolean boolean6 = node3.isWhile();
        node3.setSourceFileForTesting("(Not declared as a type name)");
        boolean boolean9 = node3.isExprResult();
        java.lang.String str10 = node3.toStringTree();
        node3.putIntProp(39, 45);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 4095.0 100 [source_file: (Not declared as a type name)]\n" + "'", str10, "NUMBER 4095.0 100 [source_file: (Not declared as a type name)]\n");
    }

    @Test
    public void test21523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21523");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        boolean boolean9 = jSDocInfo0.hasParameter("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean11 = jSDocInfo0.hasType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21524");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isTypeOf();
        boolean boolean23 = node19.isAssignAdd();
        boolean boolean24 = node19.isStringKey();
        node19.setOptionalArg(true);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean31 = node30.isThrow();
        java.lang.String str35 = node30.toString(true, false, true);
        java.lang.String str36 = node30.getQualifiedName();
        boolean boolean37 = node30.isIn();
        com.google.javascript.rhino.Node node38 = node30.cloneTree();
        boolean boolean39 = node38.isRegExp();
        boolean boolean40 = node38.isExprResult();
        com.google.javascript.rhino.Node node41 = node19.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        int int47 = node46.getSourcePosition();
        int int48 = node46.getType();
        com.google.javascript.rhino.Node node49 = node41.useSourceInfoIfMissingFromForTree(node46);
        java.lang.String str53 = node41.toString(false, true, true);
        boolean boolean54 = node41.isNE();
        com.google.javascript.rhino.Node node55 = node41.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = node55.isBlock();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "STRING  0" + "'", str35, "STRING  0");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 40 + "'", int48 == 40);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ERROR [opt_arg: 1]" + "'", str53, "ERROR [opt_arg: 1]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(node55);
    }

    @Test
    public void test21525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21525");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber(35.0d);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test21526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21526");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(49);
        boolean boolean2 = node1.hasOneChild();
        boolean boolean3 = node1.hasChildren();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test21527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21527");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        boolean boolean8 = jSDocInfo0.hasModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getType();
        java.lang.String str11 = jSDocInfo0.getDescriptionForParameter("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n)");
        boolean boolean12 = jSDocInfo0.hasBaseType();
        java.lang.String str13 = jSDocInfo0.getReturnDescription();
        boolean boolean14 = jSDocInfo0.isHidden();
        int int15 = jSDocInfo0.getParameterCount();
        java.util.Collection<java.lang.String> strCollection16 = jSDocInfo0.getAuthors();
        java.util.Collection<java.lang.String> strCollection17 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(strCollection16);
        org.junit.Assert.assertNull(strCollection17);
    }

    @Test
    public void test21528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21528");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) ' ', "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n", 45, 21);
        node4.setVarArgs(true);
        java.lang.String str7 = node4.getQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test21529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21529");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isNoCompile();
        boolean boolean7 = jSDocInfo0.hasParameter("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = jSDocInfo0.getVisibility();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        boolean boolean10 = jSDocInfo0.isConstant();
        boolean boolean12 = jSDocInfo0.hasParameter("NUMBER -1.0 0\n");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(visibility8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test21530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21530");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str8 = jSDocInfo0.getBlockDescription();
        boolean boolean9 = jSDocInfo0.hasBaseType();
        boolean boolean10 = jSDocInfo0.hasEnumParameterType();
        boolean boolean12 = jSDocInfo0.hasParameterType("((()))");
        boolean boolean13 = jSDocInfo0.hasFileOverview();
        boolean boolean14 = jSDocInfo0.hasType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test21531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21531");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        java.lang.String str8 = jSDocInfo0.getFileOverview();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        java.lang.String str11 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test21532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21532");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescriptionForParameter("STRING  0\n");
        java.lang.String str5 = jSDocInfo0.getDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean7 = jSDocInfo0.hasThisType();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        boolean boolean10 = jSDocInfo0.isNoTypeCheck();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection11 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.Node node12 = jSDocInfo0.getAssociatedNode();
        java.lang.String str13 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo0.getEnumParameterType();
        java.lang.String str15 = jSDocInfo0.getMeaning();
        boolean boolean16 = jSDocInfo0.isDeprecated();
        boolean boolean17 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeCollection11);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test21533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21533");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isFromExterns();
        boolean boolean5 = node3.isNot();
        boolean boolean6 = node3.wasEmptyNode();
        boolean boolean7 = node3.isTrue();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node3.siblings();
        com.google.javascript.rhino.jstype.JSType jSType9 = node3.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNull(jSType9);
    }

    @Test
    public void test21534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21534");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        node3.setQuotedString();
        boolean boolean10 = node3.isQualifiedName();
        boolean boolean11 = node3.isInc();
        boolean boolean12 = node3.isThis();
        com.google.javascript.rhino.Node node13 = node3.cloneNode();
        int int14 = node13.getCharno();
        java.lang.String str15 = node13.toStringTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING  0 [quoted: 1]\n" + "'", str15, "STRING  0 [quoted: 1]\n");
    }

    @Test
    public void test21535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21535");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        java.lang.String[] strArray11 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        boolean boolean19 = strSet12.addAll((java.util.Collection<java.lang.String>) strList17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str21 = jSDocInfo20.getVersion();
        java.lang.String str22 = jSDocInfo20.getFileOverview();
        boolean boolean23 = jSDocInfo20.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo20.getParameterNames();
        boolean boolean25 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet24);
        java.lang.String[] strArray28 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        boolean boolean36 = strSet29.addAll((java.util.Collection<java.lang.String>) strList34);
        boolean boolean37 = strSet12.containsAll((java.util.Collection<java.lang.String>) strSet29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str39 = jSDocInfo38.getVersion();
        boolean boolean40 = jSDocInfo38.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet41 = jSDocInfo38.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str43 = jSDocInfo42.getVersion();
        java.lang.String str44 = jSDocInfo42.getFileOverview();
        boolean boolean45 = jSDocInfo42.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo42.getParameterNames();
        java.util.Iterator<java.lang.String> strItor47 = strSet46.iterator();
        boolean boolean48 = strSet46.isEmpty();
        boolean boolean49 = strSet41.containsAll((java.util.Collection<java.lang.String>) strSet46);
        boolean boolean50 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet41);
        boolean boolean51 = strSet8.containsAll((java.util.Collection<java.lang.String>) strSet12);
        java.lang.Object[] objArray52 = strSet12.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str54 = jSDocInfo53.getVersion();
        boolean boolean55 = jSDocInfo53.hasEnumParameterType();
        boolean boolean56 = jSDocInfo53.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression57 = jSDocInfo53.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility58 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo53.setVisibility(visibility58);
        boolean boolean60 = jSDocInfo53.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList61 = jSDocInfo53.getImplementedInterfaces();
        boolean boolean62 = jSDocInfo53.containsDeclaration();
        boolean boolean63 = jSDocInfo53.isNoSideEffects();
        java.util.Set<java.lang.String> strSet64 = jSDocInfo53.getSuppressions();
        boolean boolean65 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet64);
        java.util.Spliterator<java.lang.String> strSpliterator66 = strSet12.spliterator();
        boolean boolean68 = strSet12.add("STRING Not declared as a constructor 0");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(jSTypeExpression57);
        org.junit.Assert.assertTrue("'" + visibility58 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility58.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strSpliterator66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test21536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21536");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(100);
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesThis();
    }

    @Test
    public void test21537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21537");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(23, 151562, 151562);
        boolean boolean4 = node3.isNot();
        boolean boolean5 = node3.isInstanceOf();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node9.setCharno(1);
        boolean boolean12 = node9.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isDo();
        boolean boolean24 = node17.isDefaultCase();
        node17.setQuotedString();
        com.google.javascript.rhino.Node node26 = node9.useSourceInfoFromForTree(node17);
        node17.putIntProp((int) (byte) 100, (int) (byte) 0);
        node17.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean33 = node17.isInc();
        com.google.javascript.rhino.Node node34 = node17.getLastSibling();
        boolean boolean35 = node34.isObjectLit();
        com.google.javascript.rhino.Node node36 = node34.getParent();
        boolean boolean37 = node34.isArrayLit();
        com.google.javascript.rhino.Node node38 = node34.getLastSibling();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        boolean boolean59 = node48.hasChild(node58);
        boolean boolean60 = node58.isVar();
        boolean boolean61 = node58.isTypeOf();
        boolean boolean62 = node58.isAssignAdd();
        boolean boolean63 = node58.isStringKey();
        com.google.javascript.rhino.Node node64 = node58.removeChildren();
        com.google.javascript.rhino.Node node65 = node34.copyInformationFrom(node64);
        node3.addChildToBack(node64);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node65);
    }

    @Test
    public void test21538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21538");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        boolean boolean12 = strSet3.add("STRING  0");
        java.util.stream.Stream<java.lang.String> strStream13 = strSet3.parallelStream();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(53, "hi!", (int) (byte) 1, 6);
        boolean boolean19 = node18.isDefaultCase();
        boolean boolean20 = node18.isNull();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node27 = node25.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node25, (int) (byte) 1, (int) '#');
        boolean boolean31 = node25.isDo();
        boolean boolean32 = node25.isDefaultCase();
        node25.setQuotedString();
        boolean boolean34 = node25.isDec();
        boolean boolean35 = node25.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node25.siblings();
        boolean boolean37 = node25.isEmpty();
        com.google.javascript.rhino.Node node38 = node25.getParent();
        node25.putBooleanProp(37, false);
        com.google.javascript.rhino.Node node42 = node25.removeChildren();
        node25.setIsSyntheticBlock(true);
        boolean boolean45 = node25.isDebugger();
        com.google.javascript.rhino.Node node46 = node18.srcref(node25);
        boolean boolean47 = strSet3.contains((java.lang.Object) node46);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeIterable36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test21539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21539");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str3 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str4 = jSDocInfo0.getLicense();
        boolean boolean5 = jSDocInfo0.isNoAlias();
        java.lang.String str6 = jSDocInfo0.getFileOverview();
        boolean boolean7 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test21540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21540");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getEnumParameterType();
        boolean boolean8 = jSDocInfo0.isDefine();
        boolean boolean9 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean10 = jSDocInfo0.isExterns();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getThrownTypes();
        java.lang.String str12 = jSDocInfo0.getOriginalCommentString();
        boolean boolean13 = jSDocInfo0.hasThisType();
        jSDocInfo0.setDeprecated(true);
        boolean boolean16 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test21541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21541");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node9 = node7.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1, node7, (int) (byte) 1, (int) '#');
        boolean boolean13 = node7.isDo();
        boolean boolean14 = node7.isDefaultCase();
        node7.setQuotedString();
        boolean boolean16 = node7.isDec();
        boolean boolean17 = node7.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node7.siblings();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(51);
        java.lang.String str21 = node7.checkTreeEquals(node20);
        boolean boolean22 = node7.isCatch();
        com.google.javascript.rhino.InputId inputId23 = null;
        node7.setInputId(inputId23);
        typePosition0.setItem(node7);
        boolean boolean26 = typePosition0.hasBrackets();
        int int27 = typePosition0.getPositionOnEndLine();
        int int28 = typePosition0.getPositionOnEndLine();
        int int29 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node30 = typePosition0.getItem();
        boolean boolean31 = typePosition0.hasBrackets();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str21, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test21542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21542");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node19.hasChild(node29);
        int int31 = node19.getCharno();
        com.google.javascript.rhino.Node node32 = node9.useSourceInfoIfMissingFrom(node19);
        node32.setLength((int) ' ');
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        boolean boolean59 = node48.hasChild(node58);
        int int60 = node48.getCharno();
        com.google.javascript.rhino.Node node61 = node38.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node66 = node38.srcref(node65);
        boolean boolean67 = node32.isEquivalentToTyped(node38);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node74 = node72.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) -1, node72, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node84 = node82.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) -1, node82, (int) (byte) 1, (int) '#');
        boolean boolean88 = node77.hasChild(node87);
        boolean boolean89 = node87.isVar();
        boolean boolean90 = node87.isCase();
        boolean boolean91 = node38.hasChild(node87);
        jSDocInfo0.setAssociatedNode(node38);
        java.lang.String str93 = jSDocInfo0.getReturnDescription();
        jSDocInfo0.addSuppression("STRING NUMBER 4095.0 100\n 4095");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test21543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21543");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node24 = node9.clonePropsFrom(node23);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node33.isScript();
        com.google.javascript.rhino.Node node40 = node33.detachFromParent();
        node40.setOptionalArg(false);
        boolean boolean44 = node40.getBooleanProp(31);
        com.google.javascript.rhino.Node node45 = node28.copyInformationFrom(node40);
        boolean boolean46 = node45.isLabel();
        com.google.javascript.rhino.Node node47 = node23.useSourceInfoIfMissingFrom(node45);
        boolean boolean48 = node23.isAdd();
        boolean boolean49 = node23.isNumber();
        boolean boolean50 = node23.isInc();
        boolean boolean51 = node23.hasChildren();
        int int52 = node23.getType();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 49 + "'", int52 == 49);
    }

    @Test
    public void test21544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21544");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        com.google.javascript.rhino.Node node16 = node4.detachFromParent();
        node4.removeProp((int) '4');
        node4.putIntProp(100, 46);
        int int22 = node4.getSourcePosition();
        boolean boolean23 = node4.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test21545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21545");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        boolean boolean44 = node33.hasChild(node43);
        int int45 = node33.getCharno();
        com.google.javascript.rhino.Node node46 = node23.useSourceInfoIfMissingFrom(node33);
        node46.setLength((int) ' ');
        node19.addChildrenToBack(node46);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node19.children();
        boolean boolean51 = node19.isHook();
        int int52 = node4.getIndexOfChild(node19);
        node19.setWasEmptyNode(true);
        boolean boolean55 = node19.isBreak();
        node19.setSourceEncodedPosition(2);
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str59 = jSDocInfo58.getVersion();
        boolean boolean60 = jSDocInfo58.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo58.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList62 = jSDocInfo58.getImplementedInterfaces();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean67 = node66.isThrow();
        java.lang.String str71 = node66.toString(true, false, true);
        jSDocInfo58.setAssociatedNode(node66);
        int int74 = node66.getIntProp((int) (byte) 10);
        node66.setSourceEncodedPositionForTree(15);
        boolean boolean77 = node66.isNull();
        boolean boolean78 = node66.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder79 = node66.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node80 = node19.useSourceInfoFrom(node66);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder81 = node19.getJsDocBuilderForNode();
        boolean boolean82 = node19.isSwitch();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeIterable50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(jSTypeExpressionList62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "STRING  0" + "'", str71, "STRING  0");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test21546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21546");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        boolean boolean3 = typePosition0.hasBrackets();
        int int4 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int9 = node8.getType();
        boolean boolean10 = node8.isArrayLit();
        node8.addSuppression("true");
        boolean boolean13 = node8.isReturn();
        typePosition0.setItem(node8);
        int int15 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node16 = typePosition0.getItem();
        int int17 = typePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test21547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21547");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition8 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition9 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = marker0.getAnnotation();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(nodeSourcePosition8);
        org.junit.Assert.assertNull(nodeSourcePosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertNull(stringPosition11);
    }

    @Test
    public void test21548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21548");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        java.lang.String str10 = node4.toStringTree();
        boolean boolean11 = node4.isStringKey();
        boolean boolean12 = node4.isAnd();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node4.getStaticSourceFile();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isInc();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "STRING  0\n" + "'", str10, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test21549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21549");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean27 = node11.isInc();
        com.google.javascript.rhino.Node node28 = node11.getLastSibling();
        boolean boolean29 = node28.isObjectLit();
        com.google.javascript.rhino.Node node30 = node28.getParent();
        boolean boolean31 = node28.isIn();
        boolean boolean32 = node28.isFor();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test21550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21550");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getAuthors();
        boolean boolean12 = jSDocInfo0.isNoAlias();
        int int13 = jSDocInfo0.getParameterCount();
        java.util.Set<java.lang.String> strSet14 = jSDocInfo0.getModifies();
        java.lang.String str15 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test21551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21551");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        boolean boolean44 = node21.isString();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node54.hasChild(node64);
        boolean boolean66 = node64.isVar();
        boolean boolean67 = node64.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node64.children();
        com.google.javascript.rhino.Node node69 = node21.srcref(node64);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node76 = node74.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) -1, node74, (int) (byte) 1, (int) '#');
        boolean boolean80 = node74.isDo();
        boolean boolean81 = node74.isExprResult();
        boolean boolean82 = node74.isTypeOf();
        com.google.javascript.rhino.Node node83 = node21.useSourceInfoFrom(node74);
        boolean boolean84 = node74.isRegExp();
        java.lang.String str88 = node74.toString(false, false, false);
        boolean boolean89 = node74.isThrow();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "STRING " + "'", str88, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test21552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21552");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        java.lang.String str10 = node4.toStringTree();
        boolean boolean11 = node4.isStringKey();
        boolean boolean12 = node4.isDelProp();
        java.lang.Object obj14 = node4.getProp(29);
        boolean boolean15 = node4.hasMoreThanOneChild();
        node4.setLineno((-1));
        com.google.javascript.rhino.Node node18 = node4.removeFirstChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "STRING  0\n" + "'", str10, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test21553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21553");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = booleanLiteralSet1.intersection(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = booleanLiteralSet0.intersection(booleanLiteralSet1);
        boolean boolean6 = booleanLiteralSet4.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = booleanLiteralSet7.intersection(booleanLiteralSet8);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = booleanLiteralSet4.intersection(booleanLiteralSet8);
        boolean boolean12 = booleanLiteralSet10.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = booleanLiteralSet14.intersection(booleanLiteralSet15);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = booleanLiteralSet13.intersection(booleanLiteralSet14);
        boolean boolean19 = booleanLiteralSet17.contains(false);
        boolean boolean21 = booleanLiteralSet17.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = booleanLiteralSet10.union(booleanLiteralSet17);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet24.intersection(booleanLiteralSet25);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = booleanLiteralSet23.intersection(booleanLiteralSet24);
        boolean boolean29 = booleanLiteralSet27.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = booleanLiteralSet30.intersection(booleanLiteralSet31);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = booleanLiteralSet27.intersection(booleanLiteralSet31);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = booleanLiteralSet17.intersection(booleanLiteralSet31);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = booleanLiteralSet35.intersection(booleanLiteralSet36);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = booleanLiteralSet31.union(booleanLiteralSet35);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet40 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = booleanLiteralSet41.intersection(booleanLiteralSet42);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = booleanLiteralSet40.intersection(booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = booleanLiteralSet39.union(booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = booleanLiteralSet41.union(booleanLiteralSet46);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet51 = booleanLiteralSet49.intersection(booleanLiteralSet50);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet52 = booleanLiteralSet48.intersection(booleanLiteralSet49);
        boolean boolean54 = booleanLiteralSet52.contains(false);
        boolean boolean56 = booleanLiteralSet52.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = booleanLiteralSet41.union(booleanLiteralSet52);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet58 = booleanLiteralSet38.intersection(booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet59 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet60 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet62 = booleanLiteralSet60.intersection(booleanLiteralSet61);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet63 = booleanLiteralSet59.intersection(booleanLiteralSet60);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet64 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet65 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet66 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = booleanLiteralSet65.intersection(booleanLiteralSet66);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = booleanLiteralSet64.intersection(booleanLiteralSet65);
        boolean boolean70 = booleanLiteralSet68.contains(false);
        boolean boolean72 = booleanLiteralSet68.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet73 = booleanLiteralSet60.union(booleanLiteralSet68);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet74 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet75 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet77 = booleanLiteralSet75.intersection(booleanLiteralSet76);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet78 = booleanLiteralSet74.intersection(booleanLiteralSet75);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet79 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet80 = booleanLiteralSet78.union(booleanLiteralSet79);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet81 = booleanLiteralSet68.union(booleanLiteralSet79);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet82 = booleanLiteralSet58.intersection(booleanLiteralSet79);
        boolean boolean84 = booleanLiteralSet79.contains(true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet40 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet40.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet51 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet51.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet52 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet52.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet58 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet58.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet59 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet59.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet60 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet60.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet62 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet62.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet63 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet63.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet64 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet64.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet65 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet65.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet66 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet66.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet73 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet73.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet74 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet74.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet75 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet75.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet77 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet77.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet78 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet78.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet79 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet79.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet80 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet80.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet81 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet81.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet82 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet82.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test21554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21554");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.hasFileOverview();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getThrownTypes();
        java.lang.String str12 = jSDocInfo0.getVersion();
        int int13 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test21555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21555");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 5, 15, 23);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(16773120, node4);
        boolean boolean6 = node4.isFromExterns();
        boolean boolean7 = node4.isQualifiedName();
        boolean boolean8 = node4.isReturn();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test21556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21556");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        java.lang.String str10 = node4.toStringTree();
        boolean boolean11 = node4.isStringKey();
        boolean boolean12 = node4.isDelProp();
        java.lang.Object obj14 = node4.getProp(29);
        boolean boolean15 = node4.isFromExterns();
        boolean boolean16 = node4.isDebugger();
        boolean boolean17 = node4.isQualifiedName();
        boolean boolean18 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) 12, 49, 8);
        boolean boolean23 = node22.isTrue();
        boolean boolean24 = node22.isQuotedString();
        java.lang.String str25 = node4.checkTreeEquals(node22);
        boolean boolean26 = node4.isSetterDef();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "STRING  0\n" + "'", str10, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0\n\n\nTree2:\nNUMBER 12.0 49\n\n\nSubtree1: STRING  0\n\n\nSubtree2: NUMBER 12.0 49\n" + "'", str25, "Node tree inequality:\nTree1:\nSTRING  0\n\n\nTree2:\nNUMBER 12.0 49\n\n\nSubtree1: STRING  0\n\n\nSubtree2: NUMBER 12.0 49\n");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test21557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21557");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        node3.setStaticSourceFile(staticSourceFile6);
        boolean boolean8 = node3.isBreak();
        boolean boolean9 = node3.isOptionalArg();
        boolean boolean10 = node3.isNew();
        boolean boolean11 = node3.isSwitch();
        boolean boolean12 = node3.isDebugger();
        boolean boolean13 = node3.isTry();
        int int15 = node3.getIntProp(6);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test21558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21558");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeB;
        java.lang.Class<?> wildcardClass10 = typePair2.getClass();
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test21559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21559");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType10 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType11 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType12 = typePair2.typeA;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertNull(jSType12);
    }

    @Test
    public void test21560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21560");
        com.google.javascript.rhino.Node node1 = null;
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "((ERROR 1))", (int) (byte) 0, 0);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double13 = node12.getDouble();
        boolean boolean14 = node12.isAdd();
        com.google.javascript.rhino.Node node15 = node12.cloneNode();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node19.setCharno(1);
        java.util.Set<java.lang.String> strSet22 = node19.getDirectives();
        node19.setLength(0);
        com.google.javascript.rhino.Node node25 = node12.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node8, node25, 1, (int) (short) 1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(50, node28);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(54, node1, node28, (int) (byte) -1, 42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4095.0d + "'", double13 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(node25);
    }

    @Test
    public void test21561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21561");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double5 = node4.getDouble();
        int int6 = node4.getSourcePosition();
        boolean boolean7 = node4.isExprResult();
        node4.setSourceFileForTesting("ERROR 1\n    STRING  0\n    STRING  0\n");
        int int10 = node4.getSourcePosition();
        boolean boolean11 = node4.isVarArgs();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(192612, node4, 49, 13);
        com.google.javascript.rhino.Node node16 = node14.getAncestor((int) (short) 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4095.0d + "'", double5 == 4095.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 409601 + "'", int6 == 409601);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 409601 + "'", int10 == 409601);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test21562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21562");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(48);
        sideEffectFlags1.clearAllFlags();
        int int3 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 31 + "'", int3 == 31);
    }

    @Test
    public void test21563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21563");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        boolean boolean2 = typePosition0.hasBrackets();
        int int3 = typePosition0.getEndLine();
        int int4 = typePosition0.getPositionOnEndLine();
        int int5 = typePosition0.getEndLine();
        int int6 = typePosition0.getPositionOnEndLine();
        int int7 = typePosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test21564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21564");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        boolean boolean8 = jSDocInfo0.isExpose();
        boolean boolean9 = jSDocInfo0.hasThisType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection10 = jSDocInfo0.getTypeNodes();
        boolean boolean12 = jSDocInfo0.hasParameter("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeCollection10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test21565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21565");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isNoCompile();
        boolean boolean7 = jSDocInfo0.hasParameter("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.lang.Object[] objArray9 = strSet8.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str11 = jSDocInfo10.getVersion();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo10.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<java.lang.String> strCollection14 = jSDocInfo13.getAuthors();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str16 = jSDocInfo15.getVersion();
        boolean boolean17 = jSDocInfo15.hasEnumParameterType();
        boolean boolean18 = jSDocInfo15.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo15.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo15.setVisibility(visibility20);
        jSDocInfo13.setVisibility(visibility20);
        boolean boolean23 = strSet12.remove((java.lang.Object) jSDocInfo13);
        boolean boolean24 = strSet8.containsAll((java.util.Collection<java.lang.String>) strSet12);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        boolean boolean35 = node29.hasOneChild();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node42 = node40.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node52 = node50.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) -1, node50, (int) (byte) 1, (int) '#');
        boolean boolean56 = node45.hasChild(node55);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node60 = node45.clonePropsFrom(node59);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node71 = node69.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (byte) -1, node69, (int) (byte) 1, (int) '#');
        boolean boolean75 = node69.isScript();
        com.google.javascript.rhino.Node node76 = node69.detachFromParent();
        node76.setOptionalArg(false);
        boolean boolean80 = node76.getBooleanProp(31);
        com.google.javascript.rhino.Node node81 = node64.copyInformationFrom(node76);
        boolean boolean82 = node81.isLabel();
        com.google.javascript.rhino.Node node83 = node59.useSourceInfoIfMissingFrom(node81);
        boolean boolean84 = node59.isContinue();
        boolean boolean85 = node59.isGetProp();
        com.google.javascript.rhino.Node node86 = node29.useSourceInfoIfMissingFrom(node59);
        boolean boolean87 = node59.isGetProp();
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("STRING  [quoted: 1]");
        boolean boolean90 = node89.isString();
        node59.addChildToBack(node89);
        boolean boolean92 = strSet8.remove((java.lang.Object) node59);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(strCollection14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(jSTypeExpression19);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test21566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21566");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str9 = jSDocInfo8.getVersion();
        boolean boolean10 = jSDocInfo8.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo8.getParameterNames();
        jSDocInfo8.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection14 = jSDocInfo8.getTypeNodes();
        java.lang.String str15 = jSDocInfo8.getDescription();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node19.setCharno(1);
        boolean boolean22 = node19.isRegExp();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node29 = node27.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) -1, node27, (int) (byte) 1, (int) '#');
        boolean boolean33 = node27.isDo();
        boolean boolean34 = node27.isDefaultCase();
        node27.setQuotedString();
        com.google.javascript.rhino.Node node36 = node19.useSourceInfoFromForTree(node27);
        node27.putIntProp((int) (byte) 100, (int) (byte) 0);
        boolean boolean40 = node27.isVarArgs();
        jSDocInfo8.setAssociatedNode(node27);
        java.lang.String str42 = node27.toStringTree();
        boolean boolean43 = strSet7.equals((java.lang.Object) node27);
        strSet7.clear();
        java.util.Iterator<java.lang.String> strItor45 = strSet7.iterator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(nodeCollection14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "STRING  0 [quoted: 1]\n" + "'", str42, "STRING  0 [quoted: 1]\n");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strItor45);
    }

    @Test
    public void test21567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21567");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.hasOneChild();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node27 = node25.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node25, (int) (byte) 1, (int) '#');
        boolean boolean31 = node20.hasChild(node30);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node35 = node20.clonePropsFrom(node34);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node46 = node44.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node44, (int) (byte) 1, (int) '#');
        boolean boolean50 = node44.isScript();
        com.google.javascript.rhino.Node node51 = node44.detachFromParent();
        node51.setOptionalArg(false);
        boolean boolean55 = node51.getBooleanProp(31);
        com.google.javascript.rhino.Node node56 = node39.copyInformationFrom(node51);
        boolean boolean57 = node56.isLabel();
        com.google.javascript.rhino.Node node58 = node34.useSourceInfoIfMissingFrom(node56);
        boolean boolean59 = node34.isContinue();
        boolean boolean60 = node34.isGetProp();
        com.google.javascript.rhino.Node node61 = node4.useSourceInfoIfMissingFrom(node34);
        boolean boolean62 = node34.isGetProp();
        com.google.javascript.rhino.Node node63 = node34.cloneTree();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test21568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21568");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        boolean boolean4 = node3.isThis();
        boolean boolean5 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(10);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node18 = node16.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) -1, node16, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        boolean boolean32 = node21.hasChild(node31);
        int int33 = node21.getCharno();
        com.google.javascript.rhino.Node node34 = node11.useSourceInfoIfMissingFrom(node21);
        node34.setLength((int) ' ');
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node57 = node55.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node55, (int) (byte) 1, (int) '#');
        boolean boolean61 = node50.hasChild(node60);
        int int62 = node50.getCharno();
        com.google.javascript.rhino.Node node63 = node40.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node68 = node40.srcref(node67);
        boolean boolean69 = node34.isEquivalentToTyped(node40);
        node40.addSuppression("STRING  0 [synthetic: 1]\n");
        node7.addChildToFront(node40);
        com.google.javascript.rhino.Node node73 = node7.cloneTree();
        boolean boolean75 = node73.getBooleanProp((int) (short) -1);
        com.google.javascript.rhino.Node node76 = node3.useSourceInfoIfMissingFrom(node73);
        node3.detachChildren();
        boolean boolean78 = node3.isVar();
        java.util.Set<java.lang.String> strSet79 = node3.getDirectives();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(strSet79);
    }

    @Test
    public void test21569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21569");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility4);
        java.lang.String str6 = jSDocInfo0.toString();
        boolean boolean7 = jSDocInfo0.isOverride();
        boolean boolean8 = jSDocInfo0.isInterface();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test21570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21570");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.setCharno((int) (short) 1);
        boolean boolean26 = node11.isInc();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node33 = node31.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) -1, node31, (int) (byte) 1, (int) '#');
        boolean boolean37 = node31.isDo();
        boolean boolean38 = node31.isDefaultCase();
        node31.setQuotedString();
        boolean boolean40 = node31.isCatch();
        int int41 = node11.getIndexOfChild(node31);
        boolean boolean42 = node11.wasEmptyNode();
        boolean boolean43 = node11.isArrayLit();
        int int44 = node11.getSourceOffset();
        boolean boolean45 = node11.isLabelName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test21571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21571");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double5 = node4.getDouble();
        int int6 = node4.getSourcePosition();
        boolean boolean7 = node4.isExprResult();
        node4.setSourceFileForTesting("ERROR 1\n    STRING  0\n    STRING  0\n");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node13.setCharno(1);
        boolean boolean16 = node13.isRegExp();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        boolean boolean27 = node21.isDo();
        boolean boolean28 = node21.isDefaultCase();
        node21.setQuotedString();
        com.google.javascript.rhino.Node node30 = node13.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(21, node4, node13, 4131, 21);
        java.lang.Appendable appendable34 = null;
        // The following exception was thrown during execution in test generation
        try {
            node33.appendStringTree(appendable34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4095.0d + "'", double5 == 4095.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 409601 + "'", int6 == 409601);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test21572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21572");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(15, "STRING  0 [source_file: Named type with empty name component]");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node2.siblings();
        boolean boolean5 = node2.getBooleanProp(37);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node10.setCharno(1);
        boolean boolean13 = node10.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node18.isDo();
        boolean boolean25 = node18.isDefaultCase();
        node18.setQuotedString();
        com.google.javascript.rhino.Node node27 = node10.useSourceInfoFromForTree(node18);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node31.setCharno(1);
        java.util.Set<java.lang.String> strSet34 = node31.getDirectives();
        node31.setLength(0);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(0, node27, node31, node46, (int) 'a', (int) (short) 0);
        boolean boolean50 = node27.isNull();
        com.google.javascript.rhino.jstype.JSType jSType51 = node27.getJSType();
        com.google.javascript.rhino.InputId inputId52 = null;
        node27.setInputId(inputId52);
        com.google.javascript.rhino.Node node54 = node2.useSourceInfoIfMissingFromForTree(node27);
        node27.setType(0);
        boolean boolean57 = node27.isDec();
        boolean boolean58 = node27.isNumber();
        boolean boolean59 = node27.isCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test21573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21573");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray7);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(0, nodeArray7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(2, nodeArray7);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(49, nodeArray7, 38, 53);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(46, nodeArray7, 151562, 100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(15, nodeArray7, 100, 192612);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) ' ', nodeArray7, 5, (int) (byte) 100);
        int int23 = node22.getSourcePosition();
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20580 + "'", int23 == 20580);
    }

    @Test
    public void test21574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21574");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "STRING  0\n    ERROR 1\n        STRING  0\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test21575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21575");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
    }

    @Test
    public void test21576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21576");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        boolean boolean27 = node13.isThis();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        boolean boolean50 = node47.isTypeOf();
        boolean boolean52 = node47.getBooleanProp((int) (byte) 10);
        boolean boolean53 = node47.isTrue();
        com.google.javascript.rhino.Node node54 = node13.useSourceInfoIfMissingFromForTree(node47);
        boolean boolean55 = node13.isFor();
        com.google.javascript.rhino.Node node56 = node13.cloneTree();
        com.google.javascript.rhino.Node node57 = node13.getFirstChild();
        boolean boolean58 = node13.isNull();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test21577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21577");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(51);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile3 = null;
        node1.setStaticSourceFile(staticSourceFile3);
        java.lang.Object obj6 = node1.getProp(40);
        boolean boolean7 = node1.isVarArgs();
        boolean boolean8 = node1.isLocalResultCall();
        boolean boolean9 = node1.isHook();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test21578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21578");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(6);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test21579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21579");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        boolean boolean19 = node15.isHook();
        node11.addChildToFront(node15);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node42 = node40.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, (int) (byte) 1, (int) '#');
        boolean boolean46 = node35.hasChild(node45);
        int int47 = node35.getCharno();
        com.google.javascript.rhino.Node node48 = node25.useSourceInfoIfMissingFrom(node35);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node65 = node63.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) -1, node63, (int) (byte) 1, (int) '#');
        boolean boolean69 = node58.hasChild(node68);
        boolean boolean70 = node68.isVar();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((-1), node35, node68);
        boolean boolean72 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node73 = node35.removeFirstChild();
        boolean boolean74 = node73.hasOneChild();
        boolean boolean75 = node73.isFor();
        node15.addChildToBack(node73);
        boolean boolean77 = node15.isName();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(53, "OR 51");
        boolean boolean81 = node80.isLabel();
        boolean boolean82 = node80.hasOneChild();
        com.google.javascript.rhino.Node node83 = node15.useSourceInfoFrom(node80);
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str85 = jSDocInfo84.getVersion();
        boolean boolean86 = jSDocInfo84.hasEnumParameterType();
        boolean boolean87 = jSDocInfo84.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = jSDocInfo84.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList89 = jSDocInfo84.getExtendedInterfaces();
        java.lang.String str90 = jSDocInfo84.getDeprecationReason();
        boolean boolean91 = jSDocInfo84.hasThisType();
        boolean boolean92 = jSDocInfo84.isInterface();
        node83.setJSDocInfo(jSDocInfo84);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression94 = jSDocInfo84.getBaseType();
        boolean boolean95 = jSDocInfo84.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility96 = jSDocInfo84.getVisibility();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSTypeExpression88);
        org.junit.Assert.assertNotNull(jSTypeExpressionList89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(jSTypeExpression94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(visibility96);
    }

    @Test
    public void test21580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21580");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node3 = null;
        namePosition0.setItem(node3);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString((int) (byte) 10, "Named type with empty name component");
        namePosition0.setItem(node7);
        int int9 = namePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node10 = namePosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node10);
    }

    @Test
    public void test21581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21581");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getSuppressions();
        java.util.stream.Stream<java.lang.String> strStream3 = strSet2.stream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str5 = jSDocInfo4.getVersion();
        java.lang.String str6 = jSDocInfo4.getFileOverview();
        jSDocInfo4.addSuppression("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo4.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo4.getModifies();
        java.lang.Object[] objArray11 = strSet10.toArray();
        boolean boolean12 = strSet2.containsAll((java.util.Collection<java.lang.String>) strSet10);
        int int13 = strSet2.size();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strStream3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test21582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21582");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        boolean boolean9 = node3.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        boolean boolean11 = node3.isBreak();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node16.setCharno(1);
        boolean boolean19 = node16.isRegExp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node24.isDo();
        boolean boolean31 = node24.isDefaultCase();
        node24.setQuotedString();
        com.google.javascript.rhino.Node node33 = node16.useSourceInfoFromForTree(node24);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node37.setCharno(1);
        java.util.Set<java.lang.String> strSet40 = node37.getDirectives();
        node37.setLength(0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(0, node33, node37, node52, (int) 'a', (int) (short) 0);
        int int56 = node33.getLineno();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable57 = node33.getAncestors();
        int int58 = node3.getIndexOfChild(node33);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(38, "STRING  0");
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) ' ', node62);
        com.google.javascript.rhino.Node node64 = node3.copyInformationFrom(node62);
        node62.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(ancestorIterable57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node64);
    }

    @Test
    public void test21583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21583");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getStartLine();
        int int3 = typePosition0.getPositionOnEndLine();
        int int4 = typePosition0.getEndLine();
        int int5 = typePosition0.getStartLine();
        // The following exception was thrown during execution in test generation
        try {
            typePosition0.setPositionInformation(37, (-1), 4, 409601);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 37?end-line: 4");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test21584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21584");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.clearSideEffectFlags();
        boolean boolean3 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.setReturnsTainted();
        sideEffectFlags0.clearAllFlags();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test21585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21585");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 2, 48);
        int int4 = node3.getType();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        boolean boolean15 = node9.isDo();
        boolean boolean16 = node9.isDefaultCase();
        node9.setQuotedString();
        boolean boolean18 = node9.isDec();
        boolean boolean19 = node9.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable20 = node9.siblings();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        boolean boolean49 = node38.hasChild(node48);
        int int50 = node38.getCharno();
        com.google.javascript.rhino.Node node51 = node28.useSourceInfoIfMissingFrom(node38);
        node51.setLength((int) ' ');
        node24.addChildrenToBack(node51);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable55 = node24.children();
        boolean boolean56 = node24.isHook();
        int int57 = node9.getIndexOfChild(node24);
        int int58 = node9.getLineno();
        java.lang.String str59 = node9.getQualifiedName();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node66 = node64.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) -1, node64, (int) (byte) 1, (int) '#');
        boolean boolean70 = node64.isDo();
        boolean boolean71 = node64.isDefaultCase();
        node64.setQuotedString();
        boolean boolean74 = node64.getBooleanProp(52);
        node64.setLineno((int) (byte) -1);
        com.google.javascript.rhino.Node node77 = node9.srcrefTree(node64);
        com.google.javascript.rhino.Node node78 = node3.copyInformationFrom(node64);
        int int79 = node78.getType();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(nodeIterable20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(nodeIterable55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test21586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21586");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        boolean boolean7 = jSDocInfo0.hasParameterType("JSDocInfo");
        boolean boolean8 = jSDocInfo0.hasReturnType();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test21587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21587");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isNoCompile();
        boolean boolean6 = jSDocInfo0.hasFileOverview();
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        java.lang.String str9 = jSDocInfo0.getDescriptionForParameter("Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nOR 0\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: OR 0\n");
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection10 = jSDocInfo0.getMarkers();
        java.lang.String str11 = jSDocInfo0.getVersion();
        boolean boolean13 = jSDocInfo0.hasParameter("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0 [quoted: 1]\n\n\nTree2:\nOR\n\n\nSubtree1: ERROR 1\n    STRING  0 [quoted: 1]\n\n\nSubtree2: OR\n");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(markerCollection10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test21588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21588");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        java.lang.String str7 = jSDocInfo0.getDescription();
        java.lang.String str8 = jSDocInfo0.getLicense();
        boolean boolean9 = jSDocInfo0.isImplicitCast();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection11 = jSDocInfo0.getMarkers();
        java.lang.String str12 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(markerCollection11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test21589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21589");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        boolean boolean51 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node52 = node14.removeFirstChild();
        boolean boolean53 = node52.isNumber();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable54 = node52.siblings();
        boolean boolean55 = node52.isNoSideEffectsCall();
        boolean boolean56 = node52.isTry();
        boolean boolean57 = node52.isFalse();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(nodeIterable54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test21590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21590");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(16773120, "(STRING  0\n)");
        boolean boolean3 = node2.isObjectLit();
        node2.setCharno(208993);
        boolean boolean6 = node2.isNE();
        boolean boolean7 = node2.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test21591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21591");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(4, 46, 0);
        node3.setSourceEncodedPosition(30);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node3.getStaticSourceFile();
        org.junit.Assert.assertNull(staticSourceFile6);
    }

    @Test
    public void test21592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21592");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        boolean boolean4 = node3.isAnd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str6 = jSDocInfo5.getVersion();
        java.lang.String str7 = jSDocInfo5.getFileOverview();
        jSDocInfo5.addSuppression("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo5.getExtendedInterfaces();
        boolean boolean11 = jSDocInfo5.isConstructor();
        node3.setJSDocInfo(jSDocInfo5);
        boolean boolean13 = jSDocInfo5.isConsistentIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo5.getImplementedInterfaces();
        boolean boolean15 = jSDocInfo5.shouldPreserveTry();
        boolean boolean16 = jSDocInfo5.isConstant();
        java.lang.String str17 = jSDocInfo5.getFileOverview();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test21593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21593");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        java.lang.String str10 = node4.toStringTree();
        boolean boolean11 = node4.isStringKey();
        boolean boolean12 = node4.isAnd();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node4.getStaticSourceFile();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.children();
        node4.putBooleanProp((int) (short) 10, true);
        boolean boolean19 = node4.isWhile();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "STRING  0\n" + "'", str10, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test21594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21594");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str8 = jSDocInfo7.getVersion();
        boolean boolean9 = jSDocInfo7.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo7.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo7.setVisibility(visibility11);
        jSDocInfo0.setVisibility(visibility11);
        boolean boolean14 = jSDocInfo0.hasThisType();
        boolean boolean15 = jSDocInfo0.isConstant();
        java.lang.String str16 = jSDocInfo0.getOriginalCommentString();
        java.util.Collection<java.lang.String> strCollection17 = jSDocInfo0.getAuthors();
        java.lang.String str18 = jSDocInfo0.getVersion();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(strCollection17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test21595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21595");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getStartLine();
        int int4 = stringPosition0.getEndLine();
        java.lang.String str5 = stringPosition0.getItem();
        int int6 = stringPosition0.getPositionOnEndLine();
        int int7 = stringPosition0.getPositionOnStartLine();
        int int8 = stringPosition0.getEndLine();
        stringPosition0.setPositionInformation(0, 39, 204810, 51);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test21596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21596");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node32 = node4.srcref(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean37 = node36.isFromExterns();
        boolean boolean38 = node32.hasChild(node36);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(52, node36);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node43.setCharno(1);
        java.util.Set<java.lang.String> strSet46 = node43.getDirectives();
        node43.setCharno((int) (short) -1);
        boolean boolean49 = node43.isRegExp();
        node36.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node51 = node36.getLastChild();
        boolean boolean52 = node51.isEmpty();
        boolean boolean53 = node51.isSyntheticBlock();
        boolean boolean54 = node51.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile55 = node51.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(staticSourceFile55);
    }

    @Test
    public void test21597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21597");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        strSet3.clear();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        boolean boolean18 = node15.isRegExp();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        boolean boolean30 = node23.isDefaultCase();
        node23.setQuotedString();
        com.google.javascript.rhino.Node node32 = node15.useSourceInfoFromForTree(node23);
        node23.putIntProp((int) (byte) 100, (int) (byte) 0);
        node23.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean39 = node23.isInc();
        boolean boolean40 = strSet3.equals((java.lang.Object) node23);
        boolean boolean41 = node23.isExprResult();
        boolean boolean42 = node23.isDebugger();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test21598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21598");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: STRING  0\n", 16, (int) (short) 10);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test21599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21599");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        boolean boolean4 = strSet3.isEmpty();
        boolean boolean5 = strSet3.isEmpty();
        java.lang.Object[] objArray6 = strSet3.toArray();
        java.util.Iterator<java.lang.String> strItor7 = strSet3.iterator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(strItor7);
    }

    @Test
    public void test21600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21600");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int12 = node11.getType();
        int int13 = node11.getCharno();
        boolean boolean14 = strSet7.equals((java.lang.Object) node11);
        java.util.stream.Stream<java.lang.String> strStream15 = strSet7.stream();
        int int16 = strSet7.size();
        boolean boolean17 = strSet7.isEmpty();
        boolean boolean19 = strSet7.contains((java.lang.Object) "ERROR 1\n    STRING  0 [quoted: 1]\n");
        java.lang.String[] strArray22 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strSet23.addAll((java.util.Collection<java.lang.String>) strList28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        boolean boolean51 = node40.hasChild(node50);
        boolean boolean52 = node50.isVar();
        boolean boolean53 = node50.isTypeOf();
        boolean boolean54 = strSet23.contains((java.lang.Object) node50);
        java.util.Iterator<java.lang.String> strItor55 = strSet23.iterator();
        java.util.Iterator<java.lang.String> strItor56 = strSet23.iterator();
        java.util.stream.Stream<java.lang.String> strStream57 = strSet23.parallelStream();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) (short) 100, "(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n)", 6, (int) '#');
        boolean boolean63 = node62.isTypeOf();
        boolean boolean64 = strSet23.contains((java.lang.Object) boolean63);
        boolean boolean65 = strSet7.removeAll((java.util.Collection<java.lang.String>) strSet23);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strItor55);
        org.junit.Assert.assertNotNull(strItor56);
        org.junit.Assert.assertNotNull(strStream57);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test21601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21601");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.hasEnumParameterType();
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        boolean boolean6 = jSDocInfo0.isJavaDispatch();
        boolean boolean7 = jSDocInfo0.isExterns();
        boolean boolean8 = jSDocInfo0.isImplicitCast();
        java.lang.String str9 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test21602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21602");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) (short) 100, 0, 54);
        int int4 = node3.getLength();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test21603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21603");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        com.google.javascript.rhino.Node node15 = node8.detachFromParent();
        node15.setOptionalArg(false);
        boolean boolean19 = node15.getBooleanProp(31);
        com.google.javascript.rhino.Node node20 = node3.copyInformationFrom(node15);
        boolean boolean21 = node20.isLabel();
        boolean boolean22 = node20.isWhile();
        boolean boolean23 = node20.isFor();
        boolean boolean24 = node20.isDelProp();
        boolean boolean25 = node20.isInc();
        com.google.javascript.rhino.Node node26 = node20.cloneTree();
        node20.addSuppression("(Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nNUMBER 4095.0 100 [empty_block: 1]\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: NUMBER 4095.0 100 [empty_block: 1]\n)");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
    }

    @Test
    public void test21604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21604");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setReturnsTainted();
        int int7 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test21605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21605");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        node8.setQuotedString();
        com.google.javascript.rhino.Node node16 = node3.srcrefTree(node8);
        boolean boolean17 = node8.isVar();
        boolean boolean18 = node8.isFor();
        boolean boolean19 = node8.isGetterDef();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(51);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder22 = node21.new FileLevelJsDocBuilder();
        java.lang.String str23 = node21.toStringTree();
        boolean boolean24 = node21.isQualifiedName();
        node21.setSourceEncodedPosition(12);
        node21.setLineno(5);
        boolean boolean29 = node21.isThrow();
        java.lang.String str30 = node8.checkTreeEquals(node21);
        boolean boolean31 = node21.isCase();
        boolean boolean32 = node21.isSwitch();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "IN\n" + "'", str23, "IN\n");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN 5\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN 5\n" + "'", str30, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN 5\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN 5\n");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test21606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21606");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node7 = node5.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1, node5, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node10.hasChild(node20);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node25 = node10.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node36 = node34.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) -1, node34, (int) (byte) 1, (int) '#');
        boolean boolean40 = node34.isScript();
        com.google.javascript.rhino.Node node41 = node34.detachFromParent();
        node41.setOptionalArg(false);
        boolean boolean45 = node41.getBooleanProp(31);
        com.google.javascript.rhino.Node node46 = node29.copyInformationFrom(node41);
        boolean boolean47 = node46.isLabel();
        com.google.javascript.rhino.Node node48 = node24.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(32, node48, 16, 97);
        boolean boolean52 = node51.isParamList();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean57 = node56.isThrow();
        java.lang.String str61 = node56.toString(true, false, true);
        node56.setIsSyntheticBlock(true);
        boolean boolean64 = node56.isTry();
        java.lang.String str65 = node56.toStringTree();
        boolean boolean66 = node56.isRegExp();
        node56.setSourceFileForTesting("hi!");
        java.lang.String str72 = node56.toString(false, true, false);
        node56.setSourceEncodedPosition(45);
        com.google.javascript.rhino.Node node75 = node51.useSourceInfoFrom(node56);
        node51.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable78 = node51.getAncestors();
        node51.setCharno(8);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("(((NAME STRING  0 100)))");
        node51.addChildrenToFront(node82);
        boolean boolean84 = node51.isNew();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "STRING  0" + "'", str61, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "STRING  0 [synthetic: 1]\n" + "'", str65, "STRING  0 [synthetic: 1]\n");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "STRING  [synthetic: 1] [source_file: hi!]" + "'", str72, "STRING  [synthetic: 1] [source_file: hi!]");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(ancestorIterable78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test21607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21607");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NAME 8", 4131, 4095);
        boolean boolean4 = node3.isLocalResultCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test21608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21608");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
    }

    @Test
    public void test21609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21609");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        java.lang.String str10 = jSDocInfo0.getDescriptionForParameter("IN\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getType();
        boolean boolean12 = jSDocInfo0.isExpose();
        boolean boolean13 = jSDocInfo0.isJavaDispatch();
        boolean boolean15 = jSDocInfo0.hasDescriptionForParameter("ERROR 1\n    STRING  0\n");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test21610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21610");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        int int27 = node3.getSourcePosition();
        java.lang.String str28 = node3.toString();
        int int30 = node3.getIntProp((int) (short) 0);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node41 = node39.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) -1, node39, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        boolean boolean55 = node44.hasChild(node54);
        int int56 = node44.getCharno();
        com.google.javascript.rhino.Node node57 = node34.useSourceInfoIfMissingFrom(node44);
        boolean boolean58 = node44.isAssignAdd();
        com.google.javascript.rhino.Node node59 = node3.srcref(node44);
        boolean boolean60 = node3.isGetElem();
        node3.setLineno(204810);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4131 + "'", int27 == 4131);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR 1" + "'", str28, "OR 1");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test21611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21611");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        jSDocInfo0.setAssociatedNode(node8);
        boolean boolean15 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo0.getReturnType();
        boolean boolean17 = jSDocInfo0.isNoCompile();
        jSDocInfo0.setLicense("STRING  0 [synthetic: 1]\n");
        boolean boolean20 = jSDocInfo0.hasReturnType();
        jSDocInfo0.addSuppression("(STRING  0 [jsdoc_info: JSDocInfo])");
        boolean boolean23 = jSDocInfo0.isNoShadow();
        jSDocInfo0.setDeprecated(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test21612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21612");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        java.util.Set<java.lang.String> strSet7 = node4.getDirectives();
        boolean boolean8 = node4.isHook();
        int int9 = node4.getSourceOffset();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node13.setCharno(1);
        boolean boolean16 = node13.isRegExp();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        boolean boolean27 = node21.isDo();
        boolean boolean28 = node21.isDefaultCase();
        node21.setQuotedString();
        com.google.javascript.rhino.Node node30 = node13.useSourceInfoFromForTree(node21);
        node21.putIntProp((int) (byte) 100, (int) (byte) 0);
        node21.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean37 = node21.isInc();
        com.google.javascript.rhino.Node node38 = node21.getLastSibling();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean43 = node42.isThrow();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean48 = node47.isThrow();
        java.lang.String str52 = node47.toString(true, false, true);
        java.lang.String str53 = node47.getQualifiedName();
        boolean boolean54 = node47.isIn();
        com.google.javascript.rhino.Node node55 = node47.cloneTree();
        boolean boolean56 = node55.isRegExp();
        boolean boolean57 = node55.isDebugger();
        node42.addChildToBack(node55);
        com.google.javascript.rhino.Node node59 = node38.srcref(node55);
        int int60 = node59.getLength();
        boolean boolean61 = node59.isNull();
        com.google.javascript.rhino.Node node62 = node59.getLastSibling();
        com.google.javascript.rhino.Node node63 = node4.clonePropsFrom(node59);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(4095, node63);
        node63.setSourceEncodedPositionForTree(7);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "STRING  0" + "'", str52, "STRING  0");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test21613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21613");
        com.google.javascript.rhino.Node[] nodeArray10 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray10);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(0, nodeArray10);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(2, nodeArray10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(4, nodeArray10, 39, (int) (short) 100);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray10, 4111, (int) 'a');
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(36, nodeArray10);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(32, nodeArray10, 54, 21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray10, 9, 37);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) ' ', nodeArray10);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(6, nodeArray10, (int) (short) 10, (int) '#');
        node30.setOptionalArg(false);
        org.junit.Assert.assertNotNull(nodeArray10);
    }

    @Test
    public void test21614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21614");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        jSDocInfo0.setAssociatedNode(node8);
        int int16 = node8.getIntProp((int) (byte) 10);
        boolean boolean17 = node8.isTry();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder18 = node8.new FileLevelJsDocBuilder();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test21615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21615");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("Not declared as a constructor");
        java.lang.String str6 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getType();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test21616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21616");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(4095.0d, (int) (byte) -1, 409601);
        node3.setWasEmptyNode(true);
        boolean boolean6 = node3.isLabelName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test21617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21617");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        int int11 = node4.getIntProp(51);
        node4.addSuppression("STRING  0 [quoted: 1]\n");
        node4.setSourceEncodedPositionForTree(3);
        java.lang.String str19 = node4.toString(true, true, true);
        int int20 = node4.getCharno();
        boolean boolean21 = node4.isExprResult();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str27 = jSDocInfo26.getVersion();
        boolean boolean28 = jSDocInfo26.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo26.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList30 = jSDocInfo26.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList31 = jSDocInfo26.getThrownTypes();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo26.getParameterNames();
        node25.setDirectives(strSet32);
        boolean boolean34 = node25.hasOneChild();
        boolean boolean35 = node25.isRegExp();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(29, node4, node25, (int) (short) 0, 9);
        boolean boolean39 = node4.isGetProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "STRING  0 [jsdoc_info: JSDocInfo]" + "'", str19, "STRING  0 [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(jSTypeExpressionList30);
        org.junit.Assert.assertNotNull(jSTypeExpressionList31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test21618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21618");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 39);
        com.google.javascript.rhino.Node node3 = node1.getAncestor(44);
        boolean boolean4 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node8.setCharno(1);
        boolean boolean11 = node8.isRegExp();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node18 = node16.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) -1, node16, (int) (byte) 1, (int) '#');
        boolean boolean22 = node16.isDo();
        boolean boolean23 = node16.isDefaultCase();
        node16.setQuotedString();
        com.google.javascript.rhino.Node node25 = node8.useSourceInfoFromForTree(node16);
        node16.putIntProp((int) (byte) 100, (int) (byte) 0);
        boolean boolean29 = node16.isVarArgs();
        boolean boolean30 = node16.isName();
        node16.setLineno((-1));
        boolean boolean33 = node16.isDebugger();
        com.google.javascript.rhino.Node node34 = node1.srcref(node16);
        com.google.javascript.rhino.Node node35 = node1.cloneNode();
        boolean boolean36 = node35.isTrue();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test21619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21619");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        boolean boolean7 = jSDocInfo0.isDeprecated();
        java.lang.String str8 = jSDocInfo0.getLendsName();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        boolean boolean10 = jSDocInfo0.isConstructor();
        boolean boolean12 = jSDocInfo0.hasParameterType("");
        jSDocInfo0.setDeprecated(true);
        boolean boolean15 = jSDocInfo0.isHidden();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test21620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21620");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        boolean boolean2 = typePosition0.hasBrackets();
        int int3 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        java.lang.String str14 = node8.getQualifiedName();
        boolean boolean15 = node8.isIn();
        com.google.javascript.rhino.Node node16 = node8.cloneTree();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        boolean boolean27 = node21.isScript();
        com.google.javascript.rhino.Node node28 = node21.detachFromParent();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node32.setCharno(1);
        java.util.Set<java.lang.String> strSet35 = node32.getDirectives();
        boolean boolean36 = node32.isHook();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node57 = node55.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node55, (int) (byte) 1, (int) '#');
        boolean boolean61 = node50.hasChild(node60);
        int int62 = node50.getCharno();
        com.google.javascript.rhino.Node node63 = node40.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node68 = node40.srcref(node67);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(4095, node16, node28, node32, node40);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node76 = node74.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) -1, node74, (int) (byte) 1, (int) '#');
        int int80 = node79.getType();
        boolean boolean81 = node32.isEquivalentTo(node79);
        boolean boolean82 = node32.isUnscopedQualifiedName();
        boolean boolean83 = node32.hasMoreThanOneChild();
        boolean boolean84 = node32.isName();
        boolean boolean85 = node32.isTrue();
        boolean boolean86 = node32.isComma();
        boolean boolean87 = node32.isEmpty();
        typePosition0.setItem(node32);
        node32.putIntProp(21, 46);
        node32.setQuotedString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test21621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21621");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(45);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node8 = node6.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) -1, node6, (int) (byte) 1, (int) '#');
        boolean boolean12 = node6.isDo();
        boolean boolean13 = node6.isDefaultCase();
        node6.setQuotedString();
        boolean boolean15 = node6.isDec();
        boolean boolean16 = node6.hasMoreThanOneChild();
        boolean boolean17 = node6.isTrue();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node6);
        boolean boolean19 = node1.isQuotedString();
        boolean boolean20 = node1.isParamList();
        boolean boolean21 = node1.isAssignAdd();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        boolean boolean42 = node31.hasChild(node41);
        boolean boolean43 = node41.isVar();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(12, "STRING  0 [synthetic: 1]\n");
        com.google.javascript.rhino.Node node47 = node41.useSourceInfoFromForTree(node46);
        boolean boolean48 = node47.isParamList();
        boolean boolean49 = node47.isNumber();
        boolean boolean50 = node47.isDefaultCase();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node59.isScript();
        node59.setQuotedString();
        com.google.javascript.rhino.Node node67 = node54.srcrefTree(node59);
        boolean boolean68 = node54.isVar();
        boolean boolean69 = node54.isCase();
        boolean boolean70 = node54.isLocalResultCall();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node77 = node75.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (byte) -1, node75, (int) (byte) 1, (int) '#');
        boolean boolean81 = node75.isDo();
        boolean boolean82 = node75.isDefaultCase();
        node75.setQuotedString();
        boolean boolean84 = node75.isDec();
        boolean boolean85 = node75.isLabel();
        boolean boolean86 = node75.isSetterDef();
        com.google.javascript.rhino.Node node87 = node75.cloneTree();
        boolean boolean88 = node54.isEquivalentToTyped(node75);
        com.google.javascript.rhino.Node node89 = node47.useSourceInfoIfMissingFrom(node75);
        int int90 = node1.getIndexOfChild(node75);
        boolean boolean91 = node75.isWith();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test21622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21622");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isName();
        boolean boolean18 = node4.isVoid();
        boolean boolean19 = node4.isSetterDef();
        boolean boolean20 = node4.isSyntheticBlock();
        node4.setSourceEncodedPositionForTree((int) (byte) 0);
        boolean boolean23 = node4.isNot();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test21623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21623");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        boolean boolean9 = jSDocInfo0.isInterface();
        java.lang.String str10 = jSDocInfo0.getLicense();
        boolean boolean12 = jSDocInfo0.hasParameterType("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test21624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21624");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        java.lang.String str8 = jSDocInfo0.getDescription();
        java.lang.String str9 = jSDocInfo0.getVersion();
        boolean boolean10 = jSDocInfo0.isExpose();
        boolean boolean11 = jSDocInfo0.isNoAlias();
        boolean boolean13 = jSDocInfo0.hasDescriptionForParameter("");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test21625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21625");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(8, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node9 = node7.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1, node7, (int) (byte) 1, (int) '#');
        boolean boolean13 = node7.isDo();
        boolean boolean14 = node7.isDefaultCase();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node28.hasChild(node38);
        int int40 = node28.getCharno();
        com.google.javascript.rhino.Node node41 = node18.useSourceInfoIfMissingFrom(node28);
        int int42 = node18.getSourcePosition();
        java.lang.String str43 = node18.toString();
        int int44 = node7.getIndexOfChild(node18);
        int int45 = node2.getIndexOfChild(node18);
        com.google.javascript.rhino.InputId inputId46 = node2.getInputId();
        boolean boolean47 = node2.isLabel();
        boolean boolean48 = node2.hasOneChild();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4131 + "'", int42 == 4131);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR 1" + "'", str43, "OR 1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(inputId46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test21626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21626");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(51);
        java.lang.String str18 = node4.checkTreeEquals(node17);
        boolean boolean19 = node4.isOr();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str21 = jSDocInfo20.getVersion();
        boolean boolean22 = jSDocInfo20.hasEnumParameterType();
        java.lang.String str24 = jSDocInfo20.getDescriptionForParameter("STRING  0\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo20.getExtendedInterfaces();
        node4.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        boolean boolean41 = node35.isScript();
        node35.setQuotedString();
        com.google.javascript.rhino.Node node43 = node30.srcrefTree(node35);
        boolean boolean44 = node35.isBreak();
        boolean boolean45 = node4.hasChild(node35);
        int int46 = node35.getCharno();
        boolean boolean47 = node35.isFalse();
        boolean boolean48 = node35.isQualifiedName();
        boolean boolean49 = node35.isHook();
        boolean boolean50 = node35.isDelProp();
        boolean boolean51 = node35.isCase();
        boolean boolean52 = node35.isRegExp();
        boolean boolean53 = node35.isOr();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str18, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test21627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21627");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node20.setSourceFileForTesting("STRING  0\n");
        int int23 = node20.getSourcePosition();
        node20.detachChildren();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node33 = node31.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) -1, node31, (int) (byte) 1, (int) '#');
        boolean boolean37 = node31.isScript();
        boolean boolean38 = node31.isTrue();
        com.google.javascript.rhino.InputId inputId39 = null;
        node31.setInputId(inputId39);
        boolean boolean41 = node31.isString();
        boolean boolean42 = node31.isObjectLit();
        int int43 = node31.getChildCount();
        // The following exception was thrown during execution in test generation
        try {
            node20.addChildrenAfter(node26, node31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test21628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21628");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        node8.setQuotedString();
        com.google.javascript.rhino.Node node16 = node3.srcrefTree(node8);
        boolean boolean17 = node16.isIf();
        boolean boolean18 = node16.hasMoreThanOneChild();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node16.new FileLevelJsDocBuilder();
        boolean boolean20 = node16.isWhile();
        boolean boolean21 = node16.isNew();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        boolean boolean28 = node25.isRegExp();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node33.isDo();
        boolean boolean40 = node33.isDefaultCase();
        node33.setQuotedString();
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoFromForTree(node33);
        node33.putIntProp((int) (byte) 100, (int) (byte) 0);
        boolean boolean46 = node33.isVarArgs();
        node33.setLineno(37);
        boolean boolean49 = node33.isInstanceOf();
        boolean boolean50 = node33.isAdd();
        boolean boolean51 = node16.isEquivalentToTyped(node33);
        node33.setVarArgs(false);
        boolean boolean54 = node33.wasEmptyNode();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test21629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21629");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        java.lang.String str7 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node11.setCharno(1);
        boolean boolean14 = node11.isRegExp();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node19.isDo();
        boolean boolean26 = node19.isDefaultCase();
        node19.setQuotedString();
        com.google.javascript.rhino.Node node28 = node11.useSourceInfoFromForTree(node19);
        node19.putIntProp((int) (byte) 100, (int) (byte) 0);
        boolean boolean32 = node19.isVarArgs();
        jSDocInfo0.setAssociatedNode(node19);
        com.google.javascript.rhino.InputId inputId34 = node19.getInputId();
        boolean boolean35 = node19.isOr();
        boolean boolean36 = node19.wasEmptyNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = node19.getJSDocInfo();
        java.lang.String str38 = node19.getString();
        boolean boolean39 = node19.isNE();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(inputId34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSDocInfo37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test21630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21630");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node27 = node25.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node25, (int) (byte) 1, (int) '#');
        boolean boolean31 = node20.hasChild(node30);
        boolean boolean32 = node30.isVar();
        boolean boolean33 = node30.isTypeOf();
        boolean boolean34 = strSet3.contains((java.lang.Object) node30);
        strSet3.clear();
        java.util.Spliterator<java.lang.String> strSpliterator36 = strSet3.spliterator();
        java.util.stream.Stream<java.lang.String> strStream37 = strSet3.parallelStream();
        java.lang.String[] strArray40 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        boolean boolean48 = strSet41.addAll((java.util.Collection<java.lang.String>) strList46);
        strSet41.clear();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node53.setCharno(1);
        boolean boolean56 = node53.isRegExp();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node63 = node61.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) -1, node61, (int) (byte) 1, (int) '#');
        boolean boolean67 = node61.isDo();
        boolean boolean68 = node61.isDefaultCase();
        node61.setQuotedString();
        com.google.javascript.rhino.Node node70 = node53.useSourceInfoFromForTree(node61);
        node61.putIntProp((int) (byte) 100, (int) (byte) 0);
        node61.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean77 = node61.isInc();
        boolean boolean78 = strSet41.equals((java.lang.Object) node61);
        boolean boolean79 = strSet3.addAll((java.util.Collection<java.lang.String>) strSet41);
        java.util.Spliterator<java.lang.String> strSpliterator80 = strSet41.spliterator();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSpliterator36);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strSpliterator80);
    }

    @Test
    public void test21631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21631");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("STRING  0", (int) '#', 6);
        boolean boolean4 = node3.isAssignAdd();
        boolean boolean5 = node3.isFalse();
        boolean boolean6 = node3.isVarArgs();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test21632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21632");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isScript();
        com.google.javascript.rhino.Node node24 = node17.detachFromParent();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node28.setCharno(1);
        java.util.Set<java.lang.String> strSet31 = node28.getDirectives();
        boolean boolean32 = node28.isHook();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node64 = node36.srcref(node63);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node12, node24, node28, node36);
        com.google.javascript.rhino.Node node66 = node65.removeChildren();
        node65.setSourceEncodedPosition((int) (byte) 1);
        java.lang.String str69 = node65.getSourceFileName();
        node65.setCharno(0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str73 = jSDocInfo72.toString();
        java.lang.String str74 = jSDocInfo72.getLicense();
        boolean boolean75 = jSDocInfo72.hasEnumParameterType();
        boolean boolean76 = jSDocInfo72.hasThisType();
        java.lang.String str77 = jSDocInfo72.getSourceName();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility78 = jSDocInfo72.getVisibility();
        node65.setJSDocInfo(jSDocInfo72);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "JSDocInfo" + "'", str73, "JSDocInfo");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(visibility78);
    }

    @Test
    public void test21633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21633");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        node3.setIsSyntheticBlock(true);
        boolean boolean11 = node3.isTry();
        java.lang.String str12 = node3.toStringTree();
        node3.addSuppression("OR 1");
        node3.setCharno(4131);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = node3.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  0 [jsdoc_info: JSDocInfo] [synthetic: 1] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING  0 [synthetic: 1]\n" + "'", str12, "STRING  0 [synthetic: 1]\n");
    }

    @Test
    public void test21634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21634");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        boolean boolean9 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getReturnType();
        boolean boolean11 = jSDocInfo0.hasFileOverview();
        boolean boolean12 = jSDocInfo0.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
    }

    @Test
    public void test21635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21635");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        int int4 = sideEffectFlags1.valueOf();
        int int5 = sideEffectFlags1.valueOf();
        int int6 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setAllFlags();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 47 + "'", int4 == 47);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 47 + "'", int5 == 47);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 47 + "'", int6 == 47);
    }

    @Test
    public void test21636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21636");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType10 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType11 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType12 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType13 = typePair2.typeB;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertNull(jSType12);
        org.junit.Assert.assertNull(jSType13);
    }

    @Test
    public void test21637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21637");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0 [source_file: Named type with empty name component]\n");
        boolean boolean2 = node1.isInstanceOf();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test21638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21638");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getModifies();
        java.lang.String str12 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test21639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21639");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) 1);
        java.lang.Object obj3 = node1.getProp(42);
        node1.putBooleanProp(12, false);
        boolean boolean7 = node1.hasChildren();
        boolean boolean8 = node1.isExprResult();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test21640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21640");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getDescription();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(typePosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
        org.junit.Assert.assertNull(stringPosition7);
    }

    @Test
    public void test21641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21641");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str2 = jSDocInfo1.getVersion();
        boolean boolean3 = jSDocInfo1.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo1.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo1.getImplementedInterfaces();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean10 = node9.isThrow();
        java.lang.String str14 = node9.toString(true, false, true);
        jSDocInfo1.setAssociatedNode(node9);
        int int17 = node9.getIntProp((int) (byte) 10);
        boolean boolean18 = node9.isTry();
        com.google.javascript.rhino.Node[] nodeArray26 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray26);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, nodeArray26);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(2, nodeArray26);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(4, nodeArray26, 39, (int) (short) 100);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray26, 4111, (int) 'a');
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(36, nodeArray26);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(6, nodeArray26);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(16419, node9, node37, 37, 9);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = node9.getJSDocInfo();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING  0" + "'", str14, "STRING  0");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(nodeArray26);
        org.junit.Assert.assertNull(jSDocInfo41);
    }

    @Test
    public void test21642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21642");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node14.setCharno(1);
        java.util.Set<java.lang.String> strSet17 = node14.getDirectives();
        java.lang.String str18 = node4.checkTreeEquals(node14);
        boolean boolean19 = node4.isHook();
        boolean boolean21 = node4.getBooleanProp((int) (byte) 0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test21643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21643");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(41, "Node tree inequality:\nTree1:\nTYPEOF Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n 45\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: TYPEOF Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n 45\n\n\nSubtree2: STRING  0\n", 9, 7);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test21644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21644");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("(Not declared as a type name)");
        com.google.javascript.rhino.Node node2 = node1.cloneTree();
        boolean boolean3 = node2.isGetProp();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isDo();
        boolean boolean15 = node8.isDefaultCase();
        node8.setQuotedString();
        boolean boolean17 = node8.isDec();
        boolean boolean18 = node8.isLabel();
        boolean boolean19 = node8.isSetterDef();
        boolean boolean20 = node8.isRegExp();
        boolean boolean21 = node8.isName();
        boolean boolean22 = node8.isAssignAdd();
        node8.setCharno(31);
        int int25 = node2.getIndexOfChild(node8);
        int int26 = node8.getChildCount();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test21645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21645");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasTypedefType();
        boolean boolean2 = jSDocInfo0.isDeprecated();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        boolean boolean4 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test21646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21646");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        int int2 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(12, "STRING  0 [synthetic: 1]\n");
        com.google.javascript.rhino.InputId inputId6 = node5.getInputId();
        com.google.javascript.rhino.InputId inputId7 = null;
        node5.setInputId(inputId7);
        typePosition0.setItem(node5);
        boolean boolean10 = typePosition0.hasBrackets();
        typePosition0.setPositionInformation((int) '4', 44, 16773120, 39);
        int int16 = typePosition0.getEndLine();
        int int17 = typePosition0.getPositionOnStartLine();
        int int18 = typePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(inputId6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16773120 + "'", int16 == 16773120);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 44 + "'", int17 == 44);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
    }

    @Test
    public void test21647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21647");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node9.isReturn();
        boolean boolean22 = node9.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str24 = jSDocInfo23.getVersion();
        boolean boolean25 = jSDocInfo23.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo23.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList27 = jSDocInfo23.getImplementedInterfaces();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean32 = node31.isThrow();
        java.lang.String str36 = node31.toString(true, false, true);
        jSDocInfo23.setAssociatedNode(node31);
        com.google.javascript.rhino.Node node38 = node31.removeFirstChild();
        boolean boolean39 = node31.isNumber();
        node9.addChildToBack(node31);
        boolean boolean41 = node31.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean46 = node45.isThrow();
        java.lang.String str50 = node45.toString(true, false, true);
        java.lang.String str51 = node45.getQualifiedName();
        boolean boolean52 = node45.isIn();
        com.google.javascript.rhino.Node node53 = node45.cloneTree();
        boolean boolean54 = node53.isRegExp();
        int int55 = node53.getSourcePosition();
        node31.addChildrenToBack(node53);
        node53.setLineno((int) (byte) -1);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable59 = node53.getAncestors();
        int int60 = node53.getSourceOffset();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node64.setCharno(1);
        java.util.Set<java.lang.String> strSet67 = node64.getDirectives();
        node64.setCharno((int) (short) -1);
        boolean boolean70 = node64.isRegExp();
        com.google.javascript.rhino.Node node71 = node64.getLastChild();
        boolean boolean72 = node64.isDec();
        boolean boolean73 = node64.isExprResult();
        com.google.javascript.rhino.Node node74 = node64.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node75 = node53.useSourceInfoFrom(node74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(jSTypeExpressionList27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  0" + "'", str36, "STRING  0");
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "STRING  0" + "'", str50, "STRING  0");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 10 + "'", int55 == 10);
        org.junit.Assert.assertNotNull(ancestorIterable59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(strSet67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(node74);
    }

    @Test
    public void test21648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21648");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        int int6 = stringPosition0.getEndLine();
        stringPosition0.setItem("ERROR 1\n    STRING  0\n    STRING  0\n");
        int int9 = stringPosition0.getPositionOnEndLine();
        int int10 = stringPosition0.getPositionOnEndLine();
        java.lang.String str11 = stringPosition0.getItem();
        int int12 = stringPosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ERROR 1\n    STRING  0\n    STRING  0\n" + "'", str11, "ERROR 1\n    STRING  0\n    STRING  0\n");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36 + "'", int12 == 36);
    }

    @Test
    public void test21649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21649");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 1044480);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean7 = node6.isThrow();
        java.lang.String str11 = node6.toString(true, false, true);
        int int13 = node6.getIntProp(51);
        node6.addSuppression("STRING  0 [quoted: 1]\n");
        node6.setSourceEncodedPositionForTree(3);
        boolean boolean18 = node6.isNoSideEffectsCall();
        boolean boolean19 = node6.isCatch();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(45);
        boolean boolean22 = node21.isQualifiedName();
        com.google.javascript.rhino.Node node23 = node6.srcref(node21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(11, node2, node6, 53, 8);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  0" + "'", str11, "STRING  0");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
    }

    @Test
    public void test21650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21650");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(12, "STRING  0 [synthetic: 1]\n");
        com.google.javascript.rhino.Node node25 = node19.useSourceInfoFromForTree(node24);
        boolean boolean26 = node25.isParamList();
        boolean boolean27 = node25.isNumber();
        boolean boolean28 = node25.isDefaultCase();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node39 = node37.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) -1, node37, (int) (byte) 1, (int) '#');
        boolean boolean43 = node37.isScript();
        node37.setQuotedString();
        com.google.javascript.rhino.Node node45 = node32.srcrefTree(node37);
        boolean boolean46 = node32.isVar();
        boolean boolean47 = node32.isCase();
        boolean boolean48 = node32.isLocalResultCall();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        boolean boolean59 = node53.isDo();
        boolean boolean60 = node53.isDefaultCase();
        node53.setQuotedString();
        boolean boolean62 = node53.isDec();
        boolean boolean63 = node53.isLabel();
        boolean boolean64 = node53.isSetterDef();
        com.google.javascript.rhino.Node node65 = node53.cloneTree();
        boolean boolean66 = node32.isEquivalentToTyped(node53);
        com.google.javascript.rhino.Node node67 = node25.useSourceInfoIfMissingFrom(node53);
        int int68 = node53.getCharno();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
    }

    @Test
    public void test21651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21651");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getType();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        java.lang.String str8 = jSDocInfo0.toString();
        java.lang.String str9 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JSDocInfo" + "'", str8, "JSDocInfo");
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test21652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21652");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        boolean boolean51 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node52 = node14.removeFirstChild();
        node52.setVarArgs(true);
        node52.detachChildren();
        java.util.Set<java.lang.String> strSet56 = node52.getDirectives();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean61 = node60.isThrow();
        java.lang.String str65 = node60.toString(true, false, true);
        java.lang.String str66 = node60.getQualifiedName();
        boolean boolean67 = node60.isIn();
        com.google.javascript.rhino.Node node68 = node60.cloneTree();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node72.setCharno(1);
        java.util.Set<java.lang.String> strSet75 = node72.getDirectives();
        boolean boolean76 = node72.isHook();
        node68.addChildToFront(node72);
        boolean boolean78 = node68.isNE();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node68.siblings();
        com.google.javascript.rhino.Node node80 = node52.useSourceInfoFrom(node68);
        boolean boolean81 = node80.isName();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "STRING  0" + "'", str65, "STRING  0");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test21653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21653");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(37, 11, (int) '#');
    }

    @Test
    public void test21654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21654");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node20.new FileLevelJsDocBuilder();
        boolean boolean22 = node20.isFalse();
        boolean boolean23 = node20.hasChildren();
        node20.setSourceEncodedPosition(37);
        node20.setSourceEncodedPositionForTree(208993);
        boolean boolean28 = node20.isDebugger();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test21655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21655");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("STRING  0\n");
        jSDocInfo0.setDeprecated(false);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.hasModifies();
        boolean boolean11 = jSDocInfo0.isOverride();
        java.lang.String str12 = jSDocInfo0.getVersion();
        java.lang.String str13 = jSDocInfo0.getMeaning();
        boolean boolean14 = jSDocInfo0.isHidden();
        boolean boolean15 = jSDocInfo0.hasModifies();
        java.lang.String str16 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test21656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21656");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        boolean boolean9 = node3.isOptionalArg();
        java.lang.String str13 = node3.toString(false, false, false);
        boolean boolean14 = node3.hasOneChild();
        boolean boolean15 = node3.isAdd();
        int int16 = node3.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING " + "'", str13, "STRING ");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test21657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21657");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isCase();
        node19.putBooleanProp(31, true);
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str27 = jSDocInfo26.getVersion();
        boolean boolean28 = jSDocInfo26.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo26.getParameterNames();
        jSDocInfo26.addSuppression("");
        java.lang.String str32 = jSDocInfo26.getBlockDescription();
        boolean boolean33 = jSDocInfo26.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo26.getSuppressions();
        boolean boolean35 = jSDocInfo26.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo26.getParameterType("Unknown class name");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node42.isDo();
        boolean boolean49 = node42.isDefaultCase();
        node42.setQuotedString();
        boolean boolean51 = node42.isDec();
        boolean boolean52 = node42.hasMoreThanOneChild();
        boolean boolean53 = node42.isTrue();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str56 = jSDocInfo55.getVersion();
        boolean boolean57 = jSDocInfo55.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet58 = jSDocInfo55.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList59 = jSDocInfo55.getImplementedInterfaces();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean64 = node63.isThrow();
        java.lang.String str68 = node63.toString(true, false, true);
        jSDocInfo55.setAssociatedNode(node63);
        com.google.javascript.rhino.Node node70 = node63.removeFirstChild();
        boolean boolean71 = node63.isNumber();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(52, node63, 45, 2);
        boolean boolean75 = node63.isRegExp();
        com.google.javascript.rhino.Node node76 = node42.useSourceInfoFrom(node63);
        node42.setLineno((int) '#');
        jSDocInfo26.setAssociatedNode(node42);
        node19.setJSDocInfo(jSDocInfo26);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo26.getTypedefType();
        java.lang.String str82 = jSDocInfo26.getFileOverview();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(jSTypeExpressionList59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "STRING  0" + "'", str68, "STRING  0");
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test21658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21658");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 0, 46);
        int int4 = node3.getSideEffectFlags();
        boolean boolean5 = node3.isCase();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node14.isScript();
        node14.setQuotedString();
        com.google.javascript.rhino.Node node22 = node9.srcrefTree(node14);
        boolean boolean23 = node22.isNull();
        com.google.javascript.rhino.Node node24 = node3.useSourceInfoIfMissingFromForTree(node22);
        java.util.Set<java.lang.String> strSet25 = node3.getDirectives();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(strSet25);
    }

    @Test
    public void test21659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21659");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        int int15 = node4.getLength();
        int int16 = node4.getChildCount();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean21 = node20.isThrow();
        java.lang.String str25 = node20.toString(true, false, true);
        node20.setIsSyntheticBlock(true);
        int int28 = node20.getLength();
        boolean boolean29 = node20.isNumber();
        node20.setSourceEncodedPositionForTree(40);
        boolean boolean32 = node20.isCase();
        boolean boolean33 = node20.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = node4.useSourceInfoFrom(node20);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node41 = node39.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) -1, node39, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        boolean boolean55 = node44.hasChild(node54);
        boolean boolean56 = node54.isVar();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(12, "STRING  0 [synthetic: 1]\n");
        com.google.javascript.rhino.Node node60 = node54.useSourceInfoFromForTree(node59);
        com.google.javascript.rhino.Node node62 = node54.getAncestor(151562);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node63 = node34.useSourceInfoFrom(node62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "STRING  0" + "'", str25, "STRING  0");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node62);
    }

    @Test
    public void test21660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21660");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isVarArgs();
        boolean boolean6 = node3.isSetterDef();
        boolean boolean7 = node3.isFromExterns();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int12 = node11.getType();
        com.google.javascript.rhino.Node node13 = node11.cloneNode();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean18 = node17.isThrow();
        java.lang.String str22 = node17.toString(true, false, true);
        int int24 = node17.getIntProp(51);
        node17.addSuppression("STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node27 = node13.useSourceInfoFrom(node17);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node31.setCharno(1);
        java.util.Set<java.lang.String> strSet34 = node31.getDirectives();
        node31.setCharno((int) (short) -1);
        boolean boolean37 = node31.isRegExp();
        boolean boolean38 = node31.isDefaultCase();
        com.google.javascript.rhino.Node node39 = node31.removeChildren();
        boolean boolean40 = node13.isEquivalentTo(node31);
        com.google.javascript.rhino.Node node41 = node3.useSourceInfoIfMissingFromForTree(node13);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable42 = node13.siblings();
        boolean boolean43 = node13.isLabel();
        boolean boolean44 = node13.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "STRING  0" + "'", str22, "STRING  0");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(nodeIterable42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test21661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21661");
        com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(45);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node9 = node7.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1, node7, (int) (byte) 1, (int) '#');
        boolean boolean13 = node7.isDo();
        boolean boolean14 = node7.isDefaultCase();
        node7.setQuotedString();
        boolean boolean16 = node7.isDec();
        boolean boolean17 = node7.hasMoreThanOneChild();
        boolean boolean18 = node7.isTrue();
        com.google.javascript.rhino.Node node19 = node2.useSourceInfoIfMissingFrom(node7);
        boolean boolean20 = node2.isObjectLit();
        boolean boolean21 = node2.isInc();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        boolean boolean32 = node26.isDo();
        boolean boolean33 = node26.isDefaultCase();
        node26.setQuotedString();
        boolean boolean35 = node26.isDec();
        boolean boolean36 = node26.isBlock();
        boolean boolean37 = node26.isScript();
        com.google.javascript.rhino.Node node38 = node2.useSourceInfoFromForTree(node26);
        java.util.Set<java.lang.String> strSet39 = node38.getDirectives();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(39, (int) (byte) 10, (int) (byte) 0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean48 = node47.isGetterDef();
        boolean boolean49 = node47.isLabelName();
        java.lang.String[] strArray52 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        boolean boolean60 = strSet53.addAll((java.util.Collection<java.lang.String>) strList58);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node67 = node65.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) -1, node65, (int) (byte) 1, (int) '#');
        boolean boolean71 = node65.isScript();
        node65.setQuotedString();
        boolean boolean73 = strSet53.equals((java.lang.Object) node65);
        java.util.stream.Stream<java.lang.String> strStream74 = strSet53.stream();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean79 = node78.isThrow();
        java.lang.String str83 = node78.toString(true, false, true);
        java.lang.String str84 = node78.getQualifiedName();
        boolean boolean85 = node78.isIn();
        com.google.javascript.rhino.Node node86 = node78.cloneTree();
        boolean boolean87 = node86.isRegExp();
        boolean boolean88 = node86.isExprResult();
        boolean boolean89 = strSet53.remove((java.lang.Object) node86);
        com.google.javascript.rhino.Node node90 = node47.useSourceInfoIfMissingFrom(node86);
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(409601, node38, node43, node47);
        boolean boolean92 = node38.isDelProp();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strStream74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "STRING  0" + "'", str83, "STRING  0");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test21662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21662");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        boolean boolean9 = jSDocInfo0.isOverride();
        boolean boolean10 = jSDocInfo0.isExpose();
        boolean boolean11 = jSDocInfo0.isExport();
        jSDocInfo0.addSuppression("(Not declared as a type name)");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21663");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 0, "Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n    STRING  0\n\n\nTree2:\nERROR 1\n    STRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n    STRING  0\n\n\nSubtree2: ERROR 1\n    STRING  0\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test21664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21664");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        int int6 = stringPosition0.getEndLine();
        stringPosition0.setItem("ERROR 1\n    STRING  0\n    STRING  0\n");
        int int9 = stringPosition0.getPositionOnEndLine();
        int int10 = stringPosition0.getStartLine();
        stringPosition0.setItem("NAME STRING  0 100");
        int int13 = stringPosition0.getPositionOnEndLine();
        int int14 = stringPosition0.getEndLine();
        stringPosition0.setItem("Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nSTRING Not declared as a constructor 0\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: STRING Not declared as a constructor 0\n");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
    }

    @Test
    public void test21665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21665");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = ternaryValue1.or(ternaryValue3);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue4.not();
        boolean boolean7 = ternaryValue4.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        java.lang.String str10 = ternaryValue9.toString();
        java.lang.String str11 = ternaryValue9.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue14.or(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue19.or(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue21.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue17.and(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue12.and(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue9.and(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue4.xor(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "true" + "'", str10, "true");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "true" + "'", str11, "true");
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
    }

    @Test
    public void test21666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21666");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        node8.setQuotedString();
        com.google.javascript.rhino.Node node16 = node3.srcrefTree(node8);
        boolean boolean17 = node8.isBreak();
        com.google.javascript.rhino.InputId inputId18 = null;
        node8.setInputId(inputId18);
        boolean boolean20 = node8.isIf();
        node8.putBooleanProp(6, false);
        com.google.javascript.rhino.Node node24 = node8.detachFromParent();
        boolean boolean25 = node8.isThrow();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test21667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21667");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        java.lang.String str10 = node4.toStringTree();
        boolean boolean11 = node4.isDebugger();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (byte) 10, "Named type with empty name component");
        boolean boolean15 = node14.isObjectLit();
        boolean boolean16 = node14.hasMoreThanOneChild();
        java.lang.String str17 = node14.getQualifiedName();
        boolean boolean19 = node14.getBooleanProp((int) 'a');
        com.google.javascript.rhino.Node node20 = node4.srcref(node14);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("(OR 1\n)", (int) (byte) 100, 15);
        boolean boolean25 = node14.isEquivalentToTyped(node24);
        com.google.javascript.rhino.jstype.JSType jSType26 = node24.getJSType();
        boolean boolean27 = node24.isGetProp();
        boolean boolean28 = node24.isNoSideEffectsCall();
        boolean boolean29 = node24.isVarArgs();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "STRING  0\n" + "'", str10, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test21668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21668");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str12 = jSDocInfo11.getVersion();
        java.lang.String str13 = jSDocInfo11.getFileOverview();
        boolean boolean14 = jSDocInfo11.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet15 = jSDocInfo11.getParameterNames();
        boolean boolean16 = strSet3.retainAll((java.util.Collection<java.lang.String>) strSet15);
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str18 = jSDocInfo17.getVersion();
        boolean boolean19 = jSDocInfo17.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo17.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str22 = jSDocInfo21.getVersion();
        java.lang.String str23 = jSDocInfo21.getFileOverview();
        boolean boolean24 = jSDocInfo21.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo21.getParameterNames();
        java.util.Iterator<java.lang.String> strItor26 = strSet25.iterator();
        boolean boolean27 = strSet25.isEmpty();
        boolean boolean28 = strSet20.containsAll((java.util.Collection<java.lang.String>) strSet25);
        boolean boolean29 = strSet3.containsAll((java.util.Collection<java.lang.String>) strSet25);
        int int30 = strSet3.size();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        boolean boolean41 = node35.isDo();
        boolean boolean42 = node35.isDefaultCase();
        node35.setQuotedString();
        boolean boolean44 = node35.isDec();
        boolean boolean45 = node35.isLabel();
        boolean boolean46 = node35.isSetterDef();
        boolean boolean47 = strSet3.remove((java.lang.Object) boolean46);
        boolean boolean49 = strSet3.add("OR 1 [length: 32]\n");
        java.util.stream.Stream<java.lang.String> strStream50 = strSet3.stream();
        java.lang.Object[] objArray51 = strSet3.toArray();
        boolean boolean52 = strSet3.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator53 = strSet3.spliterator();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strStream50);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[OR 1 [length: 32]\n]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[OR 1 [length: 32]\n]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSpliterator53);
    }

    @Test
    public void test21669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21669");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isConstructor();
        java.lang.String str4 = jSDocInfo0.getSourceName();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean7 = jSDocInfo0.hasDescriptionForParameter("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        boolean boolean8 = jSDocInfo0.isInterface();
        boolean boolean9 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test21670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21670");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        boolean boolean7 = jSDocInfo0.hasThisType();
        boolean boolean8 = jSDocInfo0.isInterface();
        boolean boolean9 = jSDocInfo0.isConstant();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strCollection10);
    }

    @Test
    public void test21671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21671");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        boolean boolean44 = node21.isString();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node54.hasChild(node64);
        boolean boolean66 = node64.isVar();
        boolean boolean67 = node64.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node64.children();
        com.google.javascript.rhino.Node node69 = node21.srcref(node64);
        com.google.javascript.rhino.Node node70 = node69.getLastSibling();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder71 = node69.new FileLevelJsDocBuilder();
        boolean boolean72 = node69.isGetElem();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test21672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21672");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        java.util.Set<java.lang.String> strSet6 = node3.getDirectives();
        node3.setCharno((int) (short) -1);
        node3.setVarArgs(true);
        boolean boolean11 = node3.isQualifiedName();
        node3.setLineno(9);
        boolean boolean14 = node3.isGetterDef();
        com.google.javascript.rhino.Node node15 = node3.getNext();
        boolean boolean16 = node3.isHook();
        boolean boolean17 = node3.isGetProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test21673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21673");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        boolean boolean19 = node15.isHook();
        node11.addChildToFront(node15);
        boolean boolean21 = node11.isNE();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable22 = node11.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator23 = nodeIterable22.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator24 = nodeIterable22.spliterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator25 = nodeIterable22.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nodeIterable22);
        org.junit.Assert.assertNotNull(nodeSpliterator23);
        org.junit.Assert.assertNotNull(nodeSpliterator24);
        org.junit.Assert.assertNotNull(nodeSpliterator25);
    }

    @Test
    public void test21674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21674");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        boolean boolean3 = typePosition0.hasBrackets();
        typePosition0.setPositionInformation(0, 5, 42, 4131);
        int int9 = typePosition0.getPositionOnStartLine();
        int int10 = typePosition0.getStartLine();
        boolean boolean11 = typePosition0.hasBrackets();
        // The following exception was thrown during execution in test generation
        try {
            typePosition0.setPositionInformation(16920628, 19, 48, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 16920628?end-line: 48");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21675");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        boolean boolean9 = node3.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        boolean boolean11 = node3.isBreak();
        node3.putIntProp(100, 12);
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str16 = jSDocInfo15.getVersion();
        java.lang.String str17 = jSDocInfo15.getFileOverview();
        jSDocInfo15.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo15.getBaseType();
        boolean boolean21 = jSDocInfo15.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet22 = jSDocInfo15.getSuppressions();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int27 = node26.getType();
        int int28 = node26.getCharno();
        boolean boolean29 = strSet22.equals((java.lang.Object) node26);
        boolean boolean30 = node26.isOptionalArg();
        int int31 = node26.getSourceOffset();
        com.google.javascript.rhino.Node node32 = node3.srcref(node26);
        java.lang.String str33 = node3.getString();
        boolean boolean34 = node3.isHook();
        boolean boolean35 = node3.isOr();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 40 + "'", int27 == 40);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 10 + "'", int28 == 10);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test21676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21676");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        com.google.javascript.rhino.Node node16 = node4.getLastSibling();
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isNew();
        boolean boolean19 = node16.isScript();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 44);
        com.google.javascript.rhino.Node node22 = node21.cloneNode();
        boolean boolean23 = node22.isFromExterns();
        com.google.javascript.rhino.Node node24 = node16.copyInformationFrom(node22);
        boolean boolean25 = node22.isAdd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test21677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21677");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node32 = node4.srcref(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean37 = node36.isFromExterns();
        boolean boolean38 = node32.hasChild(node36);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(52, node36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str41 = jSDocInfo40.getVersion();
        java.lang.String str42 = jSDocInfo40.getFileOverview();
        jSDocInfo40.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = jSDocInfo40.getBaseType();
        boolean boolean46 = jSDocInfo40.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet47 = jSDocInfo40.getSuppressions();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int52 = node51.getType();
        int int53 = node51.getCharno();
        boolean boolean54 = strSet47.equals((java.lang.Object) node51);
        node39.setDirectives(strSet47);
        boolean boolean56 = node39.isAssignAdd();
        boolean boolean57 = node39.isTry();
        int int58 = node39.getLineno();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNull(jSTypeExpression45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 40 + "'", int52 == 40);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53 == 10);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test21678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21678");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node20.new FileLevelJsDocBuilder();
        boolean boolean22 = node20.isCase();
        boolean boolean23 = node20.isFalse();
        int int24 = node20.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test21679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21679");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        boolean boolean7 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        boolean boolean9 = jSDocInfo0.isExport();
        boolean boolean10 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test21680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21680");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str12 = jSDocInfo11.getVersion();
        java.lang.String str13 = jSDocInfo11.getFileOverview();
        boolean boolean14 = jSDocInfo11.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet15 = jSDocInfo11.getParameterNames();
        boolean boolean16 = strSet3.retainAll((java.util.Collection<java.lang.String>) strSet15);
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str18 = jSDocInfo17.getVersion();
        boolean boolean19 = jSDocInfo17.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo17.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str22 = jSDocInfo21.getVersion();
        java.lang.String str23 = jSDocInfo21.getFileOverview();
        boolean boolean24 = jSDocInfo21.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo21.getParameterNames();
        java.util.Iterator<java.lang.String> strItor26 = strSet25.iterator();
        boolean boolean27 = strSet25.isEmpty();
        boolean boolean28 = strSet20.containsAll((java.util.Collection<java.lang.String>) strSet25);
        boolean boolean29 = strSet3.containsAll((java.util.Collection<java.lang.String>) strSet25);
        int int30 = strSet3.size();
        java.util.stream.Stream<java.lang.String> strStream31 = strSet3.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream32 = strSet3.stream();
        java.lang.Object[] objArray33 = strSet3.toArray();
        java.lang.String[] strArray36 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        boolean boolean44 = strSet37.addAll((java.util.Collection<java.lang.String>) strList42);
        boolean boolean45 = strSet3.addAll((java.util.Collection<java.lang.String>) strSet37);
        java.util.stream.Stream<java.lang.String> strStream46 = strSet37.stream();
        java.util.stream.Stream<java.lang.String> strStream47 = strSet37.parallelStream();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertNotNull(strStream32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strStream46);
        org.junit.Assert.assertNotNull(strStream47);
    }

    @Test
    public void test21681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21681");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        boolean boolean9 = node3.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile11 = null;
        node3.setStaticSourceFile(staticSourceFile11);
        boolean boolean13 = node3.isIf();
        node3.setType(46);
        java.lang.Appendable appendable16 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.appendStringTree(appendable16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test21682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21682");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(53, "OR 51");
        boolean boolean3 = node2.isLabel();
        java.util.Set<java.lang.String> strSet4 = node2.getDirectives();
        java.lang.Object obj6 = node2.getProp(44);
        node2.setSourceEncodedPosition(8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str10 = jSDocInfo9.getVersion();
        boolean boolean11 = jSDocInfo9.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo9.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo9.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo9.getThrownTypes();
        java.lang.String str15 = jSDocInfo9.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str17 = jSDocInfo16.getVersion();
        boolean boolean18 = jSDocInfo16.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet19 = jSDocInfo16.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo16.setVisibility(visibility20);
        jSDocInfo9.setVisibility(visibility20);
        boolean boolean23 = jSDocInfo9.isNoSideEffects();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo9.getSuppressions();
        node2.setDirectives(strSet24);
        int int26 = node2.getLength();
        com.google.javascript.rhino.InputId inputId27 = node2.getInputId();
        int int29 = node2.getIntProp(131104);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(inputId27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test21683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21683");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean3 = ternaryValue1.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = ternaryValue4.or(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue1.xor(ternaryValue6);
        java.lang.String str8 = ternaryValue7.toString();
        java.lang.String str9 = ternaryValue7.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue11.or(ternaryValue13);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue11.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue7.xor(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue20.or(ternaryValue22);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue22.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue18.xor(ternaryValue22);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue22.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue28.or(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue28.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = ternaryValue32.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue33.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue36.or(ternaryValue38);
        java.lang.String str40 = ternaryValue39.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue33.or(ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue44.or(ternaryValue46);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue49.or(ternaryValue51);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = ternaryValue51.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue47.and(ternaryValue51);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue42.and(ternaryValue51);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        java.lang.String str58 = ternaryValue57.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = ternaryValue42.and(ternaryValue57);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue33.or(ternaryValue57);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean64 = ternaryValue62.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = ternaryValue65.or(ternaryValue66);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = ternaryValue62.xor(ternaryValue67);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = ternaryValue67.and(ternaryValue69);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = ternaryValue67.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = ternaryValue57.and(ternaryValue71);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = ternaryValue22.xor(ternaryValue71);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = ternaryValue11.or(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "true" + "'", str8, "true");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "true" + "'", str9, "true");
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "false" + "'", str40, "false");
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "false" + "'", str58, "false");
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(ternaryValue65);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNull(ternaryValue70);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue74);
    }

    @Test
    public void test21684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21684");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newNumber((double) 32);
        boolean boolean3 = node2.isFor();
        int int4 = node2.getSourceOffset();
        boolean boolean5 = node2.isNull();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean10 = node9.isThrow();
        java.lang.String str14 = node9.toString(true, false, true);
        java.lang.String str15 = node9.getQualifiedName();
        boolean boolean16 = node9.isIn();
        com.google.javascript.rhino.Node node17 = node9.cloneTree();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node21.setCharno(1);
        java.util.Set<java.lang.String> strSet24 = node21.getDirectives();
        boolean boolean25 = node21.isHook();
        node17.addChildToFront(node21);
        boolean boolean27 = node17.isNE();
        com.google.javascript.rhino.Node node28 = null;
        com.google.javascript.rhino.Node node29 = node17.getChildBefore(node28);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable30 = node17.siblings();
        boolean boolean31 = node17.isCatch();
        boolean boolean32 = node17.isReturn();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean37 = node36.isThrow();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean42 = node41.isThrow();
        java.lang.String str46 = node41.toString(true, false, true);
        java.lang.String str47 = node41.getQualifiedName();
        boolean boolean48 = node41.isIn();
        com.google.javascript.rhino.Node node49 = node41.cloneTree();
        boolean boolean50 = node49.isRegExp();
        boolean boolean51 = node49.isDebugger();
        node36.addChildToBack(node49);
        boolean boolean53 = node49.hasMoreThanOneChild();
        boolean boolean54 = node49.isLocalResultCall();
        node49.setString("OR 51");
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node49.setJSType(jSType57);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node69 = node67.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) -1, node67, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node79 = node77.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) -1, node77, (int) (byte) 1, (int) '#');
        boolean boolean83 = node72.hasChild(node82);
        int int84 = node72.getCharno();
        com.google.javascript.rhino.Node node85 = node62.useSourceInfoIfMissingFrom(node72);
        boolean boolean86 = node85.isArrayLit();
        node49.addChildrenToFront(node85);
        node49.removeProp(39);
        int int90 = node17.getIndexOfChild(node49);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(29, node2, node49, 397361, 16920628);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING  0" + "'", str14, "STRING  0");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(nodeIterable30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "STRING  0" + "'", str46, "STRING  0");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test21685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21685");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        boolean boolean28 = node17.hasChild(node27);
        int int29 = node17.getCharno();
        com.google.javascript.rhino.Node node30 = node7.useSourceInfoIfMissingFrom(node17);
        node30.setLength((int) ' ');
        node3.addChildrenToBack(node30);
        com.google.javascript.rhino.Node node34 = node30.getParent();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node41 = node39.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) -1, node39, (int) (byte) 1, (int) '#');
        boolean boolean45 = node39.isDo();
        boolean boolean46 = node39.isDefaultCase();
        node39.setQuotedString();
        boolean boolean48 = node39.isDec();
        boolean boolean49 = node39.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node39.siblings();
        boolean boolean51 = node39.isEmpty();
        com.google.javascript.rhino.Node node52 = node39.getParent();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node56.setCharno(1);
        com.google.javascript.rhino.Node node59 = node56.cloneNode();
        int int60 = node56.getChildCount();
        boolean boolean61 = node39.isEquivalentToTyped(node56);
        com.google.javascript.rhino.Node node62 = node34.useSourceInfoFromForTree(node39);
        com.google.javascript.rhino.Node node63 = node39.cloneTree();
        boolean boolean64 = node39.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeIterable50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test21686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21686");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("((ERROR 1))", 35, 44);
        node3.setType(15);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        boolean boolean16 = node10.isDo();
        boolean boolean17 = node10.isDefaultCase();
        node10.setQuotedString();
        boolean boolean19 = node10.isDec();
        boolean boolean20 = node10.isLabel();
        boolean boolean21 = node10.isSetterDef();
        com.google.javascript.rhino.Node node22 = node10.getLastSibling();
        boolean boolean23 = node22.isOnlyModifiesThisCall();
        boolean boolean24 = node22.isNew();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node36 = node34.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) -1, node34, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node46 = node44.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node44, (int) (byte) 1, (int) '#');
        boolean boolean50 = node39.hasChild(node49);
        int int51 = node39.getCharno();
        com.google.javascript.rhino.Node node52 = node29.useSourceInfoIfMissingFrom(node39);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node59 = node57.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) -1, node57, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node69 = node67.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) -1, node67, (int) (byte) 1, (int) '#');
        boolean boolean73 = node62.hasChild(node72);
        boolean boolean74 = node72.isVar();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((-1), node39, node72);
        boolean boolean76 = node39.isAssignAdd();
        com.google.javascript.rhino.Node node77 = node39.removeFirstChild();
        node77.setVarArgs(true);
        node77.detachChildren();
        java.util.Set<java.lang.String> strSet81 = node77.getDirectives();
        boolean boolean82 = node77.isAnd();
        int int83 = node77.getSourceOffset();
        com.google.javascript.rhino.Node node84 = node22.copyInformationFrom(node77);
        boolean boolean85 = node84.isBlock();
        com.google.javascript.rhino.Node node86 = node3.useSourceInfoIfMissingFromForTree(node84);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable87 = node3.children();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(strSet81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(nodeIterable87);
    }

    @Test
    public void test21687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21687");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        boolean boolean2 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node3 = typePosition0.getItem();
        boolean boolean4 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node9.setCharno(1);
        boolean boolean12 = node9.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isDo();
        boolean boolean24 = node17.isDefaultCase();
        node17.setQuotedString();
        com.google.javascript.rhino.Node node26 = node9.useSourceInfoFromForTree(node17);
        boolean boolean27 = node9.isInc();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(30, node9);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double33 = node32.getDouble();
        boolean boolean34 = node32.isAdd();
        com.google.javascript.rhino.Node node35 = node32.cloneNode();
        com.google.javascript.rhino.jstype.JSType jSType36 = node35.getJSType();
        java.lang.String str37 = node35.toStringTree();
        node9.addChildToFront(node35);
        typePosition0.setItem(node9);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        boolean boolean55 = node49.isScript();
        node49.setQuotedString();
        com.google.javascript.rhino.Node node57 = node44.srcrefTree(node49);
        boolean boolean58 = node49.isBreak();
        com.google.javascript.rhino.InputId inputId59 = null;
        node49.setInputId(inputId59);
        boolean boolean61 = node49.isIf();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(12, "STRING  0 [synthetic: 1]\n");
        com.google.javascript.rhino.InputId inputId65 = node64.getInputId();
        com.google.javascript.rhino.InputId inputId66 = null;
        node64.setInputId(inputId66);
        boolean boolean68 = node64.isComma();
        com.google.javascript.rhino.Node node69 = node49.useSourceInfoFrom(node64);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(5, node64);
        typePosition0.setItem(node64);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 4095.0d + "'", double33 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(jSType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "NUMBER 4095.0 100\n" + "'", str37, "NUMBER 4095.0 100\n");
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(inputId65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test21688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21688");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        java.lang.String str10 = node4.toStringTree();
        boolean boolean11 = node4.isCatch();
        boolean boolean12 = node4.isCatch();
        boolean boolean13 = node4.isDec();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        boolean boolean38 = node27.hasChild(node37);
        int int39 = node27.getCharno();
        com.google.javascript.rhino.Node node40 = node17.useSourceInfoIfMissingFrom(node27);
        boolean boolean42 = node27.getBooleanProp(16);
        com.google.javascript.rhino.Node node43 = node4.useSourceInfoIfMissingFromForTree(node27);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable44 = node27.children();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "STRING  0\n" + "'", str10, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 35 + "'", int39 == 35);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(nodeIterable44);
    }

    @Test
    public void test21689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21689");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setReturnsTainted();
        boolean boolean7 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setThrows();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test21690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21690");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int12 = node11.getType();
        int int13 = node11.getCharno();
        boolean boolean14 = strSet7.equals((java.lang.Object) node11);
        java.util.stream.Stream<java.lang.String> strStream15 = strSet7.stream();
        int int16 = strSet7.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str18 = jSDocInfo17.getVersion();
        boolean boolean19 = jSDocInfo17.hasEnumParameterType();
        boolean boolean20 = jSDocInfo17.isNoAlias();
        java.lang.String str22 = jSDocInfo17.getDescriptionForParameter("JSDocInfo");
        boolean boolean23 = jSDocInfo17.hasEnumParameterType();
        boolean boolean24 = jSDocInfo17.containsDeclaration();
        java.lang.String str25 = jSDocInfo17.getDescription();
        java.lang.String str26 = jSDocInfo17.getVersion();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str28 = jSDocInfo27.getVersion();
        boolean boolean29 = jSDocInfo27.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo27.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility31 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo27.setVisibility(visibility31);
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str34 = jSDocInfo33.getVersion();
        boolean boolean35 = jSDocInfo33.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet36 = jSDocInfo33.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility37 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo33.setVisibility(visibility37);
        jSDocInfo27.setVisibility(visibility37);
        jSDocInfo17.setVisibility(visibility37);
        java.util.Set<java.lang.String> strSet41 = jSDocInfo17.getModifies();
        boolean boolean42 = strSet7.retainAll((java.util.Collection<java.lang.String>) strSet41);
        java.util.stream.Stream<java.lang.String> strStream43 = strSet41.stream();
        java.lang.Object[] objArray44 = strSet41.toArray();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int46 = typePosition45.getPositionOnEndLine();
        com.google.javascript.rhino.Node node47 = typePosition45.getItem();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node54 = node52.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) -1, node52, (int) (byte) 1, (int) '#');
        boolean boolean58 = node52.isDo();
        boolean boolean59 = node52.isDefaultCase();
        node52.setQuotedString();
        boolean boolean61 = node52.isDec();
        boolean boolean62 = node52.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node52.siblings();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(51);
        java.lang.String str66 = node52.checkTreeEquals(node65);
        boolean boolean67 = node52.isCatch();
        com.google.javascript.rhino.InputId inputId68 = null;
        node52.setInputId(inputId68);
        typePosition45.setItem(node52);
        boolean boolean71 = typePosition45.hasBrackets();
        int int72 = typePosition45.getPositionOnEndLine();
        int int73 = typePosition45.getPositionOnEndLine();
        int int74 = typePosition45.getPositionOnStartLine();
        boolean boolean75 = strSet41.remove((java.lang.Object) typePosition45);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertTrue("'" + visibility31 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility31.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + visibility37 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility37.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str66, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test21691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21691");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescriptionForParameter("STRING  0\n");
        boolean boolean5 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str7 = jSDocInfo6.getVersion();
        boolean boolean8 = jSDocInfo6.hasEnumParameterType();
        boolean boolean9 = jSDocInfo6.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo6.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo6.setVisibility(visibility11);
        jSDocInfo0.setVisibility(visibility11);
        java.lang.String str14 = jSDocInfo0.getDeprecationReason();
        boolean boolean15 = jSDocInfo0.isNoSideEffects();
        boolean boolean16 = jSDocInfo0.hasFileOverview();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test21692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21692");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        int int9 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str10 = jSDocInfo0.getMeaning();
        boolean boolean11 = jSDocInfo0.hasType();
        boolean boolean12 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test21693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21693");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str8 = jSDocInfo0.getFileOverview();
        boolean boolean9 = jSDocInfo0.isInterface();
        boolean boolean10 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getReturnType();
        java.lang.String str12 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test21694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21694");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        java.lang.String str8 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("(OR 51)");
        boolean boolean11 = jSDocInfo0.isJavaDispatch();
        boolean boolean13 = jSDocInfo0.hasDescriptionForParameter("NUMBER 4095.0 0\n");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test21695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21695");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        boolean boolean8 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.Node node9 = jSDocInfo0.getAssociatedNode();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getAuthors();
        jSDocInfo0.addSuppression("(hi!)");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(strCollection10);
    }

    @Test
    public void test21696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21696");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescriptionForParameter("STRING  0\n");
        java.lang.String str5 = jSDocInfo0.getDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean7 = jSDocInfo0.hasThisType();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str9 = jSDocInfo0.getLendsName();
        boolean boolean11 = jSDocInfo0.hasParameterType("STRING  0");
        java.lang.String str12 = jSDocInfo0.getOriginalCommentString();
        jSDocInfo0.setLicense("((NUMBER 35.0))");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test21697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21697");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        node26.setLength((int) ' ');
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node39 = node37.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) -1, node37, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        boolean boolean53 = node42.hasChild(node52);
        int int54 = node42.getCharno();
        com.google.javascript.rhino.Node node55 = node32.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node60 = node32.srcref(node59);
        boolean boolean61 = node26.isEquivalentToTyped(node32);
        boolean boolean62 = node32.isOr();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = node32.getJSDocInfo();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(jSDocInfo63);
    }

    @Test
    public void test21698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21698");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(45);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node8 = node6.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) -1, node6, (int) (byte) 1, (int) '#');
        boolean boolean12 = node6.isDo();
        boolean boolean13 = node6.isDefaultCase();
        node6.setQuotedString();
        boolean boolean15 = node6.isDec();
        boolean boolean16 = node6.hasMoreThanOneChild();
        boolean boolean17 = node6.isTrue();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node6);
        boolean boolean19 = node1.isQuotedString();
        boolean boolean20 = node1.isParamList();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = node1.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: SHEQ 0 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test21699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21699");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isTypeOf();
        boolean boolean23 = node19.isAssignAdd();
        java.lang.String str24 = node19.getQualifiedName();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node41 = node39.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) -1, node39, (int) (byte) 1, (int) '#');
        boolean boolean45 = node34.hasChild(node44);
        boolean boolean46 = node44.isVar();
        boolean boolean47 = node44.isCase();
        boolean boolean48 = node19.hasChild(node44);
        java.lang.String str49 = node44.getQualifiedName();
        boolean boolean50 = node44.isDec();
        boolean boolean51 = node44.isQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test21700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21700");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node7 = node5.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1, node5, (int) (byte) 1, (int) '#');
        boolean boolean11 = node5.isDo();
        boolean boolean12 = node5.isDefaultCase();
        node5.setQuotedString();
        boolean boolean14 = node5.isDec();
        boolean boolean15 = node5.isLabel();
        boolean boolean16 = node5.isSetterDef();
        boolean boolean17 = node5.isRegExp();
        boolean boolean18 = node5.isName();
        boolean boolean19 = node5.isVoid();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node24.isDo();
        com.google.javascript.rhino.Node node31 = node5.useSourceInfoIfMissingFrom(node24);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        int int42 = node41.getType();
        boolean boolean43 = node41.isFor();
        node24.addChildToFront(node41);
        java.lang.String str45 = node24.getQualifiedName();
        com.google.javascript.rhino.Node node46 = node24.cloneTree();
        boolean boolean47 = node46.isLabel();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean52 = node51.isThrow();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean57 = node56.isThrow();
        java.lang.String str61 = node56.toString(true, false, true);
        java.lang.String str62 = node56.getQualifiedName();
        boolean boolean63 = node56.isIn();
        com.google.javascript.rhino.Node node64 = node56.cloneTree();
        boolean boolean65 = node64.isRegExp();
        boolean boolean66 = node64.isDebugger();
        node51.addChildToBack(node64);
        boolean boolean68 = node64.hasMoreThanOneChild();
        boolean boolean69 = node64.isSyntheticBlock();
        java.lang.String str70 = node46.checkTreeEquals(node64);
        boolean boolean71 = node46.isHook();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(40, 13, 52);
        com.google.javascript.rhino.Node[] nodeArray80 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray80);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(0, nodeArray80);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(2, nodeArray80);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(49, nodeArray80, 38, 53);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(192612, node46, node75, node86);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "STRING  0" + "'", str61, "STRING  0");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0\n    ERROR 1\n        STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: STRING  0\n    ERROR 1\n        STRING  0\n\n\nSubtree2: STRING  0\n" + "'", str70, "Node tree inequality:\nTree1:\nSTRING  0\n    ERROR 1\n        STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: STRING  0\n    ERROR 1\n        STRING  0\n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeArray80);
    }

    @Test
    public void test21701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21701");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean27 = node11.isInc();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = null;
        node11.setStaticSourceFile(staticSourceFile28);
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair33 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType31, jSType32);
        com.google.javascript.rhino.jstype.JSType jSType34 = typePair33.typeA;
        node11.putProp(6, (java.lang.Object) jSType34);
        com.google.javascript.rhino.Node node36 = node11.cloneTree();
        boolean boolean37 = node11.isAssignAdd();
        boolean boolean38 = node11.isLabelName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(jSType34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test21702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21702");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescriptionForParameter("STRING  0\n");
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(visibility7);
    }

    @Test
    public void test21703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21703");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double4 = node3.getDouble();
        boolean boolean5 = node3.isAdd();
        com.google.javascript.rhino.Node node6 = node3.cloneNode();
        com.google.javascript.rhino.jstype.JSType jSType7 = node6.getJSType();
        java.lang.String str8 = node6.toStringTree();
        com.google.javascript.rhino.Node node9 = node6.getLastSibling();
        boolean boolean10 = node9.isNE();
        boolean boolean11 = node9.isExprResult();
        node9.setOptionalArg(true);
        boolean boolean14 = node9.hasChildren();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(42, "STRING  0 [source_file: Named type with empty name component]");
        com.google.javascript.rhino.jstype.JSType jSType18 = node17.getJSType();
        node9.addChildToFront(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean25 = node24.isThrow();
        java.lang.String str29 = node24.toString(true, false, true);
        java.lang.String str30 = node24.getQualifiedName();
        boolean boolean31 = node24.isIn();
        com.google.javascript.rhino.Node node32 = node24.cloneTree();
        boolean boolean33 = node32.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node(40, node32);
        boolean boolean35 = node32.isAnd();
        com.google.javascript.rhino.Node node36 = node32.detachFromParent();
        node9.addChildToBack(node36);
        boolean boolean38 = node9.isVarArgs();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4095.0d + "'", double4 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "NUMBER 4095.0 100\n" + "'", str8, "NUMBER 4095.0 100\n");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(jSType18);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "STRING  0" + "'", str29, "STRING  0");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test21704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21704");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isScript();
        com.google.javascript.rhino.Node node24 = node17.detachFromParent();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node28.setCharno(1);
        java.util.Set<java.lang.String> strSet31 = node28.getDirectives();
        boolean boolean32 = node28.isHook();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node64 = node36.srcref(node63);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node12, node24, node28, node36);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node72 = node70.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) -1, node70, (int) (byte) 1, (int) '#');
        int int76 = node75.getType();
        boolean boolean77 = node28.isEquivalentTo(node75);
        boolean boolean78 = node75.wasEmptyNode();
        boolean boolean79 = node75.isBlock();
        boolean boolean80 = node75.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test21705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21705");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        boolean boolean27 = node3.isSwitch();
        java.lang.String str28 = node3.toString();
        boolean boolean29 = node3.wasEmptyNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder30 = node3.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder30.append("STRING  0 [synthetic: 1]\n");
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR 1" + "'", str28, "OR 1");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test21706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21706");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
        boolean boolean7 = sideEffectFlags1.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test21707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21707");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(11, "(Node tree inequality:\nTree1:\nSTRING  0\n\n\nTree2:\nNUMBER 12.0 49\n\n\nSubtree1: STRING  0\n\n\nSubtree2: NUMBER 12.0 49\n)", 4, 4095);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test21708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21708");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node7 = node5.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1, node5, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node10.hasChild(node20);
        boolean boolean22 = node10.isReturn();
        java.lang.Object obj24 = node10.getProp(0);
        boolean boolean25 = node10.isComma();
        node10.addSuppression("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n)");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node31.setCharno(1);
        boolean boolean34 = node31.isRegExp();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node41 = node39.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) -1, node39, (int) (byte) 1, (int) '#');
        boolean boolean45 = node39.isDo();
        boolean boolean46 = node39.isDefaultCase();
        node39.setQuotedString();
        com.google.javascript.rhino.Node node48 = node31.useSourceInfoFromForTree(node39);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder49 = node48.new FileLevelJsDocBuilder();
        boolean boolean50 = node48.isFalse();
        boolean boolean51 = node48.isNull();
        com.google.javascript.rhino.InputId inputId52 = null;
        node48.setInputId(inputId52);
        boolean boolean54 = node48.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((-1), 36, 0);
        boolean boolean59 = node58.isOptionalArg();
        boolean boolean60 = node58.isFromExterns();
        boolean boolean61 = node58.isCase();
        boolean boolean62 = node58.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(50, node10, node48, node58);
        boolean boolean64 = node58.isDelProp();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test21709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21709");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.hasThisType();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        boolean boolean11 = jSDocInfo0.shouldPreserveTry();
        boolean boolean12 = jSDocInfo0.isExterns();
        boolean boolean14 = jSDocInfo0.hasParameter("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n)");
        boolean boolean15 = jSDocInfo0.hasReturnType();
        boolean boolean16 = jSDocInfo0.isInterface();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test21710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21710");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(54, "((NUMBER -1.0 0\n))");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test21711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21711");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(192609, "Node tree inequality:\nTree1:\nNUMBER 4095.0 100 [opt_arg: 1]\n    NUMBER -1.0\n\n\nTree2:\nSTRING  0 [quoted: 1]\n    STRING  0\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100 [opt_arg: 1]\n    NUMBER -1.0\n\n\nSubtree2: STRING  0 [quoted: 1]\n    STRING  0\n        STRING  0\n", 204810, 131104);
        boolean boolean5 = node4.isScript();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test21712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21712");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        java.lang.String[] strArray11 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        boolean boolean19 = strSet12.addAll((java.util.Collection<java.lang.String>) strList17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str21 = jSDocInfo20.getVersion();
        java.lang.String str22 = jSDocInfo20.getFileOverview();
        boolean boolean23 = jSDocInfo20.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo20.getParameterNames();
        boolean boolean25 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet24);
        java.lang.String[] strArray28 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        boolean boolean36 = strSet29.addAll((java.util.Collection<java.lang.String>) strList34);
        boolean boolean37 = strSet12.containsAll((java.util.Collection<java.lang.String>) strSet29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str39 = jSDocInfo38.getVersion();
        boolean boolean40 = jSDocInfo38.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet41 = jSDocInfo38.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str43 = jSDocInfo42.getVersion();
        java.lang.String str44 = jSDocInfo42.getFileOverview();
        boolean boolean45 = jSDocInfo42.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo42.getParameterNames();
        java.util.Iterator<java.lang.String> strItor47 = strSet46.iterator();
        boolean boolean48 = strSet46.isEmpty();
        boolean boolean49 = strSet41.containsAll((java.util.Collection<java.lang.String>) strSet46);
        boolean boolean50 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet41);
        boolean boolean51 = strSet8.containsAll((java.util.Collection<java.lang.String>) strSet12);
        java.lang.Object[] objArray52 = strSet12.toArray();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition53 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition53.setPositionInformation(8, 36, 31, (int) (short) 10);
        java.lang.String str59 = stringPosition53.getItem();
        stringPosition53.setItem("Not declared as a type name");
        java.lang.String str62 = stringPosition53.getItem();
        int int63 = stringPosition53.getPositionOnStartLine();
        boolean boolean64 = strSet12.equals((java.lang.Object) stringPosition53);
        stringPosition53.setPositionInformation(23, 4, 37, 48);
        java.lang.String str70 = stringPosition53.getItem();
        int int71 = stringPosition53.getStartLine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Not declared as a type name" + "'", str62, "Not declared as a type name");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 36 + "'", int63 == 36);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Not declared as a type name" + "'", str70, "Not declared as a type name");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 23 + "'", int71 == 23);
    }

    @Test
    public void test21713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21713");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        boolean boolean19 = node15.isHook();
        node11.addChildToFront(node15);
        boolean boolean21 = node11.isNE();
        boolean boolean22 = node11.isArrayLit();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node29 = node27.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) -1, node27, (int) (byte) 1, (int) '#');
        boolean boolean33 = node27.isDo();
        boolean boolean34 = node27.isDefaultCase();
        node27.setQuotedString();
        boolean boolean36 = node27.isDec();
        boolean boolean37 = node27.isTypeOf();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean42 = node41.isThrow();
        java.lang.String str46 = node41.toString(true, false, true);
        java.lang.String str47 = node41.getQualifiedName();
        boolean boolean48 = node41.isIn();
        com.google.javascript.rhino.Node node49 = node41.cloneTree();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node53.setCharno(1);
        java.util.Set<java.lang.String> strSet56 = node53.getDirectives();
        boolean boolean57 = node53.isHook();
        node49.addChildToFront(node53);
        com.google.javascript.rhino.Node node59 = node53.getLastSibling();
        java.lang.Object obj61 = node59.getProp(2);
        com.google.javascript.rhino.Node node62 = node27.useSourceInfoFrom(node59);
        node62.setVarArgs(true);
        boolean boolean65 = node62.isDec();
        com.google.javascript.rhino.Node node66 = node11.copyInformationFromForTree(node62);
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        node62.setJSType(jSType67);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable69 = node62.getAncestors();
        boolean boolean70 = node62.isComma();
        int int71 = node62.getLength();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "STRING  0" + "'", str46, "STRING  0");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(ancestorIterable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test21714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21714");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        boolean boolean19 = node15.isHook();
        node11.addChildToFront(node15);
        boolean boolean21 = node11.isNE();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = node11.getJSDocInfo();
        int int23 = node11.getSourcePosition();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSDocInfo22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
    }

    @Test
    public void test21715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21715");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nSTRING Not declared as a constructor 0\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: STRING Not declared as a constructor 0\n");
        boolean boolean2 = node1.isReturn();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        java.lang.String str14 = node8.getQualifiedName();
        boolean boolean15 = node8.isIn();
        com.google.javascript.rhino.Node node16 = node8.cloneTree();
        boolean boolean17 = node16.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(40, node16);
        com.google.javascript.rhino.Node node19 = node18.removeFirstChild();
        node1.putProp(4095, (java.lang.Object) node19);
        // The following exception was thrown during execution in test generation
        try {
            node19.setSideEffectFlags(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node19);
    }

    @Test
    public void test21716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21716");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        java.lang.String str6 = stringPosition0.getItem();
        int int7 = stringPosition0.getPositionOnEndLine();
        int int8 = stringPosition0.getPositionOnEndLine();
        int int9 = stringPosition0.getPositionOnEndLine();
        int int10 = stringPosition0.getEndLine();
        int int11 = stringPosition0.getPositionOnEndLine();
        int int12 = stringPosition0.getPositionOnEndLine();
        int int13 = stringPosition0.getEndLine();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
    }

    @Test
    public void test21717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21717");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        boolean boolean3 = typePosition0.hasBrackets();
        typePosition0.setPositionInformation(0, 5, 42, 4131);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 54);
        typePosition0.setItem(node10);
        int int12 = typePosition0.getPositionOnEndLine();
        boolean boolean13 = typePosition0.hasBrackets();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4131 + "'", int12 == 4131);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test21718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21718");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo0.getVisibility();
        boolean boolean10 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str12 = jSDocInfo0.getDescriptionForParameter("NUMBER 4095.0 1\n");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility13 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(visibility13);
    }

    @Test
    public void test21719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21719");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("INSTANCEOF 0\n");
        com.google.javascript.rhino.Node node2 = node1.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node3 = node2.getFirstChild();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(node2);
    }

    @Test
    public void test21720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21720");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition2 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition4 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition5 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition8 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker0.getDescription();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(nodeSourcePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(nodeSourcePosition4);
        org.junit.Assert.assertNull(nodeSourcePosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(typePosition7);
        org.junit.Assert.assertNull(nodeSourcePosition8);
        org.junit.Assert.assertNull(typePosition9);
        org.junit.Assert.assertNull(stringPosition10);
    }

    @Test
    public void test21721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21721");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node3 = null;
        namePosition0.setItem(node3);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node8.setCharno(1);
        java.util.Set<java.lang.String> strSet11 = node8.getDirectives();
        namePosition0.setItem(node8);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node33 = node31.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) -1, node31, (int) (byte) 1, (int) '#');
        boolean boolean37 = node26.hasChild(node36);
        int int38 = node26.getCharno();
        com.google.javascript.rhino.Node node39 = node16.useSourceInfoIfMissingFrom(node26);
        boolean boolean40 = node26.isAssignAdd();
        namePosition0.setItem(node26);
        int int42 = namePosition0.getPositionOnStartLine();
        int int43 = namePosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test21722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21722");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        boolean boolean27 = node3.isSwitch();
        boolean boolean28 = node3.isCall();
        boolean boolean29 = node3.isTypeOf();
        node3.putIntProp(2, 10);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test21723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21723");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        node3.setStaticSourceFile(staticSourceFile6);
        boolean boolean8 = node3.isBreak();
        boolean boolean9 = node3.isOptionalArg();
        boolean boolean10 = node3.isOnlyModifiesThisCall();
        java.lang.Object obj12 = node3.getProp((int) (short) 10);
        boolean boolean13 = node3.isGetElem();
        com.google.javascript.rhino.Node[] nodeArray18 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray18);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(41, nodeArray18, (int) (byte) 100, 4131);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(43, nodeArray18, (int) (short) -1, 4);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str28 = jSDocInfo27.getVersion();
        boolean boolean29 = jSDocInfo27.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet30 = jSDocInfo27.getParameterNames();
        jSDocInfo27.addSuppression("");
        java.lang.String str33 = jSDocInfo27.getBlockDescription();
        boolean boolean34 = jSDocInfo27.shouldPreserveTry();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection35 = jSDocInfo27.getMarkers();
        boolean boolean36 = jSDocInfo27.hasThisType();
        boolean boolean37 = jSDocInfo27.hasFileOverview();
        java.util.Set<java.lang.String> strSet38 = jSDocInfo27.getModifies();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        boolean boolean53 = node47.isScript();
        com.google.javascript.rhino.Node node54 = node47.detachFromParent();
        node54.setOptionalArg(false);
        boolean boolean58 = node54.getBooleanProp(31);
        com.google.javascript.rhino.Node node59 = node42.copyInformationFrom(node54);
        boolean boolean60 = node59.isLabel();
        boolean boolean61 = node59.isNot();
        com.google.javascript.rhino.Node node62 = node59.cloneTree();
        java.lang.String str66 = node59.toString(true, false, false);
        com.google.javascript.rhino.InputId inputId67 = null;
        node59.setInputId(inputId67);
        boolean boolean69 = strSet38.contains((java.lang.Object) node59);
        boolean boolean70 = node26.hasChild(node59);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable71 = node26.getAncestors();
        node3.addChildrenToBack(node26);
        boolean boolean73 = node3.isDebugger();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(nodeArray18);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(markerCollection35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "STRING Not declared as a constructor 0" + "'", str66, "STRING Not declared as a constructor 0");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(ancestorIterable71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test21724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21724");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        boolean boolean12 = node11.isCall();
        node11.setSourceEncodedPositionForTree(30);
        boolean boolean15 = node11.isVarArgs();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node19.setCharno(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = null;
        node19.setStaticSourceFile(staticSourceFile22);
        boolean boolean24 = node19.isBreak();
        boolean boolean25 = node19.isIf();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean30 = node29.isThrow();
        boolean boolean31 = node29.isSwitch();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        boolean boolean42 = node36.isDo();
        boolean boolean43 = node36.isDefaultCase();
        node36.setQuotedString();
        boolean boolean45 = node36.isDec();
        boolean boolean46 = node36.isLabel();
        boolean boolean47 = node36.isSetterDef();
        boolean boolean48 = node36.isRegExp();
        boolean boolean49 = node36.isName();
        boolean boolean50 = node36.isVoid();
        com.google.javascript.rhino.Node node51 = node36.cloneNode();
        com.google.javascript.rhino.Node node52 = node29.useSourceInfoIfMissingFrom(node51);
        boolean boolean53 = node52.isRegExp();
        boolean boolean54 = node52.isVar();
        boolean boolean55 = node52.isIf();
        node19.addChildToBack(node52);
        boolean boolean57 = node19.isSetterDef();
        com.google.javascript.rhino.Node node58 = node11.clonePropsFrom(node19);
        boolean boolean59 = node19.isCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test21725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21725");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str3 = jSDocInfo0.getOriginalCommentString();
        boolean boolean4 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean6 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getParameterType("(STRING  0\n)");
        java.lang.String str9 = jSDocInfo0.getLendsName();
        boolean boolean11 = jSDocInfo0.hasParameter("Node tree inequality:\nTree1:\nOR 1\n\n\nTree2:\nSTRING  0 [quoted: 1]\n\n\nSubtree1: OR 1\n\n\nSubtree2: STRING  0 [quoted: 1]\n");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21726");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        stringPosition0.setItem("OR 1\n");
        int int4 = stringPosition0.getPositionOnEndLine();
        java.lang.String str5 = stringPosition0.getItem();
        java.lang.String str6 = stringPosition0.getItem();
        int int7 = stringPosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OR 1\n" + "'", str5, "OR 1\n");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR 1\n" + "'", str6, "OR 1\n");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test21727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21727");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node20.new FileLevelJsDocBuilder();
        boolean boolean22 = node20.isFalse();
        boolean boolean23 = node20.hasChildren();
        node20.setSourceEncodedPosition(37);
        boolean boolean26 = node20.isNumber();
        node20.addSuppression("NUMBER 40.0 51 [is_dispatcher: false] [directives: []]\n");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node32.setCharno(1);
        boolean boolean35 = node32.isRegExp();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node42 = node40.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, (int) (byte) 1, (int) '#');
        boolean boolean46 = node40.isDo();
        boolean boolean47 = node40.isDefaultCase();
        node40.setQuotedString();
        com.google.javascript.rhino.Node node49 = node32.useSourceInfoFromForTree(node40);
        node40.putIntProp((int) (byte) 100, (int) (byte) 0);
        node40.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean56 = node40.isInc();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile57 = null;
        node40.setStaticSourceFile(staticSourceFile57);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable59 = node40.getAncestors();
        boolean boolean60 = node40.isDefaultCase();
        boolean boolean61 = node40.isVar();
        // The following exception was thrown during execution in test generation
        try {
            node20.addChildToBack(node40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(ancestorIterable59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test21728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21728");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getStartLine();
        int int4 = stringPosition0.getEndLine();
        java.lang.String str5 = stringPosition0.getItem();
        stringPosition0.setItem("ERROR");
        java.lang.String str8 = stringPosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ERROR" + "'", str8, "ERROR");
    }

    @Test
    public void test21729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21729");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 10.0f, 0, (int) (byte) -1);
        boolean boolean4 = node3.isCall();
        boolean boolean5 = node3.isNumber();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        boolean boolean16 = node10.isDo();
        boolean boolean17 = node10.isDefaultCase();
        boolean boolean18 = node10.isFor();
        node10.setOptionalArg(false);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node24.setCharno(1);
        boolean boolean27 = node24.isRegExp();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        boolean boolean38 = node32.isDo();
        boolean boolean39 = node32.isDefaultCase();
        node32.setQuotedString();
        com.google.javascript.rhino.Node node41 = node24.useSourceInfoFromForTree(node32);
        node32.putIntProp((int) (byte) 100, (int) (byte) 0);
        node32.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean48 = node32.isInc();
        node32.setQuotedString();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        int int54 = node53.getSourcePosition();
        int int55 = node53.getType();
        boolean boolean56 = node53.isLabel();
        node53.setSourceFileForTesting("STRING  0 [quoted: 1]\n");
        boolean boolean59 = node32.isEquivalentToTyped(node53);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 39);
        com.google.javascript.rhino.Node node63 = node61.getAncestor(44);
        boolean boolean64 = node61.isAssignAdd();
        boolean boolean65 = node53.hasChild(node61);
        com.google.javascript.rhino.Node node66 = node10.copyInformationFromForTree(node53);
        com.google.javascript.rhino.Node node67 = node53.cloneTree();
        com.google.javascript.rhino.Node node68 = node3.useSourceInfoIfMissingFrom(node67);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 40 + "'", int55 == 40);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
    }

    @Test
    public void test21730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21730");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(52, 0, 43);
        boolean boolean4 = node3.isString();
        java.lang.String str5 = node3.toStringTree();
        boolean boolean6 = node3.isSwitch();
        boolean boolean7 = node3.isSetterDef();
        boolean boolean8 = node3.isWith();
        node3.setLineno(9);
        boolean boolean11 = node3.isFunction();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "INSTANCEOF 0\n" + "'", str5, "INSTANCEOF 0\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21731");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(97);
        com.google.javascript.rhino.Node node2 = node1.cloneTree();
        java.lang.Object obj4 = node1.getProp(192609);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test21732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21732");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        node26.setLength((int) ' ');
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node39 = node37.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) -1, node37, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        boolean boolean53 = node42.hasChild(node52);
        int int54 = node42.getCharno();
        com.google.javascript.rhino.Node node55 = node32.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node60 = node32.srcref(node59);
        boolean boolean61 = node26.isEquivalentToTyped(node32);
        com.google.javascript.rhino.Node node62 = node32.getNext();
        boolean boolean63 = node32.isQuotedString();
        node32.setType(151562);
        node32.setSourceEncodedPositionForTree(0);
        boolean boolean68 = node32.isScript();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test21733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21733");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node16.setCharno(1);
        java.util.Set<java.lang.String> strSet19 = node16.getDirectives();
        boolean boolean20 = node16.isHook();
        node12.addChildToFront(node16);
        com.google.javascript.rhino.Node node22 = node16.getLastSibling();
        java.lang.Object obj24 = node22.getProp(2);
        boolean boolean25 = node22.isDec();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node36 = node34.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) -1, node34, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node46 = node44.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node44, (int) (byte) 1, (int) '#');
        boolean boolean50 = node39.hasChild(node49);
        int int51 = node39.getCharno();
        com.google.javascript.rhino.Node node52 = node29.useSourceInfoIfMissingFrom(node39);
        boolean boolean53 = node52.isArrayLit();
        node52.setLineno(4131);
        node52.putIntProp(8, (int) (short) -1);
        com.google.javascript.rhino.Node node59 = node52.getLastSibling();
        com.google.javascript.rhino.Node node60 = node52.cloneNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder61 = node60.new FileLevelJsDocBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 1, node22, node60, 0, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test21734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21734");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = booleanLiteralSet1.intersection(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = booleanLiteralSet0.intersection(booleanLiteralSet1);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = booleanLiteralSet6.intersection(booleanLiteralSet7);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = booleanLiteralSet5.intersection(booleanLiteralSet6);
        boolean boolean11 = booleanLiteralSet9.contains(false);
        boolean boolean13 = booleanLiteralSet9.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet1.union(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = booleanLiteralSet16.intersection(booleanLiteralSet17);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = booleanLiteralSet15.intersection(booleanLiteralSet16);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = booleanLiteralSet19.union(booleanLiteralSet20);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = booleanLiteralSet9.union(booleanLiteralSet20);
        boolean boolean24 = booleanLiteralSet22.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = booleanLiteralSet26.intersection(booleanLiteralSet27);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = booleanLiteralSet25.intersection(booleanLiteralSet26);
        boolean boolean31 = booleanLiteralSet29.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = booleanLiteralSet32.intersection(booleanLiteralSet33);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = booleanLiteralSet29.intersection(booleanLiteralSet33);
        boolean boolean37 = booleanLiteralSet35.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet40 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = booleanLiteralSet39.intersection(booleanLiteralSet40);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = booleanLiteralSet38.intersection(booleanLiteralSet39);
        boolean boolean44 = booleanLiteralSet42.contains(false);
        boolean boolean46 = booleanLiteralSet42.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = booleanLiteralSet35.union(booleanLiteralSet42);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = booleanLiteralSet22.intersection(booleanLiteralSet42);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet51 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet52 = booleanLiteralSet50.intersection(booleanLiteralSet51);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet53 = booleanLiteralSet49.intersection(booleanLiteralSet50);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet54 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet56 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = booleanLiteralSet55.intersection(booleanLiteralSet56);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet58 = booleanLiteralSet54.intersection(booleanLiteralSet55);
        boolean boolean60 = booleanLiteralSet58.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet62 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet63 = booleanLiteralSet61.intersection(booleanLiteralSet62);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet64 = booleanLiteralSet58.intersection(booleanLiteralSet62);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet66 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = booleanLiteralSet64.intersection(booleanLiteralSet66);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = booleanLiteralSet50.union(booleanLiteralSet64);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet69 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet70 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet71 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet72 = booleanLiteralSet70.intersection(booleanLiteralSet71);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet73 = booleanLiteralSet69.intersection(booleanLiteralSet70);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet74 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet75 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet77 = booleanLiteralSet75.intersection(booleanLiteralSet76);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet78 = booleanLiteralSet74.intersection(booleanLiteralSet75);
        boolean boolean80 = booleanLiteralSet78.contains(false);
        boolean boolean82 = booleanLiteralSet78.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet83 = booleanLiteralSet70.union(booleanLiteralSet78);
        boolean boolean85 = booleanLiteralSet70.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet86 = booleanLiteralSet68.intersection(booleanLiteralSet70);
        boolean boolean88 = booleanLiteralSet68.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet89 = booleanLiteralSet48.union(booleanLiteralSet68);
        boolean boolean91 = booleanLiteralSet89.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet40 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet40.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet51 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet51.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet52 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet52.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet53 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet53.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet54 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet54.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet56 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet56.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet58 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet58.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet62 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet62.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet63 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet63.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet64 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet64.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet66 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet66.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet69 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet69.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet70 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet70.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet71 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet71.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet72 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet72.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet73 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet73.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet74 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet74.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet75 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet75.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet77 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet77.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet78 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet78.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet83 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet83.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet86 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet86.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet89 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet89.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test21735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21735");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(8, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node9 = node7.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1, node7, (int) (byte) 1, (int) '#');
        boolean boolean13 = node7.isDo();
        boolean boolean14 = node7.isDefaultCase();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node28.hasChild(node38);
        int int40 = node28.getCharno();
        com.google.javascript.rhino.Node node41 = node18.useSourceInfoIfMissingFrom(node28);
        int int42 = node18.getSourcePosition();
        java.lang.String str43 = node18.toString();
        int int44 = node7.getIndexOfChild(node18);
        int int45 = node2.getIndexOfChild(node18);
        node18.putIntProp(51, 48);
        com.google.javascript.rhino.Node node49 = node18.getLastChild();
        boolean boolean50 = node18.isReturn();
        node18.removeProp(41);
        boolean boolean53 = node18.isBreak();
        boolean boolean54 = node18.isLabel();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4131 + "'", int42 == 4131);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR 1" + "'", str43, "OR 1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test21736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21736");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        boolean boolean34 = node28.isScript();
        com.google.javascript.rhino.InputId inputId35 = node28.getInputId();
        com.google.javascript.rhino.Node node36 = node11.useSourceInfoFrom(node28);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean41 = node40.isThrow();
        java.lang.String str45 = node40.toString(true, false, true);
        node40.setIsSyntheticBlock(true);
        boolean boolean48 = node40.isTry();
        boolean boolean49 = node11.hasChild(node40);
        boolean boolean50 = node40.isAdd();
        node40.setString("STRING  [quoted: 1]");
        boolean boolean53 = node40.isExprResult();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(inputId35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "STRING  0" + "'", str45, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test21737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21737");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isTypeOf();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str24 = jSDocInfo23.getVersion();
        boolean boolean25 = jSDocInfo23.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo23.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList27 = jSDocInfo23.getImplementedInterfaces();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean32 = node31.isThrow();
        java.lang.String str36 = node31.toString(true, false, true);
        jSDocInfo23.setAssociatedNode(node31);
        boolean boolean38 = jSDocInfo23.hasTypedefType();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node59 = node57.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) -1, node57, (int) (byte) 1, (int) '#');
        boolean boolean63 = node52.hasChild(node62);
        int int64 = node52.getCharno();
        com.google.javascript.rhino.Node node65 = node42.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node70 = node42.srcref(node69);
        jSDocInfo23.setAssociatedNode(node42);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = jSDocInfo23.getReturnType();
        int int73 = jSDocInfo23.getImplementedInterfaceCount();
        boolean boolean74 = jSDocInfo23.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo23.getThisType();
        node19.setJSDocInfo(jSDocInfo23);
        boolean boolean77 = jSDocInfo23.isConstant();
        java.util.Set<java.lang.String> strSet78 = jSDocInfo23.getSuppressions();
        boolean boolean79 = jSDocInfo23.isJavaDispatch();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection80 = jSDocInfo23.getMarkers();
        boolean boolean81 = jSDocInfo23.hasBaseType();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(jSTypeExpressionList27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  0" + "'", str36, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(jSTypeExpression72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(markerCollection80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test21738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21738");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo0.getVisibility();
        boolean boolean10 = jSDocInfo0.hasEnumParameterType();
        boolean boolean11 = jSDocInfo0.isExport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(visibility9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21739");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
        int int6 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
    }

    @Test
    public void test21740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21740");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("Not declared as a constructor");
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getEnumParameterType();
        com.google.javascript.rhino.Node node11 = jSDocInfo0.getAssociatedNode();
        boolean boolean12 = jSDocInfo0.isNoTypeCheck();
        boolean boolean13 = jSDocInfo0.isOverride();
        boolean boolean14 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test21741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21741");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        node8.setQuotedString();
        com.google.javascript.rhino.Node node16 = node3.srcrefTree(node8);
        boolean boolean17 = node16.isIf();
        com.google.javascript.rhino.Node node18 = node16.getParent();
        boolean boolean19 = node16.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node42 = node40.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, (int) (byte) 1, (int) '#');
        boolean boolean46 = node35.hasChild(node45);
        int int47 = node35.getCharno();
        com.google.javascript.rhino.Node node48 = node25.useSourceInfoIfMissingFrom(node35);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node65 = node63.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) -1, node63, (int) (byte) 1, (int) '#');
        boolean boolean69 = node58.hasChild(node68);
        boolean boolean70 = node68.isVar();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((-1), node35, node68);
        boolean boolean72 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node73 = node35.removeFirstChild();
        node73.setVarArgs(true);
        node73.detachChildren();
        java.util.Set<java.lang.String> strSet77 = node73.getDirectives();
        boolean boolean78 = node73.isAnd();
        boolean boolean79 = node73.isContinue();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (byte) 0, node73);
        boolean boolean81 = node73.isReturn();
        boolean boolean82 = node16.isEquivalentTo(node73);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(51);
        java.util.Set<java.lang.String> strSet85 = node84.getDirectives();
        boolean boolean86 = node73.isEquivalentToTyped(node84);
        node84.setType(45);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(strSet77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(strSet85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test21742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21742");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        com.google.javascript.rhino.Node node16 = node4.getLastSibling();
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isExprResult();
        boolean boolean19 = node16.isTrue();
        boolean boolean20 = node16.isGetElem();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean25 = node24.isThrow();
        java.lang.String str29 = node24.toString(true, false, true);
        boolean boolean30 = node24.isWith();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node41 = node39.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) -1, node39, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        boolean boolean55 = node44.hasChild(node54);
        int int56 = node44.getCharno();
        com.google.javascript.rhino.Node node57 = node34.useSourceInfoIfMissingFrom(node44);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node62 = node34.srcref(node61);
        boolean boolean63 = node61.isNoSideEffectsCall();
        boolean boolean64 = node61.isGetterDef();
        com.google.javascript.rhino.Node node65 = node24.srcrefTree(node61);
        node16.addChildrenToBack(node65);
        boolean boolean67 = node16.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "STRING  0" + "'", str29, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test21743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21743");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("(REGEXP \n)");
        boolean boolean2 = node1.isThrow();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test21744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21744");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        boolean boolean24 = node11.isVarArgs();
        node11.setLineno(37);
        boolean boolean27 = node11.isScript();
        com.google.javascript.rhino.Node node28 = node11.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node28);
    }

    @Test
    public void test21745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21745");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        int int27 = node3.getSourcePosition();
        java.lang.String str28 = node3.toString();
        int int30 = node3.getIntProp((int) (short) 0);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node41 = node39.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) -1, node39, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        boolean boolean55 = node44.hasChild(node54);
        int int56 = node44.getCharno();
        com.google.javascript.rhino.Node node57 = node34.useSourceInfoIfMissingFrom(node44);
        boolean boolean58 = node44.isAssignAdd();
        com.google.javascript.rhino.Node node59 = node3.srcref(node44);
        boolean boolean60 = node59.isTypeOf();
        java.lang.String str61 = node59.getQualifiedName();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4131 + "'", int27 == 4131);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR 1" + "'", str28, "OR 1");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
    }

    @Test
    public void test21746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21746");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node24 = node9.clonePropsFrom(node23);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int29 = node28.getType();
        com.google.javascript.rhino.Node node30 = node28.cloneNode();
        com.google.javascript.rhino.Node node31 = node24.useSourceInfoFrom(node28);
        boolean boolean32 = node28.isNoSideEffectsCall();
        boolean boolean33 = node28.isCase();
        com.google.javascript.rhino.Node node34 = node28.cloneTree();
        int int35 = node28.getLength();
        com.google.javascript.rhino.Node node36 = node28.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean37 = node36.isNE();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 40 + "'", int29 == 40);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNull(node36);
    }

    @Test
    public void test21747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21747");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node19.hasChild(node29);
        int int31 = node19.getCharno();
        com.google.javascript.rhino.Node node32 = node9.useSourceInfoIfMissingFrom(node19);
        node32.setLength((int) ' ');
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        boolean boolean59 = node48.hasChild(node58);
        int int60 = node48.getCharno();
        com.google.javascript.rhino.Node node61 = node38.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node66 = node38.srcref(node65);
        boolean boolean67 = node32.isEquivalentToTyped(node38);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node74 = node72.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) -1, node72, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node84 = node82.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) -1, node82, (int) (byte) 1, (int) '#');
        boolean boolean88 = node77.hasChild(node87);
        boolean boolean89 = node87.isVar();
        boolean boolean90 = node87.isCase();
        boolean boolean91 = node38.hasChild(node87);
        jSDocInfo0.setAssociatedNode(node38);
        java.lang.String str93 = jSDocInfo0.getReturnDescription();
        boolean boolean94 = jSDocInfo0.isExterns();
        boolean boolean95 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility96 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(visibility96);
    }

    @Test
    public void test21748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21748");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(100);
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setReturnsTainted();
    }

    @Test
    public void test21749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21749");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        int int10 = node9.getType();
        boolean boolean11 = node9.isDelProp();
        boolean boolean12 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node23 = node9.copyInformationFromForTree(node17);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable24 = node17.getAncestors();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(ancestorIterable24);
    }

    @Test
    public void test21750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21750");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        boolean boolean28 = node17.hasChild(node27);
        int int29 = node17.getCharno();
        com.google.javascript.rhino.Node node30 = node7.useSourceInfoIfMissingFrom(node17);
        node30.setLength((int) ' ');
        node3.addChildrenToBack(node30);
        boolean boolean34 = node30.isNull();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder35 = node30.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean40 = node39.isThrow();
        java.lang.String str44 = node39.toString(true, false, true);
        java.lang.String str45 = node39.getQualifiedName();
        boolean boolean46 = node39.isIn();
        com.google.javascript.rhino.Node node47 = node39.cloneTree();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node51.setCharno(1);
        java.util.Set<java.lang.String> strSet54 = node51.getDirectives();
        boolean boolean55 = node51.isHook();
        node47.addChildToFront(node51);
        boolean boolean57 = node51.isDebugger();
        com.google.javascript.rhino.Node node58 = node30.srcref(node51);
        node51.setWasEmptyNode(false);
        boolean boolean61 = node51.isContinue();
        java.lang.String str62 = node51.getSourceFileName();
        boolean boolean63 = node51.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "STRING  0" + "'", str44, "STRING  0");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test21751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21751");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        boolean boolean16 = node10.isScript();
        com.google.javascript.rhino.Node node17 = node10.detachFromParent();
        node17.setOptionalArg(false);
        boolean boolean21 = node17.getBooleanProp(31);
        com.google.javascript.rhino.Node node22 = node5.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean27 = node26.isThrow();
        boolean boolean28 = node26.isSwitch();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node33.isDo();
        boolean boolean40 = node33.isDefaultCase();
        node33.setQuotedString();
        boolean boolean42 = node33.isDec();
        boolean boolean43 = node33.isLabel();
        boolean boolean44 = node33.isSetterDef();
        boolean boolean45 = node33.isRegExp();
        boolean boolean46 = node33.isName();
        boolean boolean47 = node33.isVoid();
        com.google.javascript.rhino.Node node48 = node33.cloneNode();
        com.google.javascript.rhino.Node node49 = node26.useSourceInfoIfMissingFrom(node48);
        boolean boolean50 = node49.isRegExp();
        com.google.javascript.rhino.Node node51 = node22.clonePropsFrom(node49);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean56 = node55.isFromExterns();
        boolean boolean57 = node55.isAssignAdd();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(97, node51, node55);
        boolean boolean59 = node51.isBreak();
        com.google.javascript.rhino.Node node60 = node51.detachFromParent();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 100);
        boolean boolean63 = node62.isAdd();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(54, node60, node62, 1, 16);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test21752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21752");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        boolean boolean51 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node52 = node14.removeFirstChild();
        node52.setVarArgs(true);
        node52.detachChildren();
        java.util.Set<java.lang.String> strSet56 = node52.getDirectives();
        boolean boolean57 = node52.isString();
        boolean boolean58 = node52.isOr();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test21753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21753");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(52, 0, 43);
        boolean boolean4 = node3.isString();
        java.lang.String str5 = node3.toStringTree();
        boolean boolean6 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node10.setCharno(1);
        com.google.javascript.rhino.Node node13 = node10.getLastSibling();
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node15 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node16 = node13.cloneTree();
        node16.setSourceEncodedPosition(3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "INSTANCEOF 0\n" + "'", str5, "INSTANCEOF 0\n");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test21754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21754");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4131, 45, 48);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test21755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21755");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility4);
        java.lang.String str6 = jSDocInfo0.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        jSDocInfo0.addSuppression("STRING ");
        boolean boolean12 = jSDocInfo0.hasDescriptionForParameter("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n)");
        boolean boolean13 = jSDocInfo0.isNoCompile();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo0.getExtendedInterfaces();
        jSDocInfo0.setLicense("NUMBER 40.0");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
    }

    @Test
    public void test21756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21756");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str3 = jSDocInfo0.getOriginalCommentString();
        int int4 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean5 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        int int7 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        boolean boolean9 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getTypedefType();
        java.lang.String str11 = jSDocInfo0.getDescription();
        boolean boolean12 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test21757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21757");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 4095.0 100\n", 4095, (int) ' ');
        boolean boolean4 = node3.isNew();
        java.lang.String str5 = node3.getQualifiedName();
        boolean boolean6 = node3.isGetElem();
        boolean boolean7 = node3.isTrue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test21758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21758");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isConstructor();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isExterns();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        boolean boolean11 = strSet10.isEmpty();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node33 = node31.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) -1, node31, (int) (byte) 1, (int) '#');
        boolean boolean37 = node26.hasChild(node36);
        int int38 = node26.getCharno();
        com.google.javascript.rhino.Node node39 = node16.useSourceInfoIfMissingFrom(node26);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node46 = node44.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node44, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node56 = node54.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) -1, node54, (int) (byte) 1, (int) '#');
        boolean boolean60 = node49.hasChild(node59);
        boolean boolean61 = node59.isVar();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((-1), node26, node59);
        java.lang.Object obj64 = node62.getProp((int) (short) -1);
        boolean boolean65 = node62.isQualifiedName();
        node62.setVarArgs(false);
        boolean boolean68 = node62.isIf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node62.children();
        boolean boolean70 = strSet10.contains((java.lang.Object) nodeIterable69);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(nodeIterable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test21759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21759");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node32 = node4.srcref(node31);
        node4.setType(38);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("STRING  0 [synthetic: 1]\n", (int) ' ', (int) (byte) -1);
        node38.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node52 = node50.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) -1, node50, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node62 = node60.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) -1, node60, (int) (byte) 1, (int) '#');
        boolean boolean66 = node55.hasChild(node65);
        int int67 = node55.getCharno();
        com.google.javascript.rhino.Node node68 = node45.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node75 = node73.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (byte) -1, node73, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node85 = node83.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (byte) -1, node83, (int) (byte) 1, (int) '#');
        boolean boolean89 = node78.hasChild(node88);
        boolean boolean90 = node88.isVar();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((-1), node55, node88);
        com.google.javascript.rhino.Node node92 = node91.getParent();
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node((int) ' ', node4, node38, node91);
        boolean boolean94 = node4.isReturn();
        boolean boolean95 = node4.isScript();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable96 = node4.children();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder97 = node4.new FileLevelJsDocBuilder();
        int int98 = node4.getLineno();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable99 = node4.getAncestors();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(nodeIterable96);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 51 + "'", int98 == 51);
        org.junit.Assert.assertNotNull(ancestorIterable99);
    }

    @Test
    public void test21760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21760");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        int int10 = node3.getIntProp(51);
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        boolean boolean12 = node11.isCatch();
        java.lang.String str13 = node11.getSourceFileName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        boolean boolean34 = node23.hasChild(node33);
        boolean boolean35 = node33.isVar();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node39.setCharno(1);
        boolean boolean42 = node39.isRegExp();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        boolean boolean53 = node47.isDo();
        boolean boolean54 = node47.isDefaultCase();
        node47.setQuotedString();
        com.google.javascript.rhino.Node node56 = node39.useSourceInfoFromForTree(node47);
        boolean boolean57 = node56.isVarArgs();
        com.google.javascript.rhino.Node node58 = node33.useSourceInfoIfMissingFrom(node56);
        boolean boolean59 = node33.isGetProp();
        boolean boolean60 = node33.isFromExterns();
        com.google.javascript.rhino.Node node61 = node11.useSourceInfoFromForTree(node33);
        boolean boolean62 = node61.hasMoreThanOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str64 = jSDocInfo63.getVersion();
        boolean boolean65 = jSDocInfo63.hasEnumParameterType();
        boolean boolean66 = jSDocInfo63.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = jSDocInfo63.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo63.setVisibility(visibility68);
        boolean boolean70 = jSDocInfo63.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList71 = jSDocInfo63.getImplementedInterfaces();
        boolean boolean72 = jSDocInfo63.containsDeclaration();
        boolean boolean73 = jSDocInfo63.isNoSideEffects();
        java.util.Set<java.lang.String> strSet74 = jSDocInfo63.getSuppressions();
        boolean boolean75 = jSDocInfo63.isConstructor();
        boolean boolean76 = jSDocInfo63.isNoAlias();
        node61.setJSDocInfo(jSDocInfo63);
        boolean boolean78 = jSDocInfo63.hasEnumParameterType();
        boolean boolean79 = jSDocInfo63.hasEnumParameterType();
        int int80 = jSDocInfo63.getExtendedInterfacesCount();
        java.lang.String str81 = jSDocInfo63.getOriginalCommentString();
        java.lang.String str82 = jSDocInfo63.getMeaning();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSTypeExpression67);
        org.junit.Assert.assertTrue("'" + visibility68 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility68.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
    }

    @Test
    public void test21761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21761");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(54, "(STRING )");
        com.google.javascript.rhino.Node node3 = node2.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            int int4 = node3.getSideEffectFlags();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNull(node3);
    }

    @Test
    public void test21762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21762");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str12 = jSDocInfo11.getVersion();
        java.lang.String str13 = jSDocInfo11.getFileOverview();
        boolean boolean14 = jSDocInfo11.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet15 = jSDocInfo11.getParameterNames();
        boolean boolean16 = strSet3.retainAll((java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray19 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        boolean boolean27 = strSet20.addAll((java.util.Collection<java.lang.String>) strList25);
        boolean boolean28 = strSet3.containsAll((java.util.Collection<java.lang.String>) strSet20);
        java.lang.Object[] objArray29 = strSet20.toArray();
        boolean boolean31 = strSet20.contains((java.lang.Object) 32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str33 = jSDocInfo32.getVersion();
        java.lang.String str34 = jSDocInfo32.getFileOverview();
        boolean boolean35 = jSDocInfo32.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet36 = jSDocInfo32.getParameterNames();
        boolean boolean37 = strSet20.containsAll((java.util.Collection<java.lang.String>) strSet36);
        java.util.Iterator<java.lang.String> strItor38 = strSet20.iterator();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        java.lang.String str49 = node43.toStringTree();
        boolean boolean50 = node43.isAdd();
        boolean boolean51 = node43.isVoid();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(5, "STRING  0");
        boolean boolean55 = node54.isReturn();
        boolean boolean56 = node54.isNull();
        boolean boolean57 = node54.isHook();
        com.google.javascript.rhino.Node node58 = node43.clonePropsFrom(node54);
        boolean boolean59 = strSet20.equals((java.lang.Object) node54);
        java.util.stream.Stream<java.lang.String> strStream60 = strSet20.stream();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[STRING  0, hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[STRING  0, hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "STRING  0\n" + "'", str49, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strStream60);
    }

    @Test
    public void test21763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21763");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node20.new FileLevelJsDocBuilder();
        boolean boolean22 = node20.isCase();
        boolean boolean23 = node20.isFalse();
        boolean boolean24 = node20.isCall();
        boolean boolean25 = node20.isOr();
        node20.setSourceEncodedPositionForTree(151560);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test21764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21764");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        int int6 = jSDocInfo0.getParameterCount();
        java.lang.String str7 = jSDocInfo0.getMeaning();
        boolean boolean8 = jSDocInfo0.hasTypedefType();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        boolean boolean10 = jSDocInfo0.isNoAlias();
        boolean boolean12 = jSDocInfo0.hasParameter("((NUMBER 4095.0 100\n))");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test21765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21765");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition7 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = marker0.getType();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(typePosition7);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(typePosition9);
    }

    @Test
    public void test21766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21766");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int4 = node3.getType();
        boolean boolean5 = node3.isNew();
        boolean boolean6 = node3.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test21767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21767");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str5 = jSDocInfo4.getVersion();
        boolean boolean6 = jSDocInfo4.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo4.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo4.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo4.getThrownTypes();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo4.getParameterNames();
        node3.setDirectives(strSet10);
        java.lang.Object obj13 = node3.getProp((int) (short) 10);
        boolean boolean14 = node3.isLabelName();
        boolean boolean15 = node3.hasChildren();
        boolean boolean16 = node3.isAnd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test21768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21768");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node32 = node4.srcref(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean37 = node36.isFromExterns();
        boolean boolean38 = node32.hasChild(node36);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(52, node36);
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        node36.setJSType(jSType40);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str43 = jSDocInfo42.getVersion();
        java.lang.String str44 = jSDocInfo42.getFileOverview();
        boolean boolean45 = jSDocInfo42.shouldPreserveTry();
        boolean boolean46 = jSDocInfo42.isExpose();
        boolean boolean47 = jSDocInfo42.isNoSideEffects();
        java.lang.String str48 = jSDocInfo42.getSourceName();
        boolean boolean49 = jSDocInfo42.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression50 = jSDocInfo42.getType();
        boolean boolean51 = jSDocInfo42.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility52 = jSDocInfo42.getVisibility();
        java.util.Set<java.lang.String> strSet53 = jSDocInfo42.getParameterNames();
        node36.setDirectives(strSet53);
        java.util.Iterator<java.lang.String> strItor55 = strSet53.iterator();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(jSTypeExpression50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(visibility52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(strItor55);
    }

    @Test
    public void test21769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21769");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray4);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(97, nodeArray4);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(4, nodeArray4);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray4);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node15 = node13.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) -1, node13, (int) (byte) 1, (int) '#');
        boolean boolean19 = node13.isScript();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node23.setCharno(1);
        java.util.Set<java.lang.String> strSet26 = node23.getDirectives();
        java.lang.String str27 = node13.checkTreeEquals(node23);
        boolean boolean28 = node13.isQualifiedName();
        int int29 = node13.getCharno();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node36 = node34.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) -1, node34, (int) (byte) 1, (int) '#');
        int int40 = node39.getType();
        boolean boolean41 = node39.isDelProp();
        boolean boolean42 = node39.wasEmptyNode();
        com.google.javascript.rhino.Node node43 = node39.removeChildren();
        boolean boolean44 = node39.wasEmptyNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder45 = node39.new FileLevelJsDocBuilder();
        boolean boolean46 = node39.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node50.setCharno(1);
        java.util.Set<java.lang.String> strSet53 = node50.getDirectives();
        node50.setCharno((int) (short) -1);
        boolean boolean56 = node50.isRegExp();
        boolean boolean57 = node50.isDefaultCase();
        boolean boolean58 = node50.isBlock();
        boolean boolean59 = node50.isTrue();
        boolean boolean60 = node39.isEquivalentTo(node50);
        node13.addChildrenToBack(node39);
        boolean boolean62 = node39.isString();
        int int63 = node8.getIndexOfChild(node39);
        boolean boolean64 = node8.isLocalResultCall();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 10 + "'", int29 == 10);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test21770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21770");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isVarArgs();
        boolean boolean6 = node3.isSetterDef();
        boolean boolean7 = node3.isFromExterns();
        boolean boolean8 = node3.isEmpty();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable9 = node3.getAncestors();
        double double10 = node3.getDouble();
        boolean boolean11 = node3.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(ancestorIterable9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 4095.0d + "'", double10 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21771");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(45, 0, 48);
        java.lang.String str4 = node3.getSourceFileName();
        boolean boolean5 = node3.isOnlyModifiesThisCall();
        boolean boolean6 = node3.isWith();
        com.google.javascript.rhino.jstype.JSType jSType7 = node3.getJSType();
        boolean boolean8 = node3.isArrayLit();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int10 = typePosition9.getPositionOnEndLine();
        com.google.javascript.rhino.Node node11 = typePosition9.getItem();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node18 = node16.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) -1, node16, (int) (byte) 1, (int) '#');
        boolean boolean22 = node16.isDo();
        boolean boolean23 = node16.isDefaultCase();
        node16.setQuotedString();
        boolean boolean25 = node16.isDec();
        boolean boolean26 = node16.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node16.siblings();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(51);
        java.lang.String str30 = node16.checkTreeEquals(node29);
        boolean boolean31 = node16.isCatch();
        com.google.javascript.rhino.InputId inputId32 = null;
        node16.setInputId(inputId32);
        typePosition9.setItem(node16);
        int int35 = typePosition9.getEndLine();
        int int36 = typePosition9.getStartLine();
        com.google.javascript.rhino.Node node37 = typePosition9.getItem();
        com.google.javascript.rhino.Node node38 = node37.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType39 = node38.getJSType();
        boolean boolean40 = node38.isLocalResultCall();
        boolean boolean41 = node38.isLabel();
        int int42 = node3.getIndexOfChild(node38);
        java.lang.String str43 = node3.toString();
        com.google.javascript.rhino.Node node44 = node3.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = node44.isSetterDef();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str30, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "SHEQ 0" + "'", str43, "SHEQ 0");
        org.junit.Assert.assertNull(node44);
    }

    @Test
    public void test21772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21772");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray5);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(29, nodeArray5);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(30, nodeArray5);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(39, nodeArray5, 6, 47);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(37, nodeArray5);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node16.setCharno(1);
        boolean boolean19 = node16.isRegExp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node24.isDo();
        boolean boolean31 = node24.isDefaultCase();
        node24.setQuotedString();
        com.google.javascript.rhino.Node node33 = node16.useSourceInfoFromForTree(node24);
        node24.putIntProp((int) (byte) 100, (int) (byte) 0);
        node24.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean40 = node24.isInc();
        com.google.javascript.rhino.Node node41 = node24.getLastSibling();
        com.google.javascript.rhino.Node node42 = node12.useSourceInfoFromForTree(node24);
        node42.putBooleanProp(43, false);
        boolean boolean46 = node42.isHook();
        boolean boolean47 = node42.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test21773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21773");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        java.lang.Class<?> wildcardClass9 = jSDocInfo0.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test21774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21774");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        com.google.javascript.rhino.Node node15 = node8.detachFromParent();
        node15.setOptionalArg(false);
        boolean boolean19 = node15.getBooleanProp(31);
        com.google.javascript.rhino.Node node20 = node3.copyInformationFrom(node15);
        boolean boolean21 = node20.isLabel();
        com.google.javascript.rhino.InputId inputId22 = node20.getInputId();
        java.lang.String str23 = node20.getString();
        com.google.javascript.rhino.jstype.JSType jSType24 = node20.getJSType();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        boolean boolean35 = node29.isScript();
        com.google.javascript.rhino.InputId inputId36 = node29.getInputId();
        boolean boolean37 = node29.isDelProp();
        boolean boolean38 = node29.isBlock();
        boolean boolean39 = node29.isQuotedString();
        boolean boolean40 = node29.isTrue();
        com.google.javascript.rhino.Node node41 = node20.srcref(node29);
        boolean boolean42 = node41.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(inputId22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Not declared as a constructor" + "'", str23, "Not declared as a constructor");
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(inputId36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test21775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21775");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getThrownTypes();
        boolean boolean12 = jSDocInfo0.hasParameterType("(STRING  0\n)");
        boolean boolean13 = jSDocInfo0.isHidden();
        java.lang.String str14 = jSDocInfo0.getDescription();
        boolean boolean15 = jSDocInfo0.isExpose();
        java.util.Collection<java.lang.String> strCollection16 = jSDocInfo0.getReferences();
        boolean boolean17 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strCollection16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test21776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21776");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        boolean boolean16 = node4.isEmpty();
        com.google.javascript.rhino.Node node17 = node4.getParent();
        boolean boolean18 = node17.isRegExp();
        boolean boolean19 = node17.hasOneChild();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node36 = node34.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) -1, node34, (int) (byte) 1, (int) '#');
        boolean boolean40 = node29.hasChild(node39);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node44 = node29.clonePropsFrom(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = node44.getJSDocInfo();
        com.google.javascript.rhino.Node node46 = node17.clonePropsFrom(node44);
        boolean boolean47 = node17.isAssign();
        boolean boolean48 = node17.isString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(jSDocInfo45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test21777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21777");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.isInterface();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection10 = jSDocInfo0.getMarkers();
        boolean boolean11 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(markerCollection10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test21778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21778");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        jSDocInfo0.setAssociatedNode(node8);
        boolean boolean15 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.Node node16 = jSDocInfo0.getAssociatedNode();
        boolean boolean17 = jSDocInfo0.hasEnumParameterType();
        boolean boolean18 = jSDocInfo0.isConsistentIdGenerator();
        jSDocInfo0.setDeprecated(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test21779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21779");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        boolean boolean51 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node52 = node14.removeFirstChild();
        boolean boolean53 = node52.hasOneChild();
        boolean boolean54 = node52.isFor();
        boolean boolean55 = node52.isLabel();
        com.google.javascript.rhino.Node node56 = node52.getParent();
        boolean boolean57 = node52.isContinue();
        boolean boolean58 = node52.isTypeOf();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test21780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21780");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        boolean boolean27 = node3.isSwitch();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node48 = node46.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) -1, node46, (int) (byte) 1, (int) '#');
        boolean boolean52 = node41.hasChild(node51);
        int int53 = node41.getCharno();
        com.google.javascript.rhino.Node node54 = node31.useSourceInfoIfMissingFrom(node41);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node59 = node31.srcref(node58);
        boolean boolean60 = node59.isAssignAdd();
        int int61 = node3.getIndexOfChild(node59);
        boolean boolean62 = node59.isLabelName();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) 'a');
        boolean boolean65 = node64.isScript();
        com.google.javascript.rhino.Node node66 = node59.copyInformationFromForTree(node64);
        boolean boolean67 = node64.isVarArgs();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags69 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int70 = sideEffectFlags69.valueOf();
        sideEffectFlags69.clearSideEffectFlags();
        sideEffectFlags69.clearAllFlags();
        sideEffectFlags69.clearSideEffectFlags();
        boolean boolean74 = sideEffectFlags69.areAllFlagsSet();
        boolean boolean75 = sideEffectFlags69.areAllFlagsSet();
        int int76 = sideEffectFlags69.valueOf();
        sideEffectFlags69.setMutatesThis();
        sideEffectFlags69.clearAllFlags();
        sideEffectFlags69.clearSideEffectFlags();
        sideEffectFlags69.clearAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node64.setSideEffectFlags(sideEffectFlags69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 39 + "'", int70 == 39);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 31 + "'", int76 == 31);
    }

    @Test
    public void test21781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21781");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isTypeOf();
        boolean boolean23 = node19.isAssignAdd();
        boolean boolean24 = node19.isStringKey();
        node19.setOptionalArg(true);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean32 = node31.isFromExterns();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(39, node31, (int) '4', 51);
        boolean boolean36 = node31.isIn();
        boolean boolean37 = node19.isEquivalentTo(node31);
        boolean boolean38 = node19.isRegExp();
        java.lang.String str42 = node19.toString(false, false, true);
        node19.putIntProp((int) '#', 0);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags47 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        sideEffectFlags47.setAllFlags();
        sideEffectFlags47.setAllFlags();
        sideEffectFlags47.clearAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node19.setSideEffectFlags(sideEffectFlags47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ERROR" + "'", str42, "ERROR");
    }

    @Test
    public void test21782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21782");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) 10, "Named type with empty name component");
        boolean boolean3 = node2.isIf();
        boolean boolean4 = node2.isStringKey();
        boolean boolean5 = node2.isOr();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node11.setCharno(1);
        boolean boolean14 = node11.isRegExp();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node19.isDo();
        boolean boolean26 = node19.isDefaultCase();
        node19.setQuotedString();
        com.google.javascript.rhino.Node node28 = node11.useSourceInfoFromForTree(node19);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node32.setCharno(1);
        java.util.Set<java.lang.String> strSet35 = node32.getDirectives();
        node32.setLength(0);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(0, node28, node32, node47, (int) 'a', (int) (short) 0);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(45);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node60 = node58.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) -1, node58, (int) (byte) 1, (int) '#');
        boolean boolean64 = node58.isDo();
        boolean boolean65 = node58.isDefaultCase();
        node58.setQuotedString();
        boolean boolean67 = node58.isDec();
        boolean boolean68 = node58.hasMoreThanOneChild();
        boolean boolean69 = node58.isTrue();
        com.google.javascript.rhino.Node node70 = node53.useSourceInfoIfMissingFrom(node58);
        boolean boolean71 = node53.isObjectLit();
        boolean boolean72 = node53.isInc();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node79 = node77.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) -1, node77, (int) (byte) 1, (int) '#');
        boolean boolean83 = node77.isDo();
        boolean boolean84 = node77.isDefaultCase();
        node77.setQuotedString();
        boolean boolean86 = node77.isDec();
        boolean boolean87 = node77.isBlock();
        boolean boolean88 = node77.isScript();
        com.google.javascript.rhino.Node node89 = node53.useSourceInfoFromForTree(node77);
        node50.addChildToBack(node53);
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(54, node50);
        int int92 = node50.getSourceOffset();
        boolean boolean93 = node50.isNew();
        com.google.javascript.rhino.Node node94 = node2.useSourceInfoFromForTree(node50);
        boolean boolean95 = node94.isDelProp();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test21783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21783");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean6 = strSet3.add("STRING  0");
        boolean boolean8 = strSet3.equals((java.lang.Object) 45);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str10 = jSDocInfo9.getVersion();
        boolean boolean11 = jSDocInfo9.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo9.getParameterNames();
        jSDocInfo9.addSuppression("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList15 = jSDocInfo9.getExtendedInterfaces();
        boolean boolean16 = jSDocInfo9.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo9.getModifies();
        java.lang.String str18 = jSDocInfo9.getReturnDescription();
        java.util.Set<java.lang.String> strSet19 = jSDocInfo9.getParameterNames();
        boolean boolean20 = strSet3.equals((java.lang.Object) jSDocInfo9);
        strSet3.clear();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(51);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder24 = node23.new FileLevelJsDocBuilder();
        java.lang.String str25 = node23.toStringTree();
        boolean boolean26 = node23.isQualifiedName();
        node23.setSourceEncodedPosition(12);
        node23.setLineno(5);
        boolean boolean31 = node23.isDefaultCase();
        boolean boolean32 = strSet3.contains((java.lang.Object) node23);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        boolean boolean47 = node41.isScript();
        node41.setQuotedString();
        com.google.javascript.rhino.Node node49 = node36.srcrefTree(node41);
        com.google.javascript.rhino.Node node50 = node49.cloneNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile51 = node49.getStaticSourceFile();
        boolean boolean52 = node49.isStringKey();
        boolean boolean53 = node49.isGetterDef();
        com.google.javascript.rhino.Node node54 = node23.useSourceInfoIfMissingFrom(node49);
        boolean boolean55 = node49.isOr();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(jSTypeExpressionList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "IN\n" + "'", str25, "IN\n");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(staticSourceFile51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test21784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21784");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = jSDocInfo0.getVisibility();
        boolean boolean2 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertNull(visibility1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test21785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21785");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int4 = node3.getType();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node9.setCharno(1);
        boolean boolean12 = node9.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isDo();
        boolean boolean24 = node17.isDefaultCase();
        node17.setQuotedString();
        com.google.javascript.rhino.Node node26 = node9.useSourceInfoFromForTree(node17);
        node26.setSourceFileForTesting("STRING  0\n");
        node26.setSourceFileForTesting("Named type with empty name component");
        com.google.javascript.rhino.Node node31 = node5.useSourceInfoIfMissingFrom(node26);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder32 = node26.getJsDocBuilderForNode();
        boolean boolean33 = node26.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test21786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21786");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(0, 38, 0);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(131104, node4, 19, 0);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray14);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(29, nodeArray14);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray14);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(38, nodeArray14, 23, (int) (byte) 100);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node(30, nodeArray14);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node(49, nodeArray14, 151562, 46);
        boolean boolean25 = node24.hasChildren();
        boolean boolean26 = node24.isCatch();
        boolean boolean27 = node24.isAnd();
        boolean boolean28 = node7.isEquivalentToTyped(node24);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test21787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21787");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getSuppressions();
        strSet10.clear();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test21788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21788");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        boolean boolean8 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.Node node9 = jSDocInfo0.getAssociatedNode();
        boolean boolean10 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        boolean boolean35 = node24.hasChild(node34);
        int int36 = node24.getCharno();
        com.google.javascript.rhino.Node node37 = node14.useSourceInfoIfMissingFrom(node24);
        node37.setLength((int) ' ');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node50 = node48.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) -1, node48, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node60 = node58.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) -1, node58, (int) (byte) 1, (int) '#');
        boolean boolean64 = node53.hasChild(node63);
        int int65 = node53.getCharno();
        com.google.javascript.rhino.Node node66 = node43.useSourceInfoIfMissingFrom(node53);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node71 = node43.srcref(node70);
        boolean boolean72 = node37.isEquivalentToTyped(node43);
        node43.addSuppression("STRING  0 [synthetic: 1]\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile75 = node43.getStaticSourceFile();
        jSDocInfo0.setAssociatedNode(node43);
        boolean boolean77 = node43.isFor();
        boolean boolean78 = node43.isInstanceOf();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(staticSourceFile75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test21789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21789");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility4);
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str9 = jSDocInfo0.getVersion();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test21790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21790");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        boolean boolean5 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getType();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        jSDocInfo0.addSuppression("ERROR 1");
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str11 = jSDocInfo10.getVersion();
        boolean boolean12 = jSDocInfo10.hasEnumParameterType();
        boolean boolean13 = jSDocInfo10.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo10.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility15 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo10.setVisibility(visibility15);
        boolean boolean17 = jSDocInfo10.isJavaDispatch();
        jSDocInfo10.setLicense("Named type with empty name component");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo10.getType();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        int int23 = node22.getChildCount();
        boolean boolean24 = node22.isThrow();
        com.google.javascript.rhino.Node node25 = node22.removeChildren();
        jSDocInfo10.setAssociatedNode(node25);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = jSDocInfo10.getVisibility();
        jSDocInfo0.setVisibility(visibility27);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + visibility15 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility15.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + visibility27 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility27.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
    }

    @Test
    public void test21791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21791");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int4 = node3.getType();
        boolean boolean5 = node3.isArrayLit();
        node3.setWasEmptyNode(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str10 = jSDocInfo9.getVersion();
        boolean boolean11 = jSDocInfo9.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo9.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo9.getImplementedInterfaces();
        java.lang.String str14 = jSDocInfo9.toString();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean19 = node18.isThrow();
        java.lang.String str23 = node18.toString(true, false, true);
        java.lang.String str24 = node18.getQualifiedName();
        boolean boolean25 = node18.isCatch();
        boolean boolean26 = node18.isOr();
        jSDocInfo9.setAssociatedNode(node18);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString((int) (byte) 10, "Named type with empty name component");
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node66 = node64.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) -1, node64, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node76 = node74.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) -1, node74, (int) (byte) 1, (int) '#');
        boolean boolean80 = node69.hasChild(node79);
        boolean boolean81 = node79.isVar();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((-1), node46, node79);
        com.google.javascript.rhino.Node node83 = node82.getParent();
        boolean boolean84 = node82.isSetterDef();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((-1), node82);
        boolean boolean86 = node30.isEquivalentTo(node85);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(46, node18, node30);
        node30.setSourceFileForTesting("Not declared as a type name");
        boolean boolean90 = node30.isBlock();
        boolean boolean91 = node30.isWith();
        com.google.javascript.rhino.Node node92 = node3.srcrefTree(node30);
        boolean boolean93 = node92.isLabel();
        node92.setLineno(11);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "JSDocInfo" + "'", str14, "JSDocInfo");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "STRING  0" + "'", str23, "STRING  0");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test21792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21792");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean2 = node1.isWith();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        boolean boolean28 = node17.hasChild(node27);
        int int29 = node17.getCharno();
        com.google.javascript.rhino.Node node30 = node7.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        boolean boolean51 = node40.hasChild(node50);
        boolean boolean52 = node50.isVar();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((-1), node17, node50);
        com.google.javascript.rhino.Node node54 = node53.getParent();
        boolean boolean55 = node53.isSetterDef();
        boolean boolean56 = node53.isEmpty();
        boolean boolean57 = node53.isSetterDef();
        node53.removeProp(53);
        boolean boolean60 = node53.isVarArgs();
        com.google.javascript.rhino.Node node62 = node53.getChildAtIndex(2);
        node1.addChildToBack(node53);
        boolean boolean64 = node1.isAnd();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test21793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21793");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isScript();
        com.google.javascript.rhino.Node node24 = node17.detachFromParent();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node28.setCharno(1);
        java.util.Set<java.lang.String> strSet31 = node28.getDirectives();
        boolean boolean32 = node28.isHook();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node64 = node36.srcref(node63);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node12, node24, node28, node36);
        com.google.javascript.rhino.Node node66 = node12.cloneTree();
        int int67 = node66.getLength();
        boolean boolean68 = node66.isNew();
        com.google.javascript.rhino.Node node69 = node66.getFirstChild();
        boolean boolean70 = node66.hasOneChild();
        int int71 = node66.getType();
        int int72 = node66.getLength();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 40 + "'", int71 == 40);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test21794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21794");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getOriginalCommentString();
        boolean boolean4 = jSDocInfo0.hasParameter("STRING  0 [source_file: STRING  0\n]\n");
        boolean boolean5 = jSDocInfo0.isExpose();
        int int6 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test21795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21795");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isConstructor();
        boolean boolean4 = jSDocInfo0.isConsistentIdGenerator();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
    }

    @Test
    public void test21796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21796");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(41.0d, (int) (short) 100, 44);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test21797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21797");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        int int4 = jSDocInfo0.getImplementedInterfaceCount();
        int int5 = jSDocInfo0.getExtendedInterfacesCount();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0);
        node7.setWasEmptyNode(false);
        jSDocInfo0.setAssociatedNode(node7);
        boolean boolean11 = jSDocInfo0.isExport();
        java.lang.String str12 = jSDocInfo0.getOriginalCommentString();
        int int13 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean14 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test21798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21798");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        boolean boolean9 = jSDocInfo0.isOverride();
        boolean boolean10 = jSDocInfo0.isNoShadow();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getModifies();
        boolean boolean12 = jSDocInfo0.isExterns();
        boolean boolean13 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test21799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21799");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = booleanLiteralSet1.intersection(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = booleanLiteralSet0.intersection(booleanLiteralSet1);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = booleanLiteralSet6.intersection(booleanLiteralSet7);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = booleanLiteralSet5.intersection(booleanLiteralSet6);
        boolean boolean11 = booleanLiteralSet9.contains(false);
        boolean boolean13 = booleanLiteralSet9.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet1.union(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = booleanLiteralSet16.intersection(booleanLiteralSet17);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = booleanLiteralSet15.intersection(booleanLiteralSet16);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = booleanLiteralSet19.union(booleanLiteralSet20);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = booleanLiteralSet9.union(booleanLiteralSet20);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet24.intersection(booleanLiteralSet25);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = booleanLiteralSet23.intersection(booleanLiteralSet24);
        boolean boolean29 = booleanLiteralSet27.contains(false);
        boolean boolean31 = booleanLiteralSet27.contains(true);
        boolean boolean33 = booleanLiteralSet27.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = booleanLiteralSet35.intersection(booleanLiteralSet36);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = booleanLiteralSet34.intersection(booleanLiteralSet35);
        boolean boolean40 = booleanLiteralSet38.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = booleanLiteralSet41.intersection(booleanLiteralSet42);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = booleanLiteralSet38.intersection(booleanLiteralSet42);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = booleanLiteralSet27.union(booleanLiteralSet42);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = booleanLiteralSet47.intersection(booleanLiteralSet48);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = booleanLiteralSet46.intersection(booleanLiteralSet47);
        boolean boolean52 = booleanLiteralSet50.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet53 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet54 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = booleanLiteralSet53.intersection(booleanLiteralSet54);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet56 = booleanLiteralSet50.intersection(booleanLiteralSet54);
        boolean boolean58 = booleanLiteralSet56.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet59 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet60 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet62 = booleanLiteralSet60.intersection(booleanLiteralSet61);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet63 = booleanLiteralSet59.intersection(booleanLiteralSet60);
        boolean boolean65 = booleanLiteralSet63.contains(false);
        boolean boolean67 = booleanLiteralSet63.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = booleanLiteralSet56.union(booleanLiteralSet63);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet69 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet70 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet71 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet72 = booleanLiteralSet70.intersection(booleanLiteralSet71);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet73 = booleanLiteralSet69.intersection(booleanLiteralSet70);
        boolean boolean75 = booleanLiteralSet73.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet77 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet78 = booleanLiteralSet76.intersection(booleanLiteralSet77);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet79 = booleanLiteralSet73.intersection(booleanLiteralSet77);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet80 = booleanLiteralSet63.intersection(booleanLiteralSet77);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet81 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet82 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet83 = booleanLiteralSet81.intersection(booleanLiteralSet82);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet84 = booleanLiteralSet77.union(booleanLiteralSet81);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet85 = booleanLiteralSet27.intersection(booleanLiteralSet81);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet86 = booleanLiteralSet20.union(booleanLiteralSet85);
        boolean boolean88 = booleanLiteralSet20.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet53 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet53.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet54 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet54.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet56 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet56.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet59 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet59.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet60 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet60.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet62 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet62.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet63 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet63.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet69 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet69.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet70 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet70.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet71 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet71.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet72 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet72.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet73 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet73.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet77 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet77.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet78 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet78.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet79 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet79.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet80 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet80.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet81 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet81.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet82 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet82.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet83 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet83.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet84 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet84.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet85 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet85.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet86 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet86.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test21800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21800");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        typePosition0.setPositionInformation(2, 31, 29, 37);
        int int7 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node8 = typePosition0.getItem();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("STRING  0 [quoted: 1]\n");
        node10.setLineno(31);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean17 = node16.isThrow();
        java.lang.String str21 = node16.toString(true, false, true);
        boolean boolean22 = node16.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = node16.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile24 = null;
        node16.setStaticSourceFile(staticSourceFile24);
        node10.addChildrenToBack(node16);
        typePosition0.setItem(node16);
        int int28 = typePosition0.getStartLine();
        boolean boolean29 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        boolean boolean44 = node38.isScript();
        node38.setQuotedString();
        com.google.javascript.rhino.Node node46 = node33.srcrefTree(node38);
        typePosition0.setItem(node38);
        boolean boolean48 = typePosition0.hasBrackets();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 37 + "'", int7 == 37);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "STRING  0" + "'", str21, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(jSDocInfo23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test21801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21801");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(30);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable2 = node1.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor3 = ancestorIterable2.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor4 = ancestorIterable2.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor5 = ancestorIterable2.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor6 = ancestorIterable2.iterator();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator7 = ancestorIterable2.spliterator();
        org.junit.Assert.assertNotNull(ancestorIterable2);
        org.junit.Assert.assertNotNull(nodeItor3);
        org.junit.Assert.assertNotNull(nodeItor4);
        org.junit.Assert.assertNotNull(nodeItor5);
        org.junit.Assert.assertNotNull(nodeItor6);
        org.junit.Assert.assertNotNull(nodeSpliterator7);
    }

    @Test
    public void test21802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21802");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        boolean boolean27 = node13.isAssignAdd();
        boolean boolean28 = node13.isUnscopedQualifiedName();
        int int29 = node13.getLineno();
        boolean boolean30 = node13.isTrue();
        boolean boolean31 = node13.isSyntheticBlock();
        boolean boolean32 = node13.isGetterDef();
        com.google.javascript.rhino.Node node33 = node13.getFirstChild();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test21803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21803");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 35.0");
        boolean boolean2 = node1.isSetterDef();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test21804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21804");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.isDefine();
        boolean boolean3 = jSDocInfo0.isExport();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getSuppressions();
        jSDocInfo0.setLicense("REGEXP \n");
        boolean boolean7 = jSDocInfo0.isOverride();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test21805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21805");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 100.0f, 0, 44);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable4 = node3.getAncestors();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node8.setCharno(1);
        boolean boolean11 = node8.isRegExp();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node18 = node16.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) -1, node16, (int) (byte) 1, (int) '#');
        boolean boolean22 = node16.isDo();
        boolean boolean23 = node16.isDefaultCase();
        node16.setQuotedString();
        com.google.javascript.rhino.Node node25 = node8.useSourceInfoFromForTree(node16);
        node16.putIntProp((int) (byte) 100, (int) (byte) 0);
        node16.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean32 = node16.isInc();
        boolean boolean33 = node3.isEquivalentToTyped(node16);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(ancestorIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test21806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21806");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        int int6 = jSDocInfo0.getParameterCount();
        boolean boolean7 = jSDocInfo0.isNoTypeCheck();
        boolean boolean8 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean10 = jSDocInfo0.hasReturnType();
        boolean boolean11 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getReturnType();
        jSDocInfo0.setDeprecated(true);
        boolean boolean15 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test21807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21807");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        sideEffectFlags1.clearSideEffectFlags();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 47 + "'", int3 == 47);
    }

    @Test
    public void test21808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21808");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        int int44 = node21.getLineno();
        boolean boolean45 = node21.isDefaultCase();
        boolean boolean46 = node21.isNumber();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test21809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21809");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getReturnType();
        boolean boolean8 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test21810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21810");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(192609, "STRING STRING  0 [quoted: 1]\n 52\n", 192609, 0);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test21811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21811");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(208993, "NUMBER 4095.0 100\n", 0, 37);
        int int5 = node4.getSourcePosition();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 37 + "'", int5 == 37);
    }

    @Test
    public void test21812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21812");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(16773120);
        sideEffectFlags1.clearAllFlags();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test21813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21813");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        boolean boolean8 = jSDocInfo0.isInterface();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0\n\n\nTree2:\nNUMBER 4095.0 100\n\n\nSubtree1: OR 0\n\n\nSubtree2: NUMBER 4095.0 100\n");
        boolean boolean11 = jSDocInfo0.hasFileOverview();
        java.util.Collection<java.lang.String> strCollection12 = jSDocInfo0.getAuthors();
        com.google.common.collect.ImmutableList<java.lang.String> strList13 = jSDocInfo0.getTemplateTypeNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo0.getImplementedInterfaces();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(visibility7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strCollection12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
    }

    @Test
    public void test21814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21814");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile2 = null;
        node1.setStaticSourceFile(staticSourceFile2);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test21815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21815");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node20.new FileLevelJsDocBuilder();
        boolean boolean22 = node20.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test21816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21816");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isExport();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str9 = jSDocInfo0.toString();
        java.lang.String str11 = jSDocInfo0.getDescriptionForParameter("STRING  0 [var_args_name: 1]");
        boolean boolean12 = jSDocInfo0.hasThisType();
        boolean boolean13 = jSDocInfo0.hasTypedefType();
        boolean boolean14 = jSDocInfo0.isDeprecated();
        java.lang.String str15 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test21817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21817");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        boolean boolean10 = jSDocInfo0.isNoShadow();
        boolean boolean11 = jSDocInfo0.hasType();
        boolean boolean12 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test21818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21818");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isNoCompile();
        boolean boolean6 = jSDocInfo0.hasFileOverview();
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean8 = jSDocInfo0.isExterns();
        boolean boolean9 = jSDocInfo0.hasReturnType();
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test21819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21819");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(38, "(STRING  0 [var_args_name: 1])", (int) (byte) -1, (int) (byte) -1);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(21);
        boolean boolean7 = node6.isString();
        com.google.javascript.rhino.Node node8 = node4.copyInformationFromForTree(node6);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean14 = node13.isThrow();
        java.lang.String str18 = node13.toString(true, false, true);
        java.lang.String str19 = node13.getQualifiedName();
        boolean boolean20 = node13.isIn();
        com.google.javascript.rhino.Node node21 = node13.cloneTree();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        boolean boolean32 = node26.isScript();
        com.google.javascript.rhino.Node node33 = node26.detachFromParent();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node37.setCharno(1);
        java.util.Set<java.lang.String> strSet40 = node37.getDirectives();
        boolean boolean41 = node37.isHook();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node52 = node50.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) -1, node50, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node62 = node60.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) -1, node60, (int) (byte) 1, (int) '#');
        boolean boolean66 = node55.hasChild(node65);
        int int67 = node55.getCharno();
        com.google.javascript.rhino.Node node68 = node45.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node73 = node45.srcref(node72);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(4095, node21, node33, node37, node45);
        com.google.javascript.rhino.Node node75 = node74.removeChildren();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder76 = node75.getJsDocBuilderForNode();
        node8.addChildrenToBack(node75);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "STRING  0" + "'", str18, "STRING  0");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder76);
    }

    @Test
    public void test21820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21820");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getDescription();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(stringPosition8);
    }

    @Test
    public void test21821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21821");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        node3.setIsSyntheticBlock(true);
        int int11 = node3.getLength();
        boolean boolean12 = node3.isNumber();
        node3.setSourceEncodedPositionForTree(40);
        boolean boolean15 = node3.isOr();
        int int16 = node3.getSourcePosition();
        boolean boolean17 = node3.isDefaultCase();
        com.google.javascript.rhino.Node node18 = node3.getLastChild();
        boolean boolean19 = node3.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 40 + "'", int16 == 40);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test21822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21822");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        java.lang.String str7 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node11.setCharno(1);
        boolean boolean14 = node11.isRegExp();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node19.isDo();
        boolean boolean26 = node19.isDefaultCase();
        node19.setQuotedString();
        com.google.javascript.rhino.Node node28 = node11.useSourceInfoFromForTree(node19);
        node19.putIntProp((int) (byte) 100, (int) (byte) 0);
        boolean boolean32 = node19.isVarArgs();
        jSDocInfo0.setAssociatedNode(node19);
        boolean boolean34 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet36 = jSDocInfo0.getSuppressions();
        java.lang.String str37 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSTypeExpression35);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test21823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21823");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(45, 0, 48);
        java.lang.String str4 = node3.getSourceFileName();
        boolean boolean5 = node3.isOnlyModifiesThisCall();
        boolean boolean6 = node3.isWith();
        com.google.javascript.rhino.jstype.JSType jSType7 = node3.getJSType();
        boolean boolean8 = node3.isArrayLit();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition9 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int10 = typePosition9.getPositionOnEndLine();
        com.google.javascript.rhino.Node node11 = typePosition9.getItem();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node18 = node16.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) -1, node16, (int) (byte) 1, (int) '#');
        boolean boolean22 = node16.isDo();
        boolean boolean23 = node16.isDefaultCase();
        node16.setQuotedString();
        boolean boolean25 = node16.isDec();
        boolean boolean26 = node16.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node16.siblings();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(51);
        java.lang.String str30 = node16.checkTreeEquals(node29);
        boolean boolean31 = node16.isCatch();
        com.google.javascript.rhino.InputId inputId32 = null;
        node16.setInputId(inputId32);
        typePosition9.setItem(node16);
        int int35 = typePosition9.getEndLine();
        int int36 = typePosition9.getStartLine();
        com.google.javascript.rhino.Node node37 = typePosition9.getItem();
        com.google.javascript.rhino.Node node38 = node37.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType39 = node38.getJSType();
        boolean boolean40 = node38.isLocalResultCall();
        boolean boolean41 = node38.isLabel();
        int int42 = node3.getIndexOfChild(node38);
        java.lang.String str43 = node3.toString();
        boolean boolean44 = node3.isTypeOf();
        node3.setType(16);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str30, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "SHEQ 0" + "'", str43, "SHEQ 0");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test21824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21824");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        boolean boolean12 = strSet3.remove((java.lang.Object) 1L);
        java.util.stream.Stream<java.lang.String> strStream13 = strSet3.parallelStream();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(409601, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str18 = jSDocInfo17.getVersion();
        java.lang.String str19 = jSDocInfo17.getFileOverview();
        jSDocInfo17.addSuppression("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList22 = jSDocInfo17.getExtendedInterfaces();
        boolean boolean23 = jSDocInfo17.isConstructor();
        boolean boolean24 = jSDocInfo17.isNoTypeCheck();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo17.getSuppressions();
        node16.setDirectives(strSet25);
        boolean boolean27 = strSet3.removeAll((java.util.Collection<java.lang.String>) strSet25);
        int int28 = strSet25.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str30 = jSDocInfo29.getVersion();
        boolean boolean31 = jSDocInfo29.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo29.getParameterNames();
        jSDocInfo29.addSuppression("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo29.getExtendedInterfaces();
        boolean boolean36 = jSDocInfo29.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet37 = jSDocInfo29.getModifies();
        java.lang.String str38 = jSDocInfo29.getReturnDescription();
        java.util.Set<java.lang.String> strSet39 = jSDocInfo29.getParameterNames();
        java.lang.Object[] objArray40 = strSet39.toArray();
        boolean boolean41 = strSet25.containsAll((java.util.Collection<java.lang.String>) strSet39);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(jSTypeExpressionList22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test21825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21825");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.hasFileOverview();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getSuppressions();
        java.lang.String[] strArray15 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        boolean boolean19 = strSet16.add("STRING  0");
        java.lang.String[] strArray22 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strSet23.addAll((java.util.Collection<java.lang.String>) strList28);
        boolean boolean31 = strSet16.containsAll((java.util.Collection<java.lang.String>) strList28);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str33 = jSDocInfo32.getVersion();
        java.lang.String str34 = jSDocInfo32.getFileOverview();
        jSDocInfo32.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo32.getBaseType();
        boolean boolean38 = jSDocInfo32.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet39 = jSDocInfo32.getSuppressions();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int44 = node43.getType();
        int int45 = node43.getCharno();
        boolean boolean46 = strSet39.equals((java.lang.Object) node43);
        java.util.stream.Stream<java.lang.String> strStream47 = strSet39.stream();
        boolean boolean48 = strSet16.containsAll((java.util.Collection<java.lang.String>) strSet39);
        boolean boolean49 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet16);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray57);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(29, nodeArray57);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray57);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node(38, nodeArray57, 23, (int) (byte) 100);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(30, nodeArray57);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(32, nodeArray57, 2, 47);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(16, nodeArray57, 397361, 4095);
        java.lang.Cloneable[] cloneableArray71 = strSet12.toArray((java.lang.Cloneable[]) nodeArray57);
        java.util.Iterator<java.lang.String> strItor72 = strSet12.iterator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 40 + "'", int44 == 40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 10 + "'", int45 == 10);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strStream47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(cloneableArray71);
        org.junit.Assert.assertNotNull(strItor72);
    }

    @Test
    public void test21826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21826");
        com.google.javascript.rhino.jstype.JSType jSType0 = null;
        com.google.javascript.rhino.jstype.JSType jSType1 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair2 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType0, jSType1);
        com.google.javascript.rhino.jstype.JSType jSType3 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType4 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType5 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType6 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType7 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType8 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair2.typeA;
        com.google.javascript.rhino.jstype.JSType jSType10 = typePair2.typeB;
        com.google.javascript.rhino.jstype.JSType jSType11 = typePair2.typeB;
        org.junit.Assert.assertNull(jSType3);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNull(jSType6);
        org.junit.Assert.assertNull(jSType7);
        org.junit.Assert.assertNull(jSType8);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertNull(jSType11);
    }

    @Test
    public void test21827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21827");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setThrows();
        int int6 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test21828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21828");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        java.lang.String str7 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node11.setCharno(1);
        boolean boolean14 = node11.isRegExp();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node19.isDo();
        boolean boolean26 = node19.isDefaultCase();
        node19.setQuotedString();
        com.google.javascript.rhino.Node node28 = node11.useSourceInfoFromForTree(node19);
        node19.putIntProp((int) (byte) 100, (int) (byte) 0);
        boolean boolean32 = node19.isVarArgs();
        jSDocInfo0.setAssociatedNode(node19);
        boolean boolean34 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression35 = jSDocInfo0.getEnumParameterType();
        boolean boolean36 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression38 = jSDocInfo0.getParameterType("(Named type with empty name component)");
        boolean boolean39 = jSDocInfo0.hasReturnType();
        boolean boolean40 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(jSTypeExpression35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(jSTypeExpression38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test21829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21829");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str5 = jSDocInfo4.getVersion();
        boolean boolean6 = jSDocInfo4.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo4.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo4.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo4.getThrownTypes();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo4.getParameterNames();
        node3.setDirectives(strSet10);
        boolean boolean12 = node3.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node3.getJSDocInfo();
        node3.setIsSyntheticBlock(false);
        int int16 = node3.getSourceOffset();
        boolean boolean17 = node3.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSDocInfo13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test21830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21830");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(12, "(OR 1)");
        boolean boolean3 = node2.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        java.lang.String str14 = node8.toStringTree();
        boolean boolean15 = node8.isStringKey();
        boolean boolean16 = node8.isAnd();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        node20.removeProp(47);
        boolean boolean23 = node20.isFromExterns();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double28 = node27.getDouble();
        boolean boolean29 = node27.isAdd();
        com.google.javascript.rhino.Node node30 = node27.cloneNode();
        boolean boolean31 = node30.isNE();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node64 = node36.srcref(node63);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean69 = node68.isFromExterns();
        boolean boolean70 = node64.hasChild(node68);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(52, node68);
        node30.addChildToBack(node71);
        java.lang.String str73 = node20.checkTreeEquals(node30);
        node20.setSourceFileForTesting("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        node20.setLength((int) (byte) 1);
        node20.setSourceEncodedPositionForTree(151562);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = node20.getStaticSourceFile();
        node8.setStaticSourceFile(staticSourceFile80);
        node2.setStaticSourceFile(staticSourceFile80);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING  0\n" + "'", str14, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 4095.0d + "'", double28 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n" + "'", str73, "Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n");
        org.junit.Assert.assertNotNull(staticSourceFile80);
    }

    @Test
    public void test21831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21831");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(51);
        java.lang.String str18 = node4.checkTreeEquals(node17);
        boolean boolean19 = node4.isOr();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str21 = jSDocInfo20.getVersion();
        boolean boolean22 = jSDocInfo20.hasEnumParameterType();
        java.lang.String str24 = jSDocInfo20.getDescriptionForParameter("STRING  0\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo20.getExtendedInterfaces();
        node4.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        boolean boolean41 = node35.isScript();
        node35.setQuotedString();
        com.google.javascript.rhino.Node node43 = node30.srcrefTree(node35);
        boolean boolean44 = node35.isBreak();
        boolean boolean45 = node4.hasChild(node35);
        boolean boolean46 = node35.isDefaultCase();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(42);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = null;
        node48.setStaticSourceFile(staticSourceFile49);
        boolean boolean51 = node48.hasMoreThanOneChild();
        boolean boolean52 = node48.isExprResult();
        com.google.javascript.rhino.Node node53 = node35.copyInformationFrom(node48);
        node35.setVarArgs(false);
        node35.setString("(CALL 0\n)");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str18, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test21832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21832");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double4 = node3.getDouble();
        boolean boolean5 = node3.isAdd();
        com.google.javascript.rhino.Node node6 = node3.cloneNode();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node10.setCharno(1);
        java.util.Set<java.lang.String> strSet13 = node10.getDirectives();
        node10.setLength(0);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFrom(node10);
        boolean boolean17 = node10.isVarArgs();
        boolean boolean18 = node10.isNoSideEffectsCall();
        boolean boolean19 = node10.isString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = node10.getJSDocInfo();
        int int21 = node10.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4095.0d + "'", double4 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(jSDocInfo20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test21833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21833");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        int int10 = node3.getIntProp(51);
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        boolean boolean12 = node11.isCatch();
        java.lang.String str13 = node11.getSourceFileName();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        boolean boolean34 = node23.hasChild(node33);
        boolean boolean35 = node33.isVar();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node39.setCharno(1);
        boolean boolean42 = node39.isRegExp();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        boolean boolean53 = node47.isDo();
        boolean boolean54 = node47.isDefaultCase();
        node47.setQuotedString();
        com.google.javascript.rhino.Node node56 = node39.useSourceInfoFromForTree(node47);
        boolean boolean57 = node56.isVarArgs();
        com.google.javascript.rhino.Node node58 = node33.useSourceInfoIfMissingFrom(node56);
        boolean boolean59 = node33.isGetProp();
        boolean boolean60 = node33.isFromExterns();
        com.google.javascript.rhino.Node node61 = node11.useSourceInfoFromForTree(node33);
        int int62 = node61.getSourceOffset();
        boolean boolean63 = node61.isComma();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test21834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21834");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getParameterType("Unknown class name");
        boolean boolean12 = jSDocInfo0.isExport();
        boolean boolean13 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test21835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21835");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = ternaryValue1.or(ternaryValue3);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue6.or(ternaryValue8);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue8.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue4.and(ternaryValue8);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue13.or(ternaryValue15);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = ternaryValue18.or(ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue20.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue16.and(ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue11.and(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue16.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue16.not();
        java.lang.String str27 = ternaryValue26.toString();
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "true" + "'", str27, "true");
    }

    @Test
    public void test21836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21836");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        boolean boolean27 = node3.isSwitch();
        boolean boolean28 = node3.isFalse();
        node3.setCharno(10);
        boolean boolean31 = node3.isIf();
        boolean boolean32 = node3.isNull();
        com.google.javascript.rhino.InputId inputId33 = node3.getInputId();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(inputId33);
    }

    @Test
    public void test21837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21837");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        int int3 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        int int6 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 39 + "'", int3 == 39);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
    }

    @Test
    public void test21838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21838");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node27 = node25.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node25, (int) (byte) 1, (int) '#');
        boolean boolean31 = node20.hasChild(node30);
        boolean boolean32 = node30.isVar();
        boolean boolean33 = node30.isTypeOf();
        boolean boolean34 = strSet3.contains((java.lang.Object) node30);
        int int35 = strSet3.size();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node42 = node40.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, (int) (byte) 1, (int) '#');
        int int46 = node45.getType();
        boolean boolean47 = node45.isFor();
        java.lang.String str48 = node45.getQualifiedName();
        boolean boolean49 = strSet3.contains((java.lang.Object) node45);
        java.util.stream.Stream<java.lang.String> strStream50 = strSet3.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream51 = strSet3.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getVersion();
        boolean boolean54 = jSDocInfo52.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo52.getParameterNames();
        java.util.Set<java.lang.String> strSet56 = jSDocInfo52.getSuppressions();
        java.util.stream.Stream<java.lang.String> strStream57 = strSet56.parallelStream();
        boolean boolean58 = strSet3.retainAll((java.util.Collection<java.lang.String>) strSet56);
        int int59 = strSet56.size();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strStream50);
        org.junit.Assert.assertNotNull(strStream51);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(strStream57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test21839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21839");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "((ERROR 1))", (int) (byte) 0, 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str6 = jSDocInfo5.getVersion();
        boolean boolean7 = jSDocInfo5.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo5.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo5.getImplementedInterfaces();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean14 = node13.isThrow();
        java.lang.String str18 = node13.toString(true, false, true);
        jSDocInfo5.setAssociatedNode(node13);
        boolean boolean20 = jSDocInfo5.hasTypedefType();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node41 = node39.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) -1, node39, (int) (byte) 1, (int) '#');
        boolean boolean45 = node34.hasChild(node44);
        int int46 = node34.getCharno();
        com.google.javascript.rhino.Node node47 = node24.useSourceInfoIfMissingFrom(node34);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node52 = node24.srcref(node51);
        jSDocInfo5.setAssociatedNode(node24);
        node24.setLineno(47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str57 = jSDocInfo56.getVersion();
        boolean boolean58 = jSDocInfo56.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet59 = jSDocInfo56.getParameterNames();
        jSDocInfo56.addSuppression("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList62 = jSDocInfo56.getExtendedInterfaces();
        node24.setJSDocInfo(jSDocInfo56);
        com.google.javascript.rhino.Node node64 = node4.clonePropsFrom(node24);
        boolean boolean65 = node64.isDelProp();
        boolean boolean66 = node64.isFalse();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "STRING  0" + "'", str18, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 35 + "'", int46 == 35);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(jSTypeExpressionList62);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test21840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21840");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setAllFlags();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
    }

    @Test
    public void test21841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21841");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 4095.0 100\n", 4095, (int) ' ');
        boolean boolean4 = node3.isNew();
        java.lang.String str5 = node3.getQualifiedName();
        boolean boolean6 = node3.isGetElem();
        boolean boolean7 = node3.isStringKey();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test21842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21842");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        boolean boolean6 = jSDocInfo0.isDefine();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        java.lang.String str8 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test21843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21843");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition7 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition10 = marker0.getType();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(nodeSourcePosition7);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(typePosition10);
    }

    @Test
    public void test21844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21844");
        java.lang.String[] strArray19 = new java.lang.String[] { "OR 1\n", "STRING  0\n", "", "OR 51", "Not declared as a constructor", "false", "Not declared as a constructor", "STRING  0 [synthetic: 1]\n", "JSDocInfo", "false", "STRING  0 [quoted: 1]\n", "true", "STRING  0 [quoted: 1]\n", "OR 1\n", "IN\n", "Named type with empty name component", "STRING  0 [quoted: 1]\n", "(OR 1)" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        boolean boolean28 = node25.isRegExp();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node33.isDo();
        boolean boolean40 = node33.isDefaultCase();
        node33.setQuotedString();
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoFromForTree(node33);
        node33.putIntProp((int) (byte) 100, (int) (byte) 0);
        node33.setCharno((int) (short) 1);
        java.lang.String str48 = node33.getString();
        boolean boolean49 = strSet20.contains((java.lang.Object) node33);
        node33.setVarArgs(false);
        boolean boolean52 = node33.isBreak();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(4131, "(STRING  0 [quoted: 1]\n)");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(8, node33, node55, 29, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node55);
    }

    @Test
    public void test21845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21845");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        boolean boolean15 = node9.isScript();
        node9.setQuotedString();
        com.google.javascript.rhino.Node node17 = node4.srcrefTree(node9);
        boolean boolean18 = node17.isIf();
        boolean boolean19 = node17.hasOneChild();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node24.isDo();
        boolean boolean31 = node24.isDefaultCase();
        node24.setQuotedString();
        boolean boolean33 = node24.isDec();
        boolean boolean34 = node24.isLabel();
        boolean boolean35 = node24.isSetterDef();
        com.google.javascript.rhino.Node node36 = node24.getLastSibling();
        com.google.javascript.rhino.Node node37 = node24.getLastSibling();
        boolean boolean38 = node37.isHook();
        com.google.javascript.rhino.Node node39 = node17.copyInformationFromForTree(node37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(32, node39, 24, 151562);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
    }

    @Test
    public void test21846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21846");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        java.lang.String str14 = node8.getQualifiedName();
        boolean boolean15 = node8.isIn();
        com.google.javascript.rhino.Node node16 = node8.cloneTree();
        boolean boolean17 = node16.isRegExp();
        boolean boolean18 = node16.isDebugger();
        node3.addChildToBack(node16);
        boolean boolean20 = node16.hasMoreThanOneChild();
        boolean boolean21 = node16.isLocalResultCall();
        node16.setString("OR 51");
        boolean boolean24 = node16.isNumber();
        boolean boolean25 = node16.isSwitch();
        boolean boolean26 = node16.isObjectLit();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags28 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        boolean boolean29 = sideEffectFlags28.areAllFlagsSet();
        sideEffectFlags28.clearAllFlags();
        int int31 = sideEffectFlags28.valueOf();
        sideEffectFlags28.setMutatesThis();
        // The following exception was thrown during execution in test generation
        try {
            node16.setSideEffectFlags(sideEffectFlags28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 31 + "'", int31 == 31);
    }

    @Test
    public void test21847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21847");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(151562);
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setThrows();
    }

    @Test
    public void test21848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21848");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        boolean boolean34 = node28.isScript();
        com.google.javascript.rhino.InputId inputId35 = node28.getInputId();
        com.google.javascript.rhino.Node node36 = node11.useSourceInfoFrom(node28);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean41 = node40.isThrow();
        java.lang.String str45 = node40.toString(true, false, true);
        node40.setIsSyntheticBlock(true);
        boolean boolean48 = node40.isTry();
        boolean boolean49 = node11.hasChild(node40);
        boolean boolean50 = node40.isStringKey();
        node40.setType(36);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = node40.children();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable54 = node40.siblings();
        boolean boolean55 = node40.isRegExp();
        node40.setSourceFileForTesting("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0 [jsdoc_info: JSDocInfo]\n\n\nTree2:\nNUMBER 1.0\n\n\nSubtree1: ERROR 1\n    STRING  0 [jsdoc_info: JSDocInfo]\n\n\nSubtree2: NUMBER 1.0\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(inputId35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "STRING  0" + "'", str45, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeIterable53);
        org.junit.Assert.assertNotNull(nodeIterable54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test21849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21849");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        boolean boolean16 = node10.isDo();
        boolean boolean17 = node10.isDefaultCase();
        node10.setQuotedString();
        boolean boolean19 = node10.isDec();
        boolean boolean20 = node10.isLabel();
        boolean boolean21 = node10.isSetterDef();
        boolean boolean22 = node10.isRegExp();
        boolean boolean23 = node10.isName();
        boolean boolean24 = node10.isVoid();
        com.google.javascript.rhino.Node node25 = node10.cloneNode();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node26.isFor();
        node26.putIntProp(213002, 54);
        node26.setQuotedString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test21850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21850");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.hasMoreThanOneChild();
        int int15 = node4.getChildCount();
        boolean boolean16 = node4.isNoSideEffectsCall();
        boolean boolean17 = node4.isSwitch();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test21851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21851");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.hasMoreThanOneChild();
        boolean boolean15 = node4.isTrue();
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str18 = jSDocInfo17.getVersion();
        boolean boolean19 = jSDocInfo17.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo17.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList21 = jSDocInfo17.getImplementedInterfaces();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean26 = node25.isThrow();
        java.lang.String str30 = node25.toString(true, false, true);
        jSDocInfo17.setAssociatedNode(node25);
        com.google.javascript.rhino.Node node32 = node25.removeFirstChild();
        boolean boolean33 = node25.isNumber();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(52, node25, 45, 2);
        boolean boolean37 = node25.isRegExp();
        com.google.javascript.rhino.Node node38 = node4.useSourceInfoFrom(node25);
        node4.setLineno((int) '#');
        boolean boolean41 = node4.isTypeOf();
        boolean boolean42 = node4.isComma();
        com.google.javascript.rhino.InputId inputId43 = null;
        node4.setInputId(inputId43);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(jSTypeExpressionList21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "STRING  0" + "'", str30, "STRING  0");
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test21852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21852");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getEnumParameterType();
        java.lang.String str7 = jSDocInfo0.getDescription();
        java.lang.String str8 = jSDocInfo0.getVersion();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.hasTypedefType();
        boolean boolean11 = jSDocInfo0.isHidden();
        java.lang.String str12 = jSDocInfo0.toString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JSDocInfo" + "'", str12, "JSDocInfo");
    }

    @Test
    public void test21853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21853");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        int int6 = jSDocInfo0.getParameterCount();
        java.lang.String str7 = jSDocInfo0.getMeaning();
        boolean boolean8 = jSDocInfo0.hasTypedefType();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        boolean boolean10 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(visibility11);
    }

    @Test
    public void test21854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21854");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        boolean boolean3 = typePosition0.hasBrackets();
        int int4 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int9 = node8.getType();
        boolean boolean10 = node8.isArrayLit();
        node8.addSuppression("true");
        boolean boolean13 = node8.isReturn();
        typePosition0.setItem(node8);
        int int15 = typePosition0.getEndLine();
        typePosition0.setPositionInformation(16, 100, (int) '4', 39);
        com.google.javascript.rhino.Node node21 = typePosition0.getItem();
        boolean boolean22 = node21.wasEmptyNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str24 = jSDocInfo23.getVersion();
        boolean boolean25 = jSDocInfo23.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo23.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList27 = jSDocInfo23.getImplementedInterfaces();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean32 = node31.isThrow();
        java.lang.String str36 = node31.toString(true, false, true);
        jSDocInfo23.setAssociatedNode(node31);
        int int39 = node31.getIntProp((int) (byte) 10);
        node31.setSourceEncodedPositionForTree(15);
        boolean boolean42 = node31.isNull();
        node31.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node45 = node21.useSourceInfoIfMissingFrom(node31);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(jSTypeExpressionList27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  0" + "'", str36, "STRING  0");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node45);
    }

    @Test
    public void test21855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21855");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 5, 15, 23);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(16773120, node4);
        java.util.Set<java.lang.String> strSet6 = node4.getDirectives();
        java.lang.String[] strArray9 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        boolean boolean17 = strSet10.addAll((java.util.Collection<java.lang.String>) strList15);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        boolean boolean38 = node27.hasChild(node37);
        boolean boolean39 = node37.isVar();
        boolean boolean40 = node37.isTypeOf();
        boolean boolean41 = strSet10.contains((java.lang.Object) node37);
        int int42 = strSet10.size();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        int int53 = node52.getType();
        boolean boolean54 = node52.isFor();
        java.lang.String str55 = node52.getQualifiedName();
        boolean boolean56 = strSet10.contains((java.lang.Object) node52);
        boolean boolean57 = node52.isNoSideEffectsCall();
        boolean boolean58 = node52.isDec();
        boolean boolean59 = node52.isInc();
        com.google.javascript.rhino.Node node60 = node4.useSourceInfoFrom(node52);
        boolean boolean61 = node60.isTrue();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test21856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21856");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node7 = node5.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1, node5, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node10.hasChild(node20);
        boolean boolean22 = node20.isVar();
        boolean boolean23 = node20.isTypeOf();
        boolean boolean24 = node20.isAssignAdd();
        boolean boolean25 = node20.isStringKey();
        node20.setOptionalArg(true);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean32 = node31.isThrow();
        java.lang.String str36 = node31.toString(true, false, true);
        boolean boolean37 = node31.isWith();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean42 = node41.isThrow();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node50 = node48.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) -1, node48, (int) (byte) 1, (int) '#');
        boolean boolean54 = node48.isDo();
        boolean boolean55 = node48.isDefaultCase();
        node48.setQuotedString();
        boolean boolean57 = node48.isDec();
        boolean boolean58 = node48.isLabel();
        boolean boolean59 = node48.isSetterDef();
        boolean boolean60 = node48.isRegExp();
        boolean boolean61 = node48.isName();
        boolean boolean62 = node48.isVoid();
        com.google.javascript.rhino.Node node63 = node48.cloneNode();
        com.google.javascript.rhino.Node node64 = node41.useSourceInfoIfMissingFrom(node63);
        boolean boolean65 = node64.isFor();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(53, node20, node31, node64);
        boolean boolean67 = node20.isInstanceOf();
        node20.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  0" + "'", str36, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test21857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21857");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        com.google.javascript.rhino.Node node11 = node4.getLastSibling();
        node4.putIntProp((int) (byte) 0, (int) (byte) 1);
        node4.detachChildren();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node20.isScript();
        com.google.javascript.rhino.InputId inputId27 = node20.getInputId();
        boolean boolean28 = node20.isDelProp();
        boolean boolean29 = node20.isBlock();
        boolean boolean30 = node20.isStringKey();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int35 = node34.getType();
        com.google.javascript.rhino.Node node36 = node34.cloneNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder37 = node34.new FileLevelJsDocBuilder();
        boolean boolean38 = node34.isFunction();
        int int39 = node34.getLength();
        int int40 = node34.getLength();
        com.google.javascript.rhino.Node node41 = node20.copyInformationFromForTree(node34);
        boolean boolean42 = node41.isName();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node54 = node52.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) -1, node52, (int) (byte) 1, (int) '#');
        boolean boolean58 = node52.isScript();
        node52.setQuotedString();
        com.google.javascript.rhino.Node node60 = node47.srcrefTree(node52);
        boolean boolean61 = node60.isIf();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(35, "OR 1", (int) (short) 0, 45);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean71 = node70.isThrow();
        java.lang.String str75 = node70.toString(true, false, true);
        boolean boolean76 = node70.isOptionalArg();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node[] nodeArray81 = new com.google.javascript.rhino.Node[] { node60, node66, node70, node80 };
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(38, nodeArray81, (int) (byte) 100, (int) (byte) 10);
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newNumber((double) 2, 8, 50);
        com.google.javascript.rhino.Node node89 = node84.useSourceInfoIfMissingFrom(node88);
        boolean boolean90 = node88.isAssign();
        com.google.javascript.rhino.Node node91 = node88.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node4.replaceChildAfter(node41, node91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(inputId27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 40 + "'", int35 == 40);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "STRING  0" + "'", str75, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(nodeArray81);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node91);
    }

    @Test
    public void test21858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21858");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        boolean boolean12 = jSDocInfo0.hasReturnType();
        java.lang.String str13 = jSDocInfo0.getDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str15 = jSDocInfo0.toString();
        boolean boolean16 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str17 = jSDocInfo0.getVersion();
        boolean boolean18 = jSDocInfo0.isConstructor();
        java.lang.String str19 = jSDocInfo0.getOriginalCommentString();
        boolean boolean20 = jSDocInfo0.isNoSideEffects();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JSDocInfo" + "'", str15, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test21859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21859");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = jSDocInfo0.getVisibility();
        java.util.Collection<java.lang.String> strCollection12 = jSDocInfo0.getAuthors();
        jSDocInfo0.setDeprecated(false);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNull(visibility11);
        org.junit.Assert.assertNull(strCollection12);
    }

    @Test
    public void test21860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21860");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        boolean boolean19 = node15.isHook();
        node11.addChildToFront(node15);
        boolean boolean21 = node15.isGetElem();
        boolean boolean22 = node15.isRegExp();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node15.siblings();
        com.google.javascript.rhino.Node node24 = node15.getLastChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertNull(node24);
    }

    @Test
    public void test21861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21861");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        int int6 = jSDocInfo0.getParameterCount();
        java.lang.String str7 = jSDocInfo0.getMeaning();
        boolean boolean8 = jSDocInfo0.isNoAlias();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getTypedefType();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertNull(jSTypeExpression12);
    }

    @Test
    public void test21862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21862");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        boolean boolean3 = typePosition0.hasBrackets();
        typePosition0.setPositionInformation(0, 5, 42, 4131);
        typePosition0.setPositionInformation(0, (int) (short) -1, 16773120, 39);
        boolean boolean14 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node15 = typePosition0.getItem();
        int int16 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node17 = typePosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test21863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21863");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        boolean boolean19 = node15.isHook();
        node11.addChildToFront(node15);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node42 = node40.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, (int) (byte) 1, (int) '#');
        boolean boolean46 = node35.hasChild(node45);
        int int47 = node35.getCharno();
        com.google.javascript.rhino.Node node48 = node25.useSourceInfoIfMissingFrom(node35);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node65 = node63.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) -1, node63, (int) (byte) 1, (int) '#');
        boolean boolean69 = node58.hasChild(node68);
        boolean boolean70 = node68.isVar();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((-1), node35, node68);
        boolean boolean72 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node73 = node35.removeFirstChild();
        boolean boolean74 = node73.hasOneChild();
        boolean boolean75 = node73.isFor();
        node15.addChildToBack(node73);
        boolean boolean77 = node15.isName();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(53, "OR 51");
        boolean boolean81 = node80.isLabel();
        boolean boolean82 = node80.hasOneChild();
        com.google.javascript.rhino.Node node83 = node15.useSourceInfoFrom(node80);
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str85 = jSDocInfo84.getVersion();
        boolean boolean86 = jSDocInfo84.hasEnumParameterType();
        boolean boolean87 = jSDocInfo84.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression88 = jSDocInfo84.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList89 = jSDocInfo84.getExtendedInterfaces();
        java.lang.String str90 = jSDocInfo84.getDeprecationReason();
        boolean boolean91 = jSDocInfo84.hasThisType();
        boolean boolean92 = jSDocInfo84.isInterface();
        node83.setJSDocInfo(jSDocInfo84);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression94 = jSDocInfo84.getBaseType();
        boolean boolean95 = jSDocInfo84.hasTypedefType();
        java.lang.String str96 = jSDocInfo84.toString();
        java.lang.String str97 = jSDocInfo84.toString();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility98 = jSDocInfo84.getVisibility();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(jSTypeExpression88);
        org.junit.Assert.assertNotNull(jSTypeExpressionList89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(jSTypeExpression94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "JSDocInfo" + "'", str96, "JSDocInfo");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "JSDocInfo" + "'", str97, "JSDocInfo");
        org.junit.Assert.assertNull(visibility98);
    }

    @Test
    public void test21864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21864");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int4 = node3.getType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node3.siblings();
        boolean boolean6 = node3.isAdd();
        // The following exception was thrown during execution in test generation
        try {
            node3.setDouble((double) 151560);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertNotNull(nodeIterable5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test21865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21865");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = ternaryValue1.or(ternaryValue3);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue1.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = ternaryValue5.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue8.or(ternaryValue10);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue8.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue12.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue14.or(ternaryValue15);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue13.or(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue13.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue5.xor(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
    }

    @Test
    public void test21866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21866");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        boolean boolean9 = node3.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = node3.getJSDocInfo();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        boolean boolean35 = node24.hasChild(node34);
        int int36 = node24.getCharno();
        com.google.javascript.rhino.Node node37 = node14.useSourceInfoIfMissingFrom(node24);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node42 = node14.srcref(node41);
        boolean boolean43 = node42.isAssignAdd();
        boolean boolean44 = node3.isEquivalentToTyped(node42);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node56 = node54.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) -1, node54, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node66 = node64.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) -1, node64, (int) (byte) 1, (int) '#');
        boolean boolean70 = node59.hasChild(node69);
        int int71 = node59.getCharno();
        com.google.javascript.rhino.Node node72 = node49.useSourceInfoIfMissingFrom(node59);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node77 = node49.srcref(node76);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean82 = node81.isFromExterns();
        boolean boolean83 = node77.hasChild(node81);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node(52, node81);
        boolean boolean85 = node42.hasChild(node81);
        node81.putBooleanProp(44, false);
        java.lang.Object obj90 = node81.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node91 = node81.getLastSibling();
        com.google.javascript.rhino.Node node92 = node91.removeChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSDocInfo10);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(obj90);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNull(node92);
    }

    @Test
    public void test21867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21867");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.hasReturnType();
        com.google.common.collect.ImmutableList<java.lang.String> strList7 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean8 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getExtendedInterfaces();
        int int10 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test21868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21868");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        jSDocInfo0.setAssociatedNode(node8);
        boolean boolean15 = node8.isVar();
        node8.setIsSyntheticBlock(true);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test21869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21869");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        node3.setIsSyntheticBlock(true);
        boolean boolean11 = node3.isTry();
        java.lang.String str12 = node3.toStringTree();
        boolean boolean13 = node3.isRegExp();
        node3.setSourceFileForTesting("hi!");
        boolean boolean16 = node3.isIf();
        boolean boolean17 = node3.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING  0 [synthetic: 1]\n" + "'", str12, "STRING  0 [synthetic: 1]\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test21870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21870");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(51);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node8 = node6.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) -1, node6, (int) (byte) 1, (int) '#');
        boolean boolean12 = node6.isDo();
        boolean boolean13 = node6.isDefaultCase();
        node6.setQuotedString();
        com.google.javascript.rhino.Node node15 = node1.copyInformationFrom(node6);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node20.isDo();
        boolean boolean27 = node20.isDefaultCase();
        node20.setQuotedString();
        boolean boolean29 = node20.isDec();
        boolean boolean30 = node20.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable31 = node20.siblings();
        com.google.javascript.rhino.Node node32 = node6.copyInformationFromForTree(node20);
        boolean boolean33 = node6.isEmpty();
        boolean boolean34 = node6.isThis();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        node38.removeProp(47);
        boolean boolean41 = node38.isFromExterns();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double46 = node45.getDouble();
        boolean boolean47 = node45.isAdd();
        com.google.javascript.rhino.Node node48 = node45.cloneNode();
        boolean boolean49 = node48.isNE();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node71 = node69.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (byte) -1, node69, (int) (byte) 1, (int) '#');
        boolean boolean75 = node64.hasChild(node74);
        int int76 = node64.getCharno();
        com.google.javascript.rhino.Node node77 = node54.useSourceInfoIfMissingFrom(node64);
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node82 = node54.srcref(node81);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean87 = node86.isFromExterns();
        boolean boolean88 = node82.hasChild(node86);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(52, node86);
        node48.addChildToBack(node89);
        java.lang.String str91 = node38.checkTreeEquals(node48);
        node38.setSourceFileForTesting("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        boolean boolean94 = node38.isIf();
        com.google.javascript.rhino.Node node95 = node6.useSourceInfoFromForTree(node38);
        boolean boolean96 = node95.isLocalResultCall();
        boolean boolean97 = node95.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(nodeIterable31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 4095.0d + "'", double46 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 35 + "'", int76 == 35);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n" + "'", str91, "Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test21871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21871");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(35, "STRING  0 [jsdoc_info: JSDocInfo]");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node7.setCharno(1);
        boolean boolean10 = node7.isRegExp();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node15.isDo();
        boolean boolean22 = node15.isDefaultCase();
        node15.setQuotedString();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoFromForTree(node15);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node28.setCharno(1);
        java.util.Set<java.lang.String> strSet31 = node28.getDirectives();
        node28.setLength(0);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(0, node24, node28, node43, (int) 'a', (int) (short) 0);
        boolean boolean47 = node24.isNull();
        java.lang.String[] strArray50 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        boolean boolean58 = strSet51.addAll((java.util.Collection<java.lang.String>) strList56);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node65 = node63.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) -1, node63, (int) (byte) 1, (int) '#');
        boolean boolean69 = node63.isScript();
        node63.setQuotedString();
        boolean boolean71 = strSet51.equals((java.lang.Object) node63);
        com.google.javascript.rhino.Node node72 = node24.copyInformationFrom(node63);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node79 = node77.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) -1, node77, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node83 = node24.useSourceInfoFrom(node82);
        boolean boolean84 = node24.isThis();
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildrenToBack(node24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test21872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21872");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node7 = node5.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1, node5, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node10.hasChild(node20);
        int int22 = node10.getCharno();
        boolean boolean23 = node10.isTry();
        boolean boolean24 = node10.isDec();
        boolean boolean25 = node10.isLocalResultCall();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node29.setCharno(1);
        java.util.Set<java.lang.String> strSet32 = node29.getDirectives();
        node29.setCharno((int) (short) -1);
        boolean boolean35 = node29.isRegExp();
        com.google.javascript.rhino.Node node36 = node29.getLastChild();
        boolean boolean37 = node29.isDec();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node54 = node52.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) -1, node52, (int) (byte) 1, (int) '#');
        boolean boolean58 = node47.hasChild(node57);
        boolean boolean59 = node57.isVar();
        boolean boolean60 = node57.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable61 = node57.children();
        boolean boolean62 = node57.isTrue();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str64 = jSDocInfo63.getVersion();
        java.lang.String str65 = jSDocInfo63.getFileOverview();
        boolean boolean66 = jSDocInfo63.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet67 = jSDocInfo63.getParameterNames();
        boolean boolean68 = jSDocInfo63.isExpose();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node72.setCharno(1);
        boolean boolean75 = node72.isRegExp();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node82 = node80.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (byte) -1, node80, (int) (byte) 1, (int) '#');
        boolean boolean86 = node80.isDo();
        boolean boolean87 = node80.isDefaultCase();
        node80.setQuotedString();
        com.google.javascript.rhino.Node node89 = node72.useSourceInfoFromForTree(node80);
        jSDocInfo63.setAssociatedNode(node72);
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(32, node10, node29, node57, node72);
        java.lang.String str92 = node57.toString();
        boolean boolean93 = node57.isVoid();
        boolean boolean94 = node57.isSyntheticBlock();
        com.google.javascript.rhino.Node node95 = node57.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable96 = node95.siblings();
        com.google.javascript.rhino.Node node97 = node95.getFirstChild();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeIterable61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "ERROR 1" + "'", str92, "ERROR 1");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(nodeIterable96);
        org.junit.Assert.assertNotNull(node97);
    }

    @Test
    public void test21873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21873");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str8 = jSDocInfo7.getVersion();
        boolean boolean9 = jSDocInfo7.hasEnumParameterType();
        java.lang.String str11 = jSDocInfo7.getDescriptionForParameter("STRING  0\n");
        boolean boolean12 = jSDocInfo7.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str14 = jSDocInfo13.getVersion();
        boolean boolean15 = jSDocInfo13.hasEnumParameterType();
        boolean boolean16 = jSDocInfo13.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression17 = jSDocInfo13.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility18 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo13.setVisibility(visibility18);
        jSDocInfo7.setVisibility(visibility18);
        jSDocInfo0.setVisibility(visibility18);
        boolean boolean22 = jSDocInfo0.isInterface();
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(jSTypeExpression17);
        org.junit.Assert.assertTrue("'" + visibility18 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility18.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strCollection23);
    }

    @Test
    public void test21874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21874");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        boolean boolean7 = jSDocInfo0.isNoCompile();
        java.lang.String str8 = jSDocInfo0.getBlockDescription();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        boolean boolean10 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test21875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21875");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nOR 51\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: OR 51\n", 42, 151560);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test21876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21876");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        java.util.Set<java.lang.String> strSet6 = node3.getDirectives();
        node3.setCharno((int) (short) -1);
        boolean boolean9 = node3.hasMoreThanOneChild();
        boolean boolean10 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node19.isScript();
        node19.setQuotedString();
        com.google.javascript.rhino.Node node27 = node14.srcrefTree(node19);
        boolean boolean28 = node27.isNull();
        boolean boolean29 = node27.isScript();
        com.google.javascript.rhino.Node node30 = node3.srcref(node27);
        boolean boolean31 = node30.isOnlyModifiesThisCall();
        boolean boolean32 = node30.isContinue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test21877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21877");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node7 = node5.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1, node5, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node10.hasChild(node20);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node25 = node10.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node36 = node34.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) -1, node34, (int) (byte) 1, (int) '#');
        boolean boolean40 = node34.isScript();
        com.google.javascript.rhino.Node node41 = node34.detachFromParent();
        node41.setOptionalArg(false);
        boolean boolean45 = node41.getBooleanProp(31);
        com.google.javascript.rhino.Node node46 = node29.copyInformationFrom(node41);
        boolean boolean47 = node46.isLabel();
        com.google.javascript.rhino.Node node48 = node24.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(32, node48, 16, 97);
        boolean boolean52 = node51.isParamList();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean57 = node56.isThrow();
        java.lang.String str61 = node56.toString(true, false, true);
        node56.setIsSyntheticBlock(true);
        boolean boolean64 = node56.isTry();
        java.lang.String str65 = node56.toStringTree();
        boolean boolean66 = node56.isRegExp();
        node56.setSourceFileForTesting("hi!");
        java.lang.String str72 = node56.toString(false, true, false);
        node56.setSourceEncodedPosition(45);
        com.google.javascript.rhino.Node node75 = node51.useSourceInfoFrom(node56);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(15, 21, (int) '#');
        com.google.javascript.rhino.Node node80 = node51.srcrefTree(node79);
        boolean boolean81 = node80.wasEmptyNode();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "STRING  0" + "'", str61, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "STRING  0 [synthetic: 1]\n" + "'", str65, "STRING  0 [synthetic: 1]\n");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "STRING  [synthetic: 1] [source_file: hi!]" + "'", str72, "STRING  [synthetic: 1] [source_file: hi!]");
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test21878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21878");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        com.google.javascript.rhino.Node node51 = node50.getParent();
        boolean boolean52 = node50.isContinue();
        boolean boolean53 = node50.isDefaultCase();
        com.google.javascript.rhino.Node node54 = node50.cloneNode();
        boolean boolean55 = node50.isInc();
        boolean boolean56 = node50.isHook();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test21879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21879");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("STRING  0\n");
        boolean boolean6 = jSDocInfo0.isJavaDispatch();
        boolean boolean7 = jSDocInfo0.isNoShadow();
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(strCollection8);
    }

    @Test
    public void test21880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21880");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        java.lang.String str10 = node4.toStringTree();
        boolean boolean11 = node4.isStringKey();
        com.google.javascript.rhino.jstype.JSType jSType12 = null;
        node4.setJSType(jSType12);
        boolean boolean14 = node4.isIf();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(53, "OR 51");
        boolean boolean18 = node17.isLabel();
        boolean boolean19 = node17.hasOneChild();
        com.google.javascript.rhino.Node node20 = node4.copyInformationFromForTree(node17);
        node4.setOptionalArg(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str24 = jSDocInfo23.getVersion();
        boolean boolean25 = jSDocInfo23.hasEnumParameterType();
        boolean boolean26 = jSDocInfo23.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo23.getParameterType("STRING  0\n");
        jSDocInfo23.setDeprecated(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str32 = jSDocInfo31.getVersion();
        boolean boolean33 = jSDocInfo31.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo31.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo31.getImplementedInterfaces();
        boolean boolean36 = jSDocInfo31.hasReturnType();
        boolean boolean37 = jSDocInfo31.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression39 = jSDocInfo31.getParameterType("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        boolean boolean40 = jSDocInfo31.isJavaDispatch();
        int int41 = jSDocInfo31.getParameterCount();
        boolean boolean42 = jSDocInfo31.isConsistentIdGenerator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str44 = jSDocInfo43.getVersion();
        boolean boolean45 = jSDocInfo43.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo43.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList47 = jSDocInfo43.getImplementedInterfaces();
        int int48 = jSDocInfo43.getImplementedInterfaceCount();
        boolean boolean49 = jSDocInfo43.isNoCompile();
        java.lang.String str50 = jSDocInfo43.getSourceName();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility51 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo43.setVisibility(visibility51);
        jSDocInfo31.setVisibility(visibility51);
        jSDocInfo23.setVisibility(visibility51);
        node4.setJSDocInfo(jSDocInfo23);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "STRING  0\n" + "'", str10, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSTypeExpression39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(jSTypeExpressionList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + visibility51 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility51.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
    }

    @Test
    public void test21881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21881");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        java.lang.String str7 = jSDocInfo0.getLicense();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.lang.String str9 = jSDocInfo0.getOriginalCommentString();
        int int10 = jSDocInfo0.getParameterCount();
        boolean boolean11 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean12 = jSDocInfo0.hasModifies();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection13 = jSDocInfo0.getTypeNodes();
        boolean boolean14 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(nodeCollection13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test21882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21882");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nOR 0\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: OR 0\n)", (int) ' ', 97);
        com.google.javascript.rhino.Node node4 = node3.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test21883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21883");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        com.google.javascript.rhino.Node node16 = node4.detachFromParent();
        node16.setLength(38);
        int int19 = node16.getChildCount();
        com.google.javascript.rhino.Node node20 = node16.cloneNode();
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        boolean boolean49 = node38.hasChild(node48);
        int int50 = node38.getCharno();
        com.google.javascript.rhino.Node node51 = node28.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node58 = node56.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) -1, node56, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node68 = node66.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) -1, node66, (int) (byte) 1, (int) '#');
        boolean boolean72 = node61.hasChild(node71);
        boolean boolean73 = node71.isVar();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((-1), node38, node71);
        com.google.javascript.rhino.Node node75 = node74.getParent();
        boolean boolean76 = node74.isSetterDef();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((-1), node74);
        int int78 = node77.getSideEffectFlags();
        com.google.javascript.rhino.Node node79 = node20.useSourceInfoIfMissingFromForTree(node77);
        com.google.javascript.rhino.Node node80 = node20.getFirstChild();
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(5, "STRING  0");
        boolean boolean84 = node83.isIf();
        boolean boolean85 = node83.isLabel();
        node83.setLineno(43);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node88 = node80.removeChildAfter(node83);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test21884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21884");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        boolean boolean19 = node15.isHook();
        node11.addChildToFront(node15);
        boolean boolean21 = node15.isGetElem();
        boolean boolean22 = node15.isRegExp();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node15.siblings();
        boolean boolean24 = node15.isContinue();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean29 = node28.isThrow();
        java.lang.String str33 = node28.toString(true, false, true);
        node28.setIsSyntheticBlock(true);
        int int36 = node28.getLength();
        boolean boolean37 = node28.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node38 = node15.srcref(node28);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString((int) (byte) 10, "Named type with empty name component");
        java.lang.String str42 = node41.getQualifiedName();
        node41.setQuotedString();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition44 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int45 = typePosition44.getPositionOnEndLine();
        int int46 = typePosition44.getEndLine();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(12, "STRING  0 [synthetic: 1]\n");
        com.google.javascript.rhino.InputId inputId50 = node49.getInputId();
        com.google.javascript.rhino.InputId inputId51 = null;
        node49.setInputId(inputId51);
        typePosition44.setItem(node49);
        com.google.javascript.rhino.Node node54 = node41.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) 4095, 32, 51);
        com.google.javascript.rhino.Node node59 = node54.copyInformationFromForTree(node58);
        com.google.javascript.rhino.Node node60 = node15.srcrefTree(node58);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "STRING  0" + "'", str33, "STRING  0");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(inputId50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test21885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21885");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        int int7 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node8 = node3.getLastChild();
        node3.setSourceEncodedPositionForTree(4095);
        int int12 = node3.getIntProp(46);
        boolean boolean13 = node3.isNE();
        node3.removeProp(30);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test21886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21886");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        node27.setLength((int) ' ');
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node50 = node48.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) -1, node48, (int) (byte) 1, (int) '#');
        boolean boolean54 = node43.hasChild(node53);
        int int55 = node43.getCharno();
        com.google.javascript.rhino.Node node56 = node33.useSourceInfoIfMissingFrom(node43);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node61 = node33.srcref(node60);
        boolean boolean62 = node27.isEquivalentToTyped(node33);
        com.google.javascript.rhino.Node node63 = node33.getNext();
        boolean boolean64 = node33.isParamList();
        boolean boolean65 = node33.isStringKey();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node72 = node70.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) -1, node70, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node82 = node80.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (byte) -1, node80, (int) (byte) 1, (int) '#');
        boolean boolean86 = node75.hasChild(node85);
        boolean boolean87 = node85.isVar();
        boolean boolean88 = node85.isTypeOf();
        boolean boolean89 = node85.isAssignAdd();
        java.lang.String str90 = node85.getQualifiedName();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(16773120, node33, node85);
        int int92 = node91.getSourceOffset();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test21887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21887");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        com.google.javascript.rhino.Node node15 = node8.detachFromParent();
        node15.setOptionalArg(false);
        boolean boolean19 = node15.getBooleanProp(31);
        com.google.javascript.rhino.Node node20 = node3.copyInformationFrom(node15);
        boolean boolean21 = node20.isLabel();
        boolean boolean22 = node20.isWhile();
        boolean boolean23 = node20.isNumber();
        java.lang.Object obj25 = null;
        node20.putProp(50, obj25);
        node20.putBooleanProp(0, false);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean34 = node33.isThrow();
        java.lang.String str38 = node33.toString(true, false, true);
        java.lang.String str39 = node33.getQualifiedName();
        boolean boolean40 = node33.isIn();
        com.google.javascript.rhino.Node node41 = node33.cloneTree();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node45.setCharno(1);
        java.util.Set<java.lang.String> strSet48 = node45.getDirectives();
        boolean boolean49 = node45.isHook();
        node41.addChildToFront(node45);
        boolean boolean51 = node41.isNE();
        boolean boolean52 = node41.isArrayLit();
        com.google.javascript.rhino.Node node53 = node41.removeFirstChild();
        boolean boolean54 = node53.isInc();
        boolean boolean55 = node53.isAssignAdd();
        node20.addChildToFront(node53);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "STRING  0" + "'", str38, "STRING  0");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test21888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21888");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isExterns();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node[] nodeArray5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node[] nodeArray6 = strSet4.toArray(nodeArray5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test21889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21889");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        java.lang.String str6 = stringPosition0.getItem();
        java.lang.String str7 = stringPosition0.getItem();
        stringPosition0.setItem("()");
        stringPosition0.setItem("Node tree inequality:\nTree1:\nNUMBER 4095.0 100 [opt_arg: 1]\n    NUMBER -1.0\n\n\nTree2:\nSTRING  0 [quoted: 1]\n    STRING  0\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100 [opt_arg: 1]\n    NUMBER -1.0\n\n\nSubtree2: STRING  0 [quoted: 1]\n    STRING  0\n        STRING  0\n");
        int int12 = stringPosition0.getEndLine();
        stringPosition0.setItem("Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nSTRING Not declared as a constructor 0\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: STRING Not declared as a constructor 0\n");
        stringPosition0.setItem("STRING  100\n");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
    }

    @Test
    public void test21890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21890");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        boolean boolean16 = node10.isDo();
        boolean boolean17 = node10.isDefaultCase();
        node10.setQuotedString();
        boolean boolean19 = node10.isDec();
        boolean boolean20 = node10.isLabel();
        boolean boolean21 = node10.isSetterDef();
        boolean boolean22 = node10.isRegExp();
        boolean boolean23 = node10.isName();
        boolean boolean24 = node10.isVoid();
        com.google.javascript.rhino.Node node25 = node10.cloneNode();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node3.isFunction();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder28 = node3.new FileLevelJsDocBuilder();
        java.lang.String str29 = node3.getSourceFileName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str31 = jSDocInfo30.getVersion();
        boolean boolean32 = jSDocInfo30.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet33 = jSDocInfo30.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList34 = jSDocInfo30.getImplementedInterfaces();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean39 = node38.isThrow();
        java.lang.String str43 = node38.toString(true, false, true);
        jSDocInfo30.setAssociatedNode(node38);
        int int46 = node38.getIntProp((int) (byte) 10);
        node38.setSourceEncodedPositionForTree(15);
        boolean boolean49 = node38.isNull();
        boolean boolean50 = node38.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder51 = node38.new FileLevelJsDocBuilder();
        int int53 = node38.getIntProp(46);
        com.google.javascript.rhino.Node node54 = node3.srcrefTree(node38);
        boolean boolean55 = node54.isIf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(jSTypeExpressionList34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "STRING  0" + "'", str43, "STRING  0");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test21891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21891");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        boolean boolean7 = jSDocInfo0.hasParameterType("JSDocInfo");
        boolean boolean8 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getType();
        boolean boolean10 = jSDocInfo0.hasFileOverview();
        boolean boolean11 = jSDocInfo0.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getReturnType();
        java.lang.String str13 = jSDocInfo0.toString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "JSDocInfo" + "'", str13, "JSDocInfo");
    }

    @Test
    public void test21892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21892");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double4 = node3.getDouble();
        int int5 = node3.getSourcePosition();
        java.lang.String str6 = node3.getQualifiedName();
        int int7 = node3.getChildCount();
        boolean boolean8 = node3.isCall();
        boolean boolean9 = node3.isCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4095.0d + "'", double4 == 4095.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 409601 + "'", int5 == 409601);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test21893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21893");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 2, 32);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean8 = node7.isThrow();
        java.lang.String str12 = node7.toString(true, false, true);
        node7.setIsSyntheticBlock(true);
        boolean boolean15 = node7.isTry();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean20 = node19.isThrow();
        java.lang.String str24 = node19.toString(true, false, true);
        java.lang.String str25 = node19.getQualifiedName();
        boolean boolean26 = node19.isThis();
        java.lang.String[] strArray29 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        boolean boolean37 = strSet30.addAll((java.util.Collection<java.lang.String>) strList35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str39 = jSDocInfo38.getVersion();
        java.lang.String str40 = jSDocInfo38.getFileOverview();
        boolean boolean41 = jSDocInfo38.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet42 = jSDocInfo38.getParameterNames();
        boolean boolean43 = strSet30.retainAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.stream.Stream<java.lang.String> strStream44 = strSet30.stream();
        node19.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.rhino.Node node46 = node7.srcref(node19);
        com.google.javascript.rhino.Node node47 = node3.clonePropsFrom(node19);
        boolean boolean48 = node3.isCase();
        boolean boolean49 = node3.isLabelName();
        boolean boolean50 = node3.isNumber();
        int int51 = node3.getSourcePosition();
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING  0" + "'", str12, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "STRING  0" + "'", str24, "STRING  0");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strStream44);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 8224 + "'", int51 == 8224);
    }

    @Test
    public void test21894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21894");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node9.isReturn();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setCharno((int) (short) -1);
        int int31 = node9.getIndexOfChild(node25);
        boolean boolean32 = node25.isNull();
        boolean boolean33 = node25.isQuotedString();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.jstype.JSType jSType36 = node35.getJSType();
        boolean boolean37 = node35.isLocalResultCall();
        boolean boolean38 = node35.isNew();
        com.google.javascript.rhino.Node node39 = node25.copyInformationFromForTree(node35);
        boolean boolean40 = node39.isReturn();
        com.google.javascript.rhino.InputId inputId41 = null;
        node39.setInputId(inputId41);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test21895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21895");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean27 = node11.isInc();
        node11.setString("");
        boolean boolean30 = node11.isGetProp();
        boolean boolean31 = node11.isWith();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test21896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21896");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        boolean boolean16 = node10.isDo();
        boolean boolean17 = node10.isDefaultCase();
        node10.setQuotedString();
        boolean boolean19 = node10.isDec();
        boolean boolean20 = node10.isLabel();
        boolean boolean21 = node10.isSetterDef();
        boolean boolean22 = node10.isRegExp();
        boolean boolean23 = node10.isName();
        boolean boolean24 = node10.isVoid();
        com.google.javascript.rhino.Node node25 = node10.cloneNode();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node3.isFunction();
        boolean boolean28 = node3.isVoid();
        boolean boolean29 = node3.isAssign();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int34 = node33.getType();
        com.google.javascript.rhino.Node node35 = node33.cloneNode();
        boolean boolean36 = node33.isRegExp();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str38 = jSDocInfo37.getVersion();
        boolean boolean39 = jSDocInfo37.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet40 = jSDocInfo37.getParameterNames();
        jSDocInfo37.addSuppression("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList43 = jSDocInfo37.getExtendedInterfaces();
        boolean boolean44 = jSDocInfo37.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo37.getModifies();
        java.lang.Object[] objArray46 = strSet45.toArray();
        java.util.HashSet[] hashSetArray48 = new java.util.HashSet[0];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[] strSetArray49 = (java.util.HashSet<java.lang.String>[]) hashSetArray48;
        java.util.HashSet<java.lang.String>[] strSetArray50 = strSet45.toArray(strSetArray49);
        node33.setDirectives(strSet45);
        node3.setDirectives(strSet45);
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str54 = jSDocInfo53.getVersion();
        boolean boolean55 = jSDocInfo53.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet56 = jSDocInfo53.getParameterNames();
        jSDocInfo53.addSuppression("");
        com.google.common.collect.ImmutableList<java.lang.String> strList59 = jSDocInfo53.getTemplateTypeNames();
        boolean boolean60 = jSDocInfo53.isNoAlias();
        boolean boolean61 = jSDocInfo53.isHidden();
        com.google.javascript.rhino.Node node62 = jSDocInfo53.getAssociatedNode();
        boolean boolean63 = jSDocInfo53.isConstant();
        int int64 = jSDocInfo53.getExtendedInterfacesCount();
        com.google.javascript.rhino.Node node65 = jSDocInfo53.getAssociatedNode();
        boolean boolean66 = strSet45.contains((java.lang.Object) jSDocInfo53);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression67 = jSDocInfo53.getThisType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 40 + "'", int34 == 40);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(jSTypeExpressionList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(hashSetArray48);
        org.junit.Assert.assertNotNull(strSetArray49);
        org.junit.Assert.assertNotNull(strSetArray50);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(jSTypeExpression67);
    }

    @Test
    public void test21897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21897");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str2 = jSDocInfo1.getVersion();
        boolean boolean3 = jSDocInfo1.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo1.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo1.getImplementedInterfaces();
        java.lang.String str6 = jSDocInfo1.toString();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean11 = node10.isThrow();
        java.lang.String str15 = node10.toString(true, false, true);
        java.lang.String str16 = node10.getQualifiedName();
        boolean boolean17 = node10.isCatch();
        boolean boolean18 = node10.isOr();
        jSDocInfo1.setAssociatedNode(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (byte) 10, "Named type with empty name component");
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        boolean boolean49 = node38.hasChild(node48);
        int int50 = node38.getCharno();
        com.google.javascript.rhino.Node node51 = node28.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node58 = node56.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) -1, node56, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node68 = node66.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) -1, node66, (int) (byte) 1, (int) '#');
        boolean boolean72 = node61.hasChild(node71);
        boolean boolean73 = node71.isVar();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((-1), node38, node71);
        com.google.javascript.rhino.Node node75 = node74.getParent();
        boolean boolean76 = node74.isSetterDef();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((-1), node74);
        boolean boolean78 = node22.isEquivalentTo(node77);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(46, node10, node22);
        node22.setSourceFileForTesting("Not declared as a type name");
        boolean boolean82 = node22.isBlock();
        boolean boolean83 = node22.isFor();
        boolean boolean84 = node22.isScript();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING  0" + "'", str15, "STRING  0");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test21898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21898");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        boolean boolean34 = node28.isScript();
        com.google.javascript.rhino.InputId inputId35 = node28.getInputId();
        com.google.javascript.rhino.Node node36 = node11.useSourceInfoFrom(node28);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean41 = node40.isThrow();
        java.lang.String str45 = node40.toString(true, false, true);
        node40.setIsSyntheticBlock(true);
        boolean boolean48 = node40.isTry();
        boolean boolean49 = node11.hasChild(node40);
        boolean boolean50 = node40.isDebugger();
        boolean boolean51 = node40.isSwitch();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder52 = node40.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node53 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = node40.isEquivalentTo(node53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(inputId35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "STRING  0" + "'", str45, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test21899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21899");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesThis();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test21900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21900");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isName();
        boolean boolean18 = node4.isVoid();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        com.google.javascript.rhino.Node node30 = node4.useSourceInfoIfMissingFrom(node23);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        int int41 = node40.getType();
        boolean boolean42 = node40.isFor();
        node23.addChildToFront(node40);
        node23.setString("Not declared as a type name");
        com.google.javascript.rhino.Node node46 = node23.detachFromParent();
        boolean boolean47 = node23.isAnd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test21901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21901");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        com.google.javascript.rhino.Node node16 = node4.getLastSibling();
        com.google.javascript.rhino.Node node17 = node4.getLastSibling();
        com.google.javascript.rhino.JSDocInfo jSDocInfo18 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str19 = jSDocInfo18.getVersion();
        java.lang.String str20 = jSDocInfo18.getFileOverview();
        jSDocInfo18.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo18.getBaseType();
        boolean boolean24 = jSDocInfo18.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo18.getSuppressions();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility26 = null;
        jSDocInfo18.setVisibility(visibility26);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression28 = jSDocInfo18.getEnumParameterType();
        boolean boolean30 = jSDocInfo18.hasParameterType("STRING  0 [jsdoc_info: JSDocInfo]");
        boolean boolean31 = jSDocInfo18.isNoShadow();
        node17.setJSDocInfo(jSDocInfo18);
        int int33 = jSDocInfo18.getExtendedInterfacesCount();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(jSTypeExpression28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test21902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21902");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.hasModifies();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        java.lang.String str9 = jSDocInfo0.getSourceName();
        jSDocInfo0.addSuppression("Named type with empty name component");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getModifies();
        java.lang.String str13 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test21903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21903");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        boolean boolean2 = typePosition0.hasBrackets();
        int int3 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node4 = typePosition0.getItem();
        int int5 = typePosition0.getPositionOnStartLine();
        int int6 = typePosition0.getStartLine();
        int int7 = typePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test21904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21904");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean6 = jSDocInfo0.isConstructor();
        boolean boolean7 = jSDocInfo0.isNoTypeCheck();
        java.lang.String str8 = jSDocInfo0.getDescription();
        java.lang.String str9 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getBaseType();
        boolean boolean11 = jSDocInfo0.isIdGenerator();
        java.lang.String str12 = jSDocInfo0.getLicense();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection13 = jSDocInfo0.getTypeNodes();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection14 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(nodeCollection13);
        org.junit.Assert.assertNotNull(nodeCollection14);
    }

    @Test
    public void test21905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21905");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        boolean boolean51 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node52 = node14.removeFirstChild();
        node52.setVarArgs(true);
        node52.detachChildren();
        java.util.Set<java.lang.String> strSet56 = node52.getDirectives();
        boolean boolean57 = node52.isAnd();
        java.lang.String str58 = node52.getString();
        boolean boolean59 = node52.isLabel();
        node52.setQuotedString();
        boolean boolean61 = node52.isQuotedString();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test21906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21906");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        java.util.Set<java.lang.String> strSet6 = node3.getDirectives();
        node3.setCharno((int) (short) -1);
        boolean boolean9 = node3.hasMoreThanOneChild();
        boolean boolean10 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test21907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21907");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str5 = jSDocInfo4.getVersion();
        boolean boolean6 = jSDocInfo4.hasEnumParameterType();
        boolean boolean7 = jSDocInfo4.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo4.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo4.setVisibility(visibility9);
        jSDocInfo0.setVisibility(visibility9);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getParameterType("OR [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + visibility9 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility9.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(jSTypeExpression13);
    }

    @Test
    public void test21908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21908");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(51);
        java.lang.String str18 = node4.checkTreeEquals(node17);
        boolean boolean19 = node4.isOr();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node23.setCharno(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        node23.setStaticSourceFile(staticSourceFile26);
        boolean boolean28 = node23.isBreak();
        boolean boolean29 = node23.isOptionalArg();
        boolean boolean30 = node23.isNew();
        java.lang.String str31 = node4.checkTreeEquals(node23);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node66 = node64.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) -1, node64, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node76 = node74.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) -1, node74, (int) (byte) 1, (int) '#');
        boolean boolean80 = node69.hasChild(node79);
        boolean boolean81 = node79.isVar();
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((-1), node46, node79);
        boolean boolean83 = node46.isAssignAdd();
        com.google.javascript.rhino.Node node84 = node46.removeFirstChild();
        com.google.javascript.rhino.Node node85 = node4.useSourceInfoFrom(node84);
        boolean boolean86 = node4.isObjectLit();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str18, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test21909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21909");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isCase();
        boolean boolean7 = node3.isIn();
        int int8 = node3.getCharno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test21910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21910");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isExprResult();
        boolean boolean12 = node4.isTrue();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isDo();
        boolean boolean24 = node17.isDefaultCase();
        node17.setQuotedString();
        boolean boolean26 = node17.isDec();
        boolean boolean27 = node17.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node17.siblings();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(51);
        java.lang.String str31 = node17.checkTreeEquals(node30);
        boolean boolean32 = node17.isOr();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node36.setCharno(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = null;
        node36.setStaticSourceFile(staticSourceFile39);
        boolean boolean41 = node36.isBreak();
        boolean boolean42 = node36.isOptionalArg();
        boolean boolean43 = node36.isNew();
        java.lang.String str44 = node17.checkTreeEquals(node36);
        int int45 = node4.getIndexOfChild(node36);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int50 = node49.getType();
        boolean boolean51 = node49.isArrayLit();
        node49.addSuppression("true");
        boolean boolean54 = node49.isReturn();
        boolean boolean55 = node4.isEquivalentToTyped(node49);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        boolean boolean60 = node59.isLabelName();
        com.google.javascript.rhino.Node node61 = node59.getLastChild();
        boolean boolean62 = node59.isWhile();
        java.lang.Object obj64 = node59.getProp(3);
        com.google.javascript.rhino.Node node65 = node49.copyInformationFromForTree(node59);
        node49.setType(43);
        boolean boolean68 = node49.isExprResult();
        boolean boolean69 = node49.isOr();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str31, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 40 + "'", int50 == 40);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test21911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21911");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isConstant();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        boolean boolean7 = jSDocInfo0.isHidden();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        com.google.common.collect.ImmutableList<java.lang.String> strList9 = jSDocInfo0.getTemplateTypeNames();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test21912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21912");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        int int3 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node7.setCharno(1);
        boolean boolean10 = node7.isRegExp();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node15.isDo();
        boolean boolean22 = node15.isDefaultCase();
        node15.setQuotedString();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoFromForTree(node15);
        node15.putIntProp((int) (byte) 100, (int) (byte) 0);
        node15.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean31 = node15.isInc();
        boolean boolean32 = node15.isDefaultCase();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str34 = jSDocInfo33.getVersion();
        boolean boolean35 = jSDocInfo33.hasEnumParameterType();
        java.lang.String str37 = jSDocInfo33.getDescriptionForParameter("STRING  0\n");
        java.lang.String str38 = jSDocInfo33.getDescription();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node59 = node57.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) -1, node57, (int) (byte) 1, (int) '#');
        boolean boolean63 = node52.hasChild(node62);
        int int64 = node52.getCharno();
        com.google.javascript.rhino.Node node65 = node42.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node70 = node42.srcref(node69);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean75 = node74.isFromExterns();
        boolean boolean76 = node70.hasChild(node74);
        jSDocInfo33.setAssociatedNode(node70);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = null;
        node70.setStaticSourceFile(staticSourceFile78);
        com.google.javascript.rhino.Node node80 = node15.useSourceInfoFromForTree(node70);
        int int82 = node15.getIntProp(5);
        typePosition0.setItem(node15);
        boolean boolean84 = typePosition0.hasBrackets();
        int int85 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test21913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21913");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getEnumParameterType();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        java.lang.String str8 = jSDocInfo0.getMeaning();
        boolean boolean9 = jSDocInfo0.isNoCompile();
        java.lang.String str11 = jSDocInfo0.getDescriptionForParameter("GETELEM OR 1 0");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test21914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21914");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescriptionForParameter("STRING  0\n");
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        boolean boolean8 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test21915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21915");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        int int4 = node3.getSourcePosition();
        int int5 = node3.getType();
        boolean boolean6 = node3.isLabel();
        node3.setWasEmptyNode(false);
        java.lang.String str9 = node3.getQualifiedName();
        node3.setQuotedString();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        node14.removeProp(47);
        boolean boolean17 = node14.isFromExterns();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double22 = node21.getDouble();
        boolean boolean23 = node21.isAdd();
        com.google.javascript.rhino.Node node24 = node21.cloneNode();
        boolean boolean25 = node24.isNE();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        boolean boolean51 = node40.hasChild(node50);
        int int52 = node40.getCharno();
        com.google.javascript.rhino.Node node53 = node30.useSourceInfoIfMissingFrom(node40);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node58 = node30.srcref(node57);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean63 = node62.isFromExterns();
        boolean boolean64 = node58.hasChild(node62);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(52, node62);
        node24.addChildToBack(node65);
        java.lang.String str67 = node14.checkTreeEquals(node24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str69 = jSDocInfo68.getVersion();
        boolean boolean70 = jSDocInfo68.hasEnumParameterType();
        boolean boolean71 = jSDocInfo68.isNoAlias();
        java.lang.String str73 = jSDocInfo68.getDescriptionForParameter("JSDocInfo");
        boolean boolean74 = jSDocInfo68.hasEnumParameterType();
        boolean boolean75 = jSDocInfo68.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression76 = jSDocInfo68.getThisType();
        boolean boolean77 = jSDocInfo68.isJavaDispatch();
        node24.setJSDocInfo(jSDocInfo68);
        boolean boolean79 = node24.isTrue();
        boolean boolean81 = node24.getBooleanProp((int) (short) 100);
        boolean boolean82 = node24.isSyntheticBlock();
        boolean boolean83 = node3.isEquivalentTo(node24);
        boolean boolean84 = node3.isDelProp();
        java.lang.Object obj86 = node3.getProp(1044480);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 40 + "'", int5 == 40);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4095.0d + "'", double22 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n" + "'", str67, "Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSTypeExpression76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test21916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21916");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getEnumParameterType();
        boolean boolean8 = jSDocInfo0.hasModifies();
        boolean boolean9 = jSDocInfo0.hasType();
        boolean boolean10 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str11 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        boolean boolean36 = node25.hasChild(node35);
        int int37 = node25.getCharno();
        com.google.javascript.rhino.Node node38 = node15.useSourceInfoIfMissingFrom(node25);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node43 = node15.srcref(node42);
        jSDocInfo0.setAssociatedNode(node43);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression45 = jSDocInfo0.getType();
        boolean boolean46 = jSDocInfo0.hasThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList47 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(jSTypeExpression45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList47);
    }

    @Test
    public void test21917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21917");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.InputId inputId11 = node4.getInputId();
        java.lang.Object obj13 = node4.getProp(42);
        node4.setSourceEncodedPositionForTree(48);
        boolean boolean16 = node4.hasOneChild();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(8, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node24.isDo();
        boolean boolean31 = node24.isDefaultCase();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node42 = node40.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node52 = node50.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) -1, node50, (int) (byte) 1, (int) '#');
        boolean boolean56 = node45.hasChild(node55);
        int int57 = node45.getCharno();
        com.google.javascript.rhino.Node node58 = node35.useSourceInfoIfMissingFrom(node45);
        int int59 = node35.getSourcePosition();
        java.lang.String str60 = node35.toString();
        int int61 = node24.getIndexOfChild(node35);
        int int62 = node19.getIndexOfChild(node35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str64 = jSDocInfo63.getVersion();
        boolean boolean65 = jSDocInfo63.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet66 = jSDocInfo63.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList67 = jSDocInfo63.getImplementedInterfaces();
        java.lang.String str68 = jSDocInfo63.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = jSDocInfo63.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo63.getTypedefType();
        node19.setJSDocInfo(jSDocInfo63);
        boolean boolean73 = node19.isParamList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str75 = jSDocInfo74.getVersion();
        boolean boolean76 = jSDocInfo74.hasEnumParameterType();
        java.lang.String str78 = jSDocInfo74.getDescriptionForParameter("STRING  0\n");
        java.lang.String str79 = jSDocInfo74.getDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList80 = jSDocInfo74.getExtendedInterfaces();
        boolean boolean81 = jSDocInfo74.hasThisType();
        boolean boolean82 = jSDocInfo74.hasTypedefType();
        node19.setJSDocInfo(jSDocInfo74);
        boolean boolean84 = jSDocInfo74.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression85 = jSDocInfo74.getThisType();
        java.lang.String str86 = jSDocInfo74.getReturnDescription();
        boolean boolean87 = jSDocInfo74.hasFileOverview();
        java.util.Set<java.lang.String> strSet88 = jSDocInfo74.getParameterNames();
        node4.setDirectives(strSet88);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4131 + "'", int59 == 4131);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "OR 1" + "'", str60, "OR 1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(jSTypeExpressionList67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "JSDocInfo" + "'", str68, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression70);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(jSTypeExpressionList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSTypeExpression85);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strSet88);
    }

    @Test
    public void test21918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21918");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        int int6 = jSDocInfo0.getExtendedInterfacesCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean8 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
    }

    @Test
    public void test21919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21919");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.InputId inputId11 = node4.getInputId();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        boolean boolean18 = node15.isRegExp();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        boolean boolean30 = node23.isDefaultCase();
        node23.setQuotedString();
        com.google.javascript.rhino.Node node32 = node15.useSourceInfoFromForTree(node23);
        node23.putIntProp((int) (byte) 100, (int) (byte) 0);
        node23.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        node23.detachChildren();
        com.google.javascript.rhino.Node node40 = node4.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean45 = node44.isThrow();
        java.lang.String str49 = node44.toString(true, false, true);
        node44.setIsSyntheticBlock(true);
        boolean boolean52 = node44.isTry();
        java.lang.String str53 = node44.toStringTree();
        com.google.javascript.rhino.Node node54 = node4.copyInformationFrom(node44);
        boolean boolean55 = node44.isGetterDef();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable56 = node44.getAncestors();
        boolean boolean57 = node44.isObjectLit();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "STRING  0" + "'", str49, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "STRING  0 [synthetic: 1]\n" + "'", str53, "STRING  0 [synthetic: 1]\n");
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(ancestorIterable56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test21920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21920");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasThisType();
        java.lang.String str2 = jSDocInfo0.getReturnDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(jSTypeExpression4);
    }

    @Test
    public void test21921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21921");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(51);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node8 = node6.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) -1, node6, (int) (byte) 1, (int) '#');
        boolean boolean12 = node6.isDo();
        boolean boolean13 = node6.isDefaultCase();
        node6.setQuotedString();
        com.google.javascript.rhino.Node node15 = node1.copyInformationFrom(node6);
        node6.setCharno(35);
        node6.setCharno(29);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node15);
    }

    @Test
    public void test21922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21922");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isName();
        boolean boolean18 = node4.isVoid();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        com.google.javascript.rhino.Node node30 = node4.useSourceInfoIfMissingFrom(node23);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        int int41 = node40.getType();
        boolean boolean42 = node40.isFor();
        node23.addChildToFront(node40);
        boolean boolean44 = node23.hasChildren();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node54.hasChild(node64);
        boolean boolean66 = node64.isVar();
        boolean boolean67 = node64.isBlock();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder68 = node64.new FileLevelJsDocBuilder();
        boolean boolean69 = node64.isCall();
        boolean boolean70 = node23.isEquivalentToTyped(node64);
        boolean boolean71 = node23.isDefaultCase();
        int int72 = node23.getCharno();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
    }

    @Test
    public void test21923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21923");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        java.util.Spliterator<java.lang.String> strSpliterator11 = strSet3.spliterator();
        java.lang.Object[] objArray12 = strSet3.toArray();
        java.util.stream.Stream<java.lang.String> strStream13 = strSet3.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet3.parallelStream();
        strSet3.clear();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strSpliterator11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[STRING  0, hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[STRING  0, hi!, ]");
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(strStream14);
    }

    @Test
    public void test21924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21924");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isConstant();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        boolean boolean7 = jSDocInfo0.isHidden();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        int int9 = strSet8.size();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test21925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21925");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("(REGEXP \n)");
        com.google.javascript.rhino.Node node3 = null;
        boolean boolean4 = node2.hasChild(node3);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((-1), node2, 45, 8);
        boolean boolean8 = node7.isString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test21926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21926");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        boolean boolean28 = node14.isAssignAdd();
        boolean boolean29 = node14.isUnscopedQualifiedName();
        int int30 = node14.getLineno();
        com.google.javascript.rhino.Node node32 = node14.getAncestor(4);
        boolean boolean33 = node14.isInstanceOf();
        boolean boolean34 = node14.isVar();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        boolean boolean59 = node48.hasChild(node58);
        int int60 = node48.getCharno();
        com.google.javascript.rhino.Node node61 = node38.useSourceInfoIfMissingFrom(node48);
        int int62 = node38.getSourcePosition();
        boolean boolean63 = node38.isThrow();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(15, node14, node38);
        com.google.javascript.rhino.Node node65 = node14.removeFirstChild();
        boolean boolean66 = node65.isFunction();
        boolean boolean67 = node65.isName();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4131 + "'", int62 == 4131);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test21927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21927");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(6);
        boolean boolean2 = node1.isNE();
        // The following exception was thrown during execution in test generation
        try {
            node1.setDouble((double) 29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 6");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test21928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21928");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isCatch();
        boolean boolean11 = node3.isInstanceOf();
        boolean boolean12 = node3.isContinue();
        boolean boolean13 = node3.isTrue();
        com.google.javascript.rhino.jstype.JSType jSType14 = node3.getJSType();
        java.util.Set<java.lang.String> strSet15 = node3.getDirectives();
        java.lang.Object obj17 = node3.getProp((int) (byte) 0);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSType14);
        org.junit.Assert.assertNull(strSet15);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test21929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21929");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility4);
        java.lang.String str6 = jSDocInfo0.toString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getThrownTypes();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean9 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + visibility4 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility4.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test21930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21930");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node15.hasChild(node25);
        int int27 = node15.getCharno();
        com.google.javascript.rhino.Node node28 = node5.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        boolean boolean49 = node38.hasChild(node48);
        boolean boolean50 = node48.isVar();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((-1), node15, node48);
        com.google.javascript.rhino.Node node52 = node51.getParent();
        boolean boolean53 = node51.isSetterDef();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(54, node51, 32, 32);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable57 = node51.children();
        node51.setWasEmptyNode(false);
        boolean boolean60 = node51.isDebugger();
        boolean boolean61 = node51.isGetProp();
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(nodeIterable57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test21931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21931");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        boolean boolean19 = node15.isHook();
        node11.addChildToFront(node15);
        boolean boolean21 = node15.isGetElem();
        boolean boolean22 = node15.isRegExp();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node15.siblings();
        boolean boolean24 = node15.isContinue();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean29 = node28.isThrow();
        java.lang.String str33 = node28.toString(true, false, true);
        node28.setIsSyntheticBlock(true);
        int int36 = node28.getLength();
        boolean boolean37 = node28.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node38 = node15.srcref(node28);
        com.google.javascript.rhino.Node node39 = node28.cloneTree();
        node39.putBooleanProp((int) (byte) 0, false);
        java.lang.String str43 = node39.getSourceFileName();
        java.lang.Class<?> wildcardClass44 = node39.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "STRING  0" + "'", str33, "STRING  0");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test21932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21932");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isScript();
        com.google.javascript.rhino.Node node24 = node17.detachFromParent();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node28.setCharno(1);
        java.util.Set<java.lang.String> strSet31 = node28.getDirectives();
        boolean boolean32 = node28.isHook();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node64 = node36.srcref(node63);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node12, node24, node28, node36);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node72 = node70.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) -1, node70, (int) (byte) 1, (int) '#');
        int int76 = node75.getType();
        boolean boolean77 = node28.isEquivalentTo(node75);
        boolean boolean78 = node75.isDo();
        com.google.javascript.rhino.Node node79 = node75.removeChildren();
        boolean boolean81 = node75.getBooleanProp((int) (byte) 10);
        boolean boolean82 = node75.isNumber();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder83 = node75.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder83.append("STRING  0 [source_file: Named type with empty name component]");
        fileLevelJsDocBuilder83.append("(REGEXP \n)");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test21933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21933");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isConstant();
        boolean boolean6 = jSDocInfo0.isDefine();
        boolean boolean7 = jSDocInfo0.isNoTypeCheck();
        jSDocInfo0.setLicense("(STRING  0 [source_file: Named type with empty name component])");
        jSDocInfo0.setLicense("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nOR 0\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: OR 0\n)");
        boolean boolean12 = jSDocInfo0.containsDeclaration();
        java.lang.String str13 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test21934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21934");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(47, "NUMBER 4095.0 100 [source_file: ERROR 1\n    STRING  0\n    STRING  0\n]\n", 41, 4131);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        node6.setSourceEncodedPosition(16);
        node6.putBooleanProp((int) (short) 10, false);
        boolean boolean12 = node6.isAnd();
        boolean boolean13 = node6.hasOneChild();
        boolean boolean14 = node6.isTypeOf();
        int int15 = node4.getIndexOfChild(node6);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int17 = typePosition16.getPositionOnEndLine();
        boolean boolean18 = typePosition16.hasBrackets();
        com.google.javascript.rhino.Node node19 = typePosition16.getItem();
        int int20 = typePosition16.getPositionOnStartLine();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        boolean boolean42 = node31.hasChild(node41);
        boolean boolean43 = node41.isVar();
        boolean boolean44 = node41.isOnlyModifiesThisCall();
        node41.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean51 = node50.isThrow();
        java.lang.String str55 = node50.toString(true, false, true);
        java.lang.String str56 = node50.getQualifiedName();
        boolean boolean57 = node50.isIn();
        com.google.javascript.rhino.Node node58 = node50.cloneTree();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node62.setCharno(1);
        java.util.Set<java.lang.String> strSet65 = node62.getDirectives();
        boolean boolean66 = node62.isHook();
        node58.addChildToFront(node62);
        com.google.javascript.rhino.Node node68 = node62.getLastSibling();
        java.lang.Object obj70 = node68.getProp(2);
        com.google.javascript.rhino.Node node71 = node68.detachFromParent();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) 1, node41, node68);
        typePosition16.setItem(node68);
        boolean boolean74 = node68.isVar();
        boolean boolean75 = node68.hasMoreThanOneChild();
        node68.setSourceFileForTesting("(NUMBER 40.0 51)");
        boolean boolean78 = node4.isEquivalentToTyped(node68);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "STRING  0" + "'", str55, "STRING  0");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(strSet65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test21935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21935");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        node3.setIsSyntheticBlock(true);
        int int11 = node3.getLength();
        boolean boolean12 = node3.isNumber();
        node3.setSourceEncodedPositionForTree(40);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable15 = node3.getAncestors();
        boolean boolean16 = node3.isNE();
        boolean boolean17 = node3.isWith();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(ancestorIterable15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test21936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21936");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        boolean boolean28 = node17.hasChild(node27);
        int int29 = node17.getCharno();
        com.google.javascript.rhino.Node node30 = node7.useSourceInfoIfMissingFrom(node17);
        node30.setLength((int) ' ');
        node3.addChildrenToBack(node30);
        int int34 = node30.getLength();
        java.lang.String str35 = node30.toStringTree();
        int int36 = node30.getSideEffectFlags();
        boolean boolean37 = node30.isWith();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node42.setCharno(1);
        boolean boolean45 = node42.isRegExp();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node52 = node50.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) -1, node50, (int) (byte) 1, (int) '#');
        boolean boolean56 = node50.isDo();
        boolean boolean57 = node50.isDefaultCase();
        node50.setQuotedString();
        com.google.javascript.rhino.Node node59 = node42.useSourceInfoFromForTree(node50);
        boolean boolean60 = node42.isInc();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(30, node42);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double66 = node65.getDouble();
        boolean boolean67 = node65.isAdd();
        com.google.javascript.rhino.Node node68 = node65.cloneNode();
        com.google.javascript.rhino.jstype.JSType jSType69 = node68.getJSType();
        java.lang.String str70 = node68.toStringTree();
        node42.addChildToFront(node68);
        boolean boolean72 = node42.isTypeOf();
        com.google.javascript.rhino.Node node73 = node30.srcrefTree(node42);
        boolean boolean74 = node30.isThis();
        boolean boolean75 = node30.isAssign();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 32 + "'", int34 == 32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR 1 [length: 32]\n" + "'", str35, "OR 1 [length: 32]\n");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 4095.0d + "'", double66 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "NUMBER 4095.0 100\n" + "'", str70, "NUMBER 4095.0 100\n");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test21937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21937");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        java.lang.String str9 = jSDocInfo0.getDescription();
        boolean boolean10 = jSDocInfo0.hasReturnType();
        boolean boolean11 = jSDocInfo0.isHidden();
        boolean boolean12 = jSDocInfo0.isHidden();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getParameterNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test21938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21938");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str12 = jSDocInfo11.getVersion();
        java.lang.String str13 = jSDocInfo11.getFileOverview();
        boolean boolean14 = jSDocInfo11.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet15 = jSDocInfo11.getParameterNames();
        boolean boolean16 = strSet3.retainAll((java.util.Collection<java.lang.String>) strSet15);
        java.lang.String[] strArray19 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        boolean boolean27 = strSet20.addAll((java.util.Collection<java.lang.String>) strList25);
        boolean boolean28 = strSet3.containsAll((java.util.Collection<java.lang.String>) strSet20);
        java.lang.Object[] objArray29 = strSet20.toArray();
        boolean boolean31 = strSet20.contains((java.lang.Object) 32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo32 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str33 = jSDocInfo32.getVersion();
        java.lang.String str34 = jSDocInfo32.getFileOverview();
        boolean boolean35 = jSDocInfo32.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet36 = jSDocInfo32.getParameterNames();
        boolean boolean37 = strSet20.containsAll((java.util.Collection<java.lang.String>) strSet36);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node42.isDo();
        boolean boolean49 = node42.isDefaultCase();
        node42.setQuotedString();
        boolean boolean51 = node42.isDec();
        boolean boolean52 = node42.isLabel();
        boolean boolean53 = node42.wasEmptyNode();
        boolean boolean54 = strSet20.contains((java.lang.Object) node42);
        int int55 = strSet20.size();
        java.util.stream.Stream<java.lang.String> strStream56 = strSet20.parallelStream();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition57 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int58 = namePosition57.getEndLine();
        int int59 = namePosition57.getPositionOnEndLine();
        com.google.javascript.rhino.Node node60 = null;
        namePosition57.setItem(node60);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node65.setCharno(1);
        java.util.Set<java.lang.String> strSet68 = node65.getDirectives();
        namePosition57.setItem(node65);
        int int70 = namePosition57.getPositionOnEndLine();
        boolean boolean71 = strSet20.contains((java.lang.Object) namePosition57);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(53, "OR 51");
        boolean boolean75 = node74.isLabel();
        java.util.Set<java.lang.String> strSet76 = node74.getDirectives();
        java.lang.Object obj78 = node74.getProp(44);
        node74.setSourceEncodedPosition(8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str82 = jSDocInfo81.getVersion();
        boolean boolean83 = jSDocInfo81.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet84 = jSDocInfo81.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList85 = jSDocInfo81.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList86 = jSDocInfo81.getThrownTypes();
        java.lang.String str87 = jSDocInfo81.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str89 = jSDocInfo88.getVersion();
        boolean boolean90 = jSDocInfo88.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet91 = jSDocInfo88.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility92 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo88.setVisibility(visibility92);
        jSDocInfo81.setVisibility(visibility92);
        boolean boolean95 = jSDocInfo81.isNoSideEffects();
        java.util.Set<java.lang.String> strSet96 = jSDocInfo81.getSuppressions();
        node74.setDirectives(strSet96);
        int int98 = strSet96.size();
        boolean boolean99 = strSet20.retainAll((java.util.Collection<java.lang.String>) strSet96);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[STRING  0, hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[STRING  0, hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(strStream56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(strSet68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(strSet76);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNotNull(jSTypeExpressionList85);
        org.junit.Assert.assertNotNull(jSTypeExpressionList86);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertTrue("'" + visibility92 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility92.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(strSet96);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test21939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21939");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(45, 0, 48);
        java.lang.String str4 = node3.getSourceFileName();
        boolean boolean5 = node3.isOnlyModifiesThisCall();
        int int6 = node3.getLineno();
        boolean boolean7 = node3.isLabelName();
        boolean boolean9 = node3.getBooleanProp(43);
        int int10 = node3.getChildCount();
        node3.setSourceEncodedPosition(15);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test21940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21940");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = jSDocInfo0.getTypeNodes();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        jSDocInfo0.setLicense("Not declared as a type name");
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        boolean boolean12 = jSDocInfo0.isDeprecated();
        jSDocInfo0.setLicense("(NUMBER -1.0\n)");
        boolean boolean15 = jSDocInfo0.isHidden();
        java.lang.String str16 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test21941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21941");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(8, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node9 = node7.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1, node7, (int) (byte) 1, (int) '#');
        boolean boolean13 = node7.isDo();
        boolean boolean14 = node7.isDefaultCase();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node28.hasChild(node38);
        int int40 = node28.getCharno();
        com.google.javascript.rhino.Node node41 = node18.useSourceInfoIfMissingFrom(node28);
        int int42 = node18.getSourcePosition();
        java.lang.String str43 = node18.toString();
        int int44 = node7.getIndexOfChild(node18);
        int int45 = node2.getIndexOfChild(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str47 = jSDocInfo46.getVersion();
        boolean boolean48 = jSDocInfo46.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo46.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo46.getImplementedInterfaces();
        java.lang.String str51 = jSDocInfo46.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo46.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = jSDocInfo46.getTypedefType();
        node2.setJSDocInfo(jSDocInfo46);
        boolean boolean56 = node2.isParamList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str58 = jSDocInfo57.getVersion();
        boolean boolean59 = jSDocInfo57.hasEnumParameterType();
        java.lang.String str61 = jSDocInfo57.getDescriptionForParameter("STRING  0\n");
        java.lang.String str62 = jSDocInfo57.getDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList63 = jSDocInfo57.getExtendedInterfaces();
        boolean boolean64 = jSDocInfo57.hasThisType();
        boolean boolean65 = jSDocInfo57.hasTypedefType();
        node2.setJSDocInfo(jSDocInfo57);
        boolean boolean67 = jSDocInfo57.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = jSDocInfo57.getThisType();
        boolean boolean69 = jSDocInfo57.isNoCompile();
        boolean boolean70 = jSDocInfo57.hasFileOverview();
        int int71 = jSDocInfo57.getImplementedInterfaceCount();
        boolean boolean72 = jSDocInfo57.isConstructor();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4131 + "'", int42 == 4131);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR 1" + "'", str43, "OR 1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "JSDocInfo" + "'", str51, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertNull(jSTypeExpression54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(jSTypeExpressionList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSTypeExpression68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test21942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21942");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.hasThisType();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        boolean boolean11 = jSDocInfo0.shouldPreserveTry();
        boolean boolean12 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getThisType();
        boolean boolean14 = jSDocInfo0.isHidden();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test21943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21943");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 409601, 46, 4095);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test21944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21944");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(48);
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setReturnsTainted();
        int int5 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32 + "'", int5 == 32);
    }

    @Test
    public void test21945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21945");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (byte) -1);
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(8, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        boolean boolean15 = node9.isDo();
        boolean boolean16 = node9.isDefaultCase();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node27 = node25.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node25, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        boolean boolean41 = node30.hasChild(node40);
        int int42 = node30.getCharno();
        com.google.javascript.rhino.Node node43 = node20.useSourceInfoIfMissingFrom(node30);
        int int44 = node20.getSourcePosition();
        java.lang.String str45 = node20.toString();
        int int46 = node9.getIndexOfChild(node20);
        int int47 = node4.getIndexOfChild(node20);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(51);
        node4.addChildrenToFront(node49);
        com.google.javascript.rhino.InputId inputId51 = node49.getInputId();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean56 = node55.isThrow();
        java.lang.String str60 = node55.toString(true, false, true);
        java.lang.String str61 = node55.getQualifiedName();
        boolean boolean62 = node55.isIn();
        com.google.javascript.rhino.Node node63 = node55.cloneTree();
        boolean boolean64 = node63.isUnscopedQualifiedName();
        boolean boolean65 = node63.isGetElem();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        boolean boolean70 = node69.isAnd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str72 = jSDocInfo71.getVersion();
        java.lang.String str73 = jSDocInfo71.getFileOverview();
        jSDocInfo71.addSuppression("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList76 = jSDocInfo71.getExtendedInterfaces();
        boolean boolean77 = jSDocInfo71.isConstructor();
        node69.setJSDocInfo(jSDocInfo71);
        boolean boolean79 = node69.isIn();
        int int80 = node69.getLineno();
        com.google.javascript.rhino.Node node81 = node63.clonePropsFrom(node69);
        java.lang.String str82 = node81.getSourceFileName();
        com.google.javascript.rhino.Node node83 = node49.copyInformationFrom(node81);
        boolean boolean84 = node83.isHook();
        com.google.javascript.rhino.Node node85 = node1.useSourceInfoIfMissingFromForTree(node83);
        boolean boolean86 = node1.isWhile();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4131 + "'", int44 == 4131);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "OR 1" + "'", str45, "OR 1");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(inputId51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "STRING  0" + "'", str60, "STRING  0");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(jSTypeExpressionList76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test21946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21946");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 10.0f, 0, (int) (byte) -1);
        boolean boolean4 = node3.isCall();
        com.google.javascript.rhino.Node node5 = node3.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = node5.isVarArgs();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test21947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21947");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        java.lang.String str14 = node8.getQualifiedName();
        boolean boolean15 = node8.isIn();
        com.google.javascript.rhino.Node node16 = node8.cloneTree();
        boolean boolean17 = node16.isRegExp();
        boolean boolean18 = node16.isDebugger();
        node3.addChildToBack(node16);
        boolean boolean20 = node3.isVar();
        int int21 = node3.getChildCount();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        boolean boolean42 = node31.hasChild(node41);
        boolean boolean43 = node31.isReturn();
        boolean boolean44 = node31.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str46 = jSDocInfo45.getVersion();
        boolean boolean47 = jSDocInfo45.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet48 = jSDocInfo45.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList49 = jSDocInfo45.getImplementedInterfaces();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean54 = node53.isThrow();
        java.lang.String str58 = node53.toString(true, false, true);
        jSDocInfo45.setAssociatedNode(node53);
        com.google.javascript.rhino.Node node60 = node53.removeFirstChild();
        boolean boolean61 = node53.isNumber();
        node31.addChildToBack(node53);
        boolean boolean63 = node53.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean68 = node67.isThrow();
        java.lang.String str72 = node67.toString(true, false, true);
        java.lang.String str73 = node67.getQualifiedName();
        boolean boolean74 = node67.isIn();
        com.google.javascript.rhino.Node node75 = node67.cloneTree();
        boolean boolean76 = node75.isRegExp();
        int int77 = node75.getSourcePosition();
        node53.addChildrenToBack(node75);
        node75.setLineno((int) (byte) -1);
        com.google.javascript.rhino.Node node81 = node3.useSourceInfoFrom(node75);
        boolean boolean82 = node81.hasOneChild();
        boolean boolean83 = node81.isAssignAdd();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(jSTypeExpressionList49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "STRING  0" + "'", str58, "STRING  0");
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "STRING  0" + "'", str72, "STRING  0");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test21948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21948");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setThrows();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesGlobalState();
        int int5 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setAllFlags();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 24 + "'", int5 == 24);
    }

    @Test
    public void test21949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21949");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(16, "JSDocInfo");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test21950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21950");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        node8.setQuotedString();
        com.google.javascript.rhino.Node node16 = node3.srcrefTree(node8);
        boolean boolean17 = node16.isNull();
        boolean boolean18 = node16.isDelProp();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile19 = node16.getStaticSourceFile();
        boolean boolean20 = node16.isTypeOf();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(staticSourceFile19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test21951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21951");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = booleanLiteralSet2.intersection(booleanLiteralSet3);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = booleanLiteralSet1.intersection(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = booleanLiteralSet0.union(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = booleanLiteralSet7.intersection(booleanLiteralSet8);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = booleanLiteralSet11.intersection(booleanLiteralSet12);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet10.intersection(booleanLiteralSet11);
        boolean boolean16 = booleanLiteralSet14.contains(false);
        boolean boolean18 = booleanLiteralSet14.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = booleanLiteralSet8.intersection(booleanLiteralSet14);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet0.intersection(booleanLiteralSet14);
        boolean boolean22 = booleanLiteralSet20.contains(true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test21952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21952");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        java.lang.String str10 = node4.toStringTree();
        boolean boolean11 = node4.isDebugger();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString((int) (byte) 10, "Named type with empty name component");
        boolean boolean15 = node14.isObjectLit();
        boolean boolean16 = node14.hasMoreThanOneChild();
        java.lang.String str17 = node14.getQualifiedName();
        boolean boolean19 = node14.getBooleanProp((int) 'a');
        com.google.javascript.rhino.Node node20 = node4.srcref(node14);
        java.lang.String str21 = node14.getString();
        node14.setLineno(48);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "STRING  0\n" + "'", str10, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Named type with empty name component" + "'", str21, "Named type with empty name component");
    }

    @Test
    public void test21953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21953");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        java.lang.String str14 = node8.getQualifiedName();
        boolean boolean15 = node8.isIn();
        com.google.javascript.rhino.Node node16 = node8.cloneTree();
        boolean boolean17 = node16.isRegExp();
        boolean boolean18 = node16.isDebugger();
        node3.addChildToBack(node16);
        boolean boolean20 = node16.hasMoreThanOneChild();
        boolean boolean21 = node16.isLocalResultCall();
        node16.setString("OR 51");
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node16.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node36 = node34.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) -1, node34, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node46 = node44.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node44, (int) (byte) 1, (int) '#');
        boolean boolean50 = node39.hasChild(node49);
        int int51 = node39.getCharno();
        com.google.javascript.rhino.Node node52 = node29.useSourceInfoIfMissingFrom(node39);
        boolean boolean53 = node52.isArrayLit();
        node16.addChildrenToFront(node52);
        com.google.javascript.rhino.Node node55 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node56 = node16.srcrefTree(node55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test21954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21954");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node31 = node3.srcref(node30);
        boolean boolean32 = node30.isNoSideEffectsCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable33 = node30.siblings();
        boolean boolean34 = node30.isLocalResultCall();
        java.lang.String str35 = node30.getQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node30.siblings();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeIterable33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(nodeIterable36);
    }

    @Test
    public void test21955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21955");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = node4.getStaticSourceFile();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = node4.getJSDocInfo();
        com.google.javascript.rhino.Node node30 = node4.cloneTree();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = node4.getJSDocInfo();
        boolean boolean32 = node4.isThis();
        boolean boolean33 = node4.isReturn();
        boolean boolean34 = node4.isFunction();
        com.google.javascript.rhino.Node node35 = node4.removeChildren();
        com.google.javascript.rhino.Node node36 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(47, node35, node36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(staticSourceFile28);
        org.junit.Assert.assertNull(jSDocInfo29);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(node35);
    }

    @Test
    public void test21956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21956");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(151562, "Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test21957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21957");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        com.google.javascript.rhino.Node node9 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getType();
        jSDocInfo0.setLicense("false");
        boolean boolean13 = jSDocInfo0.isNoAlias();
        java.lang.String str14 = jSDocInfo0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test21958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21958");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        boolean boolean8 = jSDocInfo0.isDeprecated();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        boolean boolean10 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test21959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21959");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(53, "OR 51");
        boolean boolean3 = node2.isLabel();
        java.util.Set<java.lang.String> strSet4 = node2.getDirectives();
        java.lang.Object obj6 = node2.getProp(44);
        boolean boolean7 = node2.isQualifiedName();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        java.lang.String str18 = node12.toStringTree();
        boolean boolean19 = node12.isStringKey();
        boolean boolean20 = node12.isAnd();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = node12.getStaticSourceFile();
        boolean boolean22 = node12.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node12.children();
        com.google.javascript.rhino.Node node24 = node2.clonePropsFrom(node12);
        boolean boolean25 = node12.isFalse();
        java.lang.String str26 = node12.toStringTree();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "STRING  0\n" + "'", str18, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(staticSourceFile21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "STRING  0\n" + "'", str26, "STRING  0\n");
    }

    @Test
    public void test21960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21960");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        boolean boolean7 = jSDocInfo0.isNoCompile();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node13.setCharno(1);
        boolean boolean16 = node13.isRegExp();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        boolean boolean27 = node21.isDo();
        boolean boolean28 = node21.isDefaultCase();
        node21.setQuotedString();
        com.google.javascript.rhino.Node node30 = node13.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node34.setCharno(1);
        java.util.Set<java.lang.String> strSet37 = node34.getDirectives();
        node34.setLength(0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node46 = node44.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node44, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(0, node30, node34, node49, (int) 'a', (int) (short) 0);
        boolean boolean53 = node30.isNull();
        com.google.javascript.rhino.jstype.JSType jSType54 = node30.getJSType();
        jSDocInfo0.setAssociatedNode(node30);
        boolean boolean56 = jSDocInfo0.shouldPreserveTry();
        boolean boolean57 = jSDocInfo0.hasModifies();
        java.lang.String str58 = jSDocInfo0.getBlockDescription();
        boolean boolean59 = jSDocInfo0.isConstant();
        boolean boolean60 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str62 = jSDocInfo61.getVersion();
        boolean boolean63 = jSDocInfo61.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet64 = jSDocInfo61.getParameterNames();
        jSDocInfo61.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection67 = jSDocInfo61.getTypeNodes();
        boolean boolean68 = jSDocInfo61.hasReturnType();
        java.lang.String str69 = jSDocInfo61.getBlockDescription();
        boolean boolean70 = jSDocInfo61.hasReturnType();
        com.google.common.collect.ImmutableList<java.lang.String> strList71 = jSDocInfo61.getTemplateTypeNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str73 = jSDocInfo72.getVersion();
        java.lang.String str74 = jSDocInfo72.getFileOverview();
        jSDocInfo72.addSuppression("STRING  0");
        boolean boolean77 = jSDocInfo72.isNoCompile();
        boolean boolean78 = jSDocInfo72.isOverride();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str80 = jSDocInfo79.getVersion();
        boolean boolean81 = jSDocInfo79.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet82 = jSDocInfo79.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility83 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo79.setVisibility(visibility83);
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str86 = jSDocInfo85.getVersion();
        boolean boolean87 = jSDocInfo85.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet88 = jSDocInfo85.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility89 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo85.setVisibility(visibility89);
        jSDocInfo79.setVisibility(visibility89);
        jSDocInfo72.setVisibility(visibility89);
        jSDocInfo61.setVisibility(visibility89);
        jSDocInfo0.setVisibility(visibility89);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(nodeCollection67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertTrue("'" + visibility83 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility83.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertTrue("'" + visibility89 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility89.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
    }

    @Test
    public void test21961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21961");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node32 = node4.srcref(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean37 = node36.isFromExterns();
        boolean boolean38 = node32.hasChild(node36);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(52, node36);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node43.setCharno(1);
        java.util.Set<java.lang.String> strSet46 = node43.getDirectives();
        node43.setCharno((int) (short) -1);
        boolean boolean49 = node43.isRegExp();
        node36.addChildrenToFront(node43);
        com.google.javascript.rhino.Node node51 = node36.getLastChild();
        boolean boolean52 = node51.isEmpty();
        node51.setQuotedString();
        boolean boolean54 = node51.isStringKey();
        boolean boolean55 = node51.isExprResult();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node62 = node60.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) -1, node60, (int) (byte) 1, (int) '#');
        boolean boolean66 = node60.isDo();
        boolean boolean67 = node60.isDefaultCase();
        node60.setQuotedString();
        boolean boolean69 = node60.isDec();
        boolean boolean70 = node60.isBlock();
        com.google.javascript.rhino.Node node71 = node51.useSourceInfoFromForTree(node60);
        boolean boolean72 = node51.isGetProp();
        // The following exception was thrown during execution in test generation
        try {
            node51.setSideEffectFlags((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test21962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21962");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node7 = node5.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1, node5, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node10.hasChild(node20);
        boolean boolean22 = node10.isReturn();
        boolean boolean23 = node10.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str25 = jSDocInfo24.getVersion();
        boolean boolean26 = jSDocInfo24.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo24.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList28 = jSDocInfo24.getImplementedInterfaces();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean33 = node32.isThrow();
        java.lang.String str37 = node32.toString(true, false, true);
        jSDocInfo24.setAssociatedNode(node32);
        com.google.javascript.rhino.Node node39 = node32.removeFirstChild();
        boolean boolean40 = node32.isNumber();
        node10.addChildToBack(node32);
        java.lang.String str42 = node10.toStringTree();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(53, node10, 12, 4131);
        com.google.javascript.rhino.Node node46 = node45.getLastSibling();
        node45.setLineno(12);
        boolean boolean49 = node45.isArrayLit();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(jSTypeExpressionList28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "STRING  0" + "'", str37, "STRING  0");
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ERROR 1\n    STRING  0\n    STRING  0\n" + "'", str42, "ERROR 1\n    STRING  0\n    STRING  0\n");
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test21963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21963");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        com.google.javascript.rhino.Node node6 = node3.cloneNode();
        int int7 = node3.getChildCount();
        int int8 = node3.getSideEffectFlags();
        boolean boolean9 = node3.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test21964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21964");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 1.0\n");
        node1.setQuotedString();
        boolean boolean3 = node1.isVoid();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test21965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21965");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        int int3 = stringPosition0.getPositionOnStartLine();
        int int4 = stringPosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test21966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21966");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        jSDocInfo0.setAssociatedNode(node8);
        boolean boolean15 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node36 = node34.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) -1, node34, (int) (byte) 1, (int) '#');
        boolean boolean40 = node29.hasChild(node39);
        int int41 = node29.getCharno();
        com.google.javascript.rhino.Node node42 = node19.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node47 = node19.srcref(node46);
        jSDocInfo0.setAssociatedNode(node19);
        node19.setLineno(47);
        int int51 = node19.getChildCount();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node55.setCharno(1);
        java.util.Set<java.lang.String> strSet58 = node55.getDirectives();
        node55.setCharno((int) (short) -1);
        node55.setVarArgs(true);
        com.google.javascript.rhino.Node node63 = node19.useSourceInfoFrom(node55);
        java.lang.String str64 = node63.toString();
        boolean boolean65 = node63.isThrow();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node69.setCharno(1);
        boolean boolean72 = node69.isRegExp();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node79 = node77.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) -1, node77, (int) (byte) 1, (int) '#');
        boolean boolean83 = node77.isDo();
        boolean boolean84 = node77.isDefaultCase();
        node77.setQuotedString();
        com.google.javascript.rhino.Node node86 = node69.useSourceInfoFromForTree(node77);
        node77.putIntProp((int) (byte) 100, (int) (byte) 0);
        boolean boolean90 = node77.isVarArgs();
        node77.setLineno(37);
        boolean boolean93 = node77.isFor();
        boolean boolean94 = node77.isLocalResultCall();
        com.google.javascript.rhino.Node node95 = node63.srcrefTree(node77);
        com.google.javascript.rhino.Node node96 = node63.getFirstChild();
        boolean boolean97 = node63.isQuotedString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(strSet58);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "OR" + "'", str64, "OR");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test21967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21967");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        node8.setQuotedString();
        com.google.javascript.rhino.Node node16 = node3.srcrefTree(node8);
        boolean boolean17 = node8.isBreak();
        boolean boolean19 = node8.getBooleanProp(100);
        boolean boolean20 = node8.isRegExp();
        boolean boolean21 = node8.isExprResult();
        boolean boolean22 = node8.isBreak();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test21968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21968");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean10 = node9.isThrow();
        java.lang.String str14 = node9.toString(true, false, true);
        java.lang.String str15 = node9.getQualifiedName();
        boolean boolean16 = node9.isCatch();
        boolean boolean17 = node9.isOr();
        jSDocInfo0.setAssociatedNode(node9);
        jSDocInfo0.setDeprecated(false);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression22 = jSDocInfo0.getParameterType("ERROR 1\n    STRING  0\n    STRING  0\n");
        java.lang.String str23 = jSDocInfo0.getVersion();
        jSDocInfo0.setDeprecated(true);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList26 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING  0" + "'", str14, "STRING  0");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(jSTypeExpression22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(jSTypeExpressionList26);
    }

    @Test
    public void test21969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21969");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getPositionOnStartLine();
        int int3 = typePosition0.getPositionOnEndLine();
        typePosition0.setPositionInformation(30, 36, 40, (int) (short) 10);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) 6);
        typePosition0.setItem(node10);
        java.lang.String[] strArray14 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        boolean boolean22 = strSet15.addAll((java.util.Collection<java.lang.String>) strList20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node29 = node27.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) -1, node27, (int) (byte) 1, (int) '#');
        boolean boolean33 = node27.isScript();
        node27.setQuotedString();
        boolean boolean35 = strSet15.equals((java.lang.Object) node27);
        int int36 = node27.getChildCount();
        boolean boolean37 = node27.isQuotedString();
        boolean boolean38 = node27.isObjectLit();
        com.google.javascript.rhino.Node node39 = node27.getParent();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node46 = node44.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node44, (int) (byte) 1, (int) '#');
        boolean boolean50 = node44.isDo();
        com.google.javascript.rhino.Node node51 = node44.getLastSibling();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(46, (int) (byte) -1, 29);
        com.google.javascript.rhino.Node node56 = node51.srcrefTree(node55);
        boolean boolean57 = node51.isGetElem();
        com.google.javascript.rhino.Node node58 = node39.srcrefTree(node51);
        boolean boolean59 = node51.isOptionalArg();
        typePosition0.setItem(node51);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test21970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21970");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        boolean boolean16 = node10.isDo();
        boolean boolean17 = node10.isDefaultCase();
        node10.setQuotedString();
        boolean boolean19 = node10.isDec();
        boolean boolean20 = node10.isLabel();
        boolean boolean21 = node10.isSetterDef();
        boolean boolean22 = node10.isRegExp();
        boolean boolean23 = node10.isName();
        boolean boolean24 = node10.isVoid();
        com.google.javascript.rhino.Node node25 = node10.cloneNode();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node3.isFunction();
        boolean boolean28 = node3.isVoid();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("false", 49, (int) 'a');
        int int33 = node3.getIndexOfChild(node32);
        int int34 = node32.getLineno();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable35 = node32.siblings();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 49 + "'", int34 == 49);
        org.junit.Assert.assertNotNull(nodeIterable35);
    }

    @Test
    public void test21971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21971");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        boolean boolean51 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node52 = node14.removeFirstChild();
        node52.setVarArgs(true);
        node52.detachChildren();
        boolean boolean56 = node52.isThis();
        boolean boolean57 = node52.isName();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test21972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21972");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        boolean boolean10 = jSDocInfo0.isNoTypeCheck();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test21973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21973");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        boolean boolean5 = jSDocInfo0.hasModifies();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        boolean boolean9 = jSDocInfo0.hasParameterType("JSDocInfo");
        java.lang.String str10 = jSDocInfo0.getLicense();
        boolean boolean11 = jSDocInfo0.isDefine();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(markerCollection12);
    }

    @Test
    public void test21974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21974");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isFromExterns();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(39, node4, (int) '4', 51);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = node4.getJSDocInfo();
        node4.setCharno(36);
        com.google.javascript.rhino.Node node12 = node4.getFirstChild();
        com.google.javascript.rhino.Node node13 = node4.removeFirstChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSDocInfo9);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test21975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21975");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        typePosition0.setPositionInformation(2, 31, 29, 37);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node10.setCharno(1);
        boolean boolean13 = node10.isRegExp();
        int int14 = node10.getSourcePosition();
        com.google.javascript.rhino.Node node15 = node10.getLastChild();
        typePosition0.setItem(node15);
        boolean boolean17 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        boolean boolean42 = node31.hasChild(node41);
        int int43 = node31.getCharno();
        com.google.javascript.rhino.Node node44 = node21.useSourceInfoIfMissingFrom(node31);
        node44.setLength((int) ' ');
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node57 = node55.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node55, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node67 = node65.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) -1, node65, (int) (byte) 1, (int) '#');
        boolean boolean71 = node60.hasChild(node70);
        int int72 = node60.getCharno();
        com.google.javascript.rhino.Node node73 = node50.useSourceInfoIfMissingFrom(node60);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node78 = node50.srcref(node77);
        boolean boolean79 = node44.isEquivalentToTyped(node50);
        com.google.javascript.rhino.Node node80 = node50.getNext();
        boolean boolean81 = node50.isQuotedString();
        com.google.javascript.rhino.Node node82 = node50.cloneTree();
        typePosition0.setItem(node82);
        boolean boolean84 = node82.isVarArgs();
        boolean boolean85 = node82.isIn();
        boolean boolean86 = node82.isFromExterns();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test21976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21976");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        boolean boolean9 = node3.isOptionalArg();
        boolean boolean10 = node3.isThrow();
        com.google.javascript.rhino.Node node11 = node3.getLastSibling();
        java.lang.String[] strArray14 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        boolean boolean22 = strSet15.addAll((java.util.Collection<java.lang.String>) strList20);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node29 = node27.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) -1, node27, (int) (byte) 1, (int) '#');
        boolean boolean33 = node27.isScript();
        node27.setQuotedString();
        boolean boolean35 = strSet15.equals((java.lang.Object) node27);
        boolean boolean36 = node27.isAssign();
        com.google.javascript.rhino.Node node37 = node11.copyInformationFromForTree(node27);
        node37.setLength(37);
        java.lang.String str40 = node37.getString();
        node37.putIntProp(208993, 42);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test21977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21977");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean6 = jSDocInfo0.isOverride();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean12 = node11.isThrow();
        java.lang.String str16 = node11.toString(true, false, true);
        boolean boolean17 = node11.isThis();
        boolean boolean18 = strSet7.equals((java.lang.Object) boolean17);
        boolean boolean19 = strSet7.isEmpty();
        java.lang.String[] strArray22 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strSet23.addAll((java.util.Collection<java.lang.String>) strList28);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str32 = jSDocInfo31.getVersion();
        java.lang.String str33 = jSDocInfo31.getFileOverview();
        boolean boolean34 = jSDocInfo31.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo31.getParameterNames();
        boolean boolean36 = strSet23.retainAll((java.util.Collection<java.lang.String>) strSet35);
        java.util.stream.Stream<java.lang.String> strStream37 = strSet23.stream();
        boolean boolean38 = strSet7.addAll((java.util.Collection<java.lang.String>) strSet23);
        java.util.stream.Stream<java.lang.String> strStream39 = strSet7.parallelStream();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((-1), 36, 0);
        boolean boolean44 = node43.isThis();
        com.google.javascript.rhino.Node node45 = node43.getLastSibling();
        boolean boolean46 = node43.isAssign();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str52 = jSDocInfo51.getVersion();
        boolean boolean53 = jSDocInfo51.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet54 = jSDocInfo51.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList55 = jSDocInfo51.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList56 = jSDocInfo51.getThrownTypes();
        java.util.Set<java.lang.String> strSet57 = jSDocInfo51.getParameterNames();
        node50.setDirectives(strSet57);
        boolean boolean59 = node50.hasOneChild();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = node50.getJSDocInfo();
        boolean boolean61 = node50.isIn();
        boolean boolean62 = node50.isInc();
        com.google.javascript.rhino.Node node63 = null;
        node43.addChildrenAfter(node50, node63);
        boolean boolean65 = strSet7.remove((java.lang.Object) node63);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "STRING  0" + "'", str16, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strStream39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(jSTypeExpressionList55);
        org.junit.Assert.assertNotNull(jSTypeExpressionList56);
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSDocInfo60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test21978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21978");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isConstructor();
        jSDocInfo0.addSuppression("STRING  0 [synthetic: 1]\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean8 = jSDocInfo0.hasParameter("(Not declared as a type name)");
        java.lang.String str9 = jSDocInfo0.getDescription();
        boolean boolean10 = jSDocInfo0.hasBaseType();
        int int11 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test21979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21979");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        node3.setQuotedString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo10 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str11 = jSDocInfo10.getVersion();
        boolean boolean12 = jSDocInfo10.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo10.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility14 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo10.setVisibility(visibility14);
        node3.setJSDocInfo(jSDocInfo10);
        node3.setCharno((int) (byte) 100);
        int int19 = node3.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + visibility14 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility14.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test21980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21980");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        java.lang.String str14 = node8.getQualifiedName();
        boolean boolean15 = node8.isIn();
        com.google.javascript.rhino.Node node16 = node8.cloneTree();
        boolean boolean17 = node16.isRegExp();
        boolean boolean18 = node16.isDebugger();
        node3.addChildToBack(node16);
        boolean boolean20 = node3.isVar();
        int int21 = node3.getChildCount();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        boolean boolean42 = node31.hasChild(node41);
        boolean boolean43 = node31.isReturn();
        boolean boolean44 = node31.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo45 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str46 = jSDocInfo45.getVersion();
        boolean boolean47 = jSDocInfo45.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet48 = jSDocInfo45.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList49 = jSDocInfo45.getImplementedInterfaces();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean54 = node53.isThrow();
        java.lang.String str58 = node53.toString(true, false, true);
        jSDocInfo45.setAssociatedNode(node53);
        com.google.javascript.rhino.Node node60 = node53.removeFirstChild();
        boolean boolean61 = node53.isNumber();
        node31.addChildToBack(node53);
        boolean boolean63 = node53.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean68 = node67.isThrow();
        java.lang.String str72 = node67.toString(true, false, true);
        java.lang.String str73 = node67.getQualifiedName();
        boolean boolean74 = node67.isIn();
        com.google.javascript.rhino.Node node75 = node67.cloneTree();
        boolean boolean76 = node75.isRegExp();
        int int77 = node75.getSourcePosition();
        node53.addChildrenToBack(node75);
        node75.setLineno((int) (byte) -1);
        com.google.javascript.rhino.Node node81 = node3.useSourceInfoFrom(node75);
        com.google.javascript.rhino.JSDocInfo jSDocInfo82 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str83 = jSDocInfo82.getVersion();
        boolean boolean84 = jSDocInfo82.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet85 = jSDocInfo82.getParameterNames();
        jSDocInfo82.addSuppression("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList88 = jSDocInfo82.getExtendedInterfaces();
        boolean boolean89 = jSDocInfo82.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet90 = jSDocInfo82.getModifies();
        node81.setDirectives(strSet90);
        boolean boolean92 = node81.isGetProp();
        com.google.javascript.rhino.Node node93 = node81.getLastChild();
        boolean boolean94 = node81.isSetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(jSTypeExpressionList49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "STRING  0" + "'", str58, "STRING  0");
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "STRING  0" + "'", str72, "STRING  0");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 10 + "'", int77 == 10);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(jSTypeExpressionList88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test21981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21981");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getSuppressions();
        jSDocInfo0.addSuppression("(STRING  0 [quoted: 1]\n)");
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        boolean boolean7 = jSDocInfo0.hasType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test21982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21982");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("((ERROR 1))", 35, 44);
        node3.setType(15);
        boolean boolean7 = node3.getBooleanProp(50);
        boolean boolean8 = node3.isContinue();
        boolean boolean9 = node3.isNull();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("ASSIGN_MOD", 48, (int) (short) 10);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(0, "(OR 1\n)");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 100, node17);
        // The following exception was thrown during execution in test generation
        try {
            node3.replaceChild(node13, node17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The new child node already has a parent.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
    }

    @Test
    public void test21983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21983");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean7 = jSDocInfo0.isNoAlias();
        boolean boolean8 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.Node node9 = jSDocInfo0.getAssociatedNode();
        boolean boolean10 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        boolean boolean35 = node24.hasChild(node34);
        int int36 = node24.getCharno();
        com.google.javascript.rhino.Node node37 = node14.useSourceInfoIfMissingFrom(node24);
        node37.setLength((int) ' ');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node50 = node48.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) -1, node48, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node60 = node58.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) -1, node58, (int) (byte) 1, (int) '#');
        boolean boolean64 = node53.hasChild(node63);
        int int65 = node53.getCharno();
        com.google.javascript.rhino.Node node66 = node43.useSourceInfoIfMissingFrom(node53);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node71 = node43.srcref(node70);
        boolean boolean72 = node37.isEquivalentToTyped(node43);
        node43.addSuppression("STRING  0 [synthetic: 1]\n");
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile75 = node43.getStaticSourceFile();
        jSDocInfo0.setAssociatedNode(node43);
        java.util.Collection<java.lang.String> strCollection77 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSDocInfo jSDocInfo78 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str79 = jSDocInfo78.getVersion();
        boolean boolean80 = jSDocInfo78.hasEnumParameterType();
        boolean boolean81 = jSDocInfo78.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression82 = jSDocInfo78.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility83 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo78.setVisibility(visibility83);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection85 = jSDocInfo78.getTypeNodes();
        boolean boolean86 = jSDocInfo78.isConstant();
        boolean boolean87 = jSDocInfo78.isDeprecated();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility88 = jSDocInfo78.getVisibility();
        jSDocInfo0.setVisibility(visibility88);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(staticSourceFile75);
        org.junit.Assert.assertNull(strCollection77);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSTypeExpression82);
        org.junit.Assert.assertTrue("'" + visibility83 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility83.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(nodeCollection85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + visibility88 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility88.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
    }

    @Test
    public void test21984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21984");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        int int10 = node9.getType();
        boolean boolean11 = node9.isDelProp();
        boolean boolean12 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node23 = node9.copyInformationFromForTree(node17);
        com.google.javascript.rhino.jstype.JSType jSType24 = node23.getJSType();
        boolean boolean25 = node23.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(53, "OR 51");
        boolean boolean29 = node28.isLabel();
        java.util.Set<java.lang.String> strSet30 = node28.getDirectives();
        java.lang.Object obj32 = node28.getProp(44);
        boolean boolean33 = node28.isQualifiedName();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        java.lang.String str44 = node38.toStringTree();
        boolean boolean45 = node38.isStringKey();
        boolean boolean46 = node38.isAnd();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node38.getStaticSourceFile();
        boolean boolean48 = node38.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable49 = node38.children();
        com.google.javascript.rhino.Node node50 = node28.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node51 = node23.useSourceInfoFromForTree(node38);
        boolean boolean52 = node38.isGetElem();
        java.lang.String str53 = node38.toString();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable54 = node38.children();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "STRING  0\n" + "'", str44, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeIterable49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "STRING  0" + "'", str53, "STRING  0");
        org.junit.Assert.assertNotNull(nodeIterable54);
    }

    @Test
    public void test21985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21985");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        boolean boolean27 = node3.isSwitch();
        java.lang.String str28 = node3.toString();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean33 = node32.isThrow();
        java.lang.String str37 = node32.toString(true, false, true);
        java.lang.String str38 = node32.getQualifiedName();
        boolean boolean39 = node32.isIn();
        boolean boolean40 = node3.hasChild(node32);
        java.lang.Object obj42 = node3.getProp(53);
        node3.setIsSyntheticBlock(false);
        boolean boolean45 = node3.isSwitch();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition46 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int47 = typePosition46.getPositionOnEndLine();
        com.google.javascript.rhino.Node node48 = typePosition46.getItem();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        boolean boolean59 = node53.isDo();
        boolean boolean60 = node53.isDefaultCase();
        node53.setQuotedString();
        boolean boolean62 = node53.isDec();
        boolean boolean63 = node53.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable64 = node53.siblings();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(51);
        java.lang.String str67 = node53.checkTreeEquals(node66);
        boolean boolean68 = node53.isCatch();
        com.google.javascript.rhino.InputId inputId69 = null;
        node53.setInputId(inputId69);
        typePosition46.setItem(node53);
        boolean boolean72 = node53.isCatch();
        node53.detachChildren();
        com.google.javascript.rhino.Node node74 = node53.detachFromParent();
        com.google.javascript.rhino.Node node75 = node74.cloneNode();
        java.lang.String str76 = node3.checkTreeEquals(node75);
        // The following exception was thrown during execution in test generation
        try {
            node75.setSideEffectFlags(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR 1" + "'", str28, "OR 1");
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "STRING  0" + "'", str37, "STRING  0");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(obj42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(nodeIterable64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str67, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Node tree inequality:\nTree1:\nOR 1\n\n\nTree2:\nSTRING  0 [quoted: 1]\n\n\nSubtree1: OR 1\n\n\nSubtree2: STRING  0 [quoted: 1]\n" + "'", str76, "Node tree inequality:\nTree1:\nOR 1\n\n\nTree2:\nSTRING  0 [quoted: 1]\n\n\nSubtree1: OR 1\n\n\nSubtree2: STRING  0 [quoted: 1]\n");
    }

    @Test
    public void test21986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21986");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        int int2 = typePosition0.getEndLine();
        int int3 = typePosition0.getStartLine();
        boolean boolean4 = typePosition0.hasBrackets();
        int int5 = typePosition0.getStartLine();
        int int6 = typePosition0.getStartLine();
        boolean boolean7 = typePosition0.hasBrackets();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test21987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21987");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node31 = node3.srcref(node30);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean36 = node35.isFromExterns();
        boolean boolean37 = node31.hasChild(node35);
        boolean boolean38 = node35.isOr();
        boolean boolean39 = node35.wasEmptyNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str41 = jSDocInfo40.getVersion();
        boolean boolean42 = jSDocInfo40.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet43 = jSDocInfo40.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList44 = jSDocInfo40.getImplementedInterfaces();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean49 = node48.isThrow();
        java.lang.String str53 = node48.toString(true, false, true);
        jSDocInfo40.setAssociatedNode(node48);
        int int56 = node48.getIntProp((int) (byte) 10);
        node48.setSourceEncodedPositionForTree(15);
        node48.setLineno(1);
        boolean boolean61 = node35.isEquivalentTo(node48);
        node35.setVarArgs(true);
        int int64 = node35.getSourceOffset();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(jSTypeExpressionList44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "STRING  0" + "'", str53, "STRING  0");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
    }

    @Test
    public void test21988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21988");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int4 = node3.getType();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder6 = node3.new FileLevelJsDocBuilder();
        boolean boolean7 = node3.isFunction();
        int int8 = node3.getLength();
        com.google.javascript.rhino.InputId inputId9 = node3.getInputId();
        boolean boolean10 = node3.isWhile();
        boolean boolean11 = node3.isObjectLit();
        boolean boolean12 = node3.isHook();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(inputId9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test21989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21989");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        boolean boolean51 = node40.hasChild(node50);
        int int52 = node40.getCharno();
        com.google.javascript.rhino.Node node53 = node30.useSourceInfoIfMissingFrom(node40);
        int int54 = node30.getSourcePosition();
        java.lang.String str55 = node30.toString();
        com.google.javascript.rhino.Node node56 = node3.srcref(node30);
        boolean boolean57 = node56.wasEmptyNode();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node64 = node62.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) -1, node62, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node74 = node72.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) -1, node72, (int) (byte) 1, (int) '#');
        boolean boolean78 = node67.hasChild(node77);
        boolean boolean79 = node77.isVar();
        boolean boolean80 = node77.isTypeOf();
        boolean boolean81 = node77.isAssignAdd();
        node56.addChildToFront(node77);
        boolean boolean83 = node56.isExprResult();
        java.lang.String str84 = node56.toStringTree();
        boolean boolean85 = node56.isOnlyModifiesThisCall();
        boolean boolean86 = node56.isNot();
        boolean boolean87 = node56.isOptionalArg();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4131 + "'", int54 == 4131);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR 1" + "'", str55, "OR 1");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "OR 1\n    ERROR 1\n        STRING  0\n" + "'", str84, "OR 1\n    ERROR 1\n        STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test21990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21990");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node14.setCharno(1);
        java.util.Set<java.lang.String> strSet17 = node14.getDirectives();
        java.lang.String str18 = node4.checkTreeEquals(node14);
        boolean boolean19 = node4.isNE();
        boolean boolean20 = node4.isOnlyModifiesThisCall();
        boolean boolean21 = node4.isStringKey();
        node4.setIsSyntheticBlock(false);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = node4.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  0 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test21991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21991");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        java.lang.String str6 = stringPosition0.getItem();
        java.lang.String str7 = stringPosition0.getItem();
        stringPosition0.setItem("()");
        int int10 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setPositionInformation(2, 17, 10, 208993);
        int int16 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36 + "'", int10 == 36);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 208993 + "'", int16 == 208993);
    }

    @Test
    public void test21992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21992");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isTypeOf();
        boolean boolean23 = node19.isAssignAdd();
        boolean boolean24 = node19.isStringKey();
        node19.setOptionalArg(true);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean31 = node30.isThrow();
        java.lang.String str35 = node30.toString(true, false, true);
        java.lang.String str36 = node30.getQualifiedName();
        boolean boolean37 = node30.isIn();
        com.google.javascript.rhino.Node node38 = node30.cloneTree();
        boolean boolean39 = node38.isRegExp();
        boolean boolean40 = node38.isExprResult();
        com.google.javascript.rhino.Node node41 = node19.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node node42 = node41.removeChildren();
        boolean boolean43 = node41.isGetProp();
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = null;
        node41.setJSDocInfo(jSDocInfo44);
        boolean boolean46 = node41.isLabel();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "STRING  0" + "'", str35, "STRING  0");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test21993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21993");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        int int6 = jSDocInfo0.getParameterCount();
        java.lang.String str7 = jSDocInfo0.getMeaning();
        boolean boolean8 = jSDocInfo0.isNoAlias();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList9 = jSDocInfo0.getImplementedInterfaces();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getAuthors();
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean13 = jSDocInfo0.hasParameterType("(unknown)");
        java.lang.String str14 = jSDocInfo0.getDeprecationReason();
        boolean boolean15 = jSDocInfo0.isDefine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList9);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test21994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21994");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        java.lang.String str10 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = jSDocInfo0.getVisibility();
        java.lang.String str12 = jSDocInfo0.getDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(visibility11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test21995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21995");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("(((ERROR)))");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "((((ERROR))))" + "'", str1, "((((ERROR))))");
    }

    @Test
    public void test21996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21996");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        int int10 = node9.getType();
        com.google.javascript.rhino.Node node11 = node9.removeFirstChild();
        int int12 = node11.getSourceOffset();
        com.google.javascript.rhino.Node node13 = node11.getLastSibling();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test21997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21997");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        java.lang.String str11 = jSDocInfo0.toString();
        boolean boolean12 = jSDocInfo0.hasModifies();
        boolean boolean13 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "JSDocInfo" + "'", str11, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test21998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21998");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node32 = node4.srcref(node31);
        node4.setType(38);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("STRING  0 [synthetic: 1]\n", (int) ' ', (int) (byte) -1);
        node38.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node52 = node50.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) -1, node50, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node62 = node60.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) -1, node60, (int) (byte) 1, (int) '#');
        boolean boolean66 = node55.hasChild(node65);
        int int67 = node55.getCharno();
        com.google.javascript.rhino.Node node68 = node45.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node75 = node73.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (byte) -1, node73, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node85 = node83.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (byte) -1, node83, (int) (byte) 1, (int) '#');
        boolean boolean89 = node78.hasChild(node88);
        boolean boolean90 = node88.isVar();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((-1), node55, node88);
        com.google.javascript.rhino.Node node92 = node91.getParent();
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node((int) ' ', node4, node38, node91);
        boolean boolean94 = node91.isTrue();
        // The following exception was thrown during execution in test generation
        try {
            node91.setString("((Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN 5\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN 5\n))");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test21999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test21999");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isCase();
        boolean boolean23 = node19.isNE();
        boolean boolean24 = node19.isDefaultCase();
        boolean boolean25 = node19.isCatch();
        boolean boolean26 = node19.isExprResult();
        boolean boolean27 = node19.isCase();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test22000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest43.test22000");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        java.lang.String str6 = jSDocInfo0.getDescription();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("(Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n)");
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        boolean boolean10 = jSDocInfo0.hasEnumParameterType();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getAuthors();
        java.lang.String str12 = jSDocInfo0.getVersion();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertNull(str12);
    }
}


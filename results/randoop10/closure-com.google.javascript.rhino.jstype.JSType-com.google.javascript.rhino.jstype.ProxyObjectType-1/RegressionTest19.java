import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest19 {

    public static boolean debug = false;

    @Test
    public void test09501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09501");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node24 = node9.clonePropsFrom(node23);
        node24.putIntProp(38, 32);
        boolean boolean28 = node24.isBreak();
        // The following exception was thrown during execution in test generation
        try {
            double double29 = node24.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR 1 [synthetic: 32] is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test09502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09502");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getThrownTypes();
        com.google.common.collect.ImmutableList<java.lang.String> strList11 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str12 = jSDocInfo0.getLendsName();
        boolean boolean13 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09503");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        boolean boolean51 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node52 = node14.removeFirstChild();
        node52.setVarArgs(true);
        node52.detachChildren();
        boolean boolean56 = node52.isThis();
        boolean boolean57 = node52.isAssignAdd();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test09504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09504");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isTypeOf();
        boolean boolean23 = node19.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node19.removeFirstChild();
        boolean boolean25 = node24.isSwitch();
        boolean boolean26 = node24.hasMoreThanOneChild();
        int int28 = node24.getIntProp(49);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean33 = node32.isThrow();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean38 = node37.isThrow();
        java.lang.String str42 = node37.toString(true, false, true);
        java.lang.String str43 = node37.getQualifiedName();
        boolean boolean44 = node37.isIn();
        com.google.javascript.rhino.Node node45 = node37.cloneTree();
        boolean boolean46 = node45.isRegExp();
        boolean boolean47 = node45.isDebugger();
        node32.addChildToBack(node45);
        boolean boolean49 = node45.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node50 = node24.srcrefTree(node45);
        boolean boolean51 = node24.isTypeOf();
        boolean boolean52 = node24.isInstanceOf();
        java.lang.String str53 = node24.getString();
        boolean boolean54 = node24.isVar();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "STRING  0" + "'", str42, "STRING  0");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test09505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09505");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        boolean boolean7 = jSDocInfo0.isNoCompile();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node13.setCharno(1);
        boolean boolean16 = node13.isRegExp();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        boolean boolean27 = node21.isDo();
        boolean boolean28 = node21.isDefaultCase();
        node21.setQuotedString();
        com.google.javascript.rhino.Node node30 = node13.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node34.setCharno(1);
        java.util.Set<java.lang.String> strSet37 = node34.getDirectives();
        node34.setLength(0);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node46 = node44.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node44, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(0, node30, node34, node49, (int) 'a', (int) (short) 0);
        boolean boolean53 = node30.isNull();
        com.google.javascript.rhino.jstype.JSType jSType54 = node30.getJSType();
        jSDocInfo0.setAssociatedNode(node30);
        boolean boolean56 = jSDocInfo0.shouldPreserveTry();
        boolean boolean57 = jSDocInfo0.hasModifies();
        java.lang.String str58 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility59 = jSDocInfo0.getVisibility();
        int int60 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility61 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNull(visibility59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(visibility61);
    }

    @Test
    public void test09506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09506");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(46, "OR", 0, 53);
        com.google.javascript.rhino.jstype.JSType jSType5 = node4.getJSType();
        int int6 = node4.getCharno();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
    }

    @Test
    public void test09507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09507");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue2.or(ternaryValue4);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue7.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue9.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue5.and(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue0.and(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        java.lang.String str16 = ternaryValue15.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue0.and(ternaryValue15);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean21 = ternaryValue19.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue22.or(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue19.xor(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue24.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue17.xor(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean32 = ternaryValue30.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean36 = ternaryValue34.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue37.or(ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue34.xor(ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue30.xor(ternaryValue34);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue28.and(ternaryValue34);
        boolean boolean44 = ternaryValue42.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = ternaryValue47.or(ternaryValue49);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue52.or(ternaryValue54);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue54.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = ternaryValue50.and(ternaryValue54);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = ternaryValue45.and(ternaryValue54);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = ternaryValue42.and(ternaryValue54);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean63 = ternaryValue61.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = ternaryValue64.or(ternaryValue65);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = ternaryValue61.xor(ternaryValue66);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = ternaryValue54.and(ternaryValue66);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = ternaryValue17.or(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "false" + "'", str16, "false");
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue69);
    }

    @Test
    public void test09508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09508");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        com.google.javascript.rhino.Node node16 = node4.getLastSibling();
        com.google.javascript.rhino.Node node17 = node4.cloneTree();
        boolean boolean19 = node4.getBooleanProp(48);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test09509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09509");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str12 = jSDocInfo11.getVersion();
        java.lang.String str13 = jSDocInfo11.getFileOverview();
        jSDocInfo11.addSuppression("STRING  0");
        boolean boolean16 = jSDocInfo11.isNoCompile();
        boolean boolean17 = jSDocInfo11.hasFileOverview();
        boolean boolean18 = jSDocInfo11.isConsistentIdGenerator();
        java.lang.String str20 = jSDocInfo11.getDescriptionForParameter("Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nOR 0\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: OR 0\n");
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection21 = jSDocInfo11.getMarkers();
        java.util.Set<java.lang.String> strSet22 = jSDocInfo11.getModifies();
        int int23 = strSet22.size();
        java.util.HashSet[] hashSetArray25 = new java.util.HashSet[0];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[] strSetArray26 = (java.util.HashSet<java.lang.String>[]) hashSetArray25;
        java.util.HashSet[] hashSetArray28 = new java.util.HashSet[0];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[] strSetArray29 = (java.util.HashSet<java.lang.String>[]) hashSetArray28;
        java.util.HashSet[][] hashSetArray31 = new java.util.HashSet[2][];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[][] strSetArray32 = (java.util.HashSet<java.lang.String>[][]) hashSetArray31;
        strSetArray32[0] = hashSetArray25;
        strSetArray32[1] = strSetArray29;
        java.util.HashSet<java.lang.String>[][] strSetArray37 = strSet22.toArray(strSetArray32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Cloneable[][] cloneableArray38 = strSet3.toArray((java.lang.Cloneable[][]) strSetArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(markerCollection21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(hashSetArray25);
        org.junit.Assert.assertNotNull(strSetArray26);
        org.junit.Assert.assertNotNull(hashSetArray28);
        org.junit.Assert.assertNotNull(strSetArray29);
        org.junit.Assert.assertNotNull(hashSetArray31);
        org.junit.Assert.assertNotNull(strSetArray32);
        org.junit.Assert.assertNotNull(strSetArray37);
    }

    @Test
    public void test09510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09510");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition6 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition8 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition9 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition10 = marker0.getNameNode();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertNull(typePosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(nodeSourcePosition8);
        org.junit.Assert.assertNull(nodeSourcePosition9);
        org.junit.Assert.assertNull(nodeSourcePosition10);
    }

    @Test
    public void test09511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09511");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isName();
        boolean boolean18 = node4.isVoid();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        com.google.javascript.rhino.Node node30 = node4.useSourceInfoIfMissingFrom(node23);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        int int41 = node40.getType();
        boolean boolean42 = node40.isFor();
        node23.addChildToFront(node40);
        java.lang.String str44 = node23.getQualifiedName();
        com.google.javascript.rhino.Node node45 = node23.cloneTree();
        java.lang.String str46 = node23.toStringTree();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "STRING  0\n    ERROR 1\n        STRING  0\n" + "'", str46, "STRING  0\n    ERROR 1\n        STRING  0\n");
    }

    @Test
    public void test09512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09512");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        boolean boolean10 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean11 = jSDocInfo0.hasModifies();
        com.google.common.collect.ImmutableList<java.lang.String> strList12 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test09513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09513");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        boolean boolean44 = node21.isString();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node54.hasChild(node64);
        boolean boolean66 = node64.isVar();
        boolean boolean67 = node64.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node64.children();
        com.google.javascript.rhino.Node node69 = node21.srcref(node64);
        boolean boolean70 = node21.isWith();
        boolean boolean71 = node21.isCase();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable72 = node21.children();
        boolean boolean73 = node21.isNew();
        boolean boolean74 = node21.isVarArgs();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeIterable72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test09514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09514");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        boolean boolean9 = node3.isOptionalArg();
        boolean boolean10 = node3.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09515");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        int int10 = node3.getIntProp(51);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int15 = node14.getType();
        com.google.javascript.rhino.Node node16 = node14.cloneNode();
        boolean boolean17 = node14.isInc();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean22 = node21.isThrow();
        java.lang.String str26 = node21.toString(true, false, true);
        java.lang.String str27 = node21.getQualifiedName();
        boolean boolean28 = node21.isThis();
        java.lang.String[] strArray31 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        boolean boolean39 = strSet32.addAll((java.util.Collection<java.lang.String>) strList37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str41 = jSDocInfo40.getVersion();
        java.lang.String str42 = jSDocInfo40.getFileOverview();
        boolean boolean43 = jSDocInfo40.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet44 = jSDocInfo40.getParameterNames();
        boolean boolean45 = strSet32.retainAll((java.util.Collection<java.lang.String>) strSet44);
        java.util.stream.Stream<java.lang.String> strStream46 = strSet32.stream();
        node21.setDirectives((java.util.Set<java.lang.String>) strSet32);
        boolean boolean48 = node21.isFor();
        com.google.javascript.rhino.Node node49 = node14.srcref(node21);
        int int50 = node3.getIndexOfChild(node49);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int55 = node54.getType();
        boolean boolean56 = node54.isArrayLit();
        node54.setWasEmptyNode(false);
        boolean boolean59 = node54.isNot();
        com.google.javascript.rhino.Node node60 = node49.useSourceInfoFrom(node54);
        boolean boolean61 = node54.isSwitch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 40 + "'", int15 == 40);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "STRING  0" + "'", str26, "STRING  0");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strStream46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 40 + "'", int55 == 40);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test09516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09516");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        boolean boolean51 = node47.isScript();
        boolean boolean52 = node47.isFromExterns();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test09517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09517");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        boolean boolean13 = node12.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(40, node12);
        boolean boolean15 = node14.isUnscopedQualifiedName();
        boolean boolean16 = node14.isStringKey();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09518");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str9 = jSDocInfo8.getVersion();
        boolean boolean10 = jSDocInfo8.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo8.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility12 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo8.setVisibility(visibility12);
        jSDocInfo0.setVisibility(visibility12);
        java.util.Set<java.lang.String> strSet15 = jSDocInfo0.getSuppressions();
        boolean boolean16 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet17 = jSDocInfo0.getSuppressions();
        boolean boolean18 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + visibility12 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility12.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09519");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node14.setCharno(1);
        java.util.Set<java.lang.String> strSet17 = node14.getDirectives();
        java.lang.String str18 = node4.checkTreeEquals(node14);
        boolean boolean19 = node4.isNE();
        node4.addSuppression("ERROR 1");
        com.google.javascript.rhino.Node node22 = node4.detachFromParent();
        boolean boolean23 = node4.isOptionalArg();
        boolean boolean24 = node4.isQuotedString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09520");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getPositionOnEndLine();
        int int8 = stringPosition0.getEndLine();
        int int9 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        int int12 = stringPosition0.getStartLine();
        java.lang.String str13 = stringPosition0.getItem();
        int int14 = stringPosition0.getPositionOnEndLine();
        java.lang.String str15 = stringPosition0.getItem();
        java.lang.String str16 = stringPosition0.getItem();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n" + "'", str13, "Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n" + "'", str15, "Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n" + "'", str16, "Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
    }

    @Test
    public void test09521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09521");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("STRING  0", (int) '#', 6);
        boolean boolean5 = node4.isAssignAdd();
        com.google.javascript.rhino.Node node6 = null;
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        boolean boolean21 = node11.getBooleanProp(52);
        boolean boolean22 = node11.isThis();
        boolean boolean23 = node11.isSwitch();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        boolean boolean34 = node28.isDo();
        boolean boolean35 = node28.isDefaultCase();
        node28.setQuotedString();
        boolean boolean38 = node28.getBooleanProp(52);
        int int39 = node28.getLength();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder40 = node28.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node41 = node11.copyInformationFrom(node28);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(42, node4, node6, node11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node41);
    }

    @Test
    public void test09522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09522");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        typePosition0.setPositionInformation(2, 31, 29, 37);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node10.setCharno(1);
        boolean boolean13 = node10.isRegExp();
        int int14 = node10.getSourcePosition();
        com.google.javascript.rhino.Node node15 = node10.getLastChild();
        typePosition0.setItem(node15);
        boolean boolean17 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        boolean boolean42 = node31.hasChild(node41);
        int int43 = node31.getCharno();
        com.google.javascript.rhino.Node node44 = node21.useSourceInfoIfMissingFrom(node31);
        node44.setLength((int) ' ');
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node57 = node55.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node55, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node67 = node65.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) -1, node65, (int) (byte) 1, (int) '#');
        boolean boolean71 = node60.hasChild(node70);
        int int72 = node60.getCharno();
        com.google.javascript.rhino.Node node73 = node50.useSourceInfoIfMissingFrom(node60);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node78 = node50.srcref(node77);
        boolean boolean79 = node44.isEquivalentToTyped(node50);
        com.google.javascript.rhino.Node node80 = node50.getNext();
        boolean boolean81 = node50.isQuotedString();
        com.google.javascript.rhino.Node node82 = node50.cloneTree();
        typePosition0.setItem(node82);
        com.google.javascript.rhino.Node node84 = node82.getLastSibling();
        node84.putIntProp(38, 16);
        boolean boolean88 = node84.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 35 + "'", int72 == 35);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test09523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09523");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isConstructor();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isExterns();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        java.lang.String str10 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test09524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09524");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getStartLine();
        java.lang.String str8 = stringPosition0.getItem();
        stringPosition0.setItem("OR 1\n");
        int int11 = stringPosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test09525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09525");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        java.lang.String str8 = jSDocInfo0.getDescription();
        boolean boolean9 = jSDocInfo0.hasFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
    }

    @Test
    public void test09526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09526");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node7 = node5.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1, node5, (int) (byte) 1, (int) '#');
        boolean boolean11 = node5.isScript();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        java.lang.String str19 = node5.checkTreeEquals(node15);
        boolean boolean20 = node5.isNE();
        node5.addSuppression("ERROR 1");
        com.google.javascript.rhino.Node node23 = node5.detachFromParent();
        boolean boolean24 = node23.isHook();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double29 = node28.getDouble();
        int int30 = node28.getSourcePosition();
        boolean boolean31 = node28.isExprResult();
        node28.setSourceFileForTesting("ERROR 1\n    STRING  0\n    STRING  0\n");
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node28.children();
        java.lang.String str35 = node28.toStringTree();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node39.setCharno(1);
        boolean boolean42 = node39.isRegExp();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        boolean boolean53 = node47.isDo();
        boolean boolean54 = node47.isDefaultCase();
        node47.setQuotedString();
        com.google.javascript.rhino.Node node56 = node39.useSourceInfoFromForTree(node47);
        boolean boolean57 = node56.isVarArgs();
        boolean boolean58 = node56.isScript();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(27, node23, node28, node56, 43, 3);
        com.google.javascript.rhino.Node node62 = node28.getNext();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 4095.0d + "'", double29 == 4095.0d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 409601 + "'", int30 == 409601);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "NUMBER 4095.0 100 [source_file: ERROR 1\n    STRING  0\n    STRING  0\n]\n" + "'", str35, "NUMBER 4095.0 100 [source_file: ERROR 1\n    STRING  0\n    STRING  0\n]\n");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
    }

    @Test
    public void test09527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09527");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node19.hasChild(node29);
        int int31 = node19.getCharno();
        com.google.javascript.rhino.Node node32 = node9.useSourceInfoIfMissingFrom(node19);
        node32.setLength((int) ' ');
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        boolean boolean59 = node48.hasChild(node58);
        int int60 = node48.getCharno();
        com.google.javascript.rhino.Node node61 = node38.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node66 = node38.srcref(node65);
        boolean boolean67 = node32.isEquivalentToTyped(node38);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node74 = node72.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) -1, node72, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node84 = node82.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) -1, node82, (int) (byte) 1, (int) '#');
        boolean boolean88 = node77.hasChild(node87);
        boolean boolean89 = node87.isVar();
        boolean boolean90 = node87.isCase();
        boolean boolean91 = node38.hasChild(node87);
        jSDocInfo0.setAssociatedNode(node38);
        boolean boolean94 = jSDocInfo0.hasDescriptionForParameter("STRING  0");
        java.lang.String str95 = jSDocInfo0.getDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList96 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean97 = jSDocInfo0.hasModifies();
        java.lang.String str98 = jSDocInfo0.getLicense();
        java.lang.String str99 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNotNull(jSTypeExpressionList96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(str98);
        org.junit.Assert.assertNull(str99);
    }

    @Test
    public void test09528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09528");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.setCharno((int) (short) 1);
        java.lang.String str26 = node11.getString();
        boolean boolean27 = node11.isThis();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable28 = node11.getAncestors();
        boolean boolean29 = node11.isSyntheticBlock();
        int int31 = node11.getIntProp(409601);
        boolean boolean32 = node11.isFor();
        boolean boolean33 = node11.isIn();
        java.lang.String str34 = node11.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(ancestorIterable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "STRING  0 [quoted: 1]" + "'", str34, "STRING  0 [quoted: 1]");
    }

    @Test
    public void test09529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09529");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.isExport();
        boolean boolean10 = jSDocInfo0.hasTypedefType();
        java.lang.String str11 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test09530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09530");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition7 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition9 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition10 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition11 = marker0.getAnnotation();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNull(stringPosition7);
        org.junit.Assert.assertNull(stringPosition8);
        org.junit.Assert.assertNull(stringPosition9);
        org.junit.Assert.assertNull(stringPosition10);
        org.junit.Assert.assertNull(stringPosition11);
    }

    @Test
    public void test09531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09531");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.InputId inputId11 = node4.getInputId();
        boolean boolean12 = node4.isDelProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node4.getJsDocBuilderForNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str16 = jSDocInfo15.getVersion();
        boolean boolean17 = jSDocInfo15.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo15.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo15.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList20 = jSDocInfo15.getThrownTypes();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo15.getParameterNames();
        node4.putProp((-1), (java.lang.Object) jSDocInfo15);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = jSDocInfo15.getTypedefType();
        java.lang.String str24 = jSDocInfo15.getLicense();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo15.getImplementedInterfaces();
        java.lang.String str27 = jSDocInfo15.getDescriptionForParameter("(Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n)");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertNotNull(jSTypeExpressionList20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(jSTypeExpression23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertNull(str27);
    }

    @Test
    public void test09532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09532");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        boolean boolean44 = node21.isString();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node54.hasChild(node64);
        boolean boolean66 = node64.isVar();
        boolean boolean67 = node64.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node64.children();
        com.google.javascript.rhino.Node node69 = node21.srcref(node64);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node76 = node74.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) -1, node74, (int) (byte) 1, (int) '#');
        boolean boolean80 = node74.isDo();
        boolean boolean81 = node74.isExprResult();
        boolean boolean82 = node74.isTypeOf();
        com.google.javascript.rhino.Node node83 = node21.useSourceInfoFrom(node74);
        boolean boolean84 = node21.isCall();
        boolean boolean85 = node21.isRegExp();
        boolean boolean86 = node21.isContinue();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test09533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09533");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility8 = null;
        jSDocInfo0.setVisibility(visibility8);
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        boolean boolean11 = jSDocInfo0.isDefine();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getParameterType("OR 0 [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertNull(jSTypeExpression15);
    }

    @Test
    public void test09534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09534");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 10, "NUMBER 4095.0 1\n", 4, 39);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test09535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09535");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isExterns();
        jSDocInfo0.setDeprecated(true);
        boolean boolean6 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getReturnType();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("STRING  0 [source_file: Named type with empty name component]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test09536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09536");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        java.util.Set<java.lang.String> strSet6 = node3.getDirectives();
        boolean boolean7 = node3.isOr();
        boolean boolean8 = node3.isName();
        boolean boolean9 = node3.isDelProp();
        node3.setSourceFileForTesting("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nNUMBER 54.0 52\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: NUMBER 54.0 52\n)");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09537");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean3 = ternaryValue1.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean7 = ternaryValue5.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue8.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue5.xor(ternaryValue10);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue1.xor(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue14.or(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue19.or(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue21.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue17.and(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue12.and(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue27.or(ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue27.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue31.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = ternaryValue32.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue35.or(ternaryValue37);
        java.lang.String str39 = ternaryValue38.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue32.or(ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue43.or(ternaryValue45);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = ternaryValue48.or(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue50.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = ternaryValue46.and(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue41.and(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        java.lang.String str57 = ternaryValue56.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = ternaryValue41.and(ternaryValue56);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = ternaryValue32.or(ternaryValue56);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean63 = ternaryValue61.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = ternaryValue64.or(ternaryValue65);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = ternaryValue61.xor(ternaryValue66);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = ternaryValue66.and(ternaryValue68);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = ternaryValue66.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = ternaryValue56.and(ternaryValue70);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = ternaryValue25.or(ternaryValue71);
        boolean boolean74 = ternaryValue72.toBoolean(false);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "false" + "'", str39, "false");
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "false" + "'", str57, "false");
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test09538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09538");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        java.lang.String str6 = stringPosition0.getItem();
        stringPosition0.setItem("Not declared as a type name");
        java.lang.String str9 = stringPosition0.getItem();
        int int10 = stringPosition0.getPositionOnStartLine();
        int int11 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("OR 1 [length: 32]");
        int int14 = stringPosition0.getEndLine();
        stringPosition0.setItem("NAME");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Not declared as a type name" + "'", str9, "Not declared as a type name");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36 + "'", int10 == 36);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 36 + "'", int11 == 36);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
    }

    @Test
    public void test09539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09539");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getPositionOnEndLine();
        int int8 = stringPosition0.getEndLine();
        int int9 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        stringPosition0.setItem("NAME");
        stringPosition0.setItem("");
        int int16 = stringPosition0.getEndLine();
        int int17 = stringPosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 31 + "'", int16 == 31);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 31 + "'", int17 == 31);
    }

    @Test
    public void test09540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09540");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        boolean boolean44 = node21.isNull();
        com.google.javascript.rhino.jstype.JSType jSType45 = node21.getJSType();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node52 = node50.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) -1, node50, (int) (byte) 1, (int) '#');
        boolean boolean56 = node50.isScript();
        com.google.javascript.rhino.InputId inputId57 = node50.getInputId();
        boolean boolean58 = node50.isDelProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder59 = node50.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node60 = node21.srcref(node50);
        boolean boolean61 = node60.isNumber();
        int int62 = node60.getChildCount();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 100);
        com.google.javascript.rhino.Node node65 = node60.useSourceInfoIfMissingFrom(node64);
        boolean boolean66 = node64.isDelProp();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(51);
        java.util.Set<java.lang.String> strSet69 = node68.getDirectives();
        node64.addChildToBack(node68);
        node68.setLineno((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = node68.getExistingIntProp(97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 97");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(inputId57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(strSet69);
    }

    @Test
    public void test09541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09541");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescriptionForParameter("STRING  0\n");
        boolean boolean5 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str7 = jSDocInfo6.getVersion();
        boolean boolean8 = jSDocInfo6.hasEnumParameterType();
        boolean boolean9 = jSDocInfo6.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo6.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo6.setVisibility(visibility11);
        jSDocInfo0.setVisibility(visibility11);
        com.google.javascript.rhino.Node node14 = null;
        jSDocInfo0.setAssociatedNode(node14);
        boolean boolean16 = jSDocInfo0.containsDeclaration();
        boolean boolean17 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09542");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node14.setCharno(1);
        java.util.Set<java.lang.String> strSet17 = node14.getDirectives();
        java.lang.String str18 = node4.checkTreeEquals(node14);
        boolean boolean19 = node4.isHook();
        boolean boolean20 = node4.isComma();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09543");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        boolean boolean28 = node17.hasChild(node27);
        int int29 = node17.getCharno();
        com.google.javascript.rhino.Node node30 = node7.useSourceInfoIfMissingFrom(node17);
        node30.setLength((int) ' ');
        node3.addChildrenToBack(node30);
        boolean boolean34 = node30.isNull();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder35 = node30.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean40 = node39.isThrow();
        java.lang.String str44 = node39.toString(true, false, true);
        java.lang.String str45 = node39.getQualifiedName();
        boolean boolean46 = node39.isIn();
        com.google.javascript.rhino.Node node47 = node39.cloneTree();
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node51.setCharno(1);
        java.util.Set<java.lang.String> strSet54 = node51.getDirectives();
        boolean boolean55 = node51.isHook();
        node47.addChildToFront(node51);
        boolean boolean57 = node51.isDebugger();
        com.google.javascript.rhino.Node node58 = node30.srcref(node51);
        com.google.javascript.rhino.Node node59 = node51.getFirstChild();
        boolean boolean60 = node51.isScript();
        com.google.javascript.rhino.JSDocInfo jSDocInfo61 = null;
        node51.setJSDocInfo(jSDocInfo61);
        boolean boolean63 = node51.isTry();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "STRING  0" + "'", str44, "STRING  0");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(strSet54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test09544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09544");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getEnumParameterType();
        boolean boolean8 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09545");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(35, "OR 1", (int) (short) 0, 45);
        boolean boolean5 = node4.isExprResult();
        boolean boolean6 = node4.isInc();
        boolean boolean7 = node4.isLabelName();
        int int8 = node4.getSourceOffset();
        boolean boolean9 = node4.isEmpty();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09546");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        boolean boolean12 = strSet3.add("STRING  0");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        int int23 = node22.getType();
        com.google.javascript.rhino.Node node24 = null;
        boolean boolean25 = node22.hasChild(node24);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node29.setCharno(1);
        boolean boolean32 = node29.isRegExp();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node39 = node37.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) -1, node37, (int) (byte) 1, (int) '#');
        boolean boolean43 = node37.isDo();
        boolean boolean44 = node37.isDefaultCase();
        node37.setQuotedString();
        com.google.javascript.rhino.Node node46 = node29.useSourceInfoFromForTree(node37);
        node37.putIntProp((int) (byte) 100, (int) (byte) 0);
        boolean boolean50 = node37.isVarArgs();
        node37.setLineno(37);
        boolean boolean53 = node37.isInstanceOf();
        boolean boolean54 = node37.isAdd();
        com.google.javascript.rhino.Node node55 = node22.srcref(node37);
        java.lang.Object obj57 = node55.getProp(4131);
        boolean boolean58 = strSet3.equals((java.lang.Object) node55);
        java.util.Iterator<java.lang.String> strItor59 = strSet3.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str61 = jSDocInfo60.getVersion();
        boolean boolean62 = jSDocInfo60.isDefine();
        boolean boolean63 = jSDocInfo60.hasModifies();
        boolean boolean64 = jSDocInfo60.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility65 = jSDocInfo60.getVisibility();
        boolean boolean66 = jSDocInfo60.isDefine();
        boolean boolean67 = strSet3.remove((java.lang.Object) jSDocInfo60);
        boolean boolean68 = jSDocInfo60.isNoTypeCheck();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strItor59);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(visibility65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test09547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09547");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        boolean boolean12 = node4.isFor();
        node4.setOptionalArg(false);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node18.setCharno(1);
        boolean boolean21 = node18.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        boolean boolean32 = node26.isDo();
        boolean boolean33 = node26.isDefaultCase();
        node26.setQuotedString();
        com.google.javascript.rhino.Node node35 = node18.useSourceInfoFromForTree(node26);
        node26.putIntProp((int) (byte) 100, (int) (byte) 0);
        node26.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean42 = node26.isInc();
        node26.setQuotedString();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        int int48 = node47.getSourcePosition();
        int int49 = node47.getType();
        boolean boolean50 = node47.isLabel();
        node47.setSourceFileForTesting("STRING  0 [quoted: 1]\n");
        boolean boolean53 = node26.isEquivalentToTyped(node47);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) 39);
        com.google.javascript.rhino.Node node57 = node55.getAncestor(44);
        boolean boolean58 = node55.isAssignAdd();
        boolean boolean59 = node47.hasChild(node55);
        com.google.javascript.rhino.Node node60 = node4.copyInformationFromForTree(node47);
        com.google.javascript.rhino.Node node61 = node47.cloneTree();
        boolean boolean62 = node61.isVar();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 40 + "'", int49 == 40);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test09548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09548");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str8 = jSDocInfo7.getVersion();
        boolean boolean9 = jSDocInfo7.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo7.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo7.getImplementedInterfaces();
        boolean boolean12 = jSDocInfo7.hasReturnType();
        boolean boolean13 = jSDocInfo7.hasBaseType();
        boolean boolean14 = jSDocInfo7.isNoCompile();
        boolean boolean15 = jSDocInfo7.hasBaseType();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node20.setCharno(1);
        boolean boolean23 = node20.isRegExp();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        boolean boolean34 = node28.isDo();
        boolean boolean35 = node28.isDefaultCase();
        node28.setQuotedString();
        com.google.javascript.rhino.Node node37 = node20.useSourceInfoFromForTree(node28);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node41.setCharno(1);
        java.util.Set<java.lang.String> strSet44 = node41.getDirectives();
        node41.setLength(0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(0, node37, node41, node56, (int) 'a', (int) (short) 0);
        boolean boolean60 = node37.isNull();
        com.google.javascript.rhino.jstype.JSType jSType61 = node37.getJSType();
        jSDocInfo7.setAssociatedNode(node37);
        boolean boolean63 = jSDocInfo7.shouldPreserveTry();
        boolean boolean64 = jSDocInfo7.hasModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo65 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str66 = jSDocInfo65.getVersion();
        boolean boolean67 = jSDocInfo65.hasEnumParameterType();
        java.lang.String str69 = jSDocInfo65.getDescriptionForParameter("STRING  0\n");
        boolean boolean70 = jSDocInfo65.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str72 = jSDocInfo71.getVersion();
        boolean boolean73 = jSDocInfo71.hasEnumParameterType();
        boolean boolean74 = jSDocInfo71.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo71.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility76 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo71.setVisibility(visibility76);
        jSDocInfo65.setVisibility(visibility76);
        jSDocInfo7.setVisibility(visibility76);
        jSDocInfo0.setVisibility(visibility76);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression81 = jSDocInfo0.getTypedefType();
        java.lang.String str82 = jSDocInfo0.getVersion();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean84 = jSDocInfo0.hasType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertTrue("'" + visibility76 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility76.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(jSTypeExpression81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test09549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09549");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        boolean boolean10 = jSDocInfo0.isConstructor();
        boolean boolean11 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean13 = jSDocInfo0.isNoShadow();
        boolean boolean14 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09550");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasThisType();
        jSDocInfo0.setDeprecated(false);
        boolean boolean4 = jSDocInfo0.isHidden();
        boolean boolean5 = jSDocInfo0.isExpose();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean7 = jSDocInfo0.isHidden();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test09551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09551");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        boolean boolean8 = jSDocInfo0.isDefine();
        boolean boolean9 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09552");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        boolean boolean51 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node52 = node14.removeFirstChild();
        node52.setVarArgs(true);
        node52.detachChildren();
        java.util.Set<java.lang.String> strSet56 = node52.getDirectives();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean61 = node60.isThrow();
        java.lang.String str65 = node60.toString(true, false, true);
        java.lang.String str66 = node60.getQualifiedName();
        boolean boolean67 = node60.isIn();
        com.google.javascript.rhino.Node node68 = node60.cloneTree();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node72.setCharno(1);
        java.util.Set<java.lang.String> strSet75 = node72.getDirectives();
        boolean boolean76 = node72.isHook();
        node68.addChildToFront(node72);
        boolean boolean78 = node68.isNE();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node68.siblings();
        com.google.javascript.rhino.Node node80 = node52.useSourceInfoFrom(node68);
        boolean boolean81 = node52.isScript();
        boolean boolean82 = node52.isGetterDef();
        int int83 = node52.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "STRING  0" + "'", str65, "STRING  0");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(strSet75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(nodeIterable79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test09553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09553");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        boolean boolean5 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node9.setCharno(1);
        boolean boolean12 = node9.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isDo();
        boolean boolean24 = node17.isDefaultCase();
        node17.setQuotedString();
        com.google.javascript.rhino.Node node26 = node9.useSourceInfoFromForTree(node17);
        jSDocInfo0.setAssociatedNode(node9);
        java.lang.String str28 = jSDocInfo0.getMeaning();
        com.google.javascript.rhino.Node node29 = jSDocInfo0.getAssociatedNode();
        java.lang.String str30 = jSDocInfo0.getLendsName();
        boolean boolean31 = jSDocInfo0.hasEnumParameterType();
        boolean boolean32 = jSDocInfo0.isConstructor();
        java.util.Collection<java.lang.String> strCollection33 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(strCollection33);
    }

    @Test
    public void test09554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09554");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        boolean boolean44 = node21.isNull();
        com.google.javascript.rhino.jstype.JSType jSType45 = node21.getJSType();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node52 = node50.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) -1, node50, (int) (byte) 1, (int) '#');
        boolean boolean56 = node50.isScript();
        com.google.javascript.rhino.InputId inputId57 = node50.getInputId();
        boolean boolean58 = node50.isDelProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder59 = node50.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node60 = node21.srcref(node50);
        boolean boolean61 = node60.isNumber();
        int int62 = node60.getChildCount();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 100);
        com.google.javascript.rhino.Node node65 = node60.useSourceInfoIfMissingFrom(node64);
        boolean boolean66 = node64.isDelProp();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(51);
        java.util.Set<java.lang.String> strSet69 = node68.getDirectives();
        node64.addChildToBack(node68);
        boolean boolean71 = node64.isQuotedString();
        boolean boolean72 = node64.isQuotedString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(inputId57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test09555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09555");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node20.setSourceFileForTesting("STRING  0\n");
        int int23 = node20.getSourcePosition();
        int int24 = node20.getSourcePosition();
        boolean boolean25 = node20.isReturn();
        boolean boolean26 = node20.isCall();
        // The following exception was thrown during execution in test generation
        try {
            node20.setSideEffectFlags((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test09556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09556");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        boolean boolean16 = node10.isDo();
        boolean boolean17 = node10.isDefaultCase();
        node10.setQuotedString();
        boolean boolean19 = node10.isDec();
        boolean boolean20 = node10.isLabel();
        boolean boolean21 = node10.isSetterDef();
        boolean boolean22 = node10.isRegExp();
        boolean boolean23 = node10.isName();
        boolean boolean24 = node10.isVoid();
        com.google.javascript.rhino.Node node25 = node10.cloneNode();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node25);
        java.lang.String str27 = node25.getString();
        boolean boolean28 = node25.isVar();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str30 = jSDocInfo29.getVersion();
        java.lang.String str31 = jSDocInfo29.getFileOverview();
        jSDocInfo29.addSuppression("STRING  0");
        boolean boolean34 = jSDocInfo29.isNoCompile();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo29.getModifies();
        java.util.stream.Stream<java.lang.String> strStream36 = strSet35.stream();
        node25.setDirectives(strSet35);
        boolean boolean38 = node25.isEmpty();
        boolean boolean39 = node25.isStringKey();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test09557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09557");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getAnnotation();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
    }

    @Test
    public void test09558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09558");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node7 = node5.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1, node5, (int) (byte) 1, (int) '#');
        boolean boolean11 = node5.isScript();
        com.google.javascript.rhino.Node node12 = node5.detachFromParent();
        boolean boolean13 = node5.isAssignAdd();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        boolean boolean42 = node31.hasChild(node41);
        int int43 = node31.getCharno();
        com.google.javascript.rhino.Node node44 = node21.useSourceInfoIfMissingFrom(node31);
        node44.setLength((int) ' ');
        node17.addChildrenToBack(node44);
        node17.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) 32);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node58 = node56.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) -1, node56, (int) (byte) 1, (int) '#');
        int int62 = node61.getType();
        boolean boolean63 = node61.isFor();
        java.lang.String str64 = node61.getQualifiedName();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(5, node5, node17, node51, node61, (int) (byte) 10, 39);
        node67.putBooleanProp((int) (short) 1, true);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test09559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09559");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int4 = node3.getType();
        int int5 = node3.getCharno();
        boolean boolean6 = node3.isObjectLit();
        boolean boolean7 = node3.isNoSideEffectsCall();
        boolean boolean8 = node3.isCase();
        boolean boolean9 = node3.isStringKey();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09560");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        boolean boolean7 = jSDocInfo0.isNoCompile();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str10 = jSDocInfo9.getVersion();
        java.lang.String str11 = jSDocInfo9.getFileOverview();
        jSDocInfo9.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo9.getBaseType();
        boolean boolean15 = jSDocInfo9.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet16 = jSDocInfo9.getSuppressions();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int21 = node20.getType();
        int int22 = node20.getCharno();
        boolean boolean23 = strSet16.equals((java.lang.Object) node20);
        boolean boolean24 = node20.isOptionalArg();
        int int25 = node20.getSourceOffset();
        jSDocInfo0.setAssociatedNode(node20);
        java.util.Set<java.lang.String> strSet27 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node52 = node37.clonePropsFrom(node51);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node63 = node61.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) -1, node61, (int) (byte) 1, (int) '#');
        boolean boolean67 = node61.isScript();
        com.google.javascript.rhino.Node node68 = node61.detachFromParent();
        node68.setOptionalArg(false);
        boolean boolean72 = node68.getBooleanProp(31);
        com.google.javascript.rhino.Node node73 = node56.copyInformationFrom(node68);
        boolean boolean74 = node73.isLabel();
        com.google.javascript.rhino.Node node75 = node51.useSourceInfoIfMissingFrom(node73);
        boolean boolean76 = node51.isContinue();
        int int77 = node51.getLineno();
        com.google.javascript.rhino.Node node78 = node51.getLastSibling();
        jSDocInfo0.setAssociatedNode(node51);
        boolean boolean80 = node51.isEmpty();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 40 + "'", int21 == 40);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test09561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09561");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        boolean boolean51 = node40.hasChild(node50);
        int int52 = node40.getCharno();
        com.google.javascript.rhino.Node node53 = node30.useSourceInfoIfMissingFrom(node40);
        int int54 = node30.getSourcePosition();
        java.lang.String str55 = node30.toString();
        com.google.javascript.rhino.Node node56 = node3.srcref(node30);
        boolean boolean57 = node3.isBreak();
        node3.removeProp(50);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4131 + "'", int54 == 4131);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR 1" + "'", str55, "OR 1");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test09562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09562");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        int int4 = jSDocInfo0.getImplementedInterfaceCount();
        int int5 = jSDocInfo0.getExtendedInterfacesCount();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0);
        node7.setWasEmptyNode(false);
        jSDocInfo0.setAssociatedNode(node7);
        boolean boolean11 = jSDocInfo0.isExport();
        java.lang.String str12 = jSDocInfo0.getOriginalCommentString();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo0.getImplementedInterfaces();
        jSDocInfo0.setDeprecated(true);
        boolean boolean16 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09563");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        boolean boolean5 = jSDocInfo0.hasType();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09564");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        java.lang.String str7 = jSDocInfo0.getMeaning();
        java.lang.String str8 = jSDocInfo0.getDescription();
        int int9 = jSDocInfo0.getParameterCount();
        boolean boolean10 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09565");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(8, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node9 = node7.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1, node7, (int) (byte) 1, (int) '#');
        boolean boolean13 = node7.isDo();
        boolean boolean14 = node7.isDefaultCase();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node28.hasChild(node38);
        int int40 = node28.getCharno();
        com.google.javascript.rhino.Node node41 = node18.useSourceInfoIfMissingFrom(node28);
        int int42 = node18.getSourcePosition();
        java.lang.String str43 = node18.toString();
        int int44 = node7.getIndexOfChild(node18);
        int int45 = node2.getIndexOfChild(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str47 = jSDocInfo46.getVersion();
        boolean boolean48 = jSDocInfo46.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo46.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo46.getImplementedInterfaces();
        java.lang.String str51 = jSDocInfo46.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo46.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = jSDocInfo46.getTypedefType();
        node2.setJSDocInfo(jSDocInfo46);
        boolean boolean56 = node2.isParamList();
        boolean boolean57 = node2.isFunction();
        int int59 = node2.getIntProp(0);
        boolean boolean60 = node2.isArrayLit();
        boolean boolean62 = node2.getBooleanProp(19);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4131 + "'", int42 == 4131);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR 1" + "'", str43, "OR 1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "JSDocInfo" + "'", str51, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertNull(jSTypeExpression54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test09566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09566");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesArguments();
    }

    @Test
    public void test09567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09567");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double4 = node3.getDouble();
        boolean boolean5 = node3.isAdd();
        com.google.javascript.rhino.Node node6 = node3.cloneNode();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node10.setCharno(1);
        java.util.Set<java.lang.String> strSet13 = node10.getDirectives();
        node10.setLength(0);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = node10.getJSDocInfo();
        com.google.javascript.rhino.InputId inputId18 = null;
        node10.setInputId(inputId18);
        com.google.javascript.rhino.Node node20 = node10.cloneNode();
        boolean boolean21 = node10.isComma();
        boolean boolean22 = node10.isLocalResultCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4095.0d + "'", double4 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(jSDocInfo17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09568");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node9 = node7.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1, node7, (int) (byte) 1, (int) '#');
        boolean boolean13 = node7.isDo();
        boolean boolean14 = node7.isDefaultCase();
        node7.setQuotedString();
        boolean boolean16 = node7.isDec();
        boolean boolean17 = node7.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node7.siblings();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(51);
        java.lang.String str21 = node7.checkTreeEquals(node20);
        boolean boolean22 = node7.isCatch();
        com.google.javascript.rhino.InputId inputId23 = null;
        node7.setInputId(inputId23);
        typePosition0.setItem(node7);
        int int26 = typePosition0.getEndLine();
        int int27 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node28 = typePosition0.getItem();
        com.google.javascript.rhino.Node node29 = node28.cloneTree();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node50 = node48.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) -1, node48, (int) (byte) 1, (int) '#');
        boolean boolean54 = node43.hasChild(node53);
        int int55 = node43.getCharno();
        com.google.javascript.rhino.Node node56 = node33.useSourceInfoIfMissingFrom(node43);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node61 = node33.srcref(node60);
        boolean boolean62 = node61.isDefaultCase();
        boolean boolean63 = node61.isCall();
        boolean boolean64 = node61.isThrow();
        com.google.javascript.rhino.Node node65 = node29.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node66 = node29.cloneNode();
        boolean boolean67 = node66.isInc();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str21, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09569");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isConstant();
        boolean boolean6 = jSDocInfo0.isDefine();
        boolean boolean7 = jSDocInfo0.isNoTypeCheck();
        jSDocInfo0.setLicense("(STRING  0 [source_file: Named type with empty name component])");
        jSDocInfo0.setLicense("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nOR 0\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: OR 0\n)");
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getModifies();
        boolean boolean13 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09570");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isExprResult();
        boolean boolean12 = node4.isTypeOf();
        java.lang.Appendable appendable13 = null;
        // The following exception was thrown during execution in test generation
        try {
            node4.appendStringTree(appendable13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09571");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        jSDocInfo0.setAssociatedNode(node8);
        boolean boolean15 = jSDocInfo0.isNoShadow();
        java.lang.String str16 = jSDocInfo0.getFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList17 = jSDocInfo0.getExtendedInterfaces();
        int int18 = jSDocInfo0.getParameterCount();
        boolean boolean19 = jSDocInfo0.shouldPreserveTry();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(jSTypeExpressionList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test09572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09572");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        boolean boolean21 = node3.isInc();
        java.lang.String str25 = node3.toString(true, false, true);
        boolean boolean26 = node3.isDebugger();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node3.getStaticSourceFile();
        boolean boolean28 = node3.isWhile();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder29 = node3.getJsDocBuilderForNode();
        boolean boolean30 = node3.isDebugger();
        boolean boolean31 = node3.isBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "STRING  0" + "'", str25, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test09573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09573");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("(NUMBER 35.0)");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "((NUMBER 35.0))" + "'", str1, "((NUMBER 35.0))");
    }

    @Test
    public void test09574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09574");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        java.lang.String str10 = jSDocInfo0.getBlockDescription();
        java.lang.String str12 = jSDocInfo0.getDescriptionForParameter("OR");
        boolean boolean13 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09575");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isThis();
        java.lang.String[] strArray14 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        boolean boolean22 = strSet15.addAll((java.util.Collection<java.lang.String>) strList20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str24 = jSDocInfo23.getVersion();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        boolean boolean26 = jSDocInfo23.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo23.getParameterNames();
        boolean boolean28 = strSet15.retainAll((java.util.Collection<java.lang.String>) strSet27);
        java.util.stream.Stream<java.lang.String> strStream29 = strSet15.stream();
        node4.setDirectives((java.util.Set<java.lang.String>) strSet15);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node34.setCharno(1);
        com.google.javascript.rhino.Node node37 = node34.cloneNode();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("(OR 1)", 29, 49);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 1, node4, node37, node41, 0, 45);
        node41.putBooleanProp(38, false);
        boolean boolean48 = node41.isIf();
        java.lang.Appendable appendable49 = null;
        // The following exception was thrown during execution in test generation
        try {
            node41.appendStringTree(appendable49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test09576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09576");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        java.lang.String str14 = node8.getQualifiedName();
        boolean boolean15 = node8.isIn();
        com.google.javascript.rhino.Node node16 = node8.cloneTree();
        boolean boolean17 = node16.isRegExp();
        boolean boolean18 = node16.isDebugger();
        node3.addChildToBack(node16);
        boolean boolean20 = node16.hasMoreThanOneChild();
        boolean boolean21 = node16.isSyntheticBlock();
        boolean boolean22 = node16.isSyntheticBlock();
        boolean boolean23 = node16.isLabel();
        boolean boolean24 = node16.isNull();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09577");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        boolean boolean4 = jSDocInfo0.hasType();
        boolean boolean5 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09578");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        java.lang.String str6 = jSDocInfo0.getDescription();
        java.lang.String str7 = jSDocInfo0.getLendsName();
        boolean boolean8 = jSDocInfo0.isConstructor();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09579");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescriptionForParameter("STRING  0\n");
        java.lang.String str5 = jSDocInfo0.getDescription();
        boolean boolean6 = jSDocInfo0.isConstructor();
        jSDocInfo0.setDeprecated(false);
        java.lang.String str9 = jSDocInfo0.getLicense();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(strList10);
    }

    @Test
    public void test09580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09580");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        java.lang.String str6 = jSDocInfo0.getReturnDescription();
        boolean boolean7 = jSDocInfo0.hasModifies();
        java.lang.String str8 = jSDocInfo0.getVersion();
        int int9 = jSDocInfo0.getParameterCount();
        boolean boolean10 = jSDocInfo0.isOverride();
        java.lang.String str12 = jSDocInfo0.getDescriptionForParameter("");
        java.lang.String str13 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo0.getEnumParameterType();
        boolean boolean15 = jSDocInfo0.hasType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNull(jSTypeExpression14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09581");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        boolean boolean51 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node52 = node14.removeFirstChild();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean57 = node56.isThrow();
        java.lang.String str61 = node56.toString(true, false, true);
        java.lang.String str62 = node56.getQualifiedName();
        node56.addSuppression("STRING  0");
        boolean boolean65 = node56.isNull();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder66 = node56.new FileLevelJsDocBuilder();
        node14.addChildrenToBack(node56);
        boolean boolean68 = node14.isNull();
        com.google.javascript.rhino.Node node70 = node14.getAncestor(48);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "STRING  0" + "'", str61, "STRING  0");
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(node70);
    }

    @Test
    public void test09582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09582");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(32);
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearAllFlags();
        int int4 = sideEffectFlags1.valueOf();
        boolean boolean5 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesThis();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09583");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber(0.0d, (int) ' ', 409601);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(51, node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = node4.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(staticSourceFile6);
    }

    @Test
    public void test09584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09584");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection8 = jSDocInfo0.getMarkers();
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getImplementedInterfaces();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection11 = jSDocInfo0.getTypeNodes();
        java.lang.String str12 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(markerCollection8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNotNull(nodeCollection11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test09585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09585");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        int int10 = node3.getIntProp(51);
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        boolean boolean12 = node3.isReturn();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean17 = node16.isThrow();
        java.lang.String str21 = node16.toString(true, false, true);
        node16.setQuotedString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str24 = jSDocInfo23.getVersion();
        boolean boolean25 = jSDocInfo23.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo23.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility27 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo23.setVisibility(visibility27);
        node16.setJSDocInfo(jSDocInfo23);
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node16.setJSType(jSType30);
        node16.setOptionalArg(false);
        node3.addChildToBack(node16);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "STRING  0" + "'", str21, "STRING  0");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + visibility27 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility27.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
    }

    @Test
    public void test09586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09586");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setThrows();
        int int6 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setAllFlags();
        boolean boolean8 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setReturnsTainted();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test09587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09587");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("ERROR 0");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(ERROR 0)" + "'", str1, "(ERROR 0)");
    }

    @Test
    public void test09588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09588");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node15.isScript();
        node15.setQuotedString();
        boolean boolean23 = strSet3.equals((java.lang.Object) node15);
        strSet3.clear();
        java.lang.String[] strArray27 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        boolean boolean31 = strSet28.add("STRING  0");
        java.lang.String[] strArray34 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        boolean boolean42 = strSet35.addAll((java.util.Collection<java.lang.String>) strList40);
        boolean boolean43 = strSet28.containsAll((java.util.Collection<java.lang.String>) strList40);
        java.lang.String[] strArray46 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        boolean boolean50 = strSet47.add("STRING  0");
        java.lang.String[] strArray53 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        java.lang.String[] strArray58 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList59 = new java.util.ArrayList<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList59, strArray58);
        boolean boolean61 = strSet54.addAll((java.util.Collection<java.lang.String>) strList59);
        boolean boolean62 = strSet47.containsAll((java.util.Collection<java.lang.String>) strList59);
        boolean boolean63 = strSet28.containsAll((java.util.Collection<java.lang.String>) strSet47);
        java.lang.String[] strArray66 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        java.lang.String[] strArray71 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList72 = new java.util.ArrayList<java.lang.String>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList72, strArray71);
        boolean boolean74 = strSet67.addAll((java.util.Collection<java.lang.String>) strList72);
        strSet67.clear();
        boolean boolean76 = strSet47.retainAll((java.util.Collection<java.lang.String>) strSet67);
        boolean boolean77 = strSet3.containsAll((java.util.Collection<java.lang.String>) strSet47);
        boolean boolean78 = strSet47.isEmpty();
        java.util.Collection<java.lang.String> strCollection79 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = strSet47.retainAll(strCollection79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test09589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09589");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.setCharno((int) (short) 1);
        java.lang.String str26 = node11.getString();
        boolean boolean27 = node11.isThis();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable28 = node11.getAncestors();
        boolean boolean29 = node11.isSyntheticBlock();
        boolean boolean30 = node11.isSyntheticBlock();
        boolean boolean31 = node11.isIf();
        boolean boolean32 = node11.isNE();
        int int33 = node11.getChildCount();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(ancestorIterable28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test09590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09590");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        jSDocInfo0.setLicense("Named type with empty name component");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getThrownTypes();
        boolean boolean12 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09591");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean3 = ternaryValue1.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = ternaryValue4.or(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue1.xor(ternaryValue6);
        java.lang.String str8 = ternaryValue7.toString();
        java.lang.String str9 = ternaryValue7.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        boolean boolean12 = ternaryValue10.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue13.or(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue13.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue16.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue10.or(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue7.xor(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean23 = ternaryValue21.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue24.or(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue21.xor(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue29.or(ternaryValue31);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue34.or(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue36.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue32.and(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        java.lang.String str42 = ternaryValue41.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue32.and(ternaryValue41);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue27.or(ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue46.or(ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue51.or(ternaryValue53);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue53.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue49.and(ternaryValue53);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        java.lang.String str59 = ternaryValue58.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue49.and(ternaryValue58);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = ternaryValue27.and(ternaryValue58);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = ternaryValue18.or(ternaryValue61);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = ternaryValue62.or(ternaryValue63);
        java.lang.String str65 = ternaryValue62.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = ternaryValue62.not();
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "true" + "'", str8, "true");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "true" + "'", str9, "true");
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "true" + "'", str42, "true");
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "true" + "'", str59, "true");
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "true" + "'", str65, "true");
        org.junit.Assert.assertNotNull(ternaryValue66);
    }

    @Test
    public void test09592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09592");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = booleanLiteralSet1.intersection(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = booleanLiteralSet0.intersection(booleanLiteralSet1);
        boolean boolean6 = booleanLiteralSet4.contains(false);
        boolean boolean8 = booleanLiteralSet4.contains(true);
        boolean boolean10 = booleanLiteralSet4.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet12.intersection(booleanLiteralSet13);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = booleanLiteralSet11.intersection(booleanLiteralSet12);
        boolean boolean17 = booleanLiteralSet15.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = booleanLiteralSet18.intersection(booleanLiteralSet19);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = booleanLiteralSet15.intersection(booleanLiteralSet19);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = booleanLiteralSet4.union(booleanLiteralSet19);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet24.intersection(booleanLiteralSet25);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = booleanLiteralSet23.intersection(booleanLiteralSet24);
        boolean boolean29 = booleanLiteralSet27.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = booleanLiteralSet30.intersection(booleanLiteralSet31);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = booleanLiteralSet27.intersection(booleanLiteralSet31);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = booleanLiteralSet33.intersection(booleanLiteralSet35);
        boolean boolean38 = booleanLiteralSet33.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet40 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = booleanLiteralSet40.intersection(booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = booleanLiteralSet39.intersection(booleanLiteralSet40);
        boolean boolean45 = booleanLiteralSet40.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = booleanLiteralSet33.intersection(booleanLiteralSet40);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = booleanLiteralSet22.intersection(booleanLiteralSet46);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet51 = booleanLiteralSet49.intersection(booleanLiteralSet50);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet52 = booleanLiteralSet48.intersection(booleanLiteralSet49);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet53 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet54 = booleanLiteralSet52.union(booleanLiteralSet53);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = booleanLiteralSet46.intersection(booleanLiteralSet54);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet40 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet40.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet51 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet51.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet52 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet52.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet53 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet53.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet54 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet54.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
    }

    @Test
    public void test09593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09593");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(53, "OR 51");
        boolean boolean3 = node2.isLabel();
        java.util.Set<java.lang.String> strSet4 = node2.getDirectives();
        java.lang.Object obj6 = node2.getProp(44);
        boolean boolean7 = node2.isQualifiedName();
        node2.removeProp(0);
        java.lang.String[] strArray12 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        boolean boolean16 = strSet13.add("STRING  0");
        boolean boolean18 = strSet13.equals((java.lang.Object) 45);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str20 = jSDocInfo19.getVersion();
        boolean boolean21 = jSDocInfo19.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet22 = jSDocInfo19.getParameterNames();
        jSDocInfo19.addSuppression("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo19.getExtendedInterfaces();
        boolean boolean26 = jSDocInfo19.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo19.getModifies();
        java.lang.String str28 = jSDocInfo19.getReturnDescription();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo19.getParameterNames();
        boolean boolean30 = strSet13.equals((java.lang.Object) jSDocInfo19);
        node2.setDirectives((java.util.Set<java.lang.String>) strSet13);
        boolean boolean32 = node2.isThis();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test09594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09594");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) 10, "Named type with empty name component");
        boolean boolean3 = node2.isContinue();
        boolean boolean4 = node2.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09595");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node16.setCharno(1);
        java.util.Set<java.lang.String> strSet19 = node16.getDirectives();
        boolean boolean20 = node16.isHook();
        node12.addChildToFront(node16);
        boolean boolean22 = node12.isNE();
        com.google.javascript.rhino.Node node23 = null;
        com.google.javascript.rhino.Node node24 = node12.getChildBefore(node23);
        com.google.javascript.rhino.Node node25 = node12.getLastChild();
        com.google.javascript.rhino.Node node26 = node25.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(38, node25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node26);
    }

    @Test
    public void test09596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09596");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test09597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09597");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        jSDocInfo0.addSuppression("OR 1");
        boolean boolean10 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getSuppressions();
        java.lang.String[] strArray16 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        boolean boolean24 = strSet17.addAll((java.util.Collection<java.lang.String>) strList22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str26 = jSDocInfo25.getVersion();
        java.lang.String str27 = jSDocInfo25.getFileOverview();
        boolean boolean28 = jSDocInfo25.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo25.getParameterNames();
        boolean boolean30 = strSet17.retainAll((java.util.Collection<java.lang.String>) strSet29);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition31 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition32 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition33 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition34 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray35 = new com.google.javascript.rhino.JSDocInfo.StringPosition[] { stringPosition31, stringPosition32, stringPosition33, stringPosition34 };
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray36 = strSet17.toArray(stringPositionArray35);
        java.lang.Object obj37 = null;
        boolean boolean38 = strSet17.remove(obj37);
        boolean boolean39 = strSet17.isEmpty();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition40 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int41 = namePosition40.getEndLine();
        int int42 = namePosition40.getPositionOnEndLine();
        com.google.javascript.rhino.Node node43 = null;
        namePosition40.setItem(node43);
        int int45 = namePosition40.getPositionOnStartLine();
        int int46 = namePosition40.getPositionOnStartLine();
        int int47 = namePosition40.getPositionOnEndLine();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        boolean boolean52 = node51.isDefaultCase();
        namePosition40.setItem(node51);
        boolean boolean54 = strSet17.remove((java.lang.Object) namePosition40);
        boolean boolean55 = strSet13.containsAll((java.util.Collection<java.lang.String>) strSet17);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNotNull(markerCollection12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(stringPositionArray35);
        org.junit.Assert.assertNotNull(stringPositionArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test09598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09598");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        com.google.javascript.rhino.Node node51 = node50.getParent();
        boolean boolean52 = node50.isSetterDef();
        java.lang.String[] strArray55 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet56 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet56, strArray55);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        boolean boolean63 = strSet56.addAll((java.util.Collection<java.lang.String>) strList61);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node70 = node68.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) -1, node68, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node80 = node78.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (byte) -1, node78, (int) (byte) 1, (int) '#');
        boolean boolean84 = node73.hasChild(node83);
        boolean boolean85 = node83.isVar();
        boolean boolean86 = node83.isTypeOf();
        boolean boolean87 = strSet56.contains((java.lang.Object) node83);
        node50.setDirectives((java.util.Set<java.lang.String>) strSet56);
        strSet56.clear();
        strSet56.clear();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test09599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09599");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0 [quoted: 1]\n");
        node1.setLineno(31);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile4 = node1.getStaticSourceFile();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile5 = node1.getStaticSourceFile();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(0, 2, 48);
        int int10 = node9.getType();
        boolean boolean11 = node9.isLabelName();
        boolean boolean12 = node1.hasChild(node9);
        boolean boolean13 = node9.isSyntheticBlock();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(staticSourceFile4);
        org.junit.Assert.assertNull(staticSourceFile5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09600");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        boolean boolean4 = node3.isAnd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str6 = jSDocInfo5.getVersion();
        java.lang.String str7 = jSDocInfo5.getFileOverview();
        jSDocInfo5.addSuppression("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo5.getExtendedInterfaces();
        boolean boolean11 = jSDocInfo5.isConstructor();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(35, "OR 1", (int) (short) 0, 45);
        boolean boolean18 = node17.isExprResult();
        boolean boolean19 = node3.isEquivalentTo(node17);
        com.google.javascript.rhino.Node node20 = node17.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(node20);
    }

    @Test
    public void test09601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09601");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        boolean boolean44 = node40.isDefaultCase();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node48.setCharno(1);
        boolean boolean51 = node48.isRegExp();
        int int52 = node48.getSourcePosition();
        com.google.javascript.rhino.Node node53 = node48.getLastChild();
        com.google.javascript.rhino.Node node54 = node40.useSourceInfoFrom(node48);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        int int65 = node64.getType();
        com.google.javascript.rhino.Node node66 = node40.srcref(node64);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder67 = node64.getJsDocBuilderForNode();
        boolean boolean68 = node64.isHook();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node79 = node77.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) -1, node77, (int) (byte) 1, (int) '#');
        boolean boolean83 = node77.isScript();
        com.google.javascript.rhino.Node node84 = node77.detachFromParent();
        node84.setOptionalArg(false);
        boolean boolean88 = node84.getBooleanProp(31);
        com.google.javascript.rhino.Node node89 = node72.copyInformationFrom(node84);
        int int90 = node72.getSourceOffset();
        node72.putIntProp(36, 23);
        boolean boolean94 = node64.isEquivalentToTyped(node72);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test09602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09602");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getAnnotation();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition4 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker0.getType();
        org.junit.Assert.assertNull(typePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(nodeSourcePosition4);
        org.junit.Assert.assertNull(typePosition5);
    }

    @Test
    public void test09603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09603");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(38);
        boolean boolean2 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesArguments();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setThrows();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09604");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(53, "OR 51");
        boolean boolean3 = node2.isLabel();
        java.util.Set<java.lang.String> strSet4 = node2.getDirectives();
        java.lang.Object obj6 = node2.getProp(44);
        node2.setSourceEncodedPosition(8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str10 = jSDocInfo9.getVersion();
        boolean boolean11 = jSDocInfo9.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo9.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo9.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo9.getThrownTypes();
        java.lang.String str15 = jSDocInfo9.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str17 = jSDocInfo16.getVersion();
        boolean boolean18 = jSDocInfo16.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet19 = jSDocInfo16.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo16.setVisibility(visibility20);
        jSDocInfo9.setVisibility(visibility20);
        boolean boolean23 = jSDocInfo9.isNoSideEffects();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo9.getSuppressions();
        node2.setDirectives(strSet24);
        int int26 = node2.getLength();
        com.google.javascript.rhino.InputId inputId27 = node2.getInputId();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int32 = node31.getType();
        boolean boolean33 = node31.isArrayLit();
        node31.setWasEmptyNode(false);
        boolean boolean36 = node31.isNot();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        boolean boolean47 = node41.isDo();
        boolean boolean48 = node41.isDefaultCase();
        node41.setQuotedString();
        boolean boolean50 = node41.isDec();
        boolean boolean51 = node41.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable52 = node41.siblings();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(51);
        java.lang.String str55 = node41.checkTreeEquals(node54);
        boolean boolean56 = node41.isObjectLit();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(6);
        com.google.javascript.rhino.Node node59 = node41.copyInformationFrom(node58);
        boolean boolean60 = node41.isGetterDef();
        java.lang.String str61 = node31.checkTreeEquals(node41);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean66 = node65.isThrow();
        java.lang.String str70 = node65.toString(true, false, true);
        boolean boolean71 = node65.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = node65.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile73 = null;
        node65.setStaticSourceFile(staticSourceFile73);
        boolean boolean75 = node65.isQualifiedName();
        com.google.javascript.rhino.Node node77 = node65.getAncestor(4095);
        boolean boolean78 = node65.isQuotedString();
        com.google.javascript.rhino.Node node79 = node41.useSourceInfoIfMissingFromForTree(node65);
        int int80 = node41.getChildCount();
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildrenToBack(node41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(inputId27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 40 + "'", int32 == 40);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nodeIterable52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str55, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "STRING  0" + "'", str70, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test09605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09605");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setAllFlags();
        int int4 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test09606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09606");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isBlock();
        boolean boolean23 = node19.isTypeOf();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean28 = node27.isThrow();
        java.lang.String str32 = node27.toString(true, false, true);
        node27.setIsSyntheticBlock(true);
        boolean boolean35 = node27.isTry();
        java.lang.String str36 = node27.toStringTree();
        boolean boolean37 = node27.isRegExp();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node41.setCharno(1);
        java.util.Set<java.lang.String> strSet44 = node41.getDirectives();
        node41.setCharno((int) (short) -1);
        boolean boolean47 = node41.isRegExp();
        boolean boolean48 = node41.isDefaultCase();
        com.google.javascript.rhino.Node node49 = node41.removeChildren();
        node27.addChildrenToFront(node41);
        com.google.javascript.rhino.Node node51 = node19.useSourceInfoIfMissingFrom(node41);
        node51.detachChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "STRING  0" + "'", str32, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  0 [synthetic: 1]\n" + "'", str36, "STRING  0 [synthetic: 1]\n");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node51);
    }

    @Test
    public void test09607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09607");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double4 = node3.getDouble();
        boolean boolean5 = node3.isAdd();
        boolean boolean6 = node3.isDelProp();
        com.google.javascript.rhino.Node node7 = node3.getFirstChild();
        com.google.javascript.rhino.jstype.JSType jSType8 = null;
        node3.setJSType(jSType8);
        boolean boolean10 = node3.isNew();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4095.0d + "'", double4 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09608");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        boolean boolean28 = node17.hasChild(node27);
        int int29 = node17.getCharno();
        com.google.javascript.rhino.Node node30 = node7.useSourceInfoIfMissingFrom(node17);
        node30.setLength((int) ' ');
        node3.addChildrenToBack(node30);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable34 = node3.children();
        boolean boolean35 = node3.isTypeOf();
        java.lang.String[] strArray38 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        java.lang.String[] strArray43 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        boolean boolean46 = strSet39.addAll((java.util.Collection<java.lang.String>) strList44);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node51.isScript();
        node51.setQuotedString();
        boolean boolean59 = strSet39.equals((java.lang.Object) node51);
        int int60 = node51.getChildCount();
        com.google.javascript.rhino.Node node61 = node3.copyInformationFromForTree(node51);
        com.google.javascript.rhino.Node node62 = node3.getNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = node62.isNot();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(nodeIterable34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
    }

    @Test
    public void test09609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09609");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node19.hasChild(node29);
        int int31 = node19.getCharno();
        com.google.javascript.rhino.Node node32 = node9.useSourceInfoIfMissingFrom(node19);
        node32.setLength((int) ' ');
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        boolean boolean59 = node48.hasChild(node58);
        int int60 = node48.getCharno();
        com.google.javascript.rhino.Node node61 = node38.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node66 = node38.srcref(node65);
        boolean boolean67 = node32.isEquivalentToTyped(node38);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node74 = node72.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) -1, node72, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node84 = node82.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) -1, node82, (int) (byte) 1, (int) '#');
        boolean boolean88 = node77.hasChild(node87);
        boolean boolean89 = node87.isVar();
        boolean boolean90 = node87.isCase();
        boolean boolean91 = node38.hasChild(node87);
        jSDocInfo0.setAssociatedNode(node38);
        boolean boolean93 = jSDocInfo0.hasBaseType();
        boolean boolean94 = jSDocInfo0.isExpose();
        java.lang.String str95 = jSDocInfo0.getVersion();
        java.lang.String str96 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNull(str96);
    }

    @Test
    public void test09610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09610");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray3);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(97, nodeArray3);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray3, 8, 4);
        node8.removeProp(47);
        org.junit.Assert.assertNotNull(nodeArray3);
    }

    @Test
    public void test09611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09611");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        jSDocInfo0.setAssociatedNode(node8);
        boolean boolean15 = node8.isVar();
        boolean boolean16 = node8.isInc();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09612");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        node8.setQuotedString();
        com.google.javascript.rhino.Node node16 = node3.srcrefTree(node8);
        boolean boolean17 = node16.isNull();
        node16.setOptionalArg(false);
        com.google.javascript.rhino.Node node20 = node16.getFirstChild();
        boolean boolean21 = node16.isCall();
        boolean boolean22 = node16.isReturn();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags24 = new com.google.javascript.rhino.Node.SideEffectFlags(1);
        sideEffectFlags24.setMutatesThis();
        sideEffectFlags24.setMutatesThis();
        // The following exception was thrown during execution in test generation
        try {
            node16.setSideEffectFlags(sideEffectFlags24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09613");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
    }

    @Test
    public void test09614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09614");
        java.lang.String[] strArray18 = new java.lang.String[] { "OR 1\n", "STRING  0\n", "", "OR 51", "Not declared as a constructor", "false", "Not declared as a constructor", "STRING  0 [synthetic: 1]\n", "JSDocInfo", "false", "STRING  0 [quoted: 1]\n", "true", "STRING  0 [quoted: 1]\n", "OR 1\n", "IN\n", "Named type with empty name component", "STRING  0 [quoted: 1]\n", "(OR 1)" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node24.setCharno(1);
        boolean boolean27 = node24.isRegExp();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        boolean boolean38 = node32.isDo();
        boolean boolean39 = node32.isDefaultCase();
        node32.setQuotedString();
        com.google.javascript.rhino.Node node41 = node24.useSourceInfoFromForTree(node32);
        node32.putIntProp((int) (byte) 100, (int) (byte) 0);
        node32.setCharno((int) (short) 1);
        java.lang.String str47 = node32.getString();
        boolean boolean48 = strSet19.contains((java.lang.Object) node32);
        boolean boolean49 = node32.isVoid();
        boolean boolean50 = node32.isAnd();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node54.setCharno(1);
        boolean boolean57 = node54.isRegExp();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node64 = node62.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) -1, node62, (int) (byte) 1, (int) '#');
        boolean boolean68 = node62.isDo();
        boolean boolean69 = node62.isDefaultCase();
        node62.setQuotedString();
        com.google.javascript.rhino.Node node71 = node54.useSourceInfoFromForTree(node62);
        node62.putIntProp((int) (byte) 100, (int) (byte) 0);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node81 = node79.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (byte) -1, node79, (int) (byte) 1, (int) '#');
        boolean boolean85 = node79.isScript();
        com.google.javascript.rhino.InputId inputId86 = node79.getInputId();
        com.google.javascript.rhino.Node node87 = node62.useSourceInfoFrom(node79);
        int int88 = node87.getLineno();
        int int89 = node32.getIndexOfChild(node87);
        boolean boolean90 = node32.isBreak();
        node32.setSourceEncodedPosition(16773120);
        node32.detachChildren();
        int int94 = node32.getChildCount();
        node32.setVarArgs(false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(inputId86);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test09615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09615");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("(Not declared as a type name)");
        com.google.javascript.rhino.Node node3 = node2.cloneTree();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double8 = node7.getDouble();
        boolean boolean9 = node7.isAdd();
        com.google.javascript.rhino.Node node10 = node7.cloneNode();
        com.google.javascript.rhino.jstype.JSType jSType11 = node10.getJSType();
        java.lang.String str12 = node10.toStringTree();
        com.google.javascript.rhino.Node node13 = node10.getLastSibling();
        boolean boolean14 = node13.isNE();
        boolean boolean15 = node13.isExprResult();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) ' ', node2, node13);
        int int17 = node13.getChildCount();
        boolean boolean18 = node13.isLabel();
        boolean boolean19 = node13.isNot();
        boolean boolean20 = node13.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 4095.0d + "'", double8 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 4095.0 100\n" + "'", str12, "NUMBER 4095.0 100\n");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09616");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean16 = node15.isThrow();
        java.lang.String str20 = node15.toString(true, false, true);
        boolean boolean21 = node15.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = node15.getJSDocInfo();
        boolean boolean23 = node15.isIf();
        jSDocInfo0.setAssociatedNode(node15);
        java.lang.String str25 = jSDocInfo0.getBlockDescription();
        boolean boolean26 = jSDocInfo0.hasThisType();
        boolean boolean27 = jSDocInfo0.isExport();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "STRING  0" + "'", str20, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(jSDocInfo22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09617");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node3.getStaticSourceFile();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node3.getJSDocInfo();
        com.google.javascript.rhino.Node node29 = node3.cloneTree();
        boolean boolean30 = node3.isRegExp();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean35 = node34.isThrow();
        java.lang.String str39 = node34.toString(true, false, true);
        java.lang.String str40 = node34.getQualifiedName();
        boolean boolean41 = node34.isIn();
        com.google.javascript.rhino.Node node42 = node34.cloneTree();
        boolean boolean43 = node42.isRegExp();
        int int44 = node42.getSourcePosition();
        com.google.javascript.rhino.Node node45 = node3.srcrefTree(node42);
        java.lang.String str46 = node45.toString();
        node45.removeProp(4131);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "STRING  0" + "'", str39, "STRING  0");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "OR 0" + "'", str46, "OR 0");
    }

    @Test
    public void test09618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09618");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str8 = jSDocInfo7.getVersion();
        boolean boolean9 = jSDocInfo7.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo7.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo7.setVisibility(visibility11);
        jSDocInfo0.setVisibility(visibility11);
        boolean boolean14 = jSDocInfo0.isNoSideEffects();
        boolean boolean15 = jSDocInfo0.isOverride();
        boolean boolean16 = jSDocInfo0.hasBaseType();
        java.lang.String str17 = jSDocInfo0.getLendsName();
        java.lang.String str18 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test09619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09619");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node7 = node5.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1, node5, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node10.hasChild(node20);
        boolean boolean22 = node20.isVar();
        boolean boolean23 = node20.isCase();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        boolean boolean49 = node38.hasChild(node48);
        int int50 = node38.getCharno();
        com.google.javascript.rhino.Node node51 = node28.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node58 = node56.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) -1, node56, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node68 = node66.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) -1, node66, (int) (byte) 1, (int) '#');
        boolean boolean72 = node61.hasChild(node71);
        boolean boolean73 = node71.isVar();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((-1), node38, node71);
        boolean boolean75 = node38.isAssignAdd();
        com.google.javascript.rhino.Node node76 = node38.removeFirstChild();
        com.google.javascript.rhino.Node node77 = node20.srcrefTree(node76);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(12, "STRING  0 [synthetic: 1]\n");
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(52, node76, node80, 0, (-1));
        boolean boolean84 = node76.isGetElem();
        boolean boolean85 = node76.isComma();
        node76.setType(4095);
        boolean boolean88 = node76.isContinue();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test09620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09620");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        node26.setLength((int) ' ');
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node39 = node37.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) -1, node37, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        boolean boolean53 = node42.hasChild(node52);
        int int54 = node42.getCharno();
        com.google.javascript.rhino.Node node55 = node32.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node60 = node32.srcref(node59);
        boolean boolean61 = node26.isEquivalentToTyped(node32);
        node32.addSuppression("STRING  0 [synthetic: 1]\n");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean68 = node67.isThrow();
        java.lang.String str72 = node67.toString(true, false, true);
        int int74 = node67.getIntProp(51);
        node67.addSuppression("STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node77 = node32.useSourceInfoFrom(node67);
        boolean boolean78 = node77.isTrue();
        boolean boolean79 = node77.isAssign();
        boolean boolean80 = node77.isParamList();
        boolean boolean81 = node77.isIf();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "STRING  0" + "'", str72, "STRING  0");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test09621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09621");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        int int4 = node3.getSourcePosition();
        int int5 = node3.getType();
        boolean boolean6 = node3.isLabel();
        node3.setWasEmptyNode(false);
        java.lang.String str9 = node3.getQualifiedName();
        node3.setQuotedString();
        boolean boolean11 = node3.isFor();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 40 + "'", int5 == 40);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09622");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        com.google.javascript.rhino.Node node15 = node8.detachFromParent();
        node15.setOptionalArg(false);
        boolean boolean19 = node15.getBooleanProp(31);
        com.google.javascript.rhino.Node node20 = node3.copyInformationFrom(node15);
        java.lang.String str21 = node3.getString();
        node3.setSourceEncodedPosition(9);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Not declared as a constructor" + "'", str21, "Not declared as a constructor");
    }

    @Test
    public void test09623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09623");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        boolean boolean8 = jSDocInfo0.isExpose();
        boolean boolean9 = jSDocInfo0.hasThisType();
        boolean boolean10 = jSDocInfo0.isConstant();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection11 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(markerCollection11);
    }

    @Test
    public void test09624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09624");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        boolean boolean2 = node1.isLabelName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean8 = node7.isThrow();
        java.lang.String str12 = node7.toString(true, false, true);
        boolean boolean13 = node7.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isBreak();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node20.setCharno(1);
        boolean boolean23 = node20.isRegExp();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        boolean boolean34 = node28.isDo();
        boolean boolean35 = node28.isDefaultCase();
        node28.setQuotedString();
        com.google.javascript.rhino.Node node37 = node20.useSourceInfoFromForTree(node28);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node41.setCharno(1);
        java.util.Set<java.lang.String> strSet44 = node41.getDirectives();
        node41.setLength(0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(0, node37, node41, node56, (int) 'a', (int) (short) 0);
        int int60 = node37.getLineno();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable61 = node37.getAncestors();
        int int62 = node7.getIndexOfChild(node37);
        node1.putProp(40, (java.lang.Object) node7);
        boolean boolean64 = node1.isSwitch();
        boolean boolean65 = node1.isNot();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node70.setCharno(1);
        boolean boolean73 = node70.isRegExp();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node80 = node78.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (byte) -1, node78, (int) (byte) 1, (int) '#');
        boolean boolean84 = node78.isDo();
        boolean boolean85 = node78.isDefaultCase();
        node78.setQuotedString();
        com.google.javascript.rhino.Node node87 = node70.useSourceInfoFromForTree(node78);
        boolean boolean88 = node70.isInc();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(30, node70);
        boolean boolean90 = node89.isWith();
        com.google.javascript.rhino.Node node91 = node1.srcrefTree(node89);
        boolean boolean92 = node1.isInc();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable93 = node1.getAncestors();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING  0" + "'", str12, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(ancestorIterable61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(ancestorIterable93);
    }

    @Test
    public void test09625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09625");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<java.lang.String> strCollection1 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        boolean boolean28 = node17.hasChild(node27);
        int int29 = node17.getCharno();
        com.google.javascript.rhino.Node node30 = node7.useSourceInfoIfMissingFrom(node17);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        boolean boolean51 = node40.hasChild(node50);
        boolean boolean52 = node50.isVar();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((-1), node17, node50);
        boolean boolean54 = node17.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo55 = node17.getJSDocInfo();
        boolean boolean56 = node17.isSetterDef();
        jSDocInfo0.setAssociatedNode(node17);
        com.google.javascript.rhino.jstype.JSType jSType58 = node17.getJSType();
        org.junit.Assert.assertNull(strCollection1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSDocInfo55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(jSType58);
    }

    @Test
    public void test09626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09626");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isScript();
        com.google.javascript.rhino.Node node24 = node17.detachFromParent();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node28.setCharno(1);
        java.util.Set<java.lang.String> strSet31 = node28.getDirectives();
        boolean boolean32 = node28.isHook();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node64 = node36.srcref(node63);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node12, node24, node28, node36);
        boolean boolean66 = node28.hasChildren();
        boolean boolean67 = node28.isGetterDef();
        boolean boolean68 = node28.isDo();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test09627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09627");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        boolean boolean15 = node9.isScript();
        node9.setQuotedString();
        com.google.javascript.rhino.Node node17 = node4.srcrefTree(node9);
        boolean boolean18 = node17.isNull();
        boolean boolean19 = node17.isDelProp();
        boolean boolean20 = node17.isDebugger();
        boolean boolean21 = node17.isNumber();
        boolean boolean22 = node17.isEmpty();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node29 = node27.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) -1, node27, (int) (byte) 1, (int) '#');
        boolean boolean33 = node27.isScript();
        boolean boolean34 = node27.isTrue();
        boolean boolean35 = node27.isLabel();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, node17, node27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test09628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09628");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node15.hasChild(node25);
        int int27 = node15.getCharno();
        com.google.javascript.rhino.Node node28 = node5.useSourceInfoIfMissingFrom(node15);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        boolean boolean49 = node38.hasChild(node48);
        boolean boolean50 = node48.isVar();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((-1), node15, node48);
        com.google.javascript.rhino.Node node52 = node51.getParent();
        boolean boolean53 = node51.isSetterDef();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node(54, node51, 32, 32);
        boolean boolean57 = node56.isOptionalArg();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        boolean boolean60 = node56.isRegExp();
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 35 + "'", int27 == 35);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test09629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09629");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean3 = ternaryValue1.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean7 = ternaryValue5.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue8.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue5.xor(ternaryValue10);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue1.xor(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue14.or(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue19.or(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue21.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue17.and(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue5.and(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue27.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue5.or(ternaryValue27);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean33 = ternaryValue31.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue34.or(ternaryValue35);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue31.xor(ternaryValue36);
        java.lang.String str38 = ternaryValue37.toString();
        java.lang.String str39 = ternaryValue37.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        boolean boolean42 = ternaryValue40.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = ternaryValue43.or(ternaryValue44);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue43.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue46.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue40.or(ternaryValue46);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue37.xor(ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean53 = ternaryValue51.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue54.or(ternaryValue55);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = ternaryValue51.xor(ternaryValue56);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = ternaryValue59.or(ternaryValue61);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = ternaryValue64.or(ternaryValue66);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = ternaryValue66.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = ternaryValue62.and(ternaryValue66);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        java.lang.String str72 = ternaryValue71.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = ternaryValue62.and(ternaryValue71);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = ternaryValue57.or(ternaryValue62);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = ternaryValue37.or(ternaryValue62);
        java.lang.String str76 = ternaryValue37.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue80 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue81 = ternaryValue78.or(ternaryValue80);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue83 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue85 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue86 = ternaryValue83.or(ternaryValue85);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue87 = ternaryValue85.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue88 = ternaryValue81.and(ternaryValue85);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue90 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        java.lang.String str91 = ternaryValue90.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue92 = ternaryValue81.and(ternaryValue90);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue93 = ternaryValue37.xor(ternaryValue92);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue94 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        boolean boolean96 = ternaryValue94.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue97 = ternaryValue92.xor(ternaryValue94);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue98 = ternaryValue94.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue99 = ternaryValue29.and(ternaryValue94);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "true" + "'", str38, "true");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "true" + "'", str39, "true");
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "true" + "'", str72, "true");
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "true" + "'", str76, "true");
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertNotNull(ternaryValue80);
        org.junit.Assert.assertNotNull(ternaryValue81);
        org.junit.Assert.assertNotNull(ternaryValue83);
        org.junit.Assert.assertNotNull(ternaryValue85);
        org.junit.Assert.assertNotNull(ternaryValue86);
        org.junit.Assert.assertNotNull(ternaryValue87);
        org.junit.Assert.assertNotNull(ternaryValue88);
        org.junit.Assert.assertNotNull(ternaryValue90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "true" + "'", str91, "true");
        org.junit.Assert.assertNotNull(ternaryValue92);
        org.junit.Assert.assertNotNull(ternaryValue93);
        org.junit.Assert.assertNotNull(ternaryValue94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(ternaryValue97);
        org.junit.Assert.assertNotNull(ternaryValue98);
        org.junit.Assert.assertNotNull(ternaryValue99);
    }

    @Test
    public void test09630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09630");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        int int6 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.Node node8 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test09631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09631");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue2.or(ternaryValue4);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue7.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue9.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue5.and(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue0.and(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean18 = ternaryValue16.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean22 = ternaryValue20.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue23.or(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue20.xor(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue16.xor(ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue14.and(ternaryValue20);
        boolean boolean30 = ternaryValue20.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue32.or(ternaryValue34);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue32.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue32.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue39.or(ternaryValue41);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue44.or(ternaryValue46);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue46.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue42.and(ternaryValue46);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        java.lang.String str52 = ternaryValue51.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = ternaryValue42.and(ternaryValue51);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue53.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue37.or(ternaryValue54);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue20.or(ternaryValue37);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = ternaryValue0.and(ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = ternaryValue20.not();
        boolean boolean60 = ternaryValue20.toBoolean(true);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "true" + "'", str52, "true");
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test09632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09632");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        boolean boolean51 = node40.hasChild(node50);
        int int52 = node40.getCharno();
        com.google.javascript.rhino.Node node53 = node30.useSourceInfoIfMissingFrom(node40);
        int int54 = node30.getSourcePosition();
        java.lang.String str55 = node30.toString();
        com.google.javascript.rhino.Node node56 = node3.srcref(node30);
        node56.setSourceEncodedPosition((-1));
        boolean boolean59 = node56.isRegExp();
        com.google.javascript.rhino.jstype.JSType jSType60 = node56.getJSType();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node64.setCharno(1);
        boolean boolean67 = node64.isRegExp();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node74 = node72.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) -1, node72, (int) (byte) 1, (int) '#');
        boolean boolean78 = node72.isDo();
        boolean boolean79 = node72.isDefaultCase();
        node72.setQuotedString();
        com.google.javascript.rhino.Node node81 = node64.useSourceInfoFromForTree(node72);
        node72.putIntProp((int) (byte) 100, (int) (byte) 0);
        node72.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean88 = node72.isInc();
        node72.setQuotedString();
        java.lang.String str90 = node72.getSourceFileName();
        boolean boolean91 = node72.isAssignAdd();
        boolean boolean92 = node72.isDefaultCase();
        com.google.javascript.rhino.Node node93 = node56.copyInformationFrom(node72);
        com.google.javascript.rhino.jstype.JSType jSType94 = null;
        node93.setJSType(jSType94);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4131 + "'", int54 == 4131);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR 1" + "'", str55, "OR 1");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test09633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09633");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        boolean boolean6 = jSDocInfo0.hasReturnType();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        jSDocInfo0.setDeprecated(true);
        java.lang.String str11 = jSDocInfo0.getMeaning();
        int int12 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test09634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09634");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isTypeOf();
        boolean boolean23 = node19.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node19.removeFirstChild();
        boolean boolean25 = node24.isSwitch();
        boolean boolean26 = node24.hasMoreThanOneChild();
        int int28 = node24.getIntProp(49);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean33 = node32.isThrow();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean38 = node37.isThrow();
        java.lang.String str42 = node37.toString(true, false, true);
        java.lang.String str43 = node37.getQualifiedName();
        boolean boolean44 = node37.isIn();
        com.google.javascript.rhino.Node node45 = node37.cloneTree();
        boolean boolean46 = node45.isRegExp();
        boolean boolean47 = node45.isDebugger();
        node32.addChildToBack(node45);
        boolean boolean49 = node45.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node50 = node24.srcrefTree(node45);
        boolean boolean51 = node24.isTypeOf();
        boolean boolean52 = node24.isInstanceOf();
        java.lang.String str53 = node24.getString();
        java.lang.String str54 = node24.getQualifiedName();
        boolean boolean55 = node24.isSetterDef();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "STRING  0" + "'", str42, "STRING  0");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test09635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09635");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("OR 0 [jsdoc_info: JSDocInfo]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(OR 0 [jsdoc_info: JSDocInfo])" + "'", str1, "(OR 0 [jsdoc_info: JSDocInfo])");
    }

    @Test
    public void test09636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09636");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        node26.setLength((int) ' ');
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node39 = node37.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) -1, node37, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        boolean boolean53 = node42.hasChild(node52);
        int int54 = node42.getCharno();
        com.google.javascript.rhino.Node node55 = node32.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node60 = node32.srcref(node59);
        boolean boolean61 = node26.isEquivalentToTyped(node32);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node68 = node66.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) -1, node66, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node78 = node76.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (byte) -1, node76, (int) (byte) 1, (int) '#');
        boolean boolean82 = node71.hasChild(node81);
        boolean boolean83 = node81.isVar();
        boolean boolean84 = node81.isCase();
        boolean boolean85 = node32.hasChild(node81);
        boolean boolean86 = node32.isCatch();
        boolean boolean87 = node32.isLabel();
        boolean boolean88 = node32.isDo();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test09637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09637");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.hasBaseType();
        boolean boolean8 = jSDocInfo0.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getThisType();
        java.lang.String str10 = jSDocInfo0.getBlockDescription();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getAuthors();
        boolean boolean12 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getBaseType();
        boolean boolean14 = jSDocInfo0.isNoShadow();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09638");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isBlock();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder23 = node19.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        int int49 = node37.getCharno();
        com.google.javascript.rhino.Node node50 = node27.useSourceInfoIfMissingFrom(node37);
        boolean boolean51 = node37.isAssignAdd();
        boolean boolean52 = node37.isUnscopedQualifiedName();
        int int53 = node37.getLineno();
        boolean boolean54 = node37.isTrue();
        boolean boolean55 = node37.isSyntheticBlock();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile56 = node37.getStaticSourceFile();
        node37.addSuppression("unknown");
        boolean boolean59 = node19.isEquivalentTo(node37);
        com.google.javascript.rhino.Node node61 = node37.getAncestor(47);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean62 = node61.isVoid();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(staticSourceFile56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(node61);
    }

    @Test
    public void test09639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09639");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        java.lang.String str6 = stringPosition0.getItem();
        stringPosition0.setItem("Not declared as a type name");
        int int9 = stringPosition0.getStartLine();
        int int10 = stringPosition0.getPositionOnEndLine();
        int int11 = stringPosition0.getPositionOnEndLine();
        int int12 = stringPosition0.getEndLine();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
    }

    @Test
    public void test09640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09640");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(51);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder2 = node1.new FileLevelJsDocBuilder();
        java.lang.String str3 = node1.toStringTree();
        boolean boolean4 = node1.isQualifiedName();
        node1.setSourceEncodedPosition(12);
        node1.setLineno(5);
        boolean boolean9 = node1.isLabel();
        boolean boolean10 = node1.isEmpty();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "IN\n" + "'", str3, "IN\n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09641");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int4 = node3.getType();
        com.google.javascript.rhino.Node node5 = node3.cloneNode();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node9.setCharno(1);
        boolean boolean12 = node9.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isDo();
        boolean boolean24 = node17.isDefaultCase();
        node17.setQuotedString();
        com.google.javascript.rhino.Node node26 = node9.useSourceInfoFromForTree(node17);
        node26.setSourceFileForTesting("STRING  0\n");
        node26.setSourceFileForTesting("Named type with empty name component");
        com.google.javascript.rhino.Node node31 = node5.useSourceInfoIfMissingFrom(node26);
        boolean boolean32 = node31.isOptionalArg();
        boolean boolean33 = node31.isScript();
        boolean boolean34 = node31.isFor();
        java.lang.String str35 = node31.toStringTree();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable36 = node31.children();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "STRING  0 [source_file: Named type with empty name component]\n" + "'", str35, "STRING  0 [source_file: Named type with empty name component]\n");
        org.junit.Assert.assertNotNull(nodeIterable36);
    }

    @Test
    public void test09642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09642");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        boolean boolean27 = node26.isArrayLit();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        node26.addChildrenToFront(node37);
        java.lang.Object obj51 = node26.getProp(40);
        boolean boolean52 = node26.isNull();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = node26.children();
        boolean boolean54 = node26.isFor();
        boolean boolean55 = node26.isIn();
        boolean boolean56 = node26.isOnlyModifiesThisCall();
        node26.setLineno(19);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeIterable53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test09643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09643");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isName();
        boolean boolean18 = node4.isVoid();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        com.google.javascript.rhino.Node node30 = node4.useSourceInfoIfMissingFrom(node23);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        int int41 = node40.getType();
        boolean boolean42 = node40.isFor();
        node23.addChildToFront(node40);
        boolean boolean44 = node23.hasChildren();
        boolean boolean45 = node23.isGetElem();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str51 = jSDocInfo50.getVersion();
        boolean boolean52 = jSDocInfo50.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet53 = jSDocInfo50.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList54 = jSDocInfo50.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList55 = jSDocInfo50.getThrownTypes();
        java.util.Set<java.lang.String> strSet56 = jSDocInfo50.getParameterNames();
        node49.setDirectives(strSet56);
        boolean boolean58 = node49.isCase();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node65 = node63.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) -1, node63, (int) (byte) 1, (int) '#');
        boolean boolean69 = node63.isDo();
        boolean boolean70 = node63.isDefaultCase();
        node63.setQuotedString();
        boolean boolean72 = node63.isDec();
        boolean boolean73 = node63.isLabel();
        boolean boolean74 = node63.wasEmptyNode();
        boolean boolean75 = node63.isNumber();
        int int76 = node49.getIndexOfChild(node63);
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = node49.getJSDocInfo();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node78 = node23.getChildBefore(node49);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(jSTypeExpressionList54);
        org.junit.Assert.assertNotNull(jSTypeExpressionList55);
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNull(jSDocInfo77);
    }

    @Test
    public void test09644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09644");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray4);
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(0, nodeArray4);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) 'a', nodeArray4, 4131, 1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(29, nodeArray4);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        boolean boolean18 = node15.isRegExp();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        boolean boolean30 = node23.isDefaultCase();
        node23.setQuotedString();
        com.google.javascript.rhino.Node node32 = node15.useSourceInfoFromForTree(node23);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node36.setCharno(1);
        java.util.Set<java.lang.String> strSet39 = node36.getDirectives();
        node36.setLength(0);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node48 = node46.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) -1, node46, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(0, node32, node36, node51, (int) 'a', (int) (short) 0);
        boolean boolean55 = node32.isNull();
        com.google.javascript.rhino.jstype.JSType jSType56 = node32.getJSType();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node63 = node61.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) -1, node61, (int) (byte) 1, (int) '#');
        boolean boolean67 = node61.isScript();
        com.google.javascript.rhino.InputId inputId68 = node61.getInputId();
        boolean boolean69 = node61.isDelProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder70 = node61.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node71 = node32.srcref(node61);
        boolean boolean72 = node71.isNumber();
        com.google.javascript.rhino.Node node73 = node71.removeFirstChild();
        com.google.javascript.rhino.Node node74 = node10.srcref(node71);
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str76 = jSDocInfo75.getVersion();
        boolean boolean77 = jSDocInfo75.hasEnumParameterType();
        java.lang.String str78 = jSDocInfo75.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = jSDocInfo75.getType();
        java.lang.String str80 = jSDocInfo75.getDeprecationReason();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList81 = jSDocInfo75.getThrownTypes();
        boolean boolean82 = jSDocInfo75.hasEnumParameterType();
        boolean boolean83 = jSDocInfo75.isNoCompile();
        node10.setJSDocInfo(jSDocInfo75);
        boolean boolean85 = jSDocInfo75.isDeprecated();
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(jSType56);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(inputId68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNull(jSTypeExpression79);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(jSTypeExpressionList81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test09645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09645");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        java.lang.String str10 = jSDocInfo0.getBlockDescription();
        java.lang.String str12 = jSDocInfo0.getDescriptionForParameter("OR");
        boolean boolean13 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09646");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        boolean boolean34 = node28.isScript();
        com.google.javascript.rhino.InputId inputId35 = node28.getInputId();
        com.google.javascript.rhino.Node node36 = node11.useSourceInfoFrom(node28);
        boolean boolean37 = node11.isTrue();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean42 = node41.isThrow();
        java.lang.String str46 = node41.toString(true, false, true);
        node11.addChildToFront(node41);
        boolean boolean48 = node11.isGetProp();
        boolean boolean49 = node11.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(inputId35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "STRING  0" + "'", str46, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test09647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09647");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        boolean boolean51 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node52 = node14.removeFirstChild();
        boolean boolean53 = node52.hasOneChild();
        boolean boolean54 = node52.isFor();
        boolean boolean55 = node52.isLabel();
        com.google.javascript.rhino.Node node56 = node52.getParent();
        node52.setLineno(16);
        boolean boolean59 = node52.isNew();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test09648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09648");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double5 = node4.getDouble();
        int int6 = node4.getSourcePosition();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node10.setCharno(1);
        boolean boolean13 = node10.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node18.isDo();
        boolean boolean25 = node18.isDefaultCase();
        node18.setQuotedString();
        com.google.javascript.rhino.Node node27 = node10.useSourceInfoFromForTree(node18);
        node18.putIntProp((int) (byte) 100, (int) (byte) 0);
        node18.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean34 = node18.isInc();
        node18.setQuotedString();
        java.lang.String str36 = node18.getSourceFileName();
        com.google.javascript.rhino.Node node37 = node4.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(10, node4);
        boolean boolean39 = node38.isFalse();
        boolean boolean40 = node38.isContinue();
        // The following exception was thrown during execution in test generation
        try {
            node38.setDouble((double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: BITXOR is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 4095.0d + "'", double5 == 4095.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 409601 + "'", int6 == 409601);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test09649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09649");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(16773120, "(STRING  0\n)");
        com.google.javascript.rhino.InputId inputId3 = null;
        node2.setInputId(inputId3);
        boolean boolean5 = node2.hasChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = node2.getJSDocInfo();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSDocInfo6);
    }

    @Test
    public void test09650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09650");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean27 = node11.isInc();
        com.google.javascript.rhino.Node node28 = node11.getLastSibling();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean33 = node32.isThrow();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean38 = node37.isThrow();
        java.lang.String str42 = node37.toString(true, false, true);
        java.lang.String str43 = node37.getQualifiedName();
        boolean boolean44 = node37.isIn();
        com.google.javascript.rhino.Node node45 = node37.cloneTree();
        boolean boolean46 = node45.isRegExp();
        boolean boolean47 = node45.isDebugger();
        node32.addChildToBack(node45);
        com.google.javascript.rhino.Node node49 = node28.srcref(node45);
        boolean boolean50 = node28.isDebugger();
        boolean boolean51 = node28.isDo();
        boolean boolean52 = node28.isVar();
        com.google.javascript.rhino.Node node53 = node28.removeFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "STRING  0" + "'", str42, "STRING  0");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(node53);
    }

    @Test
    public void test09651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09651");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        boolean boolean10 = jSDocInfo0.isConstructor();
        boolean boolean11 = jSDocInfo0.hasReturnType();
        java.lang.String str12 = jSDocInfo0.getVersion();
        java.lang.String str13 = jSDocInfo0.getVersion();
        boolean boolean14 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09652");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        jSDocInfo0.setAssociatedNode(node8);
        com.google.javascript.rhino.Node node15 = node8.removeFirstChild();
        boolean boolean16 = node8.isNumber();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean21 = node20.isThrow();
        java.lang.String str25 = node20.toString(true, false, true);
        node20.setQuotedString();
        java.lang.String str27 = node8.checkTreeEquals(node20);
        boolean boolean28 = node8.isSetterDef();
        boolean boolean29 = node8.isContinue();
        boolean boolean30 = node8.isNew();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "STRING  0" + "'", str25, "STRING  0");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test09653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09653");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.InputId inputId11 = node4.getInputId();
        boolean boolean12 = node4.isDelProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node4.getJsDocBuilderForNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str16 = jSDocInfo15.getVersion();
        boolean boolean17 = jSDocInfo15.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo15.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo15.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList20 = jSDocInfo15.getThrownTypes();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo15.getParameterNames();
        node4.putProp((-1), (java.lang.Object) jSDocInfo15);
        boolean boolean23 = jSDocInfo15.isConsistentIdGenerator();
        boolean boolean24 = jSDocInfo15.isIdGenerator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertNotNull(jSTypeExpressionList20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09654");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isName();
        boolean boolean18 = node4.isVoid();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        com.google.javascript.rhino.Node node30 = node4.useSourceInfoIfMissingFrom(node23);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        int int41 = node40.getType();
        boolean boolean42 = node40.isFor();
        node23.addChildToFront(node40);
        boolean boolean44 = node23.hasChildren();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int46 = typePosition45.getPositionOnEndLine();
        com.google.javascript.rhino.Node node47 = typePosition45.getItem();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node54 = node52.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) -1, node52, (int) (byte) 1, (int) '#');
        boolean boolean58 = node52.isDo();
        boolean boolean59 = node52.isDefaultCase();
        node52.setQuotedString();
        boolean boolean61 = node52.isDec();
        boolean boolean62 = node52.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node52.siblings();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(51);
        java.lang.String str66 = node52.checkTreeEquals(node65);
        boolean boolean67 = node52.isCatch();
        com.google.javascript.rhino.InputId inputId68 = null;
        node52.setInputId(inputId68);
        typePosition45.setItem(node52);
        com.google.javascript.rhino.Node node71 = node23.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean76 = node75.isThrow();
        java.lang.String str80 = node75.toString(true, false, true);
        node75.setIsSyntheticBlock(true);
        int int83 = node75.getLength();
        boolean boolean84 = node75.isNumber();
        node75.setSourceEncodedPositionForTree(40);
        boolean boolean87 = node75.isLocalResultCall();
        com.google.javascript.rhino.Node node88 = node52.copyInformationFromForTree(node75);
        com.google.javascript.rhino.Node node89 = node88.cloneTree();
        boolean boolean90 = node88.isTypeOf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str66, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "STRING  0" + "'", str80, "STRING  0");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test09655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09655");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = ternaryValue1.or(ternaryValue3);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue1.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = ternaryValue5.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue6.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue9.or(ternaryValue11);
        java.lang.String str13 = ternaryValue12.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue6.or(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = ternaryValue17.or(ternaryValue19);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue22.or(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue24.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue20.and(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue15.and(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        java.lang.String str31 = ternaryValue30.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue15.and(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = ternaryValue6.or(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        boolean boolean36 = ternaryValue34.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue33.or(ternaryValue34);
        java.lang.String str38 = ternaryValue34.toString();
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "false" + "'", str13, "false");
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "false" + "'", str31, "false");
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "false" + "'", str38, "false");
    }

    @Test
    public void test09656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09656");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("NUMBER 10.0 40", 16, 15);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09657");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        boolean boolean51 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node52 = node14.removeFirstChild();
        node52.setVarArgs(true);
        node52.detachChildren();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node66 = node64.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) -1, node64, (int) (byte) 1, (int) '#');
        boolean boolean70 = node64.isScript();
        com.google.javascript.rhino.Node node71 = node64.detachFromParent();
        node71.setOptionalArg(false);
        boolean boolean75 = node71.getBooleanProp(31);
        com.google.javascript.rhino.Node node76 = node59.copyInformationFrom(node71);
        boolean boolean77 = node76.isLabel();
        com.google.javascript.rhino.InputId inputId78 = node76.getInputId();
        java.lang.String str79 = node76.getString();
        com.google.javascript.rhino.jstype.JSType jSType80 = node76.getJSType();
        boolean boolean81 = node76.isOptionalArg();
        boolean boolean82 = node76.isWhile();
        boolean boolean83 = node52.hasChild(node76);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(inputId78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Not declared as a constructor" + "'", str79, "Not declared as a constructor");
        org.junit.Assert.assertNull(jSType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test09658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09658");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        boolean boolean10 = strSet7.add("STRING  0");
        java.lang.String[] strArray13 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        boolean boolean21 = strSet14.addAll((java.util.Collection<java.lang.String>) strList19);
        boolean boolean22 = strSet7.containsAll((java.util.Collection<java.lang.String>) strList19);
        boolean boolean23 = strSet2.addAll((java.util.Collection<java.lang.String>) strList19);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean26 = ternaryValue24.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean30 = ternaryValue28.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean34 = ternaryValue32.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue35.or(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue32.xor(ternaryValue37);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue28.xor(ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue24.or(ternaryValue32);
        boolean boolean41 = strSet2.equals((java.lang.Object) ternaryValue24);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str43 = jSDocInfo42.getVersion();
        boolean boolean44 = jSDocInfo42.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo42.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility46 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo42.setVisibility(visibility46);
        java.lang.String str48 = jSDocInfo42.toString();
        java.lang.String str49 = jSDocInfo42.getDescription();
        java.lang.String str50 = jSDocInfo42.getMeaning();
        java.lang.String str51 = jSDocInfo42.getDescription();
        java.lang.String str52 = jSDocInfo42.getOriginalCommentString();
        java.util.Set<java.lang.String> strSet53 = jSDocInfo42.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str55 = jSDocInfo54.getVersion();
        java.lang.String str56 = jSDocInfo54.getFileOverview();
        jSDocInfo54.addSuppression("STRING  0");
        boolean boolean59 = jSDocInfo54.isConstant();
        boolean boolean60 = jSDocInfo54.isDefine();
        boolean boolean61 = jSDocInfo54.isNoTypeCheck();
        jSDocInfo54.setLicense("(STRING  0 [source_file: Named type with empty name component])");
        jSDocInfo54.setLicense("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nOR 0\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: OR 0\n)");
        java.util.Set<java.lang.String> strSet66 = jSDocInfo54.getModifies();
        boolean boolean67 = strSet53.containsAll((java.util.Collection<java.lang.String>) strSet66);
        boolean boolean68 = strSet2.removeAll((java.util.Collection<java.lang.String>) strSet53);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + visibility46 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility46.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JSDocInfo" + "'", str48, "JSDocInfo");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test09659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09659");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        boolean boolean16 = node10.isDo();
        boolean boolean17 = node10.isDefaultCase();
        node10.setQuotedString();
        boolean boolean19 = node10.isDec();
        boolean boolean20 = node10.isLabel();
        boolean boolean21 = node10.isSetterDef();
        boolean boolean22 = node10.isRegExp();
        boolean boolean23 = node10.isName();
        boolean boolean24 = node10.isVoid();
        com.google.javascript.rhino.Node node25 = node10.cloneNode();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node25);
        boolean boolean27 = node3.isFunction();
        boolean boolean28 = node3.isVoid();
        boolean boolean29 = node3.isAssign();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int34 = node33.getType();
        com.google.javascript.rhino.Node node35 = node33.cloneNode();
        boolean boolean36 = node33.isRegExp();
        com.google.javascript.rhino.JSDocInfo jSDocInfo37 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str38 = jSDocInfo37.getVersion();
        boolean boolean39 = jSDocInfo37.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet40 = jSDocInfo37.getParameterNames();
        jSDocInfo37.addSuppression("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList43 = jSDocInfo37.getExtendedInterfaces();
        boolean boolean44 = jSDocInfo37.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo37.getModifies();
        java.lang.Object[] objArray46 = strSet45.toArray();
        java.util.HashSet[] hashSetArray48 = new java.util.HashSet[0];
        @SuppressWarnings("unchecked")
        java.util.HashSet<java.lang.String>[] strSetArray49 = (java.util.HashSet<java.lang.String>[]) hashSetArray48;
        java.util.HashSet<java.lang.String>[] strSetArray50 = strSet45.toArray(strSetArray49);
        node33.setDirectives(strSet45);
        node3.setDirectives(strSet45);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = strSet45.add("(unknown)");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 40 + "'", int34 == 40);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(jSTypeExpressionList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(hashSetArray48);
        org.junit.Assert.assertNotNull(strSetArray49);
        org.junit.Assert.assertNotNull(strSetArray50);
    }

    @Test
    public void test09660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09660");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        java.lang.String str6 = stringPosition0.getItem();
        stringPosition0.setItem("Not declared as a type name");
        int int9 = stringPosition0.getPositionOnStartLine();
        int int10 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("(OR 51)");
        stringPosition0.setItem("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n)");
        int int15 = stringPosition0.getEndLine();
        java.lang.String str16 = stringPosition0.getItem();
        int int17 = stringPosition0.getPositionOnStartLine();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 36 + "'", int9 == 36);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 36 + "'", int10 == 36);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n)" + "'", str16, "(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n)");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36 + "'", int17 == 36);
    }

    @Test
    public void test09661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09661");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        boolean boolean13 = node12.isUnscopedQualifiedName();
        boolean boolean14 = node12.isFromExterns();
        boolean boolean15 = node12.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(100, node12);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 100);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        int int29 = node28.getType();
        boolean boolean30 = node28.isDelProp();
        boolean boolean31 = node28.wasEmptyNode();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = node28.copyInformationFromForTree(node36);
        com.google.javascript.rhino.Node node43 = node28.removeFirstChild();
        com.google.javascript.rhino.Node node44 = node18.srcref(node28);
        boolean boolean45 = node18.isGetProp();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node(30);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable48 = node47.getAncestors();
        node47.putIntProp(12, (-1));
        boolean boolean52 = node47.isAssign();
        node18.addChildrenToFront(node47);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node54 = node16.getChildBefore(node47);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(ancestorIterable48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test09662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09662");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node24 = node9.clonePropsFrom(node23);
        node24.putIntProp(38, 32);
        boolean boolean28 = node24.isScript();
        boolean boolean29 = node24.isThrow();
        boolean boolean30 = node24.isComma();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test09663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09663");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.hasModifies();
        java.lang.String str8 = jSDocInfo0.getOriginalCommentString();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strCollection9);
    }

    @Test
    public void test09664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09664");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = booleanLiteralSet1.intersection(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = booleanLiteralSet0.intersection(booleanLiteralSet1);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = booleanLiteralSet6.intersection(booleanLiteralSet7);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = booleanLiteralSet5.intersection(booleanLiteralSet6);
        boolean boolean11 = booleanLiteralSet9.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet12.intersection(booleanLiteralSet13);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = booleanLiteralSet9.intersection(booleanLiteralSet13);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = booleanLiteralSet15.intersection(booleanLiteralSet17);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = booleanLiteralSet1.union(booleanLiteralSet15);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = booleanLiteralSet21.intersection(booleanLiteralSet22);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = booleanLiteralSet20.intersection(booleanLiteralSet21);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = booleanLiteralSet1.intersection(booleanLiteralSet20);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet27 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = booleanLiteralSet27.intersection(booleanLiteralSet28);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = booleanLiteralSet26.intersection(booleanLiteralSet27);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = booleanLiteralSet32.intersection(booleanLiteralSet33);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = booleanLiteralSet31.intersection(booleanLiteralSet32);
        boolean boolean37 = booleanLiteralSet35.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet40 = booleanLiteralSet38.intersection(booleanLiteralSet39);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = booleanLiteralSet35.intersection(booleanLiteralSet39);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet44 = booleanLiteralSet41.intersection(booleanLiteralSet43);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = booleanLiteralSet27.union(booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet47 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = booleanLiteralSet47.intersection(booleanLiteralSet48);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = booleanLiteralSet46.intersection(booleanLiteralSet47);
        boolean boolean52 = booleanLiteralSet50.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet53 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet54 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet55 = booleanLiteralSet53.intersection(booleanLiteralSet54);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet56 = booleanLiteralSet50.intersection(booleanLiteralSet54);
        boolean boolean58 = booleanLiteralSet56.contains(true);
        boolean boolean60 = booleanLiteralSet56.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet61 = booleanLiteralSet45.union(booleanLiteralSet56);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet62 = booleanLiteralSet20.intersection(booleanLiteralSet61);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet27 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet27.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet40 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet40.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet44 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet44.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet47 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet47.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet53 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet53.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet54 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet54.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet55 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet55.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet56 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet56.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet61 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet61.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet62 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet62.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
    }

    @Test
    public void test09665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09665");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0 [quoted: 1]\n");
        node1.setLineno(31);
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean8 = node7.isThrow();
        java.lang.String str12 = node7.toString(true, false, true);
        boolean boolean13 = node7.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile15 = null;
        node7.setStaticSourceFile(staticSourceFile15);
        node1.addChildrenToBack(node7);
        node7.setType(4111);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING  0" + "'", str12, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
    }

    @Test
    public void test09666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09666");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node14.setCharno(1);
        java.util.Set<java.lang.String> strSet17 = node14.getDirectives();
        java.lang.String str18 = node4.checkTreeEquals(node14);
        boolean boolean19 = node4.isNE();
        node4.addSuppression("ERROR 1");
        com.google.javascript.rhino.Node node22 = node4.detachFromParent();
        boolean boolean23 = node22.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test09667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09667");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setThrows();
        int int6 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesThis();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test09668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09668");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        boolean boolean2 = typePosition0.hasBrackets();
        boolean boolean3 = typePosition0.hasBrackets();
        int int4 = typePosition0.getPositionOnEndLine();
        int int5 = typePosition0.getStartLine();
        int int6 = typePosition0.getStartLine();
        int int7 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test09669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09669");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean25 = node24.isThrow();
        java.lang.String str29 = node24.toString(true, false, true);
        int int31 = node24.getIntProp(51);
        com.google.javascript.rhino.Node node32 = node24.cloneTree();
        boolean boolean33 = node32.isCatch();
        java.lang.String str34 = node32.getSourceFileName();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node41 = node39.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) -1, node39, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        boolean boolean55 = node44.hasChild(node54);
        boolean boolean56 = node54.isVar();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node60.setCharno(1);
        boolean boolean63 = node60.isRegExp();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node70 = node68.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) -1, node68, (int) (byte) 1, (int) '#');
        boolean boolean74 = node68.isDo();
        boolean boolean75 = node68.isDefaultCase();
        node68.setQuotedString();
        com.google.javascript.rhino.Node node77 = node60.useSourceInfoFromForTree(node68);
        boolean boolean78 = node77.isVarArgs();
        com.google.javascript.rhino.Node node79 = node54.useSourceInfoIfMissingFrom(node77);
        boolean boolean80 = node54.isGetProp();
        boolean boolean81 = node54.isFromExterns();
        com.google.javascript.rhino.Node node82 = node32.useSourceInfoFromForTree(node54);
        node20.addChildToFront(node32);
        node32.setOptionalArg(true);
        boolean boolean86 = node32.isHook();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "STRING  0" + "'", str29, "STRING  0");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test09670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09670");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        boolean boolean28 = node14.isAssignAdd();
        boolean boolean29 = node14.isUnscopedQualifiedName();
        int int30 = node14.getLineno();
        com.google.javascript.rhino.Node node32 = node14.getAncestor(4);
        boolean boolean33 = node14.isInstanceOf();
        boolean boolean34 = node14.isVar();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        boolean boolean59 = node48.hasChild(node58);
        int int60 = node48.getCharno();
        com.google.javascript.rhino.Node node61 = node38.useSourceInfoIfMissingFrom(node48);
        int int62 = node38.getSourcePosition();
        boolean boolean63 = node38.isThrow();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(15, node14, node38);
        boolean boolean65 = node14.isWhile();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 4131 + "'", int62 == 4131);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test09671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09671");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str12 = jSDocInfo11.getVersion();
        java.lang.String str13 = jSDocInfo11.getFileOverview();
        boolean boolean14 = jSDocInfo11.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet15 = jSDocInfo11.getParameterNames();
        boolean boolean16 = strSet3.retainAll((java.util.Collection<java.lang.String>) strSet15);
        java.util.stream.Stream<java.lang.String> strStream17 = strSet3.stream();
        java.lang.String[] strArray20 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        boolean boolean28 = strSet21.addAll((java.util.Collection<java.lang.String>) strList26);
        boolean boolean30 = strSet21.remove((java.lang.Object) 1L);
        java.util.stream.Stream<java.lang.String> strStream31 = strSet21.parallelStream();
        java.lang.Object[] objArray32 = strSet21.toArray();
        boolean boolean33 = strSet3.addAll((java.util.Collection<java.lang.String>) strSet21);
        int int34 = strSet21.size();
        boolean boolean35 = strSet21.isEmpty();
        boolean boolean36 = strSet21.isEmpty();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("Unknown class name", (int) (short) 0, 4095);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node48 = node46.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) -1, node46, (int) (byte) 1, (int) '#');
        boolean boolean52 = node46.isDo();
        boolean boolean53 = node46.isDefaultCase();
        node46.setQuotedString();
        boolean boolean55 = node46.isDec();
        boolean boolean56 = node46.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable57 = node46.siblings();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(51);
        java.lang.String str60 = node46.checkTreeEquals(node59);
        boolean boolean61 = node46.isOr();
        node40.putProp(0, (java.lang.Object) node46);
        boolean boolean63 = strSet21.equals((java.lang.Object) node46);
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str65 = jSDocInfo64.getVersion();
        boolean boolean66 = jSDocInfo64.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet67 = jSDocInfo64.getParameterNames();
        jSDocInfo64.addSuppression("");
        boolean boolean70 = jSDocInfo64.isImplicitCast();
        boolean boolean71 = jSDocInfo64.isIdGenerator();
        int int72 = jSDocInfo64.getParameterCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList73 = jSDocInfo64.getImplementedInterfaces();
        boolean boolean74 = strSet21.remove((java.lang.Object) jSDocInfo64);
        java.util.stream.Stream<java.lang.String> strStream75 = strSet21.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream76 = strSet21.stream();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strStream17);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[STRING  0, hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[STRING  0, hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeIterable57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str60, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(strStream75);
        org.junit.Assert.assertNotNull(strStream76);
    }

    @Test
    public void test09672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09672");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(16773120, "NUMBER 35.0");
        boolean boolean3 = node2.isOr();
        int int4 = node2.getSourceOffset();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test09673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09673");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        boolean boolean10 = strSet9.isEmpty();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node20.isScript();
        node20.setQuotedString();
        com.google.javascript.rhino.Node node28 = node15.srcrefTree(node20);
        boolean boolean29 = node28.isIf();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(35, "OR 1", (int) (short) 0, 45);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean39 = node38.isThrow();
        java.lang.String str43 = node38.toString(true, false, true);
        boolean boolean44 = node38.isOptionalArg();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] { node28, node34, node38, node48 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(38, nodeArray49, (int) (byte) 100, (int) (byte) 10);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 2, 8, 50);
        com.google.javascript.rhino.Node node57 = node52.useSourceInfoIfMissingFrom(node56);
        boolean boolean58 = strSet9.equals((java.lang.Object) node56);
        boolean boolean60 = strSet9.add("NUMBER 4095.0 100\n");
        boolean boolean62 = strSet9.add("true");
        java.util.stream.Stream<java.lang.String> strStream63 = strSet9.stream();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "STRING  0" + "'", str43, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strStream63);
    }

    @Test
    public void test09674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09674");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isScript();
        com.google.javascript.rhino.Node node24 = node17.detachFromParent();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node28.setCharno(1);
        java.util.Set<java.lang.String> strSet31 = node28.getDirectives();
        boolean boolean32 = node28.isHook();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node64 = node36.srcref(node63);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node12, node24, node28, node36);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node72 = node70.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) -1, node70, (int) (byte) 1, (int) '#');
        int int76 = node75.getType();
        boolean boolean77 = node28.isEquivalentTo(node75);
        boolean boolean78 = node28.isUnscopedQualifiedName();
        node28.setVarArgs(false);
        boolean boolean81 = node28.isAssign();
        com.google.javascript.rhino.Node node82 = node28.detachFromParent();
        boolean boolean83 = node28.isTrue();
        java.lang.String str84 = node28.getString();
        com.google.javascript.rhino.Node node85 = node28.getLastChild();
        node28.detachChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNull(node85);
    }

    @Test
    public void test09675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09675");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(38, "STRING  0");
        int int3 = node2.getLineno();
        com.google.javascript.rhino.Node node4 = node2.getLastChild();
        boolean boolean5 = node2.isVar();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node15.hasChild(node25);
        boolean boolean27 = node25.isVar();
        boolean boolean28 = node25.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node25.children();
        boolean boolean30 = node25.isTrue();
        node25.setWasEmptyNode(false);
        boolean boolean33 = node25.isSyntheticBlock();
        com.google.javascript.rhino.Node node34 = node2.srcref(node25);
        int int35 = node34.getChildCount();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test09676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09676");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(45, 0, 48);
        java.lang.String str4 = node3.getSourceFileName();
        boolean boolean5 = node3.isThis();
        boolean boolean6 = node3.isNull();
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09677");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo9.getAuthors();
        int int11 = jSDocInfo9.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo9.getModifies();
        com.google.javascript.rhino.JSDocInfo.StringPosition[][] stringPositionArray13 = new com.google.javascript.rhino.JSDocInfo.StringPosition[][] {};
        com.google.javascript.rhino.JSDocInfo.StringPosition[][] stringPositionArray14 = strSet12.toArray(stringPositionArray13);
        com.google.javascript.rhino.JSDocInfo.StringPosition[][] stringPositionArray15 = strSet8.toArray(stringPositionArray13);
        java.util.stream.Stream<java.lang.String> strStream16 = strSet8.stream();
        int int17 = strSet8.size();
        strSet8.clear();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(stringPositionArray13);
        org.junit.Assert.assertNotNull(stringPositionArray14);
        org.junit.Assert.assertNotNull(stringPositionArray15);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test09678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09678");
        java.lang.String[] strArray3 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        boolean boolean11 = strSet4.addAll((java.util.Collection<java.lang.String>) strList9);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node18 = node16.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) -1, node16, (int) (byte) 1, (int) '#');
        boolean boolean22 = node16.isScript();
        node16.setQuotedString();
        boolean boolean24 = strSet4.equals((java.lang.Object) node16);
        int int25 = node16.getChildCount();
        boolean boolean26 = node16.isQuotedString();
        boolean boolean27 = node16.isObjectLit();
        com.google.javascript.rhino.Node node28 = node16.getParent();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node33.isDo();
        com.google.javascript.rhino.Node node40 = node33.getLastSibling();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(46, (int) (byte) -1, 29);
        com.google.javascript.rhino.Node node45 = node40.srcrefTree(node44);
        boolean boolean46 = node40.isGetElem();
        com.google.javascript.rhino.Node node47 = node28.srcrefTree(node40);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node51.setCharno(1);
        boolean boolean54 = node51.isRegExp();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node59.isDo();
        boolean boolean66 = node59.isDefaultCase();
        node59.setQuotedString();
        com.google.javascript.rhino.Node node68 = node51.useSourceInfoFromForTree(node59);
        node68.setSourceFileForTesting("STRING  0\n");
        int int71 = node68.getSourcePosition();
        int int72 = node68.getSourcePosition();
        java.lang.String str73 = node68.toStringTree();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(32, node40, node68, 131104, 39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 10 + "'", int71 == 10);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 10 + "'", int72 == 10);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "STRING  0 [source_file: STRING  0\n]\n" + "'", str73, "STRING  0 [source_file: STRING  0\n]\n");
    }

    @Test
    public void test09679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09679");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        node26.setLength((int) ' ');
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node50 = node48.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) -1, node48, (int) (byte) 1, (int) '#');
        boolean boolean54 = node43.hasChild(node53);
        int int55 = node43.getCharno();
        com.google.javascript.rhino.Node node56 = node33.useSourceInfoIfMissingFrom(node43);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node63 = node61.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) -1, node61, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node73 = node71.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (byte) -1, node71, (int) (byte) 1, (int) '#');
        boolean boolean77 = node66.hasChild(node76);
        boolean boolean78 = node76.isVar();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((-1), node43, node76);
        boolean boolean80 = node43.isVoid();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = node43.getJSDocInfo();
        com.google.javascript.rhino.Node node82 = node26.useSourceInfoIfMissingFromForTree(node43);
        boolean boolean83 = node26.isParamList();
        boolean boolean84 = node26.isReturn();
        int int85 = node26.getSideEffectFlags();
        boolean boolean86 = node26.isBreak();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSDocInfo81);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test09680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09680");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node15.isScript();
        node15.setQuotedString();
        boolean boolean23 = strSet3.equals((java.lang.Object) node15);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        boolean boolean34 = node28.isScript();
        com.google.javascript.rhino.InputId inputId35 = node28.getInputId();
        boolean boolean36 = node28.isDelProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder37 = node28.getJsDocBuilderForNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str40 = jSDocInfo39.getVersion();
        boolean boolean41 = jSDocInfo39.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet42 = jSDocInfo39.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList43 = jSDocInfo39.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList44 = jSDocInfo39.getThrownTypes();
        java.util.Set<java.lang.String> strSet45 = jSDocInfo39.getParameterNames();
        node28.putProp((-1), (java.lang.Object) jSDocInfo39);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression47 = jSDocInfo39.getTypedefType();
        java.lang.String str48 = jSDocInfo39.getLicense();
        boolean boolean49 = jSDocInfo39.isHidden();
        boolean boolean50 = strSet3.contains((java.lang.Object) jSDocInfo39);
        java.lang.String str51 = jSDocInfo39.getSourceName();
        boolean boolean52 = jSDocInfo39.shouldPreserveTry();
        boolean boolean54 = jSDocInfo39.hasParameterType("(ERROR 1\n    STRING  0\n    STRING  0\n)");
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(inputId35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder37);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(jSTypeExpressionList43);
        org.junit.Assert.assertNotNull(jSTypeExpressionList44);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNull(jSTypeExpression47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test09681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09681");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescriptionForParameter("STRING  0\n");
        java.lang.String str5 = jSDocInfo0.getDescription();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node19.hasChild(node29);
        int int31 = node19.getCharno();
        com.google.javascript.rhino.Node node32 = node9.useSourceInfoIfMissingFrom(node19);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node37 = node9.srcref(node36);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean42 = node41.isFromExterns();
        boolean boolean43 = node37.hasChild(node41);
        jSDocInfo0.setAssociatedNode(node37);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile45 = null;
        node37.setStaticSourceFile(staticSourceFile45);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node51.isDo();
        boolean boolean58 = node51.isDefaultCase();
        node51.setQuotedString();
        boolean boolean60 = node51.isDec();
        boolean boolean61 = node51.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node51.siblings();
        com.google.javascript.rhino.Node node63 = node51.detachFromParent();
        node51.removeProp((int) '4');
        node51.putIntProp(100, 46);
        com.google.javascript.rhino.Node node69 = node37.useSourceInfoIfMissingFrom(node51);
        int int70 = node37.getChildCount();
        boolean boolean71 = node37.isDebugger();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test09682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09682");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("(Not declared as a type name)");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(10);
        boolean boolean4 = node3.isNoSideEffectsCall();
        int int5 = node3.getLength();
        com.google.javascript.rhino.Node node6 = node1.useSourceInfoIfMissingFromForTree(node3);
        boolean boolean7 = node3.isFunction();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node18 = node16.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) -1, node16, (int) (byte) 1, (int) '#');
        boolean boolean22 = node16.isScript();
        node16.setQuotedString();
        com.google.javascript.rhino.Node node24 = node11.srcrefTree(node16);
        com.google.javascript.rhino.Node node25 = node24.cloneNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = node24.getStaticSourceFile();
        boolean boolean27 = node24.isStringKey();
        boolean boolean28 = node24.isGetterDef();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder29 = node24.new FileLevelJsDocBuilder();
        boolean boolean30 = node24.hasChildren();
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str32 = jSDocInfo31.getVersion();
        boolean boolean33 = jSDocInfo31.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo31.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList35 = jSDocInfo31.getImplementedInterfaces();
        boolean boolean36 = jSDocInfo31.hasReturnType();
        boolean boolean37 = jSDocInfo31.hasBaseType();
        boolean boolean38 = jSDocInfo31.isNoCompile();
        boolean boolean39 = jSDocInfo31.hasBaseType();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node44.setCharno(1);
        boolean boolean47 = node44.isRegExp();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node54 = node52.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) -1, node52, (int) (byte) 1, (int) '#');
        boolean boolean58 = node52.isDo();
        boolean boolean59 = node52.isDefaultCase();
        node52.setQuotedString();
        com.google.javascript.rhino.Node node61 = node44.useSourceInfoFromForTree(node52);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node65.setCharno(1);
        java.util.Set<java.lang.String> strSet68 = node65.getDirectives();
        node65.setLength(0);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node77 = node75.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (byte) -1, node75, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(0, node61, node65, node80, (int) 'a', (int) (short) 0);
        boolean boolean84 = node61.isNull();
        com.google.javascript.rhino.jstype.JSType jSType85 = node61.getJSType();
        jSDocInfo31.setAssociatedNode(node61);
        com.google.javascript.rhino.Node node87 = node24.useSourceInfoFromForTree(node61);
        com.google.javascript.rhino.Node node88 = node3.useSourceInfoIfMissingFromForTree(node24);
        com.google.javascript.rhino.Node node89 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = node88.isEquivalentTo(node89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(staticSourceFile26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(jSTypeExpressionList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(strSet68);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(node77);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSType85);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test09683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09683");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node3 = null;
        namePosition0.setItem(node3);
        com.google.javascript.rhino.Node node5 = namePosition0.getItem();
        com.google.javascript.rhino.Node node6 = namePosition0.getItem();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean11 = node10.isThrow();
        java.lang.String str15 = node10.toString(true, false, true);
        java.lang.String str16 = node10.getQualifiedName();
        boolean boolean17 = node10.isIn();
        com.google.javascript.rhino.Node node18 = node10.cloneTree();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node22.setCharno(1);
        java.util.Set<java.lang.String> strSet25 = node22.getDirectives();
        boolean boolean26 = node22.isHook();
        node18.addChildToFront(node22);
        boolean boolean28 = node18.isNE();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node18.siblings();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int34 = node33.getType();
        com.google.javascript.rhino.Node node35 = node33.cloneNode();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean40 = node39.isThrow();
        java.lang.String str44 = node39.toString(true, false, true);
        int int46 = node39.getIntProp(51);
        node39.addSuppression("STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node49 = node35.useSourceInfoFrom(node39);
        node18.addChildrenToBack(node35);
        namePosition0.setItem(node35);
        int int52 = namePosition0.getPositionOnStartLine();
        int int53 = namePosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING  0" + "'", str15, "STRING  0");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 40 + "'", int34 == 40);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "STRING  0" + "'", str44, "STRING  0");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test09684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09684");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        boolean boolean4 = node3.isThis();
        boolean boolean5 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(10);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node18 = node16.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) -1, node16, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        boolean boolean32 = node21.hasChild(node31);
        int int33 = node21.getCharno();
        com.google.javascript.rhino.Node node34 = node11.useSourceInfoIfMissingFrom(node21);
        node34.setLength((int) ' ');
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node57 = node55.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node55, (int) (byte) 1, (int) '#');
        boolean boolean61 = node50.hasChild(node60);
        int int62 = node50.getCharno();
        com.google.javascript.rhino.Node node63 = node40.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node68 = node40.srcref(node67);
        boolean boolean69 = node34.isEquivalentToTyped(node40);
        node40.addSuppression("STRING  0 [synthetic: 1]\n");
        node7.addChildToFront(node40);
        com.google.javascript.rhino.Node node73 = node7.cloneTree();
        boolean boolean75 = node73.getBooleanProp((int) (short) -1);
        com.google.javascript.rhino.Node node76 = node3.useSourceInfoIfMissingFrom(node73);
        node3.detachChildren();
        boolean boolean78 = node3.isVar();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable79 = node3.children();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(nodeIterable79);
    }

    @Test
    public void test09685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09685");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node19.children();
        boolean boolean24 = node19.isDefaultCase();
        java.lang.String str25 = node19.toString();
        int int26 = node19.getLineno();
        com.google.javascript.rhino.Node node27 = node19.removeChildren();
        boolean boolean28 = node27.isStringKey();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ERROR 1" + "'", str25, "ERROR 1");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test09686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09686");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double4 = node3.getDouble();
        int int6 = node3.getIntProp(12);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4095.0d + "'", double4 == 4095.0d);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test09687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09687");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        node3.setStaticSourceFile(staticSourceFile6);
        boolean boolean8 = node3.isBreak();
        boolean boolean9 = node3.isOptionalArg();
        boolean boolean10 = node3.isNew();
        boolean boolean11 = node3.isSwitch();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean16 = node15.isThrow();
        java.lang.String str20 = node15.toString(true, false, true);
        java.lang.String str21 = node15.getQualifiedName();
        boolean boolean22 = node15.isIn();
        com.google.javascript.rhino.Node node23 = node15.cloneTree();
        boolean boolean24 = node23.isRegExp();
        boolean boolean25 = node23.isDebugger();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        node29.removeProp(47);
        boolean boolean32 = node29.isFromExterns();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double37 = node36.getDouble();
        boolean boolean38 = node36.isAdd();
        com.google.javascript.rhino.Node node39 = node36.cloneNode();
        boolean boolean40 = node39.isNE();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node52 = node50.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) -1, node50, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node62 = node60.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) -1, node60, (int) (byte) 1, (int) '#');
        boolean boolean66 = node55.hasChild(node65);
        int int67 = node55.getCharno();
        com.google.javascript.rhino.Node node68 = node45.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node73 = node45.srcref(node72);
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean78 = node77.isFromExterns();
        boolean boolean79 = node73.hasChild(node77);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(52, node77);
        node39.addChildToBack(node80);
        java.lang.String str82 = node29.checkTreeEquals(node39);
        node29.setSourceFileForTesting("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        node29.setLength((int) (byte) 1);
        node29.setSourceEncodedPositionForTree(151562);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile89 = node29.getStaticSourceFile();
        node23.setStaticSourceFile(staticSourceFile89);
        com.google.javascript.rhino.Node node91 = node3.copyInformationFromForTree(node23);
        boolean boolean92 = node23.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "STRING  0" + "'", str20, "STRING  0");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 4095.0d + "'", double37 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n" + "'", str82, "Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n");
        org.junit.Assert.assertNotNull(staticSourceFile89);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test09688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09688");
        com.google.javascript.rhino.Node[] nodeArray1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(46, nodeArray1, 48, 43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09689");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean27 = node11.isInc();
        boolean boolean28 = node11.isDefaultCase();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str30 = jSDocInfo29.getVersion();
        boolean boolean31 = jSDocInfo29.hasEnumParameterType();
        java.lang.String str33 = jSDocInfo29.getDescriptionForParameter("STRING  0\n");
        java.lang.String str34 = jSDocInfo29.getDescription();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        boolean boolean59 = node48.hasChild(node58);
        int int60 = node48.getCharno();
        com.google.javascript.rhino.Node node61 = node38.useSourceInfoIfMissingFrom(node48);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node66 = node38.srcref(node65);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean71 = node70.isFromExterns();
        boolean boolean72 = node66.hasChild(node70);
        jSDocInfo29.setAssociatedNode(node66);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile74 = null;
        node66.setStaticSourceFile(staticSourceFile74);
        com.google.javascript.rhino.Node node76 = node11.useSourceInfoFromForTree(node66);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable77 = node66.siblings();
        com.google.javascript.rhino.Node node78 = node66.getLastSibling();
        com.google.javascript.rhino.jstype.JSType jSType79 = null;
        node78.setJSType(jSType79);
        node78.setIsSyntheticBlock(true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(nodeIterable77);
        org.junit.Assert.assertNotNull(node78);
    }

    @Test
    public void test09690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09690");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(0, "(ERROR 1)", 6, 23);
        boolean boolean5 = node4.isQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09691");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        com.google.javascript.rhino.Node node15 = node8.detachFromParent();
        node15.setOptionalArg(false);
        boolean boolean19 = node15.getBooleanProp(31);
        com.google.javascript.rhino.Node node20 = node3.copyInformationFrom(node15);
        boolean boolean21 = node20.isLabel();
        boolean boolean22 = node20.isWhile();
        boolean boolean23 = node20.isFor();
        boolean boolean24 = node20.isNull();
        node20.setOptionalArg(true);
        com.google.javascript.rhino.jstype.JSType jSType27 = node20.getJSType();
        boolean boolean28 = node20.isFromExterns();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test09692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09692");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node32 = node4.srcref(node31);
        node4.setType(38);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("STRING  0 [synthetic: 1]\n", (int) ' ', (int) (byte) -1);
        node38.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node52 = node50.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) -1, node50, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node62 = node60.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) -1, node60, (int) (byte) 1, (int) '#');
        boolean boolean66 = node55.hasChild(node65);
        int int67 = node55.getCharno();
        com.google.javascript.rhino.Node node68 = node45.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node75 = node73.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (byte) -1, node73, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node85 = node83.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (byte) -1, node83, (int) (byte) 1, (int) '#');
        boolean boolean89 = node78.hasChild(node88);
        boolean boolean90 = node88.isVar();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((-1), node55, node88);
        com.google.javascript.rhino.Node node92 = node91.getParent();
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node((int) ' ', node4, node38, node91);
        boolean boolean94 = node91.isEmpty();
        boolean boolean95 = node91.isFunction();
        boolean boolean96 = node91.hasChildren();
        boolean boolean97 = node91.isAssignAdd();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test09693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09693");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        boolean boolean27 = node13.isAssignAdd();
        boolean boolean28 = node13.isUnscopedQualifiedName();
        int int29 = node13.getLineno();
        boolean boolean30 = node13.isTrue();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node42 = node40.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, (int) (byte) 1, (int) '#');
        boolean boolean46 = node40.isScript();
        node40.setQuotedString();
        com.google.javascript.rhino.Node node48 = node35.srcrefTree(node40);
        boolean boolean49 = node48.isIf();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(35, "OR 1", (int) (short) 0, 45);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean59 = node58.isThrow();
        java.lang.String str63 = node58.toString(true, false, true);
        boolean boolean64 = node58.isOptionalArg();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node[] nodeArray69 = new com.google.javascript.rhino.Node[] { node48, node54, node58, node68 };
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(38, nodeArray69, (int) (byte) 100, (int) (byte) 10);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) 2, 8, 50);
        com.google.javascript.rhino.Node node77 = node72.useSourceInfoIfMissingFrom(node76);
        boolean boolean78 = node72.isNot();
        boolean boolean79 = node13.hasChild(node72);
        com.google.javascript.rhino.Node node81 = node72.getChildAtIndex((int) (short) 0);
        node81.setType((int) ' ');
        boolean boolean84 = node81.isVarArgs();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "STRING  0" + "'", str63, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(nodeArray69);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test09694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09694");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 15, 3, (-1));
        boolean boolean4 = node3.isOnlyModifiesThisCall();
        com.google.javascript.rhino.InputId inputId5 = node3.getInputId();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags7 = new com.google.javascript.rhino.Node.SideEffectFlags(100);
        sideEffectFlags7.setMutatesThis();
        sideEffectFlags7.setReturnsTainted();
        sideEffectFlags7.setMutatesGlobalState();
        sideEffectFlags7.setMutatesArguments();
        sideEffectFlags7.clearAllFlags();
        sideEffectFlags7.setThrows();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(sideEffectFlags7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(inputId5);
    }

    @Test
    public void test09695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09695");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean3 = ternaryValue1.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = ternaryValue4.or(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue1.xor(ternaryValue6);
        java.lang.String str8 = ternaryValue7.toString();
        java.lang.String str9 = ternaryValue7.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        boolean boolean12 = ternaryValue10.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue13.or(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue13.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue16.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue10.or(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue7.xor(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean23 = ternaryValue21.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue24.or(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue21.xor(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue29.or(ternaryValue31);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue34.or(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue36.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue32.and(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        java.lang.String str42 = ternaryValue41.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue32.and(ternaryValue41);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue27.or(ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue46.or(ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = ternaryValue51.or(ternaryValue53);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue53.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue49.and(ternaryValue53);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        java.lang.String str59 = ternaryValue58.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue49.and(ternaryValue58);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = ternaryValue27.and(ternaryValue58);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = ternaryValue18.or(ternaryValue61);
        java.lang.String str63 = ternaryValue61.toString();
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "true" + "'", str8, "true");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "true" + "'", str9, "true");
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "true" + "'", str42, "true");
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "true" + "'", str59, "true");
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "true" + "'", str63, "true");
    }

    @Test
    public void test09696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09696");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        jSDocInfo0.addSuppression("OR 1");
        boolean boolean10 = jSDocInfo0.isNoShadow();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getExtendedInterfaces();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getSuppressions();
        java.lang.String[] strArray16 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        boolean boolean24 = strSet17.addAll((java.util.Collection<java.lang.String>) strList22);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str26 = jSDocInfo25.getVersion();
        java.lang.String str27 = jSDocInfo25.getFileOverview();
        boolean boolean28 = jSDocInfo25.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet29 = jSDocInfo25.getParameterNames();
        boolean boolean30 = strSet17.retainAll((java.util.Collection<java.lang.String>) strSet29);
        java.util.stream.Stream<java.lang.String> strStream31 = strSet17.stream();
        boolean boolean32 = strSet13.addAll((java.util.Collection<java.lang.String>) strSet17);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNotNull(markerCollection12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test09697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09697");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.InputId inputId11 = node4.getInputId();
        boolean boolean12 = node4.isDelProp();
        boolean boolean13 = node4.isBlock();
        boolean boolean14 = node4.isQuotedString();
        boolean boolean15 = node4.isComma();
        node4.setString("STRING  0 [jsdoc_info: JSDocInfo]");
        // The following exception was thrown during execution in test generation
        try {
            node4.setDouble((double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING STRING  0 [jsdoc_info: JSDocInfo] 0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09698");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean11 = node10.isThrow();
        java.lang.String str15 = node10.toString(true, false, true);
        java.lang.String str16 = node10.getQualifiedName();
        boolean boolean17 = node10.isThis();
        java.lang.String[] strArray20 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        boolean boolean28 = strSet21.addAll((java.util.Collection<java.lang.String>) strList26);
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str30 = jSDocInfo29.getVersion();
        java.lang.String str31 = jSDocInfo29.getFileOverview();
        boolean boolean32 = jSDocInfo29.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet33 = jSDocInfo29.getParameterNames();
        boolean boolean34 = strSet21.retainAll((java.util.Collection<java.lang.String>) strSet33);
        java.util.stream.Stream<java.lang.String> strStream35 = strSet21.stream();
        node10.setDirectives((java.util.Set<java.lang.String>) strSet21);
        jSDocInfo0.setAssociatedNode(node10);
        boolean boolean38 = jSDocInfo0.isNoShadow();
        boolean boolean39 = jSDocInfo0.isInterface();
        boolean boolean40 = jSDocInfo0.hasModifies();
        boolean boolean41 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING  0" + "'", str15, "STRING  0");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strStream35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test09699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09699");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        boolean boolean36 = node25.hasChild(node35);
        int int37 = node25.getCharno();
        com.google.javascript.rhino.Node node38 = node15.useSourceInfoIfMissingFrom(node25);
        int int39 = node15.getSourcePosition();
        java.lang.String str40 = node15.toString();
        int int41 = node4.getIndexOfChild(node15);
        boolean boolean42 = node4.isDebugger();
        boolean boolean43 = node4.isAssign();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("false", 49, (int) 'a');
        com.google.javascript.rhino.Node node48 = node4.clonePropsFrom(node47);
        com.google.javascript.rhino.Node[] nodeArray55 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray55);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(0, nodeArray55);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(2, nodeArray55);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(49, nodeArray55, 38, 53);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(46, nodeArray55, 151562, 100);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(0, nodeArray55);
        com.google.javascript.rhino.Node node66 = node47.useSourceInfoIfMissingFromForTree(node65);
        boolean boolean67 = node66.isHook();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 35 + "'", int37 == 35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4131 + "'", int39 == 4131);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR 1" + "'", str40, "OR 1");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray55);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09700");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = jSDocInfo0.getTypeNodes();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        jSDocInfo0.setLicense("Not declared as a type name");
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node16.setCharno(1);
        boolean boolean19 = node16.isRegExp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node24.isDo();
        boolean boolean31 = node24.isDefaultCase();
        node24.setQuotedString();
        com.google.javascript.rhino.Node node33 = node16.useSourceInfoFromForTree(node24);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node37.setCharno(1);
        java.util.Set<java.lang.String> strSet40 = node37.getDirectives();
        node37.setLength(0);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(0, node33, node37, node52, (int) 'a', (int) (short) 0);
        boolean boolean56 = node33.isString();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node63 = node61.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) -1, node61, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node73 = node71.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (byte) -1, node71, (int) (byte) 1, (int) '#');
        boolean boolean77 = node66.hasChild(node76);
        boolean boolean78 = node76.isVar();
        boolean boolean79 = node76.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable80 = node76.children();
        com.google.javascript.rhino.Node node81 = node33.srcref(node76);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node85.setCharno(1);
        java.util.Set<java.lang.String> strSet88 = node85.getDirectives();
        boolean boolean89 = node85.isHook();
        int int90 = node85.getSourceOffset();
        java.lang.String str91 = node76.checkTreeEquals(node85);
        node85.setLineno(40);
        jSDocInfo0.setAssociatedNode(node85);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression95 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeIterable80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNull(strSet88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n" + "'", str91, "Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertNull(jSTypeExpression95);
    }

    @Test
    public void test09701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09701");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("STRING OR 1 0");
        stringPosition0.setItem("THROW STRING  0\n");
        stringPosition0.setPositionInformation(46, 6, 52, 16);
        stringPosition0.setItem("(NUMBER 4095.0 100\n)");
        stringPosition0.setItem("OR 1\n    ERROR 1\n        STRING  0\n");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test09702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09702");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node32 = node4.srcref(node31);
        node4.setType(38);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("STRING  0 [synthetic: 1]\n", (int) ' ', (int) (byte) -1);
        node38.setSourceFileForTesting("Not declared as a type name");
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node52 = node50.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) -1, node50, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node62 = node60.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) -1, node60, (int) (byte) 1, (int) '#');
        boolean boolean66 = node55.hasChild(node65);
        int int67 = node55.getCharno();
        com.google.javascript.rhino.Node node68 = node45.useSourceInfoIfMissingFrom(node55);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node75 = node73.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (byte) -1, node73, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node85 = node83.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (byte) -1, node83, (int) (byte) 1, (int) '#');
        boolean boolean89 = node78.hasChild(node88);
        boolean boolean90 = node88.isVar();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((-1), node55, node88);
        com.google.javascript.rhino.Node node92 = node91.getParent();
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node((int) ' ', node4, node38, node91);
        boolean boolean94 = node91.isTrue();
        boolean boolean95 = node91.isDefaultCase();
        boolean boolean96 = node91.isOptionalArg();
        boolean boolean97 = node91.wasEmptyNode();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 35 + "'", int67 == 35);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNull(node92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test09703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09703");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        boolean boolean10 = node4.isOptionalArg();
        java.lang.String str14 = node4.toString(false, false, false);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double19 = node18.getDouble();
        int int20 = node18.getSourcePosition();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node24.setCharno(1);
        boolean boolean27 = node24.isRegExp();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        boolean boolean38 = node32.isDo();
        boolean boolean39 = node32.isDefaultCase();
        node32.setQuotedString();
        com.google.javascript.rhino.Node node41 = node24.useSourceInfoFromForTree(node32);
        node32.putIntProp((int) (byte) 100, (int) (byte) 0);
        node32.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean48 = node32.isInc();
        node32.setQuotedString();
        java.lang.String str50 = node32.getSourceFileName();
        com.google.javascript.rhino.Node node51 = node18.copyInformationFrom(node32);
        node18.setCharno(16);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node64 = node62.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) -1, node62, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node74 = node72.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) -1, node72, (int) (byte) 1, (int) '#');
        boolean boolean78 = node67.hasChild(node77);
        int int79 = node67.getCharno();
        com.google.javascript.rhino.Node node80 = node57.useSourceInfoIfMissingFrom(node67);
        boolean boolean81 = node57.isSwitch();
        java.lang.String str82 = node57.toString();
        boolean boolean83 = node57.isBreak();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, node18, node57, 45, (int) (byte) -1);
        com.google.javascript.rhino.Node[] nodeArray91 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray91);
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(29, nodeArray91);
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray91);
        node57.putProp(143361, (java.lang.Object) (short) 1);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING " + "'", str14, "STRING ");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 4095.0d + "'", double19 == 4095.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 409601 + "'", int20 == 409601);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "OR 1" + "'", str82, "OR 1");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(nodeArray91);
    }

    @Test
    public void test09704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09704");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        com.google.javascript.rhino.Node node51 = node50.getParent();
        boolean boolean52 = node50.isContinue();
        boolean boolean53 = node50.isDefaultCase();
        com.google.javascript.rhino.Node node54 = node50.cloneNode();
        boolean boolean55 = node54.isAdd();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node60.setCharno(1);
        boolean boolean63 = node60.isRegExp();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node70 = node68.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) -1, node68, (int) (byte) 1, (int) '#');
        boolean boolean74 = node68.isDo();
        boolean boolean75 = node68.isDefaultCase();
        node68.setQuotedString();
        com.google.javascript.rhino.Node node77 = node60.useSourceInfoFromForTree(node68);
        boolean boolean78 = node60.isInc();
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(30, node60);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double84 = node83.getDouble();
        boolean boolean85 = node83.isAdd();
        com.google.javascript.rhino.Node node86 = node83.cloneNode();
        com.google.javascript.rhino.jstype.JSType jSType87 = node86.getJSType();
        java.lang.String str88 = node86.toStringTree();
        node60.addChildToFront(node86);
        com.google.javascript.rhino.Node node90 = node54.copyInformationFromForTree(node86);
        node54.setWasEmptyNode(true);
        node54.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 4095.0d + "'", double84 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(jSType87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "NUMBER 4095.0 100\n" + "'", str88, "NUMBER 4095.0 100\n");
        org.junit.Assert.assertNotNull(node90);
    }

    @Test
    public void test09705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09705");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        java.lang.String str10 = node4.toStringTree();
        boolean boolean11 = node4.isDebugger();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder12 = node4.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "STRING  0\n" + "'", str10, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder12);
    }

    @Test
    public void test09706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09706");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean6 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int12 = node11.getType();
        int int13 = node11.getCharno();
        boolean boolean14 = strSet7.equals((java.lang.Object) node11);
        java.util.stream.Stream<java.lang.String> strStream15 = strSet7.stream();
        int int16 = strSet7.size();
        boolean boolean17 = strSet7.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream18 = strSet7.parallelStream();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 40 + "'", int12 == 40);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strStream18);
    }

    @Test
    public void test09707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09707");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean3 = ternaryValue1.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean7 = ternaryValue5.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue8.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue5.xor(ternaryValue10);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue1.xor(ternaryValue5);
        boolean boolean14 = ternaryValue1.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue15.or(ternaryValue16);
        boolean boolean19 = ternaryValue15.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = ternaryValue15.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean24 = ternaryValue22.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue25.or(ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue22.xor(ternaryValue27);
        java.lang.String str29 = ternaryValue28.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = ternaryValue20.and(ternaryValue28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = ternaryValue1.or(ternaryValue30);
        boolean boolean33 = ternaryValue1.toBoolean(true);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "true" + "'", str29, "true");
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test09708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09708");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean14 = node4.getBooleanProp(52);
        boolean boolean15 = node4.isThis();
        boolean boolean16 = node4.isSwitch();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        boolean boolean27 = node21.isDo();
        boolean boolean28 = node21.isDefaultCase();
        node21.setQuotedString();
        boolean boolean31 = node21.getBooleanProp(52);
        int int32 = node21.getLength();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder33 = node21.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node34 = node4.copyInformationFrom(node21);
        boolean boolean35 = node34.isAdd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test09709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09709");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(52, "STRING ERROR 37", 39, 23);
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test09710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09710");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double4 = node3.getDouble();
        node3.setOptionalArg(true);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node27 = node25.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node25, (int) (byte) 1, (int) '#');
        boolean boolean31 = node20.hasChild(node30);
        int int32 = node20.getCharno();
        com.google.javascript.rhino.Node node33 = node10.useSourceInfoIfMissingFrom(node20);
        boolean boolean34 = node3.isEquivalentTo(node20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = node20.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR 1 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4095.0d + "'", double4 == 4095.0d);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test09711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09711");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = jSDocInfo0.getTypeNodes();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        jSDocInfo0.setLicense("Not declared as a type name");
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        boolean boolean12 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09712");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node7 = node5.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1, node5, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node10.hasChild(node20);
        boolean boolean22 = node20.isVar();
        boolean boolean23 = node20.isTypeOf();
        boolean boolean24 = node20.isAssignAdd();
        boolean boolean25 = node20.isStringKey();
        node20.setOptionalArg(true);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean32 = node31.isThrow();
        java.lang.String str36 = node31.toString(true, false, true);
        boolean boolean37 = node31.isWith();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean42 = node41.isThrow();
        boolean boolean43 = node41.isSwitch();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node50 = node48.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) -1, node48, (int) (byte) 1, (int) '#');
        boolean boolean54 = node48.isDo();
        boolean boolean55 = node48.isDefaultCase();
        node48.setQuotedString();
        boolean boolean57 = node48.isDec();
        boolean boolean58 = node48.isLabel();
        boolean boolean59 = node48.isSetterDef();
        boolean boolean60 = node48.isRegExp();
        boolean boolean61 = node48.isName();
        boolean boolean62 = node48.isVoid();
        com.google.javascript.rhino.Node node63 = node48.cloneNode();
        com.google.javascript.rhino.Node node64 = node41.useSourceInfoIfMissingFrom(node63);
        boolean boolean65 = node64.isFor();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(53, node20, node31, node64);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        node31.addChildToFront(node68);
        boolean boolean70 = node31.isTypeOf();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "STRING  0" + "'", str36, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test09713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09713");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nNUMBER 54.0 52\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: NUMBER 54.0 52\n", (int) (short) 0, 12);
        boolean boolean4 = node3.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test09714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09714");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        jSDocInfo0.setAssociatedNode(node8);
        boolean boolean15 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node36 = node34.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) -1, node34, (int) (byte) 1, (int) '#');
        boolean boolean40 = node29.hasChild(node39);
        int int41 = node29.getCharno();
        com.google.javascript.rhino.Node node42 = node19.useSourceInfoIfMissingFrom(node29);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node47 = node19.srcref(node46);
        jSDocInfo0.setAssociatedNode(node19);
        node19.setLineno(47);
        int int51 = node19.getChildCount();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node55.setCharno(1);
        java.util.Set<java.lang.String> strSet58 = node55.getDirectives();
        node55.setCharno((int) (short) -1);
        node55.setVarArgs(true);
        com.google.javascript.rhino.Node node63 = node19.useSourceInfoFrom(node55);
        com.google.javascript.rhino.Node node64 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node65 = node19.useSourceInfoFrom(node64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(strSet58);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test09715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09715");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        java.lang.String str6 = stringPosition0.getItem();
        java.lang.String str7 = stringPosition0.getItem();
        int int8 = stringPosition0.getStartLine();
        stringPosition0.setItem("OR 1");
        stringPosition0.setItem("(())");
        int int13 = stringPosition0.getEndLine();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation(192612, 19, (int) (byte) 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 192612?end-line: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
    }

    @Test
    public void test09716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09716");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        boolean boolean15 = node9.isScript();
        node9.setQuotedString();
        com.google.javascript.rhino.Node node17 = node4.srcrefTree(node9);
        boolean boolean18 = node17.isIf();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(35, "OR 1", (int) (short) 0, 45);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean28 = node27.isThrow();
        java.lang.String str32 = node27.toString(true, false, true);
        boolean boolean33 = node27.isOptionalArg();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] { node17, node23, node27, node37 };
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(38, nodeArray38, (int) (byte) 100, (int) (byte) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = null;
        node41.setJSDocInfo(jSDocInfo42);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "STRING  0" + "'", str32, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(nodeArray38);
    }

    @Test
    public void test09717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09717");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        int int27 = node3.getSourcePosition();
        java.lang.String str28 = node3.toString();
        int int30 = node3.getIntProp((int) (short) 0);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node41 = node39.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) -1, node39, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        boolean boolean55 = node44.hasChild(node54);
        int int56 = node44.getCharno();
        com.google.javascript.rhino.Node node57 = node34.useSourceInfoIfMissingFrom(node44);
        boolean boolean58 = node44.isAssignAdd();
        com.google.javascript.rhino.Node node59 = node3.srcref(node44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = node59.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR 1 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4131 + "'", int27 == 4131);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR 1" + "'", str28, "OR 1");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test09718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09718");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(35, "OR 1", (int) (short) 0, 45);
        boolean boolean5 = node4.isExprResult();
        boolean boolean6 = node4.isInc();
        boolean boolean7 = node4.isLabelName();
        boolean boolean8 = node4.isAnd();
        node4.setType(46);
        java.util.Set<java.lang.String> strSet11 = null;
        node4.setDirectives(strSet11);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09719");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        boolean boolean12 = node11.isRegExp();
        int int13 = node11.getSourcePosition();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        boolean boolean28 = node22.isScript();
        node22.setQuotedString();
        com.google.javascript.rhino.Node node30 = node17.srcrefTree(node22);
        boolean boolean31 = node22.isBreak();
        com.google.javascript.rhino.InputId inputId32 = null;
        node22.setInputId(inputId32);
        int int34 = node11.getIndexOfChild(node22);
        boolean boolean35 = node11.isNumber();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test09720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09720");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        boolean boolean16 = node10.isDo();
        boolean boolean17 = node10.isDefaultCase();
        node10.setQuotedString();
        boolean boolean19 = node10.isDec();
        boolean boolean20 = node10.isLabel();
        boolean boolean21 = node10.isSetterDef();
        boolean boolean22 = node10.isRegExp();
        boolean boolean23 = node10.isName();
        boolean boolean24 = node10.isVoid();
        com.google.javascript.rhino.Node node25 = node10.cloneNode();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node25);
        java.lang.String[] strArray29 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        boolean boolean37 = strSet30.addAll((java.util.Collection<java.lang.String>) strList35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str39 = jSDocInfo38.getVersion();
        java.lang.String str40 = jSDocInfo38.getFileOverview();
        boolean boolean41 = jSDocInfo38.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet42 = jSDocInfo38.getParameterNames();
        boolean boolean43 = strSet30.retainAll((java.util.Collection<java.lang.String>) strSet42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node50 = node48.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) -1, node48, (int) (byte) 1, (int) '#');
        boolean boolean54 = node48.isDo();
        boolean boolean55 = node48.isDefaultCase();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node66 = node64.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) -1, node64, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node76 = node74.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) -1, node74, (int) (byte) 1, (int) '#');
        boolean boolean80 = node69.hasChild(node79);
        int int81 = node69.getCharno();
        com.google.javascript.rhino.Node node82 = node59.useSourceInfoIfMissingFrom(node69);
        int int83 = node59.getSourcePosition();
        java.lang.String str84 = node59.toString();
        int int85 = node48.getIndexOfChild(node59);
        boolean boolean86 = strSet30.equals((java.lang.Object) node48);
        boolean boolean87 = node48.isCatch();
        com.google.javascript.rhino.Node node88 = node3.useSourceInfoFrom(node48);
        int int89 = node48.getLength();
        com.google.javascript.rhino.Node node90 = node48.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4131 + "'", int83 == 4131);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "OR 1" + "'", str84, "OR 1");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(node90);
    }

    @Test
    public void test09721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09721");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        boolean boolean9 = node3.isGetterDef();
        java.lang.String str13 = node3.toString(true, true, false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
    }

    @Test
    public void test09722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09722");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        boolean boolean6 = jSDocInfo0.isDefine();
        boolean boolean8 = jSDocInfo0.hasParameter("ERROR 1");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09723");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.isImplicitCast();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getExtendedInterfaces();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        int int12 = strSet11.size();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test09724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09724");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isConstant();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        int int7 = jSDocInfo0.getExtendedInterfacesCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("NUMBER 10.0 40");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test09725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09725");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        com.google.javascript.rhino.Node node6 = node3.cloneNode();
        boolean boolean7 = node3.isThrow();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        boolean boolean28 = node17.hasChild(node27);
        boolean boolean29 = node27.isVar();
        boolean boolean30 = node27.isTypeOf();
        boolean boolean31 = node27.isAssignAdd();
        boolean boolean32 = node27.isStringKey();
        node27.setOptionalArg(true);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean39 = node38.isThrow();
        java.lang.String str43 = node38.toString(true, false, true);
        java.lang.String str44 = node38.getQualifiedName();
        boolean boolean45 = node38.isIn();
        com.google.javascript.rhino.Node node46 = node38.cloneTree();
        boolean boolean47 = node46.isRegExp();
        boolean boolean48 = node46.isExprResult();
        com.google.javascript.rhino.Node node49 = node27.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node50 = node49.removeChildren();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        int int55 = node54.getSourcePosition();
        int int56 = node54.getType();
        com.google.javascript.rhino.Node node57 = node49.useSourceInfoIfMissingFromForTree(node54);
        java.lang.String str61 = node49.toString(false, true, true);
        com.google.javascript.rhino.Node node62 = node3.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder63 = node62.getJsDocBuilderForNode();
        node62.addSuppression("((Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n))");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "STRING  0" + "'", str43, "STRING  0");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 40 + "'", int56 == 40);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "ERROR [opt_arg: 1]" + "'", str61, "ERROR [opt_arg: 1]");
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder63);
    }

    @Test
    public void test09726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09726");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str2 = jSDocInfo1.getVersion();
        boolean boolean3 = jSDocInfo1.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo1.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo1.getImplementedInterfaces();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean10 = node9.isThrow();
        java.lang.String str14 = node9.toString(true, false, true);
        jSDocInfo1.setAssociatedNode(node9);
        boolean boolean16 = jSDocInfo1.hasTypedefType();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node27 = node25.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node25, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        boolean boolean41 = node30.hasChild(node40);
        int int42 = node30.getCharno();
        com.google.javascript.rhino.Node node43 = node20.useSourceInfoIfMissingFrom(node30);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node48 = node20.srcref(node47);
        jSDocInfo1.setAssociatedNode(node20);
        node20.setLineno(47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo52 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str53 = jSDocInfo52.getVersion();
        boolean boolean54 = jSDocInfo52.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo52.getParameterNames();
        jSDocInfo52.addSuppression("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList58 = jSDocInfo52.getExtendedInterfaces();
        node20.setJSDocInfo(jSDocInfo52);
        boolean boolean60 = node20.isNE();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node64.setCharno(1);
        node64.removeProp(39);
        boolean boolean69 = node64.isCall();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(54, node20, node64);
        boolean boolean71 = node20.isWhile();
        boolean boolean72 = node20.isTry();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING  0" + "'", str14, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertNotNull(jSTypeExpressionList58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test09727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09727");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        int int3 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node7.setCharno(1);
        boolean boolean10 = node7.isRegExp();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node15.isDo();
        boolean boolean22 = node15.isDefaultCase();
        node15.setQuotedString();
        com.google.javascript.rhino.Node node24 = node7.useSourceInfoFromForTree(node15);
        node15.putIntProp((int) (byte) 100, (int) (byte) 0);
        node15.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean31 = node15.isInc();
        boolean boolean32 = node15.isDefaultCase();
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str34 = jSDocInfo33.getVersion();
        boolean boolean35 = jSDocInfo33.hasEnumParameterType();
        java.lang.String str37 = jSDocInfo33.getDescriptionForParameter("STRING  0\n");
        java.lang.String str38 = jSDocInfo33.getDescription();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node59 = node57.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) -1, node57, (int) (byte) 1, (int) '#');
        boolean boolean63 = node52.hasChild(node62);
        int int64 = node52.getCharno();
        com.google.javascript.rhino.Node node65 = node42.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node70 = node42.srcref(node69);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean75 = node74.isFromExterns();
        boolean boolean76 = node70.hasChild(node74);
        jSDocInfo33.setAssociatedNode(node70);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile78 = null;
        node70.setStaticSourceFile(staticSourceFile78);
        com.google.javascript.rhino.Node node80 = node15.useSourceInfoFromForTree(node70);
        int int82 = node15.getIntProp(5);
        typePosition0.setItem(node15);
        com.google.javascript.rhino.Node node84 = typePosition0.getItem();
        int int85 = typePosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test09728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09728");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable23 = node19.children();
        boolean boolean24 = node19.isDefaultCase();
        boolean boolean25 = node19.wasEmptyNode();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable26 = node19.children();
        int int27 = node19.getSourceOffset();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeIterable23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(nodeIterable26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test09729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09729");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str3 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        java.lang.String str5 = jSDocInfo0.getDeprecationReason();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean8 = jSDocInfo0.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        boolean boolean10 = jSDocInfo0.isIdGenerator();
        boolean boolean11 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09730");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
        int int6 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
    }

    @Test
    public void test09731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09731");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node15.isScript();
        node15.setQuotedString();
        boolean boolean23 = strSet3.equals((java.lang.Object) node15);
        int int24 = node15.getChildCount();
        boolean boolean25 = node15.isQuotedString();
        boolean boolean26 = node15.isObjectLit();
        com.google.javascript.rhino.Node node27 = node15.getParent();
        com.google.javascript.rhino.Node node28 = node27.getParent();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node29 = node28.removeChildren();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node28);
    }

    @Test
    public void test09732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09732");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(5, "STRING  0");
        boolean boolean3 = node2.isIf();
        boolean boolean4 = node2.isLabel();
        int int5 = node2.getSideEffectFlags();
        boolean boolean6 = node2.isString();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09733");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean6 = strSet3.add("STRING  0");
        boolean boolean8 = strSet3.equals((java.lang.Object) 45);
        java.lang.String[] strArray11 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        boolean boolean19 = strSet12.addAll((java.util.Collection<java.lang.String>) strList17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str21 = jSDocInfo20.getVersion();
        java.lang.String str22 = jSDocInfo20.getFileOverview();
        boolean boolean23 = jSDocInfo20.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo20.getParameterNames();
        boolean boolean25 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet24);
        java.lang.String[] strArray28 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        boolean boolean36 = strSet29.addAll((java.util.Collection<java.lang.String>) strList34);
        boolean boolean37 = strSet12.containsAll((java.util.Collection<java.lang.String>) strSet29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str39 = jSDocInfo38.getVersion();
        boolean boolean40 = jSDocInfo38.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet41 = jSDocInfo38.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str43 = jSDocInfo42.getVersion();
        java.lang.String str44 = jSDocInfo42.getFileOverview();
        boolean boolean45 = jSDocInfo42.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo42.getParameterNames();
        java.util.Iterator<java.lang.String> strItor47 = strSet46.iterator();
        boolean boolean48 = strSet46.isEmpty();
        boolean boolean49 = strSet41.containsAll((java.util.Collection<java.lang.String>) strSet46);
        boolean boolean50 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet41);
        boolean boolean51 = strSet3.removeAll((java.util.Collection<java.lang.String>) strSet12);
        boolean boolean52 = strSet12.isEmpty();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test09734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09734");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescriptionForParameter("STRING  0\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("STRING  0 [source_file: Named type with empty name component]");
        java.lang.String str7 = jSDocInfo0.getOriginalCommentString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
    }

    @Test
    public void test09735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09735");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 0.0f, 4131, 15);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09736");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray7);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(0, nodeArray7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(2, nodeArray7);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(49, nodeArray7, 38, 53);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(46, nodeArray7, 151562, 100);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(0, nodeArray7);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(97, nodeArray7, (int) (byte) -1, 50);
        java.lang.String str24 = node20.toString(false, false, false);
        boolean boolean25 = node20.isLabelName();
        boolean boolean26 = node20.isBlock();
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ASSIGN_MOD" + "'", str24, "ASSIGN_MOD");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test09737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09737");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        node3.setIsSyntheticBlock(true);
        boolean boolean11 = node3.isTry();
        java.lang.String str12 = node3.toStringTree();
        boolean boolean13 = node3.isRegExp();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node18.isScript();
        com.google.javascript.rhino.InputId inputId25 = node18.getInputId();
        boolean boolean26 = node18.isDelProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder27 = node18.getJsDocBuilderForNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo29 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str30 = jSDocInfo29.getVersion();
        boolean boolean31 = jSDocInfo29.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet32 = jSDocInfo29.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList33 = jSDocInfo29.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList34 = jSDocInfo29.getThrownTypes();
        java.util.Set<java.lang.String> strSet35 = jSDocInfo29.getParameterNames();
        node18.putProp((-1), (java.lang.Object) jSDocInfo29);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression37 = jSDocInfo29.getTypedefType();
        java.lang.String str38 = jSDocInfo29.getLicense();
        node3.setJSDocInfo(jSDocInfo29);
        boolean boolean40 = node3.isFor();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING  0 [synthetic: 1]\n" + "'", str12, "STRING  0 [synthetic: 1]\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(inputId25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder27);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(jSTypeExpressionList33);
        org.junit.Assert.assertNotNull(jSTypeExpressionList34);
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNull(jSTypeExpression37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test09738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09738");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 49, (int) (byte) 100, 10);
        boolean boolean4 = node3.isString();
        boolean boolean5 = node3.isGetProp();
        boolean boolean6 = node3.isDec();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09739");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(409601, 409601, 44);
        boolean boolean4 = node3.isNull();
        node3.addSuppression("");
        boolean boolean7 = node3.isScript();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = node3.getJSDocInfo();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSDocInfo8);
    }

    @Test
    public void test09740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09740");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        java.util.Set<java.lang.String> strSet6 = node3.getDirectives();
        node3.setCharno((int) (short) -1);
        node3.setVarArgs(true);
        boolean boolean11 = node3.isLabel();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(38, 16773120, 0);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoFromForTree(node15);
        boolean boolean17 = node16.isLocalResultCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09741");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile27 = node3.getStaticSourceFile();
        node3.setVarArgs(true);
        boolean boolean30 = node3.hasChildren();
        boolean boolean31 = node3.isAssignAdd();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(staticSourceFile27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test09742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09742");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        boolean boolean12 = strSet3.remove((java.lang.Object) 1L);
        java.util.stream.Stream<java.lang.String> strStream13 = strSet3.parallelStream();
        java.lang.Object[] objArray14 = strSet3.toArray();
        boolean boolean15 = strSet3.isEmpty();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node36 = node34.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) -1, node34, (int) (byte) 1, (int) '#');
        boolean boolean40 = node29.hasChild(node39);
        int int41 = node29.getCharno();
        com.google.javascript.rhino.Node node42 = node19.useSourceInfoIfMissingFrom(node29);
        boolean boolean43 = node42.isLabelName();
        boolean boolean44 = strSet3.equals((java.lang.Object) node42);
        java.lang.String[] strArray47 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        boolean boolean55 = strSet48.addAll((java.util.Collection<java.lang.String>) strList53);
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str57 = jSDocInfo56.getVersion();
        java.lang.String str58 = jSDocInfo56.getFileOverview();
        boolean boolean59 = jSDocInfo56.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet60 = jSDocInfo56.getParameterNames();
        boolean boolean61 = strSet48.retainAll((java.util.Collection<java.lang.String>) strSet60);
        java.util.stream.Stream<java.lang.String> strStream62 = strSet60.parallelStream();
        int int63 = strSet60.size();
        boolean boolean64 = strSet3.retainAll((java.util.Collection<java.lang.String>) strSet60);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[STRING  0, hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[STRING  0, hi!, ]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strStream62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test09743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09743");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str12 = jSDocInfo11.getVersion();
        java.lang.String str13 = jSDocInfo11.getFileOverview();
        boolean boolean14 = jSDocInfo11.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet15 = jSDocInfo11.getParameterNames();
        boolean boolean16 = strSet3.retainAll((java.util.Collection<java.lang.String>) strSet15);
        com.google.javascript.rhino.JSDocInfo jSDocInfo17 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str18 = jSDocInfo17.getVersion();
        boolean boolean19 = jSDocInfo17.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet20 = jSDocInfo17.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str22 = jSDocInfo21.getVersion();
        java.lang.String str23 = jSDocInfo21.getFileOverview();
        boolean boolean24 = jSDocInfo21.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet25 = jSDocInfo21.getParameterNames();
        java.util.Iterator<java.lang.String> strItor26 = strSet25.iterator();
        boolean boolean27 = strSet25.isEmpty();
        boolean boolean28 = strSet20.containsAll((java.util.Collection<java.lang.String>) strSet25);
        boolean boolean29 = strSet3.containsAll((java.util.Collection<java.lang.String>) strSet25);
        int int30 = strSet3.size();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        boolean boolean41 = node35.isDo();
        boolean boolean42 = node35.isDefaultCase();
        node35.setQuotedString();
        boolean boolean44 = node35.isDec();
        boolean boolean45 = node35.isLabel();
        boolean boolean46 = node35.isSetterDef();
        boolean boolean47 = strSet3.remove((java.lang.Object) boolean46);
        boolean boolean49 = strSet3.add("OR 1 [length: 32]\n");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node64 = node62.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) -1, node62, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node74 = node72.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) -1, node72, (int) (byte) 1, (int) '#');
        boolean boolean78 = node67.hasChild(node77);
        int int79 = node67.getCharno();
        com.google.javascript.rhino.Node node80 = node57.useSourceInfoIfMissingFrom(node67);
        node80.setLength((int) ' ');
        node53.addChildrenToBack(node80);
        boolean boolean84 = node80.isNull();
        boolean boolean85 = node80.isAdd();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder86 = node80.new FileLevelJsDocBuilder();
        boolean boolean87 = strSet3.equals((java.lang.Object) node80);
        boolean boolean88 = node80.isAdd();
        int int89 = node80.getLineno();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
    }

    @Test
    public void test09744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09744");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        node8.setQuotedString();
        com.google.javascript.rhino.Node node16 = node3.srcrefTree(node8);
        boolean boolean17 = node16.isThrow();
        boolean boolean18 = node16.isQualifiedName();
        int int19 = node16.getChildCount();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test09745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09745");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.hasOneChild();
        java.lang.String str11 = node4.getQualifiedName();
        boolean boolean12 = node4.isGetElem();
        node4.setIsSyntheticBlock(false);
        boolean boolean15 = node4.isVarArgs();
        com.google.javascript.rhino.Node node17 = node4.getAncestor(208993);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test09746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09746");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node7 = node5.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1, node5, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node10.hasChild(node20);
        boolean boolean22 = node20.isVar();
        boolean boolean23 = node20.isTypeOf();
        boolean boolean24 = node20.isAssignAdd();
        com.google.javascript.rhino.Node node25 = node20.removeFirstChild();
        boolean boolean26 = node25.isSwitch();
        node25.putIntProp(52, 0);
        boolean boolean30 = node25.isStringKey();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        boolean boolean41 = node35.isScript();
        node35.setQuotedString();
        boolean boolean43 = node35.isAssignAdd();
        boolean boolean44 = node35.isTypeOf();
        com.google.javascript.rhino.Node node45 = node25.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "Unknown class name");
        java.lang.String str49 = node48.getString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 100, node35, node48, 0, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Unknown class name" + "'", str49, "Unknown class name");
    }

    @Test
    public void test09747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09747");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isScript();
        com.google.javascript.rhino.Node node24 = node17.detachFromParent();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node28.setCharno(1);
        java.util.Set<java.lang.String> strSet31 = node28.getDirectives();
        boolean boolean32 = node28.isHook();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node64 = node36.srcref(node63);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node12, node24, node28, node36);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node76 = node74.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) -1, node74, (int) (byte) 1, (int) '#');
        boolean boolean80 = node74.isScript();
        node74.setQuotedString();
        com.google.javascript.rhino.Node node82 = node69.srcrefTree(node74);
        boolean boolean83 = node74.isBreak();
        boolean boolean85 = node74.getBooleanProp(100);
        int int86 = node28.getIndexOfChild(node74);
        int int88 = node74.getIntProp((int) (short) 10);
        boolean boolean89 = node74.isFor();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable90 = node74.siblings();
        java.lang.String str91 = node74.toStringTree();
        // The following exception was thrown during execution in test generation
        try {
            node74.setDouble((double) 48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  0 [quoted: 1] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(nodeIterable90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "STRING  0 [quoted: 1]\n" + "'", str91, "STRING  0 [quoted: 1]\n");
    }

    @Test
    public void test09748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09748");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        int int4 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean5 = jSDocInfo0.hasModifies();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09749");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(35, "OR 1", (int) (short) 0, 45);
        com.google.javascript.rhino.InputId inputId5 = node4.getInputId();
        boolean boolean6 = node4.isReturn();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(inputId5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09750");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.setMutatesArguments();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test09751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09751");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int4 = node3.getType();
        boolean boolean5 = node3.isSyntheticBlock();
        node3.setQuotedString();
        boolean boolean7 = node3.isTypeOf();
        int int8 = node3.getCharno();
        int int9 = node3.getCharno();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test09752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09752");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        int int2 = node1.getChildCount();
        boolean boolean3 = node1.isNull();
        boolean boolean4 = node1.isAssign();
        java.lang.String str5 = node1.toStringTree();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean11 = node10.isThrow();
        java.lang.String str15 = node10.toString(true, false, true);
        java.lang.String str16 = node10.getQualifiedName();
        boolean boolean17 = node10.isIn();
        com.google.javascript.rhino.Node node18 = node10.cloneTree();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isScript();
        com.google.javascript.rhino.Node node30 = node23.detachFromParent();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node34.setCharno(1);
        java.util.Set<java.lang.String> strSet37 = node34.getDirectives();
        boolean boolean38 = node34.isHook();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node59 = node57.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) -1, node57, (int) (byte) 1, (int) '#');
        boolean boolean63 = node52.hasChild(node62);
        int int64 = node52.getCharno();
        com.google.javascript.rhino.Node node65 = node42.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node70 = node42.srcref(node69);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node(4095, node18, node30, node34, node42);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node78 = node76.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (byte) -1, node76, (int) (byte) 1, (int) '#');
        int int82 = node81.getType();
        boolean boolean83 = node34.isEquivalentTo(node81);
        int int84 = node34.getSideEffectFlags();
        com.google.javascript.rhino.InputId inputId85 = node34.getInputId();
        boolean boolean86 = node34.hasChildren();
        boolean boolean87 = node34.isIn();
        java.lang.String str91 = node34.toString(true, false, true);
        boolean boolean92 = node1.hasChild(node34);
        com.google.javascript.rhino.Node node93 = node34.getParent();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER -1.0\n" + "'", str5, "NUMBER -1.0\n");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING  0" + "'", str15, "STRING  0");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(node78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNull(inputId85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "STRING  0" + "'", str91, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
    }

    @Test
    public void test09753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09753");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        int int7 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node8 = node3.getLastChild();
        boolean boolean9 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean15 = node14.isThrow();
        java.lang.String str19 = node14.toString(true, false, true);
        java.lang.String str20 = node14.getQualifiedName();
        boolean boolean21 = node14.isIn();
        com.google.javascript.rhino.Node node22 = node14.cloneTree();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node29 = node27.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) -1, node27, (int) (byte) 1, (int) '#');
        boolean boolean33 = node27.isScript();
        com.google.javascript.rhino.Node node34 = node27.detachFromParent();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node38.setCharno(1);
        java.util.Set<java.lang.String> strSet41 = node38.getDirectives();
        boolean boolean42 = node38.isHook();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node63 = node61.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) -1, node61, (int) (byte) 1, (int) '#');
        boolean boolean67 = node56.hasChild(node66);
        int int68 = node56.getCharno();
        com.google.javascript.rhino.Node node69 = node46.useSourceInfoIfMissingFrom(node56);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node74 = node46.srcref(node73);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(4095, node22, node34, node38, node46);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node82 = node80.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (byte) -1, node80, (int) (byte) 1, (int) '#');
        int int86 = node85.getType();
        boolean boolean87 = node38.isEquivalentTo(node85);
        boolean boolean88 = node38.isUnscopedQualifiedName();
        node38.setVarArgs(false);
        boolean boolean91 = node38.isAssign();
        boolean boolean92 = node38.isLabelName();
        node38.addSuppression("unknown");
        int int95 = node38.getLineno();
        com.google.javascript.rhino.InputId inputId96 = node38.getInputId();
        java.lang.String str97 = node3.checkTreeEquals(node38);
        boolean boolean98 = node38.isStringKey();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "STRING  0" + "'", str19, "STRING  0");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(strSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 35 + "'", int68 == 35);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNull(inputId96);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test09754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09754");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (short) 100);
        boolean boolean2 = node1.isGetProp();
        boolean boolean3 = node1.isFalse();
        boolean boolean4 = node1.isAdd();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09755");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "((Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n))");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09756");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int5 = node4.getType();
        int int6 = node4.getCharno();
        boolean boolean7 = node4.isObjectLit();
        boolean boolean8 = node4.isNoSideEffectsCall();
        node4.setType(0);
        java.lang.String[] strArray13 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        boolean boolean21 = strSet14.addAll((java.util.Collection<java.lang.String>) strList19);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node33 = node31.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) -1, node31, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        boolean boolean47 = node36.hasChild(node46);
        int int48 = node36.getCharno();
        com.google.javascript.rhino.Node node49 = node26.useSourceInfoIfMissingFrom(node36);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node54 = node26.srcref(node53);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean59 = node58.isFromExterns();
        boolean boolean60 = node54.hasChild(node58);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(52, node58);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node65.setCharno(1);
        java.util.Set<java.lang.String> strSet68 = node65.getDirectives();
        node65.setCharno((int) (short) -1);
        boolean boolean71 = node65.isRegExp();
        node58.addChildrenToFront(node65);
        int int73 = node58.getSourcePosition();
        boolean boolean74 = node58.isEmpty();
        boolean boolean75 = node58.isBlock();
        boolean boolean76 = strSet14.equals((java.lang.Object) node58);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(1, node4, node58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: second new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 40 + "'", int5 == 40);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 35 + "'", int48 == 35);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(strSet68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 10 + "'", int73 == 10);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test09757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09757");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.InputId inputId11 = node4.getInputId();
        boolean boolean12 = node4.isDelProp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder13 = node4.getJsDocBuilderForNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str16 = jSDocInfo15.getVersion();
        boolean boolean17 = jSDocInfo15.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet18 = jSDocInfo15.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList19 = jSDocInfo15.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList20 = jSDocInfo15.getThrownTypes();
        java.util.Set<java.lang.String> strSet21 = jSDocInfo15.getParameterNames();
        node4.putProp((-1), (java.lang.Object) jSDocInfo15);
        int int23 = jSDocInfo15.getParameterCount();
        java.lang.String str24 = jSDocInfo15.getDeprecationReason();
        boolean boolean26 = jSDocInfo15.hasDescriptionForParameter("");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        boolean boolean31 = node30.isLabelName();
        com.google.javascript.rhino.Node node32 = node30.getLastChild();
        boolean boolean33 = node30.isWhile();
        node30.setSourceFileForTesting("(Not declared as a type name)");
        jSDocInfo15.setAssociatedNode(node30);
        boolean boolean37 = node30.isIf();
        boolean boolean38 = node30.wasEmptyNode();
        java.lang.String str42 = node30.toString(true, false, true);
        boolean boolean43 = node30.isGetterDef();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder13);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(jSTypeExpressionList19);
        org.junit.Assert.assertNotNull(jSTypeExpressionList20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "NUMBER 4095.0 100" + "'", str42, "NUMBER 4095.0 100");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test09758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09758");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node31 = node3.srcref(node30);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean36 = node35.isFromExterns();
        boolean boolean37 = node31.hasChild(node35);
        boolean boolean38 = node35.isOr();
        boolean boolean39 = node35.wasEmptyNode();
        com.google.javascript.rhino.Node node40 = node35.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = node40.isTypeOf();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(node40);
    }

    @Test
    public void test09759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09759");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isScript();
        com.google.javascript.rhino.Node node24 = node17.detachFromParent();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node28.setCharno(1);
        java.util.Set<java.lang.String> strSet31 = node28.getDirectives();
        boolean boolean32 = node28.isHook();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node64 = node36.srcref(node63);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node12, node24, node28, node36);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node76 = node74.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) -1, node74, (int) (byte) 1, (int) '#');
        boolean boolean80 = node74.isScript();
        node74.setQuotedString();
        com.google.javascript.rhino.Node node82 = node69.srcrefTree(node74);
        boolean boolean83 = node74.isBreak();
        boolean boolean85 = node74.getBooleanProp(100);
        int int86 = node28.getIndexOfChild(node74);
        int int88 = node74.getIntProp((int) (short) 10);
        node74.setOptionalArg(true);
        com.google.javascript.rhino.Node node91 = node74.cloneTree();
        boolean boolean92 = node74.isInc();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test09760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09760");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean6 = strSet3.add("STRING  0");
        java.lang.String[] strArray9 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        boolean boolean17 = strSet10.addAll((java.util.Collection<java.lang.String>) strList15);
        boolean boolean18 = strSet3.containsAll((java.util.Collection<java.lang.String>) strList15);
        java.lang.String[] strArray21 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        boolean boolean25 = strSet22.add("STRING  0");
        java.lang.String[] strArray28 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        boolean boolean36 = strSet29.addAll((java.util.Collection<java.lang.String>) strList34);
        boolean boolean37 = strSet22.containsAll((java.util.Collection<java.lang.String>) strList34);
        boolean boolean38 = strSet3.containsAll((java.util.Collection<java.lang.String>) strSet22);
        java.lang.String[] strArray41 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        boolean boolean45 = strSet42.add("STRING  0");
        java.lang.String[] strArray48 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        boolean boolean56 = strSet49.addAll((java.util.Collection<java.lang.String>) strList54);
        boolean boolean57 = strSet42.containsAll((java.util.Collection<java.lang.String>) strList54);
        java.lang.String[] strArray60 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        boolean boolean64 = strSet61.add("STRING  0");
        java.lang.String[] strArray67 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        java.lang.String[] strArray72 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        boolean boolean75 = strSet68.addAll((java.util.Collection<java.lang.String>) strList73);
        boolean boolean76 = strSet61.containsAll((java.util.Collection<java.lang.String>) strList73);
        boolean boolean77 = strSet42.containsAll((java.util.Collection<java.lang.String>) strSet61);
        java.util.Spliterator<java.lang.String> strSpliterator78 = strSet61.spliterator();
        boolean boolean79 = strSet22.containsAll((java.util.Collection<java.lang.String>) strSet61);
        int int80 = strSet61.size();
        int int81 = strSet61.size();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(strSpliterator78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
    }

    @Test
    public void test09761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09761");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        boolean boolean11 = node4.isTrue();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node18 = node16.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) -1, node16, (int) (byte) 1, (int) '#');
        boolean boolean22 = node16.isDo();
        boolean boolean23 = node16.isDefaultCase();
        node16.setQuotedString();
        boolean boolean25 = node16.isDec();
        boolean boolean26 = node16.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node16.siblings();
        boolean boolean28 = node16.isEmpty();
        com.google.javascript.rhino.Node node29 = node16.getParent();
        node16.putBooleanProp(37, false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str35 = jSDocInfo34.getVersion();
        boolean boolean36 = jSDocInfo34.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet37 = jSDocInfo34.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList38 = jSDocInfo34.getImplementedInterfaces();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean43 = node42.isThrow();
        java.lang.String str47 = node42.toString(true, false, true);
        jSDocInfo34.setAssociatedNode(node42);
        int int50 = node42.getIntProp((int) (byte) 10);
        node42.setSourceEncodedPositionForTree(15);
        node42.setLineno(1);
        boolean boolean55 = node42.isTry();
        node16.putProp(29, (java.lang.Object) node42);
        boolean boolean57 = node4.isEquivalentTo(node42);
        boolean boolean58 = node42.isNot();
        boolean boolean59 = node42.isVar();
        boolean boolean60 = node42.isRegExp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(jSTypeExpressionList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "STRING  0" + "'", str47, "STRING  0");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test09762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09762");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 46, 21, 0);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        boolean boolean25 = node23.isVar();
        boolean boolean26 = node23.isTypeOf();
        boolean boolean27 = node23.isAssignAdd();
        node23.setWasEmptyNode(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo30 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str31 = jSDocInfo30.getVersion();
        boolean boolean32 = jSDocInfo30.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet33 = jSDocInfo30.getParameterNames();
        jSDocInfo30.addSuppression("");
        int int36 = jSDocInfo30.getParameterCount();
        boolean boolean37 = jSDocInfo30.isNoTypeCheck();
        boolean boolean38 = jSDocInfo30.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList39 = jSDocInfo30.getExtendedInterfaces();
        boolean boolean40 = jSDocInfo30.isHidden();
        node23.setJSDocInfo(jSDocInfo30);
        boolean boolean42 = node23.isNoSideEffectsCall();
        boolean boolean43 = node23.hasChildren();
        com.google.javascript.rhino.Node[] nodeArray51 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray51);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(0, nodeArray51);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node(2, nodeArray51);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(49, nodeArray51, 38, 53);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(46, nodeArray51, 151562, 100);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(0, nodeArray51);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(97, nodeArray51, (int) (byte) -1, 50);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node71 = node69.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (byte) -1, node69, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node81 = node79.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (byte) -1, node79, (int) (byte) 1, (int) '#');
        boolean boolean85 = node74.hasChild(node84);
        boolean boolean86 = node84.isVar();
        boolean boolean87 = node84.isTypeOf();
        boolean boolean89 = node84.getBooleanProp((int) (byte) 10);
        boolean boolean90 = node84.isTrue();
        node84.setLineno(4);
        com.google.javascript.rhino.Node node93 = node64.useSourceInfoFromForTree(node84);
        boolean boolean94 = node93.isThrow();
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildrenAfter(node23, node93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(nodeArray51);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test09763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09763");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isTypeOf();
        boolean boolean23 = node19.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node19.removeFirstChild();
        boolean boolean25 = node24.isSwitch();
        boolean boolean26 = node24.hasMoreThanOneChild();
        int int28 = node24.getIntProp(49);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean33 = node32.isThrow();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean38 = node37.isThrow();
        java.lang.String str42 = node37.toString(true, false, true);
        java.lang.String str43 = node37.getQualifiedName();
        boolean boolean44 = node37.isIn();
        com.google.javascript.rhino.Node node45 = node37.cloneTree();
        boolean boolean46 = node45.isRegExp();
        boolean boolean47 = node45.isDebugger();
        node32.addChildToBack(node45);
        boolean boolean49 = node45.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node50 = node24.srcrefTree(node45);
        boolean boolean51 = node45.isAdd();
        int int52 = node45.getCharno();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "STRING  0" + "'", str42, "STRING  0");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
    }

    @Test
    public void test09764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09764");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str8 = jSDocInfo0.getBlockDescription();
        boolean boolean9 = jSDocInfo0.hasBaseType();
        boolean boolean10 = jSDocInfo0.hasEnumParameterType();
        boolean boolean12 = jSDocInfo0.hasParameterType("((()))");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList13 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList13);
    }

    @Test
    public void test09765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09765");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(54);
    }

    @Test
    public void test09766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09766");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        boolean boolean10 = jSDocInfo0.isConstructor();
        boolean boolean11 = jSDocInfo0.isJavaDispatch();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection12 = jSDocInfo0.getMarkers();
        com.google.javascript.rhino.Node node13 = jSDocInfo0.getAssociatedNode();
        java.lang.String str14 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(markerCollection12);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test09767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09767");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("(Not declared as a type name)");
        com.google.javascript.rhino.Node node3 = node2.cloneTree();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double8 = node7.getDouble();
        boolean boolean9 = node7.isAdd();
        com.google.javascript.rhino.Node node10 = node7.cloneNode();
        com.google.javascript.rhino.jstype.JSType jSType11 = node10.getJSType();
        java.lang.String str12 = node10.toStringTree();
        com.google.javascript.rhino.Node node13 = node10.getLastSibling();
        boolean boolean14 = node13.isNE();
        boolean boolean15 = node13.isExprResult();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) ' ', node2, node13);
        int int17 = node13.getChildCount();
        boolean boolean18 = node13.isLabel();
        boolean boolean19 = node13.isNot();
        node13.removeProp(10);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 4095.0d + "'", double8 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(jSType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 4095.0 100\n" + "'", str12, "NUMBER 4095.0 100\n");
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test09768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09768");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getPositionOnEndLine();
        int int3 = namePosition0.getEndLine();
        int int4 = namePosition0.getEndLine();
        namePosition0.setPositionInformation(29, 12, 4095, 1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test09769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09769");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        com.google.javascript.rhino.Node node16 = node4.detachFromParent();
        boolean boolean17 = node4.isAssignAdd();
        boolean boolean18 = node4.isNull();
        boolean boolean19 = node4.isGetElem();
        node4.setSourceEncodedPosition(43);
        boolean boolean22 = node4.isComma();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09770");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = booleanLiteralSet1.intersection(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = booleanLiteralSet0.intersection(booleanLiteralSet1);
        boolean boolean6 = booleanLiteralSet4.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = booleanLiteralSet7.intersection(booleanLiteralSet8);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = booleanLiteralSet4.intersection(booleanLiteralSet8);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = booleanLiteralSet10.intersection(booleanLiteralSet12);
        boolean boolean15 = booleanLiteralSet13.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet16 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet17 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = booleanLiteralSet16.intersection(booleanLiteralSet17);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet20 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = booleanLiteralSet20.intersection(booleanLiteralSet21);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = booleanLiteralSet19.intersection(booleanLiteralSet20);
        boolean boolean25 = booleanLiteralSet23.contains(false);
        boolean boolean27 = booleanLiteralSet23.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = booleanLiteralSet17.intersection(booleanLiteralSet23);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = booleanLiteralSet13.union(booleanLiteralSet28);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = booleanLiteralSet31.intersection(booleanLiteralSet32);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet34 = booleanLiteralSet30.intersection(booleanLiteralSet31);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet35 = com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = booleanLiteralSet34.union(booleanLiteralSet35);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = booleanLiteralSet28.union(booleanLiteralSet34);
        boolean boolean39 = booleanLiteralSet34.contains(true);
        boolean boolean41 = booleanLiteralSet34.contains(true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.EMPTY));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet16 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet16.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet17 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet17.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet20 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet20.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet34 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet34.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet35 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet35.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test09771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09771");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        com.google.javascript.rhino.Node node15 = node8.detachFromParent();
        node15.setOptionalArg(false);
        boolean boolean19 = node15.getBooleanProp(31);
        com.google.javascript.rhino.Node node20 = node3.copyInformationFrom(node15);
        int int21 = node15.getLineno();
        boolean boolean22 = node15.wasEmptyNode();
        boolean boolean23 = node15.isTypeOf();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        int int49 = node37.getCharno();
        com.google.javascript.rhino.Node node50 = node27.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node55 = node27.srcref(node54);
        boolean boolean56 = node55.isAssignAdd();
        com.google.javascript.rhino.Node node57 = node15.clonePropsFrom(node55);
        boolean boolean58 = node15.isObjectLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09772");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getAuthors();
        java.lang.String str12 = jSDocInfo0.getBlockDescription();
        boolean boolean13 = jSDocInfo0.shouldPreserveTry();
        boolean boolean15 = jSDocInfo0.hasDescriptionForParameter("NUMBER 4095.0 100\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo0.getTypedefType();
        jSDocInfo0.setLicense("(Node tree inequality:\nTree1:\nOR 1\n\n\nTree2:\nNEG 0\n\n\nSubtree1: OR 1\n\n\nSubtree2: NEG 0\n)");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSTypeExpression16);
    }

    @Test
    public void test09773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09773");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str8 = jSDocInfo7.getVersion();
        boolean boolean9 = jSDocInfo7.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo7.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo7.setVisibility(visibility11);
        jSDocInfo0.setVisibility(visibility11);
        boolean boolean14 = jSDocInfo0.isImplicitCast();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList15 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList15);
    }

    @Test
    public void test09774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09774");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        java.util.Set<java.lang.String> strSet6 = node3.getDirectives();
        node3.setCharno((int) (short) -1);
        node3.setVarArgs(true);
        boolean boolean11 = node3.isAdd();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node3.siblings();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(nodeIterable12);
    }

    @Test
    public void test09775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09775");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "ERROR OR 1 [length: 32]\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09776");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getPositionOnEndLine();
        int int8 = stringPosition0.getStartLine();
        int int9 = stringPosition0.getStartLine();
        stringPosition0.setItem("Not declared as a constructor");
        stringPosition0.setPositionInformation((int) (byte) 10, 4095, 45, 45);
        stringPosition0.setPositionInformation(0, 53, 5, 31);
        java.lang.String str22 = stringPosition0.getItem();
        java.lang.String str23 = stringPosition0.getItem();
        int int24 = stringPosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Not declared as a constructor" + "'", str22, "Not declared as a constructor");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Not declared as a constructor" + "'", str23, "Not declared as a constructor");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test09777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09777");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = jSDocInfo0.getVisibility();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean12 = jSDocInfo0.isExport();
        java.lang.String str13 = jSDocInfo0.getVersion();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(visibility10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test09778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09778");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 49, (int) (byte) 10, 47);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags5 = new com.google.javascript.rhino.Node.SideEffectFlags(151562);
        sideEffectFlags5.clearAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(sideEffectFlags5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09779");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str13 = jSDocInfo0.getDescriptionForParameter("STRING  0 [quoted: 1]\n");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test09780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09780");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = jSDocInfo0.getTypeNodes();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        boolean boolean9 = jSDocInfo0.isNoAlias();
        boolean boolean10 = jSDocInfo0.isDefine();
        int int11 = jSDocInfo0.getExtendedInterfacesCount();
        java.lang.String str13 = jSDocInfo0.getDescriptionForParameter("STRING ");
        boolean boolean14 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09781");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        boolean boolean3 = typePosition0.hasBrackets();
        typePosition0.setPositionInformation(2, 97, (int) '#', 49);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test09782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09782");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray6);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(29, nodeArray6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray6);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(0, nodeArray6, (int) (byte) 100, 30);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(35, nodeArray6);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(39, nodeArray6);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isVarArgs();
        boolean boolean21 = node18.isSetterDef();
        boolean boolean22 = node18.isFromExterns();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int27 = node26.getType();
        com.google.javascript.rhino.Node node28 = node26.cloneNode();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean33 = node32.isThrow();
        java.lang.String str37 = node32.toString(true, false, true);
        int int39 = node32.getIntProp(51);
        node32.addSuppression("STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node42 = node28.useSourceInfoFrom(node32);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node46.setCharno(1);
        java.util.Set<java.lang.String> strSet49 = node46.getDirectives();
        node46.setCharno((int) (short) -1);
        boolean boolean52 = node46.isRegExp();
        boolean boolean53 = node46.isDefaultCase();
        com.google.javascript.rhino.Node node54 = node46.removeChildren();
        boolean boolean55 = node28.isEquivalentTo(node46);
        com.google.javascript.rhino.Node node56 = node18.useSourceInfoIfMissingFromForTree(node28);
        node14.addChildToFront(node56);
        com.google.javascript.rhino.Node node58 = node56.getParent();
        node56.setType(100);
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 40 + "'", int27 == 40);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "STRING  0" + "'", str37, "STRING  0");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test09783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09783");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        boolean boolean8 = jSDocInfo0.isNoTypeCheck();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        boolean boolean10 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09784");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        boolean boolean3 = typePosition0.hasBrackets();
        int int4 = typePosition0.getPositionOnEndLine();
        int int5 = typePosition0.getStartLine();
        int int6 = typePosition0.getPositionOnStartLine();
        // The following exception was thrown during execution in test generation
        try {
            typePosition0.setPositionInformation(131104, 46, 50, 47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 131104?end-line: 50");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test09785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09785");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        boolean boolean7 = jSDocInfo0.hasParameterType("JSDocInfo");
        java.lang.String str8 = jSDocInfo0.getMeaning();
        boolean boolean9 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean10 = jSDocInfo0.isExterns();
        boolean boolean11 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
    }

    @Test
    public void test09786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09786");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean4 = ternaryValue2.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean8 = ternaryValue6.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue9.or(ternaryValue10);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue6.xor(ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue2.xor(ternaryValue6);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue0.and(ternaryValue6);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean18 = ternaryValue16.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean22 = ternaryValue20.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue23.or(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = ternaryValue20.xor(ternaryValue25);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = ternaryValue16.xor(ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue29.or(ternaryValue31);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue34.or(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue36.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue32.and(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue20.and(ternaryValue39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = ternaryValue0.xor(ternaryValue20);
        boolean boolean43 = ternaryValue0.toBoolean(false);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test09787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09787");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        jSDocInfo0.setAssociatedNode(node8);
        boolean boolean15 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.Node node16 = jSDocInfo0.getAssociatedNode();
        java.lang.String str17 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(str17);
    }

    @Test
    public void test09788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09788");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean27 = node11.isInc();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile28 = null;
        node11.setStaticSourceFile(staticSourceFile28);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable30 = node11.getAncestors();
        boolean boolean31 = node11.isVarArgs();
        boolean boolean32 = node11.isNot();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(ancestorIterable30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test09789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09789");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        boolean boolean27 = node26.isArrayLit();
        node26.setLineno(4131);
        node26.setCharno((int) '4');
        boolean boolean32 = node26.isNew();
        boolean boolean33 = node26.isCatch();
        java.lang.Object obj35 = node26.getProp(23);
        com.google.javascript.rhino.Node node36 = node26.cloneTree();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("OR 1\n", (int) ' ', 43);
        boolean boolean41 = node40.isLocalResultCall();
        boolean boolean42 = node26.isEquivalentTo(node40);
        com.google.javascript.rhino.Node node43 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = node40.isEquivalentToTyped(node43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test09790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09790");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescriptionForParameter("STRING  0\n");
        int int5 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean6 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.Node node7 = jSDocInfo0.getAssociatedNode();
        int int8 = jSDocInfo0.getParameterCount();
        java.lang.String str10 = jSDocInfo0.getDescriptionForParameter("(ERROR 1)");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test09791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09791");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        boolean boolean12 = strSet3.remove((java.lang.Object) 1L);
        java.lang.String[] strArray15 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        boolean boolean19 = strSet16.add("STRING  0");
        java.lang.String[] strArray22 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        boolean boolean30 = strSet23.addAll((java.util.Collection<java.lang.String>) strList28);
        boolean boolean31 = strSet16.containsAll((java.util.Collection<java.lang.String>) strList28);
        boolean boolean32 = strSet3.addAll((java.util.Collection<java.lang.String>) strSet16);
        java.util.stream.Stream<java.lang.String> strStream33 = strSet16.stream();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags35 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int36 = sideEffectFlags35.valueOf();
        int int37 = sideEffectFlags35.valueOf();
        sideEffectFlags35.setMutatesArguments();
        sideEffectFlags35.clearSideEffectFlags();
        sideEffectFlags35.setMutatesArguments();
        sideEffectFlags35.setAllFlags();
        sideEffectFlags35.setReturnsTainted();
        sideEffectFlags35.clearSideEffectFlags();
        sideEffectFlags35.setMutatesGlobalState();
        sideEffectFlags35.setThrows();
        boolean boolean46 = strSet16.equals((java.lang.Object) sideEffectFlags35);
        sideEffectFlags35.clearSideEffectFlags();
        sideEffectFlags35.setReturnsTainted();
        boolean boolean49 = sideEffectFlags35.areAllFlagsSet();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 39 + "'", int36 == 39);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 39 + "'", int37 == 39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test09792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09792");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double4 = node3.getDouble();
        int int5 = node3.getSourcePosition();
        boolean boolean6 = node3.isExprResult();
        node3.setSourceFileForTesting("ERROR 1\n    STRING  0\n    STRING  0\n");
        int int9 = node3.getSourcePosition();
        boolean boolean10 = node3.isVarArgs();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = node3.getExistingIntProp(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 100");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4095.0d + "'", double4 == 4095.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 409601 + "'", int5 == 409601);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 409601 + "'", int9 == 409601);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09793");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        boolean boolean28 = node25.isRegExp();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node33.isDo();
        boolean boolean40 = node33.isDefaultCase();
        node33.setQuotedString();
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoFromForTree(node33);
        boolean boolean43 = node42.isVarArgs();
        com.google.javascript.rhino.Node node44 = node19.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node node45 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node46 = node42.srcrefTree(node45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
    }

    @Test
    public void test09794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09794");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("NUMBER 35.0");
        boolean boolean2 = node1.isEmpty();
        int int3 = node1.getSourceOffset();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test09795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09795");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("OR 0", 2, 53);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        java.lang.String str14 = node8.getQualifiedName();
        boolean boolean15 = node8.isIn();
        com.google.javascript.rhino.Node node16 = node8.cloneTree();
        boolean boolean17 = node16.isUnscopedQualifiedName();
        boolean boolean18 = node16.isGetElem();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        boolean boolean23 = node22.isAnd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str25 = jSDocInfo24.getVersion();
        java.lang.String str26 = jSDocInfo24.getFileOverview();
        jSDocInfo24.addSuppression("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList29 = jSDocInfo24.getExtendedInterfaces();
        boolean boolean30 = jSDocInfo24.isConstructor();
        node22.setJSDocInfo(jSDocInfo24);
        boolean boolean32 = node22.isIn();
        int int33 = node22.getLineno();
        com.google.javascript.rhino.Node node34 = node16.clonePropsFrom(node22);
        boolean boolean35 = node22.isLocalResultCall();
        boolean boolean36 = node22.isParamList();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(1, node22);
        com.google.javascript.rhino.Node node38 = node3.useSourceInfoFrom(node37);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(jSTypeExpressionList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
    }

    @Test
    public void test09796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09796");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str12 = jSDocInfo11.getVersion();
        java.lang.String str13 = jSDocInfo11.getFileOverview();
        boolean boolean14 = jSDocInfo11.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet15 = jSDocInfo11.getParameterNames();
        boolean boolean16 = strSet3.retainAll((java.util.Collection<java.lang.String>) strSet15);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition17 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition19 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray21 = new com.google.javascript.rhino.JSDocInfo.StringPosition[] { stringPosition17, stringPosition18, stringPosition19, stringPosition20 };
        com.google.javascript.rhino.JSDocInfo.StringPosition[] stringPositionArray22 = strSet3.toArray(stringPositionArray21);
        java.lang.Object obj23 = null;
        boolean boolean24 = strSet3.remove(obj23);
        boolean boolean25 = strSet3.isEmpty();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition26 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int27 = namePosition26.getEndLine();
        int int28 = namePosition26.getPositionOnEndLine();
        com.google.javascript.rhino.Node node29 = null;
        namePosition26.setItem(node29);
        int int31 = namePosition26.getPositionOnStartLine();
        int int32 = namePosition26.getPositionOnStartLine();
        int int33 = namePosition26.getPositionOnEndLine();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        boolean boolean38 = node37.isDefaultCase();
        namePosition26.setItem(node37);
        boolean boolean40 = strSet3.remove((java.lang.Object) namePosition26);
        int int41 = strSet3.size();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(stringPositionArray21);
        org.junit.Assert.assertNotNull(stringPositionArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test09797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09797");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        int int7 = jSDocInfo0.getParameterCount();
        boolean boolean9 = jSDocInfo0.hasParameterType("STRING  0 [source_file: Named type with empty name component]");
        boolean boolean10 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09798");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.lang.String str6 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        boolean boolean8 = jSDocInfo0.isInterface();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nOR 0\n\n\nTree2:\nNUMBER 4095.0 100\n\n\nSubtree1: OR 0\n\n\nSubtree2: NUMBER 4095.0 100\n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getTypedefType();
        java.lang.String str12 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(visibility7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test09799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09799");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        node12.putIntProp((int) (byte) 100, (int) (byte) 0);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        boolean boolean35 = node29.isScript();
        com.google.javascript.rhino.InputId inputId36 = node29.getInputId();
        com.google.javascript.rhino.Node node37 = node12.useSourceInfoFrom(node29);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean42 = node41.isThrow();
        java.lang.String str46 = node41.toString(true, false, true);
        node41.setIsSyntheticBlock(true);
        boolean boolean49 = node41.isTry();
        boolean boolean50 = node12.hasChild(node41);
        boolean boolean51 = node41.isStringKey();
        node41.setType(36);
        boolean boolean54 = node41.isThis();
        com.google.javascript.rhino.Node node55 = node41.cloneTree();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(38, node41, 49, 16773120);
        node58.addSuppression("((()))");
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(inputId36);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "STRING  0" + "'", str46, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
    }

    @Test
    public void test09800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09800");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        boolean boolean6 = jSDocInfo0.isJavaDispatch();
        boolean boolean7 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean11 = jSDocInfo0.hasDescriptionForParameter("STRING  0 [synthetic: 1]\n");
        boolean boolean13 = jSDocInfo0.hasParameter("STRING  0 [synthetic: 1]\n");
        java.lang.String str14 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str16 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        java.lang.String str17 = jSDocInfo0.getLicense();
        boolean boolean18 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09801");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("IN\n", 5, 32);
        boolean boolean4 = node3.isSwitch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09802");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = booleanLiteralSet2.intersection(booleanLiteralSet3);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = booleanLiteralSet1.intersection(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = booleanLiteralSet0.union(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = booleanLiteralSet2.union(booleanLiteralSet7);
        boolean boolean10 = booleanLiteralSet7.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet13 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = booleanLiteralSet12.intersection(booleanLiteralSet13);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet15 = booleanLiteralSet11.intersection(booleanLiteralSet12);
        boolean boolean17 = booleanLiteralSet15.contains(false);
        boolean boolean19 = booleanLiteralSet15.contains(true);
        boolean boolean21 = booleanLiteralSet15.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet22 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet23 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet24 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = booleanLiteralSet23.intersection(booleanLiteralSet24);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet22.intersection(booleanLiteralSet23);
        boolean boolean28 = booleanLiteralSet26.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet29 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet30 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet31 = booleanLiteralSet29.intersection(booleanLiteralSet30);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = booleanLiteralSet26.intersection(booleanLiteralSet30);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet33 = booleanLiteralSet15.union(booleanLiteralSet30);
        boolean boolean35 = booleanLiteralSet15.contains(true);
        boolean boolean37 = booleanLiteralSet15.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = booleanLiteralSet7.intersection(booleanLiteralSet15);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet39 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet40 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet42 = booleanLiteralSet40.intersection(booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = booleanLiteralSet39.intersection(booleanLiteralSet40);
        boolean boolean45 = booleanLiteralSet43.contains(false);
        boolean boolean47 = booleanLiteralSet43.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet48 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet49 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet50 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet51 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet52 = booleanLiteralSet50.intersection(booleanLiteralSet51);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet53 = booleanLiteralSet49.intersection(booleanLiteralSet50);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet54 = booleanLiteralSet48.union(booleanLiteralSet50);
        boolean boolean56 = booleanLiteralSet48.contains(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet57 = booleanLiteralSet43.union(booleanLiteralSet48);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet58 = booleanLiteralSet7.intersection(booleanLiteralSet43);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet13 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet13.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet15 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet15.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet22 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet22.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet23 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet23.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet24 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet24.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet29 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet29.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet30 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet30.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet31 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet31.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet33 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet33.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet39 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet39.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet40 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet40.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet42 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet42.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet48 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet48.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet49 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet49.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet50 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet50.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet51 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet51.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet52 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet52.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet53 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet53.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet54 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet54.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet57 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet57.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet58 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet58.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
    }

    @Test
    public void test09803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09803");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.Node node11 = node4.detachFromParent();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean16 = node15.isThrow();
        java.lang.String str20 = node15.toString(true, false, true);
        boolean boolean21 = node15.isGetterDef();
        boolean boolean22 = node11.isEquivalentToTyped(node15);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = null;
        node15.setStaticSourceFile(staticSourceFile23);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean29 = node28.isThrow();
        boolean boolean30 = node28.isSyntheticBlock();
        boolean boolean31 = node15.hasChild(node28);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile32 = node28.getStaticSourceFile();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "STRING  0" + "'", str20, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(staticSourceFile32);
    }

    @Test
    public void test09804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09804");
        com.google.javascript.rhino.Node[] nodeArray7 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray7);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(29, nodeArray7);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(30, nodeArray7);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(29, nodeArray7);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, nodeArray7, 409601, (int) (short) 1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) '#', nodeArray7);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 0, nodeArray7, 48, 409601);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition20 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int21 = typePosition20.getPositionOnEndLine();
        boolean boolean22 = typePosition20.hasBrackets();
        int int23 = typePosition20.getEndLine();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node48 = node46.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) -1, node46, (int) (byte) 1, (int) '#');
        boolean boolean52 = node41.hasChild(node51);
        int int53 = node41.getCharno();
        com.google.javascript.rhino.Node node54 = node31.useSourceInfoIfMissingFrom(node41);
        node54.setLength((int) ' ');
        node27.addChildrenToBack(node54);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable58 = node27.children();
        boolean boolean59 = node27.isHook();
        int int60 = node27.getSideEffectFlags();
        typePosition20.setItem(node27);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        int int66 = node65.getSourcePosition();
        int int67 = node65.getType();
        boolean boolean68 = node65.isLabel();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) ' ', node27, node65);
        boolean boolean70 = node27.isExprResult();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node74.setCharno(1);
        boolean boolean77 = node74.isRegExp();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node84 = node82.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) -1, node82, (int) (byte) 1, (int) '#');
        boolean boolean88 = node82.isDo();
        boolean boolean89 = node82.isDefaultCase();
        node82.setQuotedString();
        com.google.javascript.rhino.Node node91 = node74.useSourceInfoFromForTree(node82);
        boolean boolean92 = node74.isInc();
        java.lang.String str96 = node74.toString(true, false, true);
        // The following exception was thrown during execution in test generation
        try {
            node18.replaceChildAfter(node27, node74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray7);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(nodeIterable58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 40 + "'", int67 == 40);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "STRING  0" + "'", str96, "STRING  0");
    }

    @Test
    public void test09805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09805");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        boolean boolean19 = node15.isHook();
        node11.addChildToFront(node15);
        com.google.javascript.rhino.Node node21 = node15.getLastSibling();
        java.lang.Object obj23 = node21.getProp(2);
        com.google.javascript.rhino.Node node24 = node21.detachFromParent();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int29 = node28.getType();
        boolean boolean30 = node28.isArrayLit();
        node28.setWasEmptyNode(false);
        boolean boolean33 = node28.isNot();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        boolean boolean44 = node38.isDo();
        boolean boolean45 = node38.isDefaultCase();
        node38.setQuotedString();
        boolean boolean47 = node38.isDec();
        boolean boolean48 = node38.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable49 = node38.siblings();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(51);
        java.lang.String str52 = node38.checkTreeEquals(node51);
        boolean boolean53 = node38.isObjectLit();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(6);
        com.google.javascript.rhino.Node node56 = node38.copyInformationFrom(node55);
        boolean boolean57 = node38.isGetterDef();
        java.lang.String str58 = node28.checkTreeEquals(node38);
        node28.setSourceFileForTesting("STRING  0 [source_file: Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n]");
        com.google.javascript.rhino.Node node61 = node24.copyInformationFromForTree(node28);
        com.google.javascript.rhino.Node node62 = node61.removeFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 40 + "'", int29 == 40);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeIterable49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str52, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node62);
    }

    @Test
    public void test09806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09806");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        boolean boolean51 = node14.isAssignAdd();
        com.google.javascript.rhino.Node node52 = node14.removeFirstChild();
        node52.setVarArgs(true);
        boolean boolean55 = node52.hasChildren();
        boolean boolean56 = node52.isQualifiedName();
        node52.removeProp(36);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test09807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09807");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        boolean boolean6 = jSDocInfo0.isJavaDispatch();
        boolean boolean7 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        java.lang.String str9 = jSDocInfo0.getVersion();
        java.lang.String str10 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test09808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09808");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isNoCompile();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean11 = node10.isThrow();
        java.lang.String str15 = node10.toString(true, false, true);
        java.lang.String str16 = node10.getQualifiedName();
        boolean boolean17 = node10.isIn();
        com.google.javascript.rhino.Node node18 = node10.cloneTree();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node22.setCharno(1);
        java.util.Set<java.lang.String> strSet25 = node22.getDirectives();
        boolean boolean26 = node22.isHook();
        node18.addChildToFront(node22);
        boolean boolean28 = node18.isNE();
        boolean boolean29 = node18.isStringKey();
        jSDocInfo0.setAssociatedNode(node18);
        java.lang.String str32 = jSDocInfo0.getDescriptionForParameter("BITXOR ");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING  0" + "'", str15, "STRING  0");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNull(jSTypeExpression33);
    }

    @Test
    public void test09809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09809");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        boolean boolean5 = jSDocInfo0.isConstant();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getAuthors();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("STRING  0 [quoted: 1]");
        boolean boolean9 = jSDocInfo0.hasType();
        boolean boolean10 = jSDocInfo0.isDeprecated();
        boolean boolean11 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(strCollection6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09810");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(8, 36, 31, (int) (short) 10);
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getStartLine();
        java.lang.String str8 = stringPosition0.getItem();
        int int9 = stringPosition0.getPositionOnEndLine();
        java.lang.String str10 = stringPosition0.getItem();
        int int11 = stringPosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
    }

    @Test
    public void test09811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09811");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node9.isCase();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean15 = node14.isThrow();
        java.lang.String str19 = node14.toString(true, false, true);
        boolean boolean20 = node14.isOptionalArg();
        com.google.javascript.rhino.Node node21 = node9.srcrefTree(node14);
        boolean boolean22 = node14.isLabel();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "STRING  0" + "'", str19, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09812");
        com.google.javascript.rhino.Node[] nodeArray6 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray6);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(0, nodeArray6);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(2, nodeArray6);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(43, nodeArray6);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node(9, nodeArray6, 48, 21);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray6);
        boolean boolean15 = node14.isAdd();
        org.junit.Assert.assertNotNull(nodeArray6);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09813");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 30);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int3 = typePosition2.getPositionOnEndLine();
        com.google.javascript.rhino.Node node4 = typePosition2.getItem();
        boolean boolean5 = typePosition2.hasBrackets();
        int int6 = typePosition2.getEndLine();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int11 = node10.getType();
        boolean boolean12 = node10.isArrayLit();
        node10.addSuppression("true");
        boolean boolean15 = node10.isReturn();
        typePosition2.setItem(node10);
        int int17 = typePosition2.getEndLine();
        typePosition2.setPositionInformation(16, 100, (int) '4', 39);
        com.google.javascript.rhino.Node node23 = typePosition2.getItem();
        com.google.javascript.rhino.Node node24 = node1.copyInformationFromForTree(node23);
        boolean boolean25 = node1.isCase();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 40 + "'", int11 == 40);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09814");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) ' ', (int) (byte) 0, 16);
        boolean boolean4 = node3.isGetterDef();
        boolean boolean5 = node3.isCall();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node27 = node25.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node25, (int) (byte) 1, (int) '#');
        boolean boolean31 = node20.hasChild(node30);
        int int32 = node20.getCharno();
        com.google.javascript.rhino.Node node33 = node10.useSourceInfoIfMissingFrom(node20);
        boolean boolean34 = node20.isAssignAdd();
        boolean boolean35 = node20.isUnscopedQualifiedName();
        int int36 = node20.getLineno();
        node20.addSuppression("STRING ");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 32);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 100, node20, node40);
        node3.addChildToBack(node41);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable43 = node41.getAncestors();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double48 = node47.getDouble();
        boolean boolean49 = node47.isAdd();
        boolean boolean50 = node47.isDelProp();
        boolean boolean51 = node47.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = node47.getJSType();
        com.google.javascript.rhino.Node node53 = node47.getFirstChild();
        boolean boolean54 = node47.hasChildren();
        com.google.javascript.rhino.Node node55 = null;
        // The following exception was thrown during execution in test generation
        try {
            node41.replaceChildAfter(node47, node55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(ancestorIterable43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 4095.0d + "'", double48 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test09815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09815");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.hasTypedefType();
        boolean boolean7 = jSDocInfo0.isConstant();
        boolean boolean8 = jSDocInfo0.isInterface();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09816");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node9 = node7.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1, node7, (int) (byte) 1, (int) '#');
        boolean boolean13 = node7.isDo();
        boolean boolean14 = node7.isDefaultCase();
        node7.setQuotedString();
        boolean boolean16 = node7.isDec();
        boolean boolean17 = node7.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable18 = node7.siblings();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node(51);
        java.lang.String str21 = node7.checkTreeEquals(node20);
        boolean boolean22 = node7.isCatch();
        com.google.javascript.rhino.InputId inputId23 = null;
        node7.setInputId(inputId23);
        typePosition0.setItem(node7);
        int int26 = typePosition0.getEndLine();
        int int27 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node28 = typePosition0.getItem();
        com.google.javascript.rhino.Node node29 = node28.cloneTree();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node50 = node48.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) -1, node48, (int) (byte) 1, (int) '#');
        boolean boolean54 = node43.hasChild(node53);
        int int55 = node43.getCharno();
        com.google.javascript.rhino.Node node56 = node33.useSourceInfoIfMissingFrom(node43);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node61 = node33.srcref(node60);
        boolean boolean62 = node61.isDefaultCase();
        boolean boolean63 = node61.isCall();
        boolean boolean64 = node61.isThrow();
        com.google.javascript.rhino.Node node65 = node29.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node66 = node29.cloneTree();
        boolean boolean67 = node29.isComma();
        node29.setLineno(45);
        node29.putBooleanProp(13, false);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(nodeIterable18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str21, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 35 + "'", int55 == 35);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09817");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "(STRING  0 [directives: [STRING  0, hi!, ]])", (int) (byte) 10, (int) '#');
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test09818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09818");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isScript();
        com.google.javascript.rhino.Node node24 = node17.detachFromParent();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node28.setCharno(1);
        java.util.Set<java.lang.String> strSet31 = node28.getDirectives();
        boolean boolean32 = node28.isHook();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node64 = node36.srcref(node63);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node12, node24, node28, node36);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node72 = node70.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) -1, node70, (int) (byte) 1, (int) '#');
        int int76 = node75.getType();
        boolean boolean77 = node28.isEquivalentTo(node75);
        boolean boolean78 = node75.isDo();
        boolean boolean79 = node75.wasEmptyNode();
        boolean boolean80 = node75.isDebugger();
        int int81 = node75.getLineno();
        boolean boolean82 = node75.isFor();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test09819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09819");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double4 = node3.getDouble();
        boolean boolean5 = node3.isAdd();
        com.google.javascript.rhino.Node node6 = node3.cloneNode();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node10.setCharno(1);
        java.util.Set<java.lang.String> strSet13 = node10.getDirectives();
        node10.setLength(0);
        com.google.javascript.rhino.Node node16 = node3.useSourceInfoIfMissingFrom(node10);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        boolean boolean42 = node31.hasChild(node41);
        int int43 = node31.getCharno();
        com.google.javascript.rhino.Node node44 = node21.useSourceInfoIfMissingFrom(node31);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node54.hasChild(node64);
        boolean boolean66 = node64.isVar();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((-1), node31, node64);
        com.google.javascript.rhino.Node node68 = node64.getLastChild();
        com.google.javascript.rhino.Node node69 = node16.useSourceInfoIfMissingFrom(node64);
        node16.setSourceFileForTesting("(ERROR 1)");
        node16.putIntProp(192612, 13);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4095.0d + "'", double4 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test09820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09820");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = booleanLiteralSet2.intersection(booleanLiteralSet3);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = booleanLiteralSet1.intersection(booleanLiteralSet2);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = booleanLiteralSet0.union(booleanLiteralSet2);
        boolean boolean8 = booleanLiteralSet0.contains(true);
        java.lang.Class<?> wildcardClass9 = booleanLiteralSet0.getClass();
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test09821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09821");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        com.google.javascript.rhino.Node node16 = node4.detachFromParent();
        node4.removeProp((int) '4');
        boolean boolean19 = node4.isThrow();
        boolean boolean20 = node4.isAdd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09822");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<java.lang.String> strCollection1 = jSDocInfo0.getAuthors();
        com.google.javascript.rhino.JSDocInfo jSDocInfo2 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str3 = jSDocInfo2.getVersion();
        boolean boolean4 = jSDocInfo2.hasEnumParameterType();
        boolean boolean5 = jSDocInfo2.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo2.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo2.setVisibility(visibility7);
        jSDocInfo0.setVisibility(visibility7);
        java.lang.String str10 = jSDocInfo0.getVersion();
        java.lang.String str11 = jSDocInfo0.getBlockDescription();
        boolean boolean12 = jSDocInfo0.isDefine();
        org.junit.Assert.assertNull(strCollection1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + visibility7 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility7.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09823");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        boolean boolean51 = node40.hasChild(node50);
        int int52 = node40.getCharno();
        com.google.javascript.rhino.Node node53 = node30.useSourceInfoIfMissingFrom(node40);
        int int54 = node30.getSourcePosition();
        java.lang.String str55 = node30.toString();
        com.google.javascript.rhino.Node node56 = node3.srcref(node30);
        node56.setSourceEncodedPosition((-1));
        boolean boolean59 = node56.isSetterDef();
        boolean boolean60 = node56.isIf();
        boolean boolean61 = node56.isNumber();
        boolean boolean62 = node56.isExprResult();
        com.google.javascript.rhino.Node node63 = node56.getFirstChild();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4131 + "'", int54 == 4131);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR 1" + "'", str55, "OR 1");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(node63);
    }

    @Test
    public void test09824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09824");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str2 = jSDocInfo1.getVersion();
        boolean boolean3 = jSDocInfo1.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo1.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo1.getImplementedInterfaces();
        java.lang.String str6 = jSDocInfo1.toString();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean11 = node10.isThrow();
        java.lang.String str15 = node10.toString(true, false, true);
        java.lang.String str16 = node10.getQualifiedName();
        boolean boolean17 = node10.isCatch();
        boolean boolean18 = node10.isOr();
        jSDocInfo1.setAssociatedNode(node10);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString((int) (byte) 10, "Named type with empty name component");
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        boolean boolean49 = node38.hasChild(node48);
        int int50 = node38.getCharno();
        com.google.javascript.rhino.Node node51 = node28.useSourceInfoIfMissingFrom(node38);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node58 = node56.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) -1, node56, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node68 = node66.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) -1, node66, (int) (byte) 1, (int) '#');
        boolean boolean72 = node61.hasChild(node71);
        boolean boolean73 = node71.isVar();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((-1), node38, node71);
        com.google.javascript.rhino.Node node75 = node74.getParent();
        boolean boolean76 = node74.isSetterDef();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((-1), node74);
        boolean boolean78 = node22.isEquivalentTo(node77);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(46, node10, node22);
        boolean boolean80 = node79.isWith();
        boolean boolean81 = node79.isFalse();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING  0" + "'", str15, "STRING  0");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 35 + "'", int50 == 35);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test09825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09825");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(8, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node9 = node7.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1, node7, (int) (byte) 1, (int) '#');
        boolean boolean13 = node7.isDo();
        boolean boolean14 = node7.isDefaultCase();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node28.hasChild(node38);
        int int40 = node28.getCharno();
        com.google.javascript.rhino.Node node41 = node18.useSourceInfoIfMissingFrom(node28);
        int int42 = node18.getSourcePosition();
        java.lang.String str43 = node18.toString();
        int int44 = node7.getIndexOfChild(node18);
        int int45 = node2.getIndexOfChild(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str47 = jSDocInfo46.getVersion();
        boolean boolean48 = jSDocInfo46.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo46.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo46.getImplementedInterfaces();
        java.lang.String str51 = jSDocInfo46.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo46.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = jSDocInfo46.getTypedefType();
        node2.setJSDocInfo(jSDocInfo46);
        boolean boolean56 = node2.isParamList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str58 = jSDocInfo57.getVersion();
        boolean boolean59 = jSDocInfo57.hasEnumParameterType();
        java.lang.String str61 = jSDocInfo57.getDescriptionForParameter("STRING  0\n");
        java.lang.String str62 = jSDocInfo57.getDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList63 = jSDocInfo57.getExtendedInterfaces();
        boolean boolean64 = jSDocInfo57.hasThisType();
        boolean boolean65 = jSDocInfo57.hasTypedefType();
        node2.setJSDocInfo(jSDocInfo57);
        boolean boolean67 = jSDocInfo57.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression68 = jSDocInfo57.getThisType();
        java.lang.String str69 = jSDocInfo57.getReturnDescription();
        boolean boolean70 = jSDocInfo57.hasFileOverview();
        java.util.Set<java.lang.String> strSet71 = jSDocInfo57.getParameterNames();
        java.lang.String str72 = jSDocInfo57.getVersion();
        boolean boolean73 = jSDocInfo57.hasModifies();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4131 + "'", int42 == 4131);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR 1" + "'", str43, "OR 1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "JSDocInfo" + "'", str51, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertNull(jSTypeExpression54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(jSTypeExpressionList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(jSTypeExpression68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test09826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09826");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        int int4 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean6 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test09827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09827");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        boolean boolean27 = node3.isObjectLit();
        node3.removeProp(4);
        java.lang.String str30 = node3.getQualifiedName();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test09828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09828");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING  0 [jsdoc_info: JSDocInfo]\n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test09829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09829");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str4 = jSDocInfo0.getDescriptionForParameter("STRING  0\n");
        boolean boolean5 = jSDocInfo0.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str7 = jSDocInfo6.getVersion();
        boolean boolean8 = jSDocInfo6.hasEnumParameterType();
        boolean boolean9 = jSDocInfo6.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo6.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility11 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo6.setVisibility(visibility11);
        jSDocInfo0.setVisibility(visibility11);
        java.lang.String str14 = jSDocInfo0.getSourceName();
        com.google.common.collect.ImmutableList<java.lang.String> strList15 = jSDocInfo0.getTemplateTypeNames();
        java.util.Set<java.lang.String> strSet16 = jSDocInfo0.getSuppressions();
        java.util.Collection<java.lang.String> strCollection17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = strSet16.addAll(strCollection17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + visibility11 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility11.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strSet16);
    }

    @Test
    public void test09830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09830");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        boolean boolean12 = node11.isUnscopedQualifiedName();
        boolean boolean13 = node11.isFunction();
        boolean boolean14 = node11.isComma();
        boolean boolean15 = node11.isDebugger();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node11.getStaticSourceFile();
        node11.setType(38);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(staticSourceFile16);
    }

    @Test
    public void test09831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09831");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isName();
        boolean boolean18 = node4.isVoid();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        com.google.javascript.rhino.Node node30 = node4.useSourceInfoIfMissingFrom(node23);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        int int41 = node40.getType();
        boolean boolean42 = node40.isFor();
        node23.addChildToFront(node40);
        java.lang.String str44 = node23.getQualifiedName();
        com.google.javascript.rhino.Node node45 = node23.cloneTree();
        node45.setIsSyntheticBlock(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo48 = node45.getJSDocInfo();
        int int50 = node45.getIntProp(54);
        java.lang.String str51 = node45.getString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(jSDocInfo48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test09832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09832");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getStartLine();
        int int4 = stringPosition0.getEndLine();
        java.lang.String str5 = stringPosition0.getItem();
        int int6 = stringPosition0.getPositionOnEndLine();
        int int7 = stringPosition0.getPositionOnStartLine();
        int int8 = stringPosition0.getStartLine();
        int int9 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setPositionInformation(23, (int) (byte) 1, 16419, (int) (short) 100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test09833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09833");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        boolean boolean7 = jSDocInfo0.hasReturnType();
        java.lang.String str8 = jSDocInfo0.getBlockDescription();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection9 = jSDocInfo0.getTypeNodes();
        jSDocInfo0.addSuppression("ERROR 1\n    STRING  0\n    STRING  0\n");
        java.lang.String str12 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(nodeCollection9);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test09834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09834");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("ERROR 1\n    STRING  0\n    STRING  0\n", 1044480, 208993);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09835");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        boolean boolean22 = node4.isInc();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(30, node4);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double28 = node27.getDouble();
        boolean boolean29 = node27.isAdd();
        com.google.javascript.rhino.Node node30 = node27.cloneNode();
        com.google.javascript.rhino.jstype.JSType jSType31 = node30.getJSType();
        java.lang.String str32 = node30.toStringTree();
        node4.addChildToFront(node30);
        int int34 = node30.getChildCount();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 4095.0d + "'", double28 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 4095.0 100\n" + "'", str32, "NUMBER 4095.0 100\n");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test09836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09836");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(8, "STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node9 = node7.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) -1, node7, (int) (byte) 1, (int) '#');
        boolean boolean13 = node7.isDo();
        boolean boolean14 = node7.isDefaultCase();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node28.hasChild(node38);
        int int40 = node28.getCharno();
        com.google.javascript.rhino.Node node41 = node18.useSourceInfoIfMissingFrom(node28);
        int int42 = node18.getSourcePosition();
        java.lang.String str43 = node18.toString();
        int int44 = node7.getIndexOfChild(node18);
        int int45 = node2.getIndexOfChild(node18);
        com.google.javascript.rhino.JSDocInfo jSDocInfo46 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str47 = jSDocInfo46.getVersion();
        boolean boolean48 = jSDocInfo46.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet49 = jSDocInfo46.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo46.getImplementedInterfaces();
        java.lang.String str51 = jSDocInfo46.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression53 = jSDocInfo46.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression54 = jSDocInfo46.getTypedefType();
        node2.setJSDocInfo(jSDocInfo46);
        boolean boolean56 = node2.isReturn();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable57 = node2.children();
        boolean boolean58 = node2.isWith();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4131 + "'", int42 == 4131);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "OR 1" + "'", str43, "OR 1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "JSDocInfo" + "'", str51, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression53);
        org.junit.Assert.assertNull(jSTypeExpression54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(nodeIterable57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09837");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(49, (int) (byte) 0, (int) (short) 0);
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node(40, node4);
        com.google.javascript.rhino.Node node6 = node5.getFirstChild();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node12.setCharno(1);
        boolean boolean15 = node12.isRegExp();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node20.isDo();
        boolean boolean27 = node20.isDefaultCase();
        node20.setQuotedString();
        com.google.javascript.rhino.Node node29 = node12.useSourceInfoFromForTree(node20);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node33.setCharno(1);
        java.util.Set<java.lang.String> strSet36 = node33.getDirectives();
        node33.setLength(0);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node(0, node29, node33, node48, (int) 'a', (int) (short) 0);
        boolean boolean52 = node48.isDefaultCase();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node56.setCharno(1);
        boolean boolean59 = node56.isRegExp();
        int int60 = node56.getSourcePosition();
        com.google.javascript.rhino.Node node61 = node56.getLastChild();
        com.google.javascript.rhino.Node node62 = node48.useSourceInfoFrom(node56);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node69 = node67.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) -1, node67, (int) (byte) 1, (int) '#');
        int int73 = node72.getType();
        com.google.javascript.rhino.Node node74 = node48.srcref(node72);
        boolean boolean75 = node74.isStringKey();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable76 = node74.siblings();
        node6.putProp((int) (short) 1, (java.lang.Object) nodeIterable76);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(strSet36);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(nodeIterable76);
    }

    @Test
    public void test09838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09838");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        jSDocInfo0.setAssociatedNode(node8);
        boolean boolean15 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.Node node16 = jSDocInfo0.getAssociatedNode();
        boolean boolean17 = jSDocInfo0.isExterns();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09839");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        node8.setQuotedString();
        com.google.javascript.rhino.Node node16 = node3.srcrefTree(node8);
        com.google.javascript.rhino.Node node17 = node16.cloneNode();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile18 = node16.getStaticSourceFile();
        boolean boolean19 = node16.isStringKey();
        boolean boolean20 = node16.isGetterDef();
        node16.putIntProp(5, (int) (short) 10);
        boolean boolean24 = node16.isThrow();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(staticSourceFile18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test09840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09840");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isConstructor();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isExterns();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection7 = jSDocInfo0.getMarkers();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        boolean boolean9 = jSDocInfo0.hasTypedefType();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getEnumParameterType();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(markerCollection7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test09841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09841");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node20.setSourceFileForTesting("STRING  0\n");
        node20.setSourceFileForTesting("Named type with empty name component");
        java.lang.String str25 = node20.toString();
        com.google.javascript.rhino.Node node26 = node20.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = node26.isVarArgs();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "STRING  0 [source_file: Named type with empty name component]" + "'", str25, "STRING  0 [source_file: Named type with empty name component]");
        org.junit.Assert.assertNull(node26);
    }

    @Test
    public void test09842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09842");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node50 = node48.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) -1, node48, (int) (byte) 1, (int) '#');
        boolean boolean54 = node48.isDo();
        boolean boolean55 = node48.isDefaultCase();
        node48.setQuotedString();
        boolean boolean57 = node48.isDec();
        boolean boolean58 = node48.isLabel();
        com.google.javascript.rhino.Node node59 = node25.useSourceInfoFrom(node48);
        com.google.javascript.rhino.InputId inputId60 = null;
        node59.setInputId(inputId60);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags63 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int64 = sideEffectFlags63.valueOf();
        sideEffectFlags63.clearSideEffectFlags();
        sideEffectFlags63.setMutatesGlobalState();
        sideEffectFlags63.clearAllFlags();
        int int68 = sideEffectFlags63.valueOf();
        sideEffectFlags63.setReturnsTainted();
        sideEffectFlags63.setThrows();
        sideEffectFlags63.setMutatesThis();
        sideEffectFlags63.setMutatesGlobalState();
        // The following exception was thrown during execution in test generation
        try {
            node59.setSideEffectFlags(sideEffectFlags63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 39 + "'", int64 == 39);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 31 + "'", int68 == 31);
    }

    @Test
    public void test09843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09843");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection7 = jSDocInfo0.getTypeNodes();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        boolean boolean9 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getReturnType();
        boolean boolean11 = jSDocInfo0.isNoAlias();
        boolean boolean12 = jSDocInfo0.isNoAlias();
        java.lang.String str13 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(nodeCollection7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test09844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09844");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        jSDocInfo0.setAssociatedNode(node8);
        int int16 = node8.getIntProp((int) (byte) 10);
        node8.setSourceEncodedPositionForTree(15);
        node8.setLineno(1);
        boolean boolean21 = node8.isFromExterns();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        boolean boolean28 = node25.isRegExp();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node33.isDo();
        boolean boolean40 = node33.isDefaultCase();
        node33.setQuotedString();
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoFromForTree(node33);
        node33.putIntProp((int) (byte) 100, (int) (byte) 0);
        node33.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean49 = node33.isInc();
        node33.setQuotedString();
        boolean boolean51 = node33.isNoSideEffectsCall();
        com.google.javascript.rhino.InputId inputId52 = null;
        node33.setInputId(inputId52);
        com.google.javascript.rhino.Node node54 = node8.useSourceInfoFromForTree(node33);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int59 = node58.getType();
        com.google.javascript.rhino.Node node60 = node58.cloneNode();
        boolean boolean61 = node58.isTypeOf();
        node58.setLineno(3);
        boolean boolean64 = node58.wasEmptyNode();
        int int65 = node33.getIndexOfChild(node58);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 40 + "'", int59 == 40);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test09845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09845");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        node26.setLength((int) ' ');
        boolean boolean29 = node26.isReturn();
        boolean boolean30 = node26.isNumber();
        int int31 = node26.getSideEffectFlags();
        boolean boolean32 = node26.isRegExp();
        boolean boolean33 = node26.isFor();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test09846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09846");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        boolean boolean24 = node11.isVarArgs();
        node11.setLineno(37);
        boolean boolean27 = node11.isInstanceOf();
        boolean boolean28 = node11.isVar();
        com.google.javascript.rhino.InputId inputId29 = null;
        node11.setInputId(inputId29);
        com.google.javascript.rhino.Node node32 = node11.getAncestor((int) '4');
        node11.setOptionalArg(false);
        boolean boolean35 = node11.isOptionalArg();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test09847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09847");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node9.isReturn();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setCharno((int) (short) -1);
        int int31 = node9.getIndexOfChild(node25);
        boolean boolean32 = node25.isNull();
        boolean boolean33 = node25.isQuotedString();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("");
        com.google.javascript.rhino.jstype.JSType jSType36 = node35.getJSType();
        boolean boolean37 = node35.isLocalResultCall();
        boolean boolean38 = node35.isNew();
        com.google.javascript.rhino.Node node39 = node25.copyInformationFromForTree(node35);
        java.lang.String str40 = node39.toStringTree();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "STRING \n" + "'", str40, "STRING \n");
    }

    @Test
    public void test09848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09848");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isConstructor();
        java.lang.String str4 = jSDocInfo0.getSourceName();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection6 = jSDocInfo0.getMarkers();
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean8 = jSDocInfo0.isDefine();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(markerCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09849");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        boolean boolean34 = node28.isScript();
        com.google.javascript.rhino.InputId inputId35 = node28.getInputId();
        com.google.javascript.rhino.Node node36 = node11.useSourceInfoFrom(node28);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean41 = node40.isThrow();
        java.lang.String str45 = node40.toString(true, false, true);
        node40.setIsSyntheticBlock(true);
        boolean boolean48 = node40.isTry();
        boolean boolean49 = node11.hasChild(node40);
        boolean boolean50 = node11.isFor();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node57 = node55.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node55, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node67 = node65.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (byte) -1, node65, (int) (byte) 1, (int) '#');
        boolean boolean71 = node60.hasChild(node70);
        boolean boolean72 = node70.isVar();
        boolean boolean73 = node70.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable74 = node70.children();
        boolean boolean75 = node70.isDefaultCase();
        com.google.javascript.rhino.Node node76 = node11.useSourceInfoIfMissingFromForTree(node70);
        boolean boolean77 = node70.isTrue();
        boolean boolean78 = node70.isContinue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(inputId35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "STRING  0" + "'", str45, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(nodeIterable74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test09850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09850");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        node3.setIsSyntheticBlock(true);
        boolean boolean11 = node3.isAdd();
        com.google.javascript.rhino.Node node12 = node3.removeChildren();
        boolean boolean13 = node3.isAdd();
        com.google.javascript.rhino.Node node14 = node3.removeChildren();
        int int15 = node3.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test09851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09851");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        boolean boolean6 = jSDocInfo0.isJavaDispatch();
        boolean boolean7 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean11 = jSDocInfo0.hasDescriptionForParameter("STRING  0 [synthetic: 1]\n");
        boolean boolean13 = jSDocInfo0.hasParameter("STRING  0 [synthetic: 1]\n");
        java.lang.String str14 = jSDocInfo0.getFileOverview();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList15 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean16 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(jSTypeExpressionList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09852");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str8 = jSDocInfo0.getDeprecationReason();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        boolean boolean10 = jSDocInfo0.isHidden();
        jSDocInfo0.addSuppression("ERROR 1\n    STRING  0 [quoted: 1]\n");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09853");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.InputId inputId11 = node4.getInputId();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        boolean boolean18 = node15.isRegExp();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        boolean boolean30 = node23.isDefaultCase();
        node23.setQuotedString();
        com.google.javascript.rhino.Node node32 = node15.useSourceInfoFromForTree(node23);
        node23.putIntProp((int) (byte) 100, (int) (byte) 0);
        node23.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        node23.detachChildren();
        com.google.javascript.rhino.Node node40 = node4.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node41 = node40.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean42 = node41.isTypeOf();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
    }

    @Test
    public void test09854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09854");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("STRING STRING  0 [quoted: 1] 3\n");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test09855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09855");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile10 = null;
        node9.setStaticSourceFile(staticSourceFile10);
        boolean boolean12 = node9.isParamList();
        node9.removeProp(12);
        boolean boolean15 = node9.isCase();
        boolean boolean16 = node9.isParamList();
        // The following exception was thrown during execution in test generation
        try {
            node9.setSideEffectFlags(38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got ERROR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09856");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo jSDocInfo2 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str3 = jSDocInfo2.getVersion();
        boolean boolean4 = jSDocInfo2.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo2.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo2.getImplementedInterfaces();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean11 = node10.isThrow();
        java.lang.String str15 = node10.toString(true, false, true);
        jSDocInfo2.setAssociatedNode(node10);
        namePosition0.setItem(node10);
        boolean boolean18 = node10.isTrue();
        boolean boolean19 = node10.hasOneChild();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING  0" + "'", str15, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test09857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09857");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 0, 46);
        node3.setSourceEncodedPosition(36);
        node3.setType(52);
        java.lang.Object obj9 = node3.getProp(1);
        boolean boolean10 = node3.isWhile();
        node3.setIsSyntheticBlock(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09858");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        boolean boolean3 = node2.isLabelName();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(36, node2, (int) (short) 100, (int) (byte) 100);
        com.google.javascript.rhino.Node node7 = node6.getNext();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test09859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09859");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.lang.String str6 = jSDocInfo0.getBlockDescription();
        boolean boolean7 = jSDocInfo0.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        java.lang.String[] strArray11 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        boolean boolean19 = strSet12.addAll((java.util.Collection<java.lang.String>) strList17);
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str21 = jSDocInfo20.getVersion();
        java.lang.String str22 = jSDocInfo20.getFileOverview();
        boolean boolean23 = jSDocInfo20.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet24 = jSDocInfo20.getParameterNames();
        boolean boolean25 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet24);
        java.lang.String[] strArray28 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        java.lang.String[] strArray33 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        boolean boolean36 = strSet29.addAll((java.util.Collection<java.lang.String>) strList34);
        boolean boolean37 = strSet12.containsAll((java.util.Collection<java.lang.String>) strSet29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str39 = jSDocInfo38.getVersion();
        boolean boolean40 = jSDocInfo38.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet41 = jSDocInfo38.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo42 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str43 = jSDocInfo42.getVersion();
        java.lang.String str44 = jSDocInfo42.getFileOverview();
        boolean boolean45 = jSDocInfo42.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet46 = jSDocInfo42.getParameterNames();
        java.util.Iterator<java.lang.String> strItor47 = strSet46.iterator();
        boolean boolean48 = strSet46.isEmpty();
        boolean boolean49 = strSet41.containsAll((java.util.Collection<java.lang.String>) strSet46);
        boolean boolean50 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet41);
        boolean boolean51 = strSet8.containsAll((java.util.Collection<java.lang.String>) strSet12);
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        java.lang.String[] strArray58 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        boolean boolean62 = strSet59.add("STRING  0");
        java.lang.String[] strArray65 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet66 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet66, strArray65);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        boolean boolean73 = strSet66.addAll((java.util.Collection<java.lang.String>) strList71);
        boolean boolean74 = strSet59.containsAll((java.util.Collection<java.lang.String>) strList71);
        boolean boolean75 = strSet54.addAll((java.util.Collection<java.lang.String>) strList71);
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str77 = jSDocInfo76.getVersion();
        boolean boolean78 = jSDocInfo76.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet79 = jSDocInfo76.getParameterNames();
        boolean boolean80 = strSet54.retainAll((java.util.Collection<java.lang.String>) strSet79);
        boolean boolean81 = strSet8.removeAll((java.util.Collection<java.lang.String>) strSet79);
        java.util.stream.Stream<java.lang.String> strStream82 = strSet8.parallelStream();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (byte) 1);
        java.lang.Object obj86 = node84.getProp(42);
        boolean boolean87 = strSet8.remove((java.lang.Object) node84);
        boolean boolean88 = node84.isQuotedString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(strItor47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strStream82);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test09860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09860");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesThis();
        int int4 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setReturnsTainted();
        boolean boolean8 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setAllFlags();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 37 + "'", int4 == 37);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test09861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09861");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder21 = node20.new FileLevelJsDocBuilder();
        boolean boolean22 = node20.isCase();
        boolean boolean23 = node20.isFalse();
        boolean boolean24 = node20.isCall();
        com.google.javascript.rhino.Node node26 = node20.getAncestor(21);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(node26);
    }

    @Test
    public void test09862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09862");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int2 = typePosition1.getPositionOnEndLine();
        boolean boolean3 = typePosition1.hasBrackets();
        int int4 = typePosition1.getEndLine();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node29 = node27.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) -1, node27, (int) (byte) 1, (int) '#');
        boolean boolean33 = node22.hasChild(node32);
        int int34 = node22.getCharno();
        com.google.javascript.rhino.Node node35 = node12.useSourceInfoIfMissingFrom(node22);
        node35.setLength((int) ' ');
        node8.addChildrenToBack(node35);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node8.children();
        boolean boolean40 = node8.isHook();
        int int41 = node8.getSideEffectFlags();
        typePosition1.setItem(node8);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        int int47 = node46.getSourcePosition();
        int int48 = node46.getType();
        boolean boolean49 = node46.isLabel();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) ' ', node8, node46);
        boolean boolean51 = node46.isOr();
        node46.setVarArgs(true);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 40 + "'", int48 == 40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test09863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09863");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(51);
        java.lang.String str18 = node4.checkTreeEquals(node17);
        boolean boolean19 = node4.isOr();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node23.setCharno(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile26 = null;
        node23.setStaticSourceFile(staticSourceFile26);
        boolean boolean28 = node23.isBreak();
        boolean boolean29 = node23.isOptionalArg();
        boolean boolean30 = node23.isNew();
        java.lang.String str31 = node4.checkTreeEquals(node23);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node42 = node40.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node52 = node50.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) -1, node50, (int) (byte) 1, (int) '#');
        boolean boolean56 = node45.hasChild(node55);
        int int57 = node45.getCharno();
        com.google.javascript.rhino.Node node58 = node35.useSourceInfoIfMissingFrom(node45);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node69 = node67.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) -1, node67, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node79 = node77.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) -1, node77, (int) (byte) 1, (int) '#');
        boolean boolean83 = node72.hasChild(node82);
        int int84 = node72.getCharno();
        com.google.javascript.rhino.Node node85 = node62.useSourceInfoIfMissingFrom(node72);
        int int86 = node62.getSourcePosition();
        java.lang.String str87 = node62.toString();
        com.google.javascript.rhino.Node node88 = node35.srcref(node62);
        boolean boolean89 = node88.wasEmptyNode();
        com.google.javascript.rhino.Node node91 = node88.getAncestor(42);
        com.google.javascript.rhino.Node node92 = node23.useSourceInfoFromForTree(node88);
        node88.removeProp(51);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str18, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4131 + "'", int86 == 4131);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "OR 1" + "'", str87, "OR 1");
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertNotNull(node92);
    }

    @Test
    public void test09864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09864");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.hasModifies();
        boolean boolean8 = jSDocInfo0.isNoCompile();
        boolean boolean9 = jSDocInfo0.hasModifies();
        java.lang.String str10 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test09865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09865");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(51);
        java.lang.String str18 = node4.checkTreeEquals(node17);
        boolean boolean19 = node4.isOr();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str21 = jSDocInfo20.getVersion();
        boolean boolean22 = jSDocInfo20.hasEnumParameterType();
        java.lang.String str24 = jSDocInfo20.getDescriptionForParameter("STRING  0\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo20.getExtendedInterfaces();
        node4.setJSDocInfo(jSDocInfo20);
        java.lang.String str28 = jSDocInfo20.getDescriptionForParameter("ERROR 1");
        boolean boolean29 = jSDocInfo20.isHidden();
        boolean boolean30 = jSDocInfo20.hasType();
        boolean boolean31 = jSDocInfo20.isNoAlias();
        boolean boolean32 = jSDocInfo20.isNoAlias();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str18, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test09866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09866");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node32 = node4.srcref(node31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean37 = node36.isFromExterns();
        boolean boolean38 = node32.hasChild(node36);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(52, node36);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node43.setCharno(1);
        java.util.Set<java.lang.String> strSet46 = node43.getDirectives();
        node43.setCharno((int) (short) -1);
        boolean boolean49 = node43.isRegExp();
        node36.addChildrenToFront(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str52 = jSDocInfo51.getVersion();
        boolean boolean53 = jSDocInfo51.hasEnumParameterType();
        boolean boolean54 = jSDocInfo51.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = jSDocInfo51.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility56 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo51.setVisibility(visibility56);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection58 = jSDocInfo51.getTypeNodes();
        jSDocInfo51.setDeprecated(false);
        boolean boolean61 = jSDocInfo51.isNoSideEffects();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int66 = node65.getType();
        boolean boolean67 = node65.isArrayLit();
        jSDocInfo51.setAssociatedNode(node65);
        com.google.javascript.rhino.Node node69 = node43.useSourceInfoFrom(node65);
        boolean boolean70 = node43.isDelProp();
        java.lang.Object obj72 = node43.getProp(49);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(strSet46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSTypeExpression55);
        org.junit.Assert.assertTrue("'" + visibility56 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility56.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(nodeCollection58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 40 + "'", int66 == 40);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(obj72);
    }

    @Test
    public void test09867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09867");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        boolean boolean28 = node25.isRegExp();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node33.isDo();
        boolean boolean40 = node33.isDefaultCase();
        node33.setQuotedString();
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoFromForTree(node33);
        boolean boolean43 = node42.isVarArgs();
        com.google.javascript.rhino.Node node44 = node19.useSourceInfoIfMissingFrom(node42);
        boolean boolean45 = node19.isUnscopedQualifiedName();
        boolean boolean46 = node19.isReturn();
        int int47 = node19.getLength();
        java.lang.String str51 = node19.toString(false, true, false);
        int int52 = node19.getLength();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ERROR" + "'", str51, "ERROR");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test09868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09868");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        java.util.Set<java.lang.String> strSet7 = node4.getDirectives();
        boolean boolean8 = node4.isHook();
        int int9 = node4.getSourceOffset();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node13.setCharno(1);
        boolean boolean16 = node13.isRegExp();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        boolean boolean27 = node21.isDo();
        boolean boolean28 = node21.isDefaultCase();
        node21.setQuotedString();
        com.google.javascript.rhino.Node node30 = node13.useSourceInfoFromForTree(node21);
        node21.putIntProp((int) (byte) 100, (int) (byte) 0);
        node21.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean37 = node21.isInc();
        com.google.javascript.rhino.Node node38 = node21.getLastSibling();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean43 = node42.isThrow();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean48 = node47.isThrow();
        java.lang.String str52 = node47.toString(true, false, true);
        java.lang.String str53 = node47.getQualifiedName();
        boolean boolean54 = node47.isIn();
        com.google.javascript.rhino.Node node55 = node47.cloneTree();
        boolean boolean56 = node55.isRegExp();
        boolean boolean57 = node55.isDebugger();
        node42.addChildToBack(node55);
        com.google.javascript.rhino.Node node59 = node38.srcref(node55);
        int int60 = node59.getLength();
        boolean boolean61 = node59.isNull();
        com.google.javascript.rhino.Node node62 = node59.getLastSibling();
        com.google.javascript.rhino.Node node63 = node4.clonePropsFrom(node59);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder64 = node4.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(0, node4);
        boolean boolean66 = node4.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "STRING  0" + "'", str52, "STRING  0");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test09869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09869");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: STRING  0\n");
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test09870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09870");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        boolean boolean2 = typePosition0.hasBrackets();
        int int3 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node4 = typePosition0.getItem();
        boolean boolean5 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        boolean boolean16 = node10.isDo();
        boolean boolean17 = node10.isDefaultCase();
        node10.setQuotedString();
        boolean boolean19 = node10.isDec();
        boolean boolean20 = node10.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node10.siblings();
        com.google.javascript.rhino.Node node22 = node10.detachFromParent();
        boolean boolean23 = node10.isAssignAdd();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node33.isScript();
        node33.setQuotedString();
        com.google.javascript.rhino.Node node41 = node28.srcrefTree(node33);
        boolean boolean42 = node41.isIf();
        com.google.javascript.rhino.Node node43 = node41.getParent();
        node41.removeProp((int) 'a');
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean50 = node49.isThrow();
        java.lang.String str54 = node49.toString(true, false, true);
        node49.setQuotedString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo56 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str57 = jSDocInfo56.getVersion();
        boolean boolean58 = jSDocInfo56.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet59 = jSDocInfo56.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility60 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo56.setVisibility(visibility60);
        node49.setJSDocInfo(jSDocInfo56);
        com.google.javascript.rhino.Node node63 = node41.clonePropsFrom(node49);
        int int64 = node63.getChildCount();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean69 = node68.isThrow();
        java.lang.String str73 = node68.toString(true, false, true);
        node68.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) 0, node63, node68, (int) (byte) 1, 41);
        boolean boolean79 = node68.isArrayLit();
        java.lang.String str80 = node68.getQualifiedName();
        com.google.javascript.rhino.Node node81 = node10.srcref(node68);
        boolean boolean82 = node68.hasMoreThanOneChild();
        typePosition0.setItem(node68);
        boolean boolean84 = node68.isParamList();
        com.google.javascript.rhino.Node node85 = node68.getFirstChild();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "STRING  0" + "'", str54, "STRING  0");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + visibility60 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility60.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "STRING  0" + "'", str73, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(node85);
    }

    @Test
    public void test09871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09871");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        boolean boolean44 = node21.isNull();
        java.lang.String[] strArray47 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        boolean boolean55 = strSet48.addAll((java.util.Collection<java.lang.String>) strList53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node62 = node60.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) -1, node60, (int) (byte) 1, (int) '#');
        boolean boolean66 = node60.isScript();
        node60.setQuotedString();
        boolean boolean68 = strSet48.equals((java.lang.Object) node60);
        com.google.javascript.rhino.Node node69 = node21.copyInformationFrom(node60);
        boolean boolean70 = node60.isQualifiedName();
        boolean boolean71 = node60.isTrue();
        boolean boolean72 = node60.hasChildren();
        int int73 = node60.getType();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 40 + "'", int73 == 40);
    }

    @Test
    public void test09872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09872");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition3 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getAnnotation();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(nodeSourcePosition3);
        org.junit.Assert.assertNull(typePosition4);
        org.junit.Assert.assertNull(stringPosition5);
    }

    @Test
    public void test09873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09873");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getModifies();
        java.lang.String[] strArray13 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        boolean boolean21 = strSet14.addAll((java.util.Collection<java.lang.String>) strList19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str23 = jSDocInfo22.getVersion();
        java.lang.String str24 = jSDocInfo22.getFileOverview();
        boolean boolean25 = jSDocInfo22.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo22.getParameterNames();
        boolean boolean27 = strSet14.retainAll((java.util.Collection<java.lang.String>) strSet26);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        boolean boolean38 = node32.isDo();
        boolean boolean39 = node32.isDefaultCase();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node50 = node48.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) -1, node48, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node60 = node58.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) -1, node58, (int) (byte) 1, (int) '#');
        boolean boolean64 = node53.hasChild(node63);
        int int65 = node53.getCharno();
        com.google.javascript.rhino.Node node66 = node43.useSourceInfoIfMissingFrom(node53);
        int int67 = node43.getSourcePosition();
        java.lang.String str68 = node43.toString();
        int int69 = node32.getIndexOfChild(node43);
        boolean boolean70 = strSet14.equals((java.lang.Object) node32);
        java.util.stream.Stream<java.lang.String> strStream71 = strSet14.parallelStream();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags73 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int74 = sideEffectFlags73.valueOf();
        sideEffectFlags73.clearSideEffectFlags();
        sideEffectFlags73.clearSideEffectFlags();
        sideEffectFlags73.clearAllFlags();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags79 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int80 = sideEffectFlags79.valueOf();
        sideEffectFlags79.setThrows();
        sideEffectFlags79.setAllFlags();
        boolean boolean83 = sideEffectFlags79.areAllFlagsSet();
        sideEffectFlags79.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags86 = new com.google.javascript.rhino.Node.SideEffectFlags(43);
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray87 = new com.google.javascript.rhino.Node.SideEffectFlags[] { sideEffectFlags73, sideEffectFlags79, sideEffectFlags86 };
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray88 = strSet14.toArray(sideEffectFlagsArray87);
        boolean boolean89 = strSet10.removeAll((java.util.Collection<java.lang.String>) strSet14);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(node50);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNull(node60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 35 + "'", int65 == 35);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 4131 + "'", int67 == 4131);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "OR 1" + "'", str68, "OR 1");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strStream71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 39 + "'", int74 == 39);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 39 + "'", int80 == 39);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray87);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test09874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09874");
        com.google.javascript.rhino.Node[] nodeArray9 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 10, nodeArray9);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(0, nodeArray9);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(2, nodeArray9);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(4, nodeArray9, 39, (int) (short) 100);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 100, nodeArray9, 4111, (int) 'a');
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(36, nodeArray9);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node(32, nodeArray9, 54, 21);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 1, nodeArray9, 9, 37);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(53, nodeArray9, 47, 32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = node28.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 53");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray9);
    }

    @Test
    public void test09875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09875");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        boolean boolean44 = node21.isNull();
        java.lang.String[] strArray47 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        boolean boolean55 = strSet48.addAll((java.util.Collection<java.lang.String>) strList53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node62 = node60.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) -1, node60, (int) (byte) 1, (int) '#');
        boolean boolean66 = node60.isScript();
        node60.setQuotedString();
        boolean boolean68 = strSet48.equals((java.lang.Object) node60);
        com.google.javascript.rhino.Node node69 = node21.copyInformationFrom(node60);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node76 = node74.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) -1, node74, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node80 = node21.useSourceInfoFrom(node79);
        com.google.javascript.rhino.Node node81 = node21.getLastChild();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        boolean boolean86 = node85.isLabelName();
        com.google.javascript.rhino.Node node87 = node85.getLastChild();
        com.google.javascript.rhino.Node node88 = node21.srcrefTree(node85);
        boolean boolean89 = node88.isFalse();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(node87);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test09876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09876");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.isDefine();
        boolean boolean3 = jSDocInfo0.isExport();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getSuppressions();
        jSDocInfo0.setLicense("((STRING  0\n))");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test09877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09877");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str2 = jSDocInfo1.getVersion();
        boolean boolean3 = jSDocInfo1.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet4 = jSDocInfo1.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo1.getImplementedInterfaces();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean10 = node9.isThrow();
        java.lang.String str14 = node9.toString(true, false, true);
        jSDocInfo1.setAssociatedNode(node9);
        boolean boolean16 = node9.isVar();
        boolean boolean17 = node9.isParamList();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        boolean boolean42 = node31.hasChild(node41);
        int int43 = node31.getCharno();
        com.google.javascript.rhino.Node node44 = node21.useSourceInfoIfMissingFrom(node31);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node65 = node63.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) -1, node63, (int) (byte) 1, (int) '#');
        boolean boolean69 = node58.hasChild(node68);
        int int70 = node58.getCharno();
        com.google.javascript.rhino.Node node71 = node48.useSourceInfoIfMissingFrom(node58);
        int int72 = node48.getSourcePosition();
        java.lang.String str73 = node48.toString();
        com.google.javascript.rhino.Node node74 = node21.srcref(node48);
        node74.setSourceEncodedPosition((-1));
        com.google.javascript.rhino.InputId inputId77 = node74.getInputId();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(48, node9, node74, 9, 52);
        boolean boolean81 = node9.isTypeOf();
        boolean boolean82 = node9.hasOneChild();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING  0" + "'", str14, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35 + "'", int43 == 35);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 4131 + "'", int72 == 4131);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "OR 1" + "'", str73, "OR 1");
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(inputId77);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test09878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09878");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        com.google.javascript.rhino.Node node51 = node50.getParent();
        boolean boolean52 = node50.isContinue();
        boolean boolean53 = node50.isDefaultCase();
        com.google.javascript.rhino.Node node54 = node50.cloneNode();
        int int55 = node50.getSourcePosition();
        boolean boolean56 = node50.isEmpty();
        boolean boolean57 = node50.isQuotedString();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test09879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09879");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getStartLine();
        int int3 = stringPosition0.getStartLine();
        stringPosition0.setPositionInformation(6, 31, 44, 4131);
        int int9 = stringPosition0.getStartLine();
        java.lang.String str10 = stringPosition0.getItem();
        int int11 = stringPosition0.getPositionOnStartLine();
        int int12 = stringPosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6 + "'", int9 == 6);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
    }

    @Test
    public void test09880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09880");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        sideEffectFlags0.clearAllFlags();
        sideEffectFlags0.clearAllFlags();
        int int4 = sideEffectFlags0.valueOf();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
    }

    @Test
    public void test09881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09881");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getPositionOnStartLine();
        int int3 = typePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node7.setCharno(1);
        java.util.Set<java.lang.String> strSet10 = node7.getDirectives();
        boolean boolean11 = node7.isHook();
        int int12 = node7.getSourceOffset();
        boolean boolean13 = node7.isFunction();
        typePosition0.setItem(node7);
        boolean boolean15 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int20 = node19.getType();
        com.google.javascript.rhino.Node node21 = node19.cloneNode();
        node19.removeProp(35);
        com.google.javascript.rhino.Node node24 = node19.removeChildren();
        boolean boolean25 = node19.isDefaultCase();
        java.lang.String str26 = node19.getQualifiedName();
        typePosition0.setItem(node19);
        // The following exception was thrown during execution in test generation
        try {
            typePosition0.setPositionInformation((int) (short) 1, 24, (int) (short) -1, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 1?end-line: -1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 40 + "'", int20 == 40);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test09882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09882");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        java.lang.String str12 = jSDocInfo0.getReturnDescription();
        boolean boolean13 = jSDocInfo0.isOverride();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09883");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        boolean boolean9 = jSDocInfo0.hasThisType();
        boolean boolean10 = jSDocInfo0.containsDeclaration();
        java.util.Collection<java.lang.String> strCollection11 = jSDocInfo0.getReferences();
        boolean boolean13 = jSDocInfo0.hasDescriptionForParameter("");
        java.lang.String str14 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strCollection11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test09884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09884");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        boolean boolean44 = node33.hasChild(node43);
        int int45 = node33.getCharno();
        com.google.javascript.rhino.Node node46 = node23.useSourceInfoIfMissingFrom(node33);
        node46.setLength((int) ' ');
        node19.addChildrenToBack(node46);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node19.children();
        boolean boolean51 = node19.isHook();
        int int52 = node4.getIndexOfChild(node19);
        int int53 = node4.getLineno();
        com.google.javascript.rhino.InputId inputId54 = null;
        node4.setInputId(inputId54);
        com.google.javascript.rhino.Node node56 = node4.removeFirstChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeIterable50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(node56);
    }

    @Test
    public void test09885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09885");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isNoSideEffects();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        java.lang.String str7 = jSDocInfo0.toString();
        com.google.common.collect.ImmutableList<java.lang.String> strList8 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean10 = jSDocInfo0.hasParameter("(NUMBER 40.0 51)");
        boolean boolean11 = jSDocInfo0.isExterns();
        java.lang.String str12 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "JSDocInfo" + "'", str7, "JSDocInfo");
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test09886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09886");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder15 = node4.new FileLevelJsDocBuilder();
        boolean boolean16 = node4.isGetterDef();
        java.lang.String str17 = node4.getSourceFileName();
        boolean boolean18 = node4.isTrue();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09887");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        boolean boolean6 = strSet3.add("STRING  0");
        java.lang.Object[] objArray7 = strSet3.toArray();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition8 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition8.setPositionInformation(8, 36, 31, (int) (short) 10);
        int int14 = stringPosition8.getStartLine();
        int int15 = stringPosition8.getPositionOnEndLine();
        int int16 = stringPosition8.getStartLine();
        int int17 = stringPosition8.getStartLine();
        stringPosition8.setItem("Not declared as a constructor");
        stringPosition8.setPositionInformation((int) (byte) 10, 4095, 45, 45);
        boolean boolean25 = strSet3.equals((java.lang.Object) 4095);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[STRING  0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[STRING  0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09888");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        boolean boolean27 = node26.isArrayLit();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        node26.addChildrenToFront(node37);
        boolean boolean50 = node37.isAnd();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test09889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09889");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setMutatesThis();
        int int4 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setAllFlags();
        int int6 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        int int8 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setAllFlags();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 37 + "'", int4 == 37);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
    }

    @Test
    public void test09890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09890");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        boolean boolean51 = node40.hasChild(node50);
        int int52 = node40.getCharno();
        com.google.javascript.rhino.Node node53 = node30.useSourceInfoIfMissingFrom(node40);
        int int54 = node30.getSourcePosition();
        java.lang.String str55 = node30.toString();
        com.google.javascript.rhino.Node node56 = node3.srcref(node30);
        java.lang.String str57 = node56.toString();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder58 = node56.getJsDocBuilderForNode();
        java.lang.String str59 = node56.getQualifiedName();
        boolean boolean60 = node56.isDec();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4131 + "'", int54 == 4131);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR 1" + "'", str55, "OR 1");
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "OR 1" + "'", str57, "OR 1");
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder58);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test09891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09891");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        boolean boolean5 = node3.isSwitch();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node12 = node10.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) -1, node10, (int) (byte) 1, (int) '#');
        boolean boolean16 = node10.isDo();
        boolean boolean17 = node10.isDefaultCase();
        node10.setQuotedString();
        boolean boolean19 = node10.isDec();
        boolean boolean20 = node10.isLabel();
        boolean boolean21 = node10.isSetterDef();
        boolean boolean22 = node10.isRegExp();
        boolean boolean23 = node10.isName();
        boolean boolean24 = node10.isVoid();
        com.google.javascript.rhino.Node node25 = node10.cloneNode();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node25);
        node3.setCharno((int) (byte) -1);
        node3.removeProp((int) (byte) 10);
        boolean boolean31 = node3.isInc();
        int int32 = node3.getLength();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNull(node12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test09892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09892");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node20.setSourceFileForTesting("STRING  0\n");
        int int23 = node20.getSourcePosition();
        int int24 = node20.getSourcePosition();
        boolean boolean25 = node20.isLabelName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10 + "'", int23 == 10);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test09893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09893");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(51);
        java.lang.String str18 = node4.checkTreeEquals(node17);
        boolean boolean19 = node4.isOr();
        boolean boolean20 = node4.isNull();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("NUMBER 4095.0 100\n");
        boolean boolean23 = node22.isGetProp();
        boolean boolean24 = node22.isQuotedString();
        boolean boolean25 = node4.hasChild(node22);
        boolean boolean26 = node22.isNE();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str18, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test09894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09894");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        boolean boolean44 = node21.isNull();
        java.lang.String[] strArray47 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        boolean boolean55 = strSet48.addAll((java.util.Collection<java.lang.String>) strList53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node62 = node60.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) -1, node60, (int) (byte) 1, (int) '#');
        boolean boolean66 = node60.isScript();
        node60.setQuotedString();
        boolean boolean68 = strSet48.equals((java.lang.Object) node60);
        com.google.javascript.rhino.Node node69 = node21.copyInformationFrom(node60);
        node69.putIntProp(29, (int) 'a');
        boolean boolean73 = node69.isVar();
        boolean boolean74 = node69.isQualifiedName();
        java.lang.String str75 = node69.toStringTree();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "STRING  0 [jsdoc_info: 97]\n" + "'", str75, "STRING  0 [jsdoc_info: 97]\n");
    }

    @Test
    public void test09895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09895");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        com.google.javascript.rhino.JSDocInfo jSDocInfo2 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str3 = jSDocInfo2.getVersion();
        boolean boolean4 = jSDocInfo2.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo2.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo2.getImplementedInterfaces();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean11 = node10.isThrow();
        java.lang.String str15 = node10.toString(true, false, true);
        jSDocInfo2.setAssociatedNode(node10);
        namePosition0.setItem(node10);
        com.google.javascript.rhino.Node node18 = namePosition0.getItem();
        int int19 = namePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING  0" + "'", str15, "STRING  0");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test09896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09896");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<java.lang.String> strCollection1 = jSDocInfo0.getAuthors();
        int int2 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getModifies();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = strSet3.add("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollection1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test09897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09897");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node24 = node9.clonePropsFrom(node23);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int29 = node28.getType();
        com.google.javascript.rhino.Node node30 = node28.cloneNode();
        com.google.javascript.rhino.Node node31 = node24.useSourceInfoFrom(node28);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition33 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition33.setPositionInformation(8, 36, 31, (int) (short) 10);
        java.lang.String str39 = stringPosition33.getItem();
        stringPosition33.setItem("Not declared as a type name");
        int int42 = stringPosition33.getPositionOnStartLine();
        node31.putProp(48, (java.lang.Object) int42);
        int int44 = node31.getLineno();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 40 + "'", int29 == 40);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 36 + "'", int42 == 36);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test09898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09898");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        boolean boolean19 = node15.isHook();
        node11.addChildToFront(node15);
        boolean boolean21 = node15.isNoSideEffectsCall();
        int int23 = node15.getIntProp(48);
        node15.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test09899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09899");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        boolean boolean10 = strSet9.isEmpty();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        boolean boolean26 = node20.isScript();
        node20.setQuotedString();
        com.google.javascript.rhino.Node node28 = node15.srcrefTree(node20);
        boolean boolean29 = node28.isIf();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(35, "OR 1", (int) (short) 0, 45);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean39 = node38.isThrow();
        java.lang.String str43 = node38.toString(true, false, true);
        boolean boolean44 = node38.isOptionalArg();
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node[] nodeArray49 = new com.google.javascript.rhino.Node[] { node28, node34, node38, node48 };
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node(38, nodeArray49, (int) (byte) 100, (int) (byte) 10);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) 2, 8, 50);
        com.google.javascript.rhino.Node node57 = node52.useSourceInfoIfMissingFrom(node56);
        boolean boolean58 = strSet9.equals((java.lang.Object) node56);
        java.lang.Object[] objArray59 = strSet9.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str61 = jSDocInfo60.getVersion();
        boolean boolean62 = jSDocInfo60.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet63 = jSDocInfo60.getParameterNames();
        jSDocInfo60.addSuppression("");
        com.google.common.collect.ImmutableList<java.lang.String> strList66 = jSDocInfo60.getTemplateTypeNames();
        boolean boolean67 = jSDocInfo60.isNoAlias();
        java.util.Set<java.lang.String> strSet68 = jSDocInfo60.getParameterNames();
        java.lang.Object[] objArray69 = strSet68.toArray();
        boolean boolean70 = strSet9.containsAll((java.util.Collection<java.lang.String>) strSet68);
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str72 = jSDocInfo71.getVersion();
        boolean boolean73 = jSDocInfo71.hasEnumParameterType();
        boolean boolean74 = jSDocInfo71.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo71.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility76 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo71.setVisibility(visibility76);
        boolean boolean78 = jSDocInfo71.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList79 = jSDocInfo71.getImplementedInterfaces();
        boolean boolean80 = jSDocInfo71.containsDeclaration();
        boolean boolean81 = jSDocInfo71.isNoSideEffects();
        java.util.Set<java.lang.String> strSet82 = jSDocInfo71.getModifies();
        boolean boolean83 = strSet68.containsAll((java.util.Collection<java.lang.String>) strSet82);
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str85 = jSDocInfo84.getVersion();
        boolean boolean86 = jSDocInfo84.hasEnumParameterType();
        boolean boolean87 = jSDocInfo84.isNoAlias();
        java.lang.String str89 = jSDocInfo84.getDescriptionForParameter("JSDocInfo");
        boolean boolean90 = jSDocInfo84.hasEnumParameterType();
        boolean boolean91 = jSDocInfo84.containsDeclaration();
        java.lang.String str92 = jSDocInfo84.getDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression93 = jSDocInfo84.getTypedefType();
        jSDocInfo84.setLicense("Node tree inequality:\nTree1:\nSTRING  0\n\n\nTree2:\nNUMBER 32.0 0\n\n\nSubtree1: STRING  0\n\n\nSubtree2: NUMBER 32.0 0\n");
        boolean boolean96 = jSDocInfo84.hasEnumParameterType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = strSet68.remove((java.lang.Object) boolean96);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "STRING  0" + "'", str43, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(nodeArray49);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertTrue("'" + visibility76 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility76.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(jSTypeExpression93);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test09900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09900");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getParameterType("true");
        boolean boolean11 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getReturnType();
        boolean boolean13 = jSDocInfo0.isNoShadow();
        boolean boolean14 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getThisType();
        int int16 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test09901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09901");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean3 = ternaryValue1.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean7 = ternaryValue5.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue8.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue5.xor(ternaryValue10);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue1.xor(ternaryValue5);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue14.or(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue19.or(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue21.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue17.and(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue5.and(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue27.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue5.or(ternaryValue27);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue32.or(ternaryValue34);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue32.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue40.or(ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue42.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = ternaryValue38.xor(ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue42.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue32.and(ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue30.xor(ternaryValue47);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue5.xor(ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = ternaryValue5.not();
        java.lang.String str51 = ternaryValue50.toString();
        boolean boolean53 = ternaryValue50.toBoolean(false);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "true" + "'", str51, "true");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test09902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09902");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        strSet3.clear();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        boolean boolean18 = node15.isRegExp();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        boolean boolean30 = node23.isDefaultCase();
        node23.setQuotedString();
        com.google.javascript.rhino.Node node32 = node15.useSourceInfoFromForTree(node23);
        node23.putIntProp((int) (byte) 100, (int) (byte) 0);
        node23.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean39 = node23.isInc();
        boolean boolean40 = strSet3.equals((java.lang.Object) node23);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        boolean boolean51 = node45.isDo();
        boolean boolean52 = node45.isDefaultCase();
        node45.setQuotedString();
        boolean boolean54 = node45.isDec();
        boolean boolean55 = node45.isLabel();
        boolean boolean56 = node45.isSetterDef();
        boolean boolean57 = node45.isRegExp();
        boolean boolean58 = node45.isName();
        boolean boolean59 = node45.isVoid();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node66 = node64.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) -1, node64, (int) (byte) 1, (int) '#');
        boolean boolean70 = node64.isDo();
        com.google.javascript.rhino.Node node71 = node45.useSourceInfoIfMissingFrom(node64);
        java.lang.String str72 = node45.toString();
        boolean boolean73 = strSet3.equals((java.lang.Object) node45);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "STRING  0 [quoted: 1]" + "'", str72, "STRING  0 [quoted: 1]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test09903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09903");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "(NUMBER 4095.0)");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09904");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getParameterType("(Not declared as a type name)");
        boolean boolean10 = jSDocInfo0.hasReturnType();
        boolean boolean11 = jSDocInfo0.isConstructor();
        java.util.Collection<java.lang.String> strCollection12 = jSDocInfo0.getAuthors();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getSuppressions();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList14 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(strCollection12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(jSTypeExpressionList14);
    }

    @Test
    public void test09905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09905");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean2 = ternaryValue0.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean6 = ternaryValue4.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean10 = ternaryValue8.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue11.or(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue8.xor(ternaryValue13);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = ternaryValue4.xor(ternaryValue8);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue0.or(ternaryValue8);
        boolean boolean18 = ternaryValue8.toBoolean(true);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue20.or(ternaryValue22);
        java.lang.String str24 = ternaryValue23.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean28 = ternaryValue26.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean32 = ternaryValue30.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue33.or(ternaryValue34);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue30.xor(ternaryValue35);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue26.xor(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue30.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = ternaryValue23.xor(ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue8.and(ternaryValue30);
        java.lang.String str41 = ternaryValue8.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue8.xor(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "false" + "'", str24, "false");
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "false" + "'", str41, "false");
        org.junit.Assert.assertNull(ternaryValue43);
    }

    @Test
    public void test09906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09906");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        jSDocInfo0.addSuppression("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean6 = jSDocInfo0.isInterface();
        java.lang.String str7 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test09907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09907");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        int int10 = node9.getType();
        boolean boolean11 = node9.isDelProp();
        boolean boolean12 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node23 = node9.copyInformationFromForTree(node17);
        com.google.javascript.rhino.jstype.JSType jSType24 = node23.getJSType();
        boolean boolean25 = node23.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(53, "OR 51");
        boolean boolean29 = node28.isLabel();
        java.util.Set<java.lang.String> strSet30 = node28.getDirectives();
        java.lang.Object obj32 = node28.getProp(44);
        boolean boolean33 = node28.isQualifiedName();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        java.lang.String str44 = node38.toStringTree();
        boolean boolean45 = node38.isStringKey();
        boolean boolean46 = node38.isAnd();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node38.getStaticSourceFile();
        boolean boolean48 = node38.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable49 = node38.children();
        com.google.javascript.rhino.Node node50 = node28.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node51 = node23.useSourceInfoFromForTree(node38);
        boolean boolean52 = node51.isCall();
        boolean boolean53 = node51.isIf();
        boolean boolean54 = node51.isIf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "STRING  0\n" + "'", str44, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeIterable49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test09908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09908");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node4.siblings();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        boolean boolean44 = node33.hasChild(node43);
        int int45 = node33.getCharno();
        com.google.javascript.rhino.Node node46 = node23.useSourceInfoIfMissingFrom(node33);
        node46.setLength((int) ' ');
        node19.addChildrenToBack(node46);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable50 = node19.children();
        boolean boolean51 = node19.isHook();
        int int52 = node4.getIndexOfChild(node19);
        node19.setWasEmptyNode(true);
        boolean boolean55 = node19.isBreak();
        node19.setSourceEncodedPosition(2);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node61.setCharno(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile64 = null;
        node61.setStaticSourceFile(staticSourceFile64);
        boolean boolean66 = node61.isBreak();
        boolean boolean67 = node61.isOptionalArg();
        boolean boolean68 = node61.isNew();
        node61.putIntProp(52, 47);
        boolean boolean72 = node61.isTry();
        com.google.javascript.rhino.Node node73 = node19.useSourceInfoFromForTree(node61);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(nodeIterable50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
    }

    @Test
    public void test09909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09909");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        boolean boolean28 = node25.isRegExp();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node33.isDo();
        boolean boolean40 = node33.isDefaultCase();
        node33.setQuotedString();
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoFromForTree(node33);
        boolean boolean43 = node42.isVarArgs();
        com.google.javascript.rhino.Node node44 = node19.useSourceInfoIfMissingFrom(node42);
        boolean boolean45 = node42.isHook();
        // The following exception was thrown during execution in test generation
        try {
            double double46 = node42.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING  0 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test09910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09910");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node3.setType(5);
        boolean boolean23 = node3.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean28 = node27.isThrow();
        java.lang.String str32 = node27.toString(true, false, true);
        java.lang.String str33 = node27.getQualifiedName();
        boolean boolean34 = node27.isCatch();
        boolean boolean35 = node27.isInstanceOf();
        com.google.javascript.rhino.Node node37 = node27.getAncestor(46);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue40.or(ternaryValue42);
        java.lang.String str44 = ternaryValue43.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean48 = ternaryValue46.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        boolean boolean52 = ternaryValue50.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = null;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue53.or(ternaryValue54);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = ternaryValue50.xor(ternaryValue55);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = ternaryValue46.xor(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = ternaryValue50.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = ternaryValue43.xor(ternaryValue50);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(true);
        java.lang.String str62 = ternaryValue61.toString();
        java.lang.String str63 = ternaryValue61.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = ternaryValue66.or(ternaryValue68);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = ternaryValue71.or(ternaryValue73);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = ternaryValue73.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = ternaryValue69.and(ternaryValue73);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = ternaryValue64.and(ternaryValue73);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = ternaryValue61.and(ternaryValue64);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue79 = ternaryValue50.and(ternaryValue61);
        node27.putProp((int) (byte) 0, (java.lang.Object) ternaryValue61);
        boolean boolean81 = node3.isEquivalentTo(node27);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "STRING  0" + "'", str32, "STRING  0");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "false" + "'", str44, "false");
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "true" + "'", str62, "true");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "true" + "'", str63, "true");
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertNotNull(ternaryValue76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertNotNull(ternaryValue79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test09911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09911");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(39);
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setAllFlags();
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesThis();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 39 + "'", int2 == 39);
    }

    @Test
    public void test09912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09912");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        boolean boolean12 = strSet3.remove((java.lang.Object) 1L);
        java.util.Iterator<java.lang.String> strItor13 = strSet3.iterator();
        java.lang.Object[] objArray14 = strSet3.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo15 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str16 = jSDocInfo15.getVersion();
        java.lang.String str17 = jSDocInfo15.getFileOverview();
        jSDocInfo15.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression20 = jSDocInfo15.getBaseType();
        boolean boolean21 = jSDocInfo15.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet22 = jSDocInfo15.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str24 = jSDocInfo23.getVersion();
        boolean boolean25 = jSDocInfo23.hasEnumParameterType();
        boolean boolean26 = jSDocInfo23.isNoAlias();
        java.lang.String str28 = jSDocInfo23.getDescriptionForParameter("JSDocInfo");
        boolean boolean29 = jSDocInfo23.hasEnumParameterType();
        boolean boolean30 = jSDocInfo23.hasBaseType();
        boolean boolean31 = jSDocInfo23.shouldPreserveTry();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression33 = jSDocInfo23.getParameterType("STRING OR 1 0");
        com.google.common.collect.ImmutableList<java.lang.String> strList34 = jSDocInfo23.getTemplateTypeNames();
        boolean boolean35 = strSet22.containsAll((java.util.Collection<java.lang.String>) strList34);
        boolean boolean36 = strSet3.retainAll((java.util.Collection<java.lang.String>) strList34);
        java.lang.Cloneable[][] cloneableArray37 = new java.lang.Cloneable[][] {};
        java.lang.Cloneable[][] cloneableArray38 = strSet3.toArray(cloneableArray37);
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<java.lang.String> strCollection40 = jSDocInfo39.getAuthors();
        int int41 = jSDocInfo39.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet42 = jSDocInfo39.getModifies();
        com.google.javascript.rhino.JSDocInfo.StringPosition[][] stringPositionArray43 = new com.google.javascript.rhino.JSDocInfo.StringPosition[][] {};
        com.google.javascript.rhino.JSDocInfo.StringPosition[][] stringPositionArray44 = strSet42.toArray(stringPositionArray43);
        com.google.javascript.rhino.JSDocInfo.StringPosition[][] stringPositionArray45 = strSet3.toArray(stringPositionArray43);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[STRING  0, hi!, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[STRING  0, hi!, ]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNull(jSTypeExpression20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(jSTypeExpression33);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(cloneableArray37);
        org.junit.Assert.assertNotNull(cloneableArray38);
        org.junit.Assert.assertNull(strCollection40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(stringPositionArray43);
        org.junit.Assert.assertNotNull(stringPositionArray44);
        org.junit.Assert.assertNotNull(stringPositionArray45);
    }

    @Test
    public void test09913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09913");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        boolean boolean19 = node15.isHook();
        node11.addChildToFront(node15);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node42 = node40.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, (int) (byte) 1, (int) '#');
        boolean boolean46 = node35.hasChild(node45);
        int int47 = node35.getCharno();
        com.google.javascript.rhino.Node node48 = node25.useSourceInfoIfMissingFrom(node35);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node65 = node63.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) -1, node63, (int) (byte) 1, (int) '#');
        boolean boolean69 = node58.hasChild(node68);
        boolean boolean70 = node68.isVar();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((-1), node35, node68);
        boolean boolean72 = node35.isAssignAdd();
        com.google.javascript.rhino.Node node73 = node35.removeFirstChild();
        boolean boolean74 = node73.hasOneChild();
        boolean boolean75 = node73.isFor();
        node15.addChildToBack(node73);
        boolean boolean77 = node15.isName();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(53, "OR 51");
        boolean boolean81 = node80.isLabel();
        boolean boolean82 = node80.hasOneChild();
        com.google.javascript.rhino.Node node83 = node15.useSourceInfoFrom(node80);
        boolean boolean84 = node80.isQuotedString();
        boolean boolean85 = node80.isFromExterns();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test09914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09914");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(48, "((OR 51))", 15, (int) (short) -1);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double10 = node9.getDouble();
        int int11 = node9.getSourcePosition();
        boolean boolean12 = node9.isExprResult();
        node9.setSourceFileForTesting("ERROR 1\n    STRING  0\n    STRING  0\n");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node18.setCharno(1);
        boolean boolean21 = node18.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        boolean boolean32 = node26.isDo();
        boolean boolean33 = node26.isDefaultCase();
        node26.setQuotedString();
        com.google.javascript.rhino.Node node35 = node18.useSourceInfoFromForTree(node26);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node(21, node9, node18, 4131, 21);
        node4.addChildrenToFront(node38);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node46 = node44.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) -1, node44, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node56 = node54.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) -1, node54, (int) (byte) 1, (int) '#');
        boolean boolean60 = node49.hasChild(node59);
        boolean boolean61 = node59.isVar();
        boolean boolean62 = node59.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node59.children();
        boolean boolean64 = node59.isTrue();
        node59.setWasEmptyNode(false);
        boolean boolean67 = node59.isSyntheticBlock();
        com.google.javascript.rhino.Node node68 = node4.copyInformationFrom(node59);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 4095.0d + "'", double10 == 4095.0d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 409601 + "'", int11 == 409601);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
    }

    @Test
    public void test09915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09915");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        boolean boolean6 = node3.isRegExp();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        boolean boolean17 = node11.isDo();
        boolean boolean18 = node11.isDefaultCase();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node20 = node3.useSourceInfoFromForTree(node11);
        node11.putIntProp((int) (byte) 100, (int) (byte) 0);
        node11.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean27 = node11.isInc();
        node11.setQuotedString();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        int int33 = node32.getSourcePosition();
        int int34 = node32.getType();
        boolean boolean35 = node32.isLabel();
        node32.setSourceFileForTesting("STRING  0 [quoted: 1]\n");
        boolean boolean38 = node11.isEquivalentToTyped(node32);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newNumber((double) 39);
        com.google.javascript.rhino.Node node42 = node40.getAncestor(44);
        boolean boolean43 = node40.isAssignAdd();
        boolean boolean44 = node32.hasChild(node40);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        boolean boolean59 = node53.isScript();
        node53.setQuotedString();
        com.google.javascript.rhino.Node node61 = node48.srcrefTree(node53);
        node61.removeProp(32);
        com.google.javascript.rhino.jstype.JSType jSType64 = null;
        node61.setJSType(jSType64);
        boolean boolean66 = node32.hasChild(node61);
        // The following exception was thrown during execution in test generation
        try {
            node32.setSideEffectFlags(40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 40 + "'", int34 == 40);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test09916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09916");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getThrownTypes();
        java.util.Set<java.lang.String> strSet6 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getEnumParameterType();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getSuppressions();
        java.util.Iterator<java.lang.String> strItor9 = strSet8.iterator();
        int int10 = strSet8.size();
        java.util.stream.Stream<java.lang.String> strStream11 = strSet8.parallelStream();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strStream11);
    }

    @Test
    public void test09917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09917");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        boolean boolean3 = typePosition0.hasBrackets();
        typePosition0.setPositionInformation(0, 5, 42, 4131);
        // The following exception was thrown during execution in test generation
        try {
            typePosition0.setPositionInformation(38, 3, 31, 4131);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 38?end-line: 31");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test09918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09918");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition5 = marker0.getType();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition6 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition7 = marker0.getNameNode();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(typePosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(typePosition5);
        org.junit.Assert.assertNull(nodeSourcePosition6);
        org.junit.Assert.assertNull(nodeSourcePosition7);
    }

    @Test
    public void test09919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09919");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        boolean boolean2 = node1.isLabelName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean8 = node7.isThrow();
        java.lang.String str12 = node7.toString(true, false, true);
        boolean boolean13 = node7.isGetterDef();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = node7.getJSDocInfo();
        boolean boolean15 = node7.isBreak();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node20.setCharno(1);
        boolean boolean23 = node20.isRegExp();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        boolean boolean34 = node28.isDo();
        boolean boolean35 = node28.isDefaultCase();
        node28.setQuotedString();
        com.google.javascript.rhino.Node node37 = node20.useSourceInfoFromForTree(node28);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node41.setCharno(1);
        java.util.Set<java.lang.String> strSet44 = node41.getDirectives();
        node41.setLength(0);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(0, node37, node41, node56, (int) 'a', (int) (short) 0);
        int int60 = node37.getLineno();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable61 = node37.getAncestors();
        int int62 = node7.getIndexOfChild(node37);
        node1.putProp(40, (java.lang.Object) node7);
        boolean boolean64 = node1.isSwitch();
        boolean boolean65 = node1.isNot();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node70.setCharno(1);
        boolean boolean73 = node70.isRegExp();
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node80 = node78.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (byte) -1, node78, (int) (byte) 1, (int) '#');
        boolean boolean84 = node78.isDo();
        boolean boolean85 = node78.isDefaultCase();
        node78.setQuotedString();
        com.google.javascript.rhino.Node node87 = node70.useSourceInfoFromForTree(node78);
        boolean boolean88 = node70.isInc();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(30, node70);
        boolean boolean90 = node89.isWith();
        com.google.javascript.rhino.Node node91 = node1.srcrefTree(node89);
        boolean boolean92 = node1.isInc();
        boolean boolean93 = node1.isLabel();
        boolean boolean94 = node1.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "STRING  0" + "'", str12, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSDocInfo14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(ancestorIterable61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNull(node80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test09920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09920");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 32);
        boolean boolean2 = node1.isFor();
        int int3 = node1.getSourceOffset();
        boolean boolean4 = node1.isTrue();
        node1.setSourceEncodedPosition(151562);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09921");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node24 = node9.clonePropsFrom(node23);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node24.getJSDocInfo();
        boolean boolean26 = node24.isObjectLit();
        com.google.javascript.rhino.Node node27 = node24.cloneNode();
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node28);
    }

    @Test
    public void test09922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09922");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double4 = node3.getDouble();
        int int5 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node9.setCharno(1);
        boolean boolean12 = node9.isRegExp();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isDo();
        boolean boolean24 = node17.isDefaultCase();
        node17.setQuotedString();
        com.google.javascript.rhino.Node node26 = node9.useSourceInfoFromForTree(node17);
        node17.putIntProp((int) (byte) 100, (int) (byte) 0);
        node17.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean33 = node17.isInc();
        node17.setQuotedString();
        java.lang.String str35 = node17.getSourceFileName();
        com.google.javascript.rhino.Node node36 = node3.copyInformationFrom(node17);
        boolean boolean37 = node17.isComma();
        boolean boolean38 = node17.isBreak();
        boolean boolean39 = node17.isInstanceOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 4095.0d + "'", double4 == 4095.0d);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 409601 + "'", int5 == 409601);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test09923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09923");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node2 = typePosition0.getItem();
        boolean boolean3 = typePosition0.hasBrackets();
        int int4 = typePosition0.getEndLine();
        boolean boolean5 = typePosition0.hasBrackets();
        int int6 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = typePosition0.getItem();
        int int8 = typePosition0.getEndLine();
        int int9 = typePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test09924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09924");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isName();
        boolean boolean18 = node4.isVoid();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        com.google.javascript.rhino.Node node30 = node4.useSourceInfoIfMissingFrom(node23);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        int int41 = node40.getType();
        boolean boolean42 = node40.isFor();
        node23.addChildToFront(node40);
        boolean boolean44 = node23.hasChildren();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition45 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int46 = typePosition45.getPositionOnEndLine();
        com.google.javascript.rhino.Node node47 = typePosition45.getItem();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node54 = node52.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) -1, node52, (int) (byte) 1, (int) '#');
        boolean boolean58 = node52.isDo();
        boolean boolean59 = node52.isDefaultCase();
        node52.setQuotedString();
        boolean boolean61 = node52.isDec();
        boolean boolean62 = node52.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable63 = node52.siblings();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(51);
        java.lang.String str66 = node52.checkTreeEquals(node65);
        boolean boolean67 = node52.isCatch();
        com.google.javascript.rhino.InputId inputId68 = null;
        node52.setInputId(inputId68);
        typePosition45.setItem(node52);
        com.google.javascript.rhino.Node node71 = node23.useSourceInfoIfMissingFrom(node52);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean76 = node75.isThrow();
        java.lang.String str80 = node75.toString(true, false, true);
        node75.setIsSyntheticBlock(true);
        int int83 = node75.getLength();
        boolean boolean84 = node75.isNumber();
        node75.setSourceEncodedPositionForTree(40);
        boolean boolean87 = node75.isLocalResultCall();
        com.google.javascript.rhino.Node node88 = node52.copyInformationFromForTree(node75);
        node52.removeProp(0);
        com.google.javascript.rhino.Node node91 = node52.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean92 = node91.isCatch();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(nodeIterable63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str66, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "STRING  0" + "'", str80, "STRING  0");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(node91);
    }

    @Test
    public void test09925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09925");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        boolean boolean44 = node21.isString();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node54.hasChild(node64);
        boolean boolean66 = node64.isVar();
        boolean boolean67 = node64.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable68 = node64.children();
        com.google.javascript.rhino.Node node69 = node21.srcref(node64);
        boolean boolean70 = node21.isWith();
        node21.setSourceEncodedPosition(3);
        boolean boolean73 = node21.hasChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nodeIterable68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test09926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09926");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node3 = null;
        namePosition0.setItem(node3);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node8.setCharno(1);
        java.util.Set<java.lang.String> strSet11 = node8.getDirectives();
        namePosition0.setItem(node8);
        namePosition0.setPositionInformation(10, 46, (int) (byte) 100, 29);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        boolean boolean38 = node27.hasChild(node37);
        boolean boolean39 = node37.isVar();
        boolean boolean40 = node37.isTypeOf();
        boolean boolean41 = node37.isAssignAdd();
        node37.setWasEmptyNode(false);
        com.google.javascript.rhino.JSDocInfo jSDocInfo44 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str45 = jSDocInfo44.getVersion();
        boolean boolean46 = jSDocInfo44.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet47 = jSDocInfo44.getParameterNames();
        jSDocInfo44.addSuppression("");
        int int50 = jSDocInfo44.getParameterCount();
        boolean boolean51 = jSDocInfo44.isNoTypeCheck();
        boolean boolean52 = jSDocInfo44.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList53 = jSDocInfo44.getExtendedInterfaces();
        boolean boolean54 = jSDocInfo44.isHidden();
        node37.setJSDocInfo(jSDocInfo44);
        namePosition0.setItem(node37);
        boolean boolean57 = node37.isVarArgs();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test09927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09927");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        com.google.javascript.rhino.Node node15 = node8.detachFromParent();
        node15.setOptionalArg(false);
        boolean boolean19 = node15.getBooleanProp(31);
        com.google.javascript.rhino.Node node20 = node3.copyInformationFrom(node15);
        int int21 = node15.getLineno();
        boolean boolean22 = node15.wasEmptyNode();
        boolean boolean23 = node15.isTypeOf();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        int int49 = node37.getCharno();
        com.google.javascript.rhino.Node node50 = node27.useSourceInfoIfMissingFrom(node37);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node55 = node27.srcref(node54);
        boolean boolean56 = node55.isAssignAdd();
        com.google.javascript.rhino.Node node57 = node15.clonePropsFrom(node55);
        boolean boolean58 = node57.isNE();
        node57.setLineno((int) (byte) 1);
        boolean boolean61 = node57.isDo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 35 + "'", int49 == 35);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test09928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09928");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        int int7 = jSDocInfo0.getParameterCount();
        boolean boolean8 = jSDocInfo0.isExpose();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        boolean boolean10 = jSDocInfo0.isNoCompile();
        java.lang.Class<?> wildcardClass11 = jSDocInfo0.getClass();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test09929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09929");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "STRING Not declared as a constructor 0", (int) '4', 2);
        boolean boolean5 = node4.hasChildren();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09930");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo3.getAuthors();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str6 = jSDocInfo5.getVersion();
        boolean boolean7 = jSDocInfo5.hasEnumParameterType();
        boolean boolean8 = jSDocInfo5.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo5.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo5.setVisibility(visibility10);
        jSDocInfo3.setVisibility(visibility10);
        boolean boolean13 = strSet2.remove((java.lang.Object) jSDocInfo3);
        java.util.Spliterator<java.lang.String> strSpliterator14 = strSet2.spliterator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNull(strCollection4);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + visibility10 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility10.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strSpliterator14);
    }

    @Test
    public void test09931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09931");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node15.setCharno(1);
        java.util.Set<java.lang.String> strSet18 = node15.getDirectives();
        boolean boolean19 = node15.isHook();
        node11.addChildToFront(node15);
        boolean boolean21 = node11.isNE();
        boolean boolean22 = node11.isArrayLit();
        com.google.javascript.rhino.Node node23 = node11.removeFirstChild();
        int int24 = node23.getSideEffectFlags();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder25 = node23.getJsDocBuilderForNode();
        fileLevelJsDocBuilder25.append("CALL 0\n");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder25);
    }

    @Test
    public void test09932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09932");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        java.lang.String[] strArray6 = new java.lang.String[] { "STRING  0", "STRING  0" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        boolean boolean10 = strSet7.add("STRING  0");
        java.lang.String[] strArray13 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet14 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet14, strArray13);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        boolean boolean21 = strSet14.addAll((java.util.Collection<java.lang.String>) strList19);
        boolean boolean22 = strSet7.containsAll((java.util.Collection<java.lang.String>) strList19);
        boolean boolean23 = strSet2.addAll((java.util.Collection<java.lang.String>) strList19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str25 = jSDocInfo24.getVersion();
        boolean boolean26 = jSDocInfo24.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo24.getParameterNames();
        boolean boolean28 = strSet2.retainAll((java.util.Collection<java.lang.String>) strSet27);
        int int29 = strSet2.size();
        java.util.stream.Stream<java.lang.String> strStream30 = strSet2.parallelStream();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        boolean boolean51 = node40.hasChild(node50);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(49, "STRING  0\n");
        com.google.javascript.rhino.Node node55 = node40.clonePropsFrom(node54);
        node55.putIntProp(38, 32);
        boolean boolean59 = node55.isScript();
        boolean boolean60 = node55.isLabel();
        boolean boolean61 = node55.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder62 = node55.getJsDocBuilderForNode();
        boolean boolean63 = node55.isCall();
        java.lang.String str64 = node55.toStringTree();
        boolean boolean65 = strSet2.contains((java.lang.Object) node55);
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str67 = jSDocInfo66.getVersion();
        java.lang.String str68 = jSDocInfo66.getFileOverview();
        jSDocInfo66.addSuppression("STRING  0");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression71 = jSDocInfo66.getBaseType();
        boolean boolean72 = jSDocInfo66.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet73 = jSDocInfo66.getSuppressions();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int78 = node77.getType();
        int int79 = node77.getCharno();
        boolean boolean80 = strSet73.equals((java.lang.Object) node77);
        java.util.stream.Stream<java.lang.String> strStream81 = strSet73.stream();
        java.util.Spliterator<java.lang.String> strSpliterator82 = strSet73.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str84 = jSDocInfo83.getVersion();
        java.lang.String str85 = jSDocInfo83.getFileOverview();
        jSDocInfo83.addSuppression("STRING  0");
        boolean boolean88 = jSDocInfo83.isNoCompile();
        boolean boolean90 = jSDocInfo83.hasParameter("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        java.util.Set<java.lang.String> strSet91 = jSDocInfo83.getModifies();
        boolean boolean92 = strSet73.containsAll((java.util.Collection<java.lang.String>) strSet91);
        boolean boolean93 = strSet2.retainAll((java.util.Collection<java.lang.String>) strSet91);
        java.lang.Object[] objArray94 = strSet91.toArray();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strStream30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ERROR 1 [synthetic: 32]\n    STRING  0\n" + "'", str64, "ERROR 1 [synthetic: 32]\n    STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNull(jSTypeExpression71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 40 + "'", int78 == 40);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 10 + "'", int79 == 10);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strStream81);
        org.junit.Assert.assertNotNull(strSpliterator82);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(objArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray94), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray94), "[]");
    }

    @Test
    public void test09933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09933");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        jSDocInfo0.setAssociatedNode(node8);
        int int16 = node8.getIntProp((int) (byte) 10);
        node8.setSourceEncodedPositionForTree(15);
        node8.setLineno(1);
        boolean boolean21 = node8.isFromExterns();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        boolean boolean28 = node25.isRegExp();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node33.isDo();
        boolean boolean40 = node33.isDefaultCase();
        node33.setQuotedString();
        com.google.javascript.rhino.Node node42 = node25.useSourceInfoFromForTree(node33);
        node33.putIntProp((int) (byte) 100, (int) (byte) 0);
        node33.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean49 = node33.isInc();
        node33.setQuotedString();
        boolean boolean51 = node33.isNoSideEffectsCall();
        com.google.javascript.rhino.InputId inputId52 = null;
        node33.setInputId(inputId52);
        com.google.javascript.rhino.Node node54 = node8.useSourceInfoFromForTree(node33);
        node33.putIntProp(43, (int) (byte) 10);
        boolean boolean58 = node33.wasEmptyNode();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09934");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.wasEmptyNode();
        java.lang.String str19 = node4.toString(false, true, true);
        boolean boolean20 = node4.isVoid();
        boolean boolean21 = node4.isBlock();
        boolean boolean22 = node4.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "STRING  [quoted: 1]" + "'", str19, "STRING  [quoted: 1]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test09935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09935");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        jSDocInfo0.setAssociatedNode(node8);
        boolean boolean15 = jSDocInfo0.hasTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection16 = jSDocInfo0.getTypeNodes();
        jSDocInfo0.addSuppression("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(nodeCollection16);
        org.junit.Assert.assertNull(jSTypeExpression19);
        org.junit.Assert.assertNull(visibility20);
    }

    @Test
    public void test09936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09936");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(31);
    }

    @Test
    public void test09937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09937");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isCatch();
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        node3.setJSType(jSType11);
        java.util.Set<java.lang.String> strSet13 = node3.getDirectives();
        com.google.javascript.rhino.Node node14 = node3.cloneTree();
        boolean boolean15 = node14.isWith();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09938");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(12, 54, (int) '#');
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean9 = node8.isThrow();
        java.lang.String str13 = node8.toString(true, false, true);
        java.lang.String str14 = node8.getQualifiedName();
        boolean boolean15 = node8.isIn();
        com.google.javascript.rhino.Node node16 = node8.cloneTree();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        boolean boolean27 = node21.isScript();
        com.google.javascript.rhino.Node node28 = node21.detachFromParent();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node32.setCharno(1);
        java.util.Set<java.lang.String> strSet35 = node32.getDirectives();
        boolean boolean36 = node32.isHook();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node47 = node45.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) -1, node45, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node57 = node55.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) -1, node55, (int) (byte) 1, (int) '#');
        boolean boolean61 = node50.hasChild(node60);
        int int62 = node50.getCharno();
        com.google.javascript.rhino.Node node63 = node40.useSourceInfoIfMissingFrom(node50);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node68 = node40.srcref(node67);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(4095, node16, node28, node32, node40);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node76 = node74.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) -1, node74, (int) (byte) 1, (int) '#');
        int int80 = node79.getType();
        boolean boolean81 = node32.isEquivalentTo(node79);
        int int82 = node32.getSideEffectFlags();
        com.google.javascript.rhino.InputId inputId83 = node32.getInputId();
        boolean boolean84 = node32.hasChildren();
        boolean boolean85 = node32.isIn();
        com.google.javascript.rhino.Node node86 = node3.useSourceInfoFromForTree(node32);
        int int87 = node32.getLength();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "STRING  0" + "'", str13, "STRING  0");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(strSet35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(node47);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNull(inputId83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
    }

    @Test
    public void test09939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09939");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getTypedefType();
        boolean boolean3 = jSDocInfo0.hasEnumParameterType();
        boolean boolean4 = jSDocInfo0.containsDeclaration();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test09940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09940");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node5.setCharno(1);
        boolean boolean8 = node5.isRegExp();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node15 = node13.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) -1, node13, (int) (byte) 1, (int) '#');
        boolean boolean19 = node13.isDo();
        boolean boolean20 = node13.isDefaultCase();
        node13.setQuotedString();
        com.google.javascript.rhino.Node node22 = node5.useSourceInfoFromForTree(node13);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node26.setCharno(1);
        java.util.Set<java.lang.String> strSet29 = node26.getDirectives();
        node26.setLength(0);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node38 = node36.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) -1, node36, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node(0, node22, node26, node41, (int) 'a', (int) (short) 0);
        boolean boolean45 = node22.isNull();
        java.lang.String[] strArray48 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        boolean boolean56 = strSet49.addAll((java.util.Collection<java.lang.String>) strList54);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node63 = node61.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) -1, node61, (int) (byte) 1, (int) '#');
        boolean boolean67 = node61.isScript();
        node61.setQuotedString();
        boolean boolean69 = strSet49.equals((java.lang.Object) node61);
        com.google.javascript.rhino.Node node70 = node22.copyInformationFrom(node61);
        boolean boolean71 = node61.isAnd();
        boolean boolean73 = node61.getBooleanProp(8);
        com.google.javascript.rhino.Node node75 = node61.getAncestor(0);
        boolean boolean76 = node61.isNE();
        boolean boolean77 = node61.isNew();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("(Not declared as a type name)");
        com.google.javascript.rhino.Node node81 = node80.cloneTree();
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double86 = node85.getDouble();
        boolean boolean87 = node85.isAdd();
        com.google.javascript.rhino.Node node88 = node85.cloneNode();
        com.google.javascript.rhino.jstype.JSType jSType89 = node88.getJSType();
        java.lang.String str90 = node88.toStringTree();
        com.google.javascript.rhino.Node node91 = node88.getLastSibling();
        boolean boolean92 = node91.isNE();
        boolean boolean93 = node91.isExprResult();
        com.google.javascript.rhino.Node node94 = new com.google.javascript.rhino.Node((int) ' ', node80, node91);
        boolean boolean95 = node80.isFromExterns();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node98 = new com.google.javascript.rhino.Node(51, node61, node80, 44, 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 4095.0d + "'", double86 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNull(jSType89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "NUMBER 4095.0 100\n" + "'", str90, "NUMBER 4095.0 100\n");
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test09941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09941");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.isConstructor();
        java.lang.String str4 = jSDocInfo0.getSourceName();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test09942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09942");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        boolean boolean10 = node4.isOptionalArg();
        java.lang.String str14 = node4.toString(false, false, false);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double19 = node18.getDouble();
        int int20 = node18.getSourcePosition();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node24.setCharno(1);
        boolean boolean27 = node24.isRegExp();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        boolean boolean38 = node32.isDo();
        boolean boolean39 = node32.isDefaultCase();
        node32.setQuotedString();
        com.google.javascript.rhino.Node node41 = node24.useSourceInfoFromForTree(node32);
        node32.putIntProp((int) (byte) 100, (int) (byte) 0);
        node32.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean48 = node32.isInc();
        node32.setQuotedString();
        java.lang.String str50 = node32.getSourceFileName();
        com.google.javascript.rhino.Node node51 = node18.copyInformationFrom(node32);
        node18.setCharno(16);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node64 = node62.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) -1, node62, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node74 = node72.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) -1, node72, (int) (byte) 1, (int) '#');
        boolean boolean78 = node67.hasChild(node77);
        int int79 = node67.getCharno();
        com.google.javascript.rhino.Node node80 = node57.useSourceInfoIfMissingFrom(node67);
        boolean boolean81 = node57.isSwitch();
        java.lang.String str82 = node57.toString();
        boolean boolean83 = node57.isBreak();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, node18, node57, 45, (int) (byte) -1);
        boolean boolean87 = node86.isAdd();
        boolean boolean88 = node86.isDelProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "STRING " + "'", str14, "STRING ");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 4095.0d + "'", double19 == 4095.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 409601 + "'", int20 == 409601);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "OR 1" + "'", str82, "OR 1");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test09943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09943");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.lang.String str3 = jSDocInfo0.getOriginalCommentString();
        java.lang.String str4 = jSDocInfo0.getLicense();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        java.lang.String str6 = jSDocInfo0.getDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
    }

    @Test
    public void test09944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09944");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("STRING  0\n");
        jSDocInfo0.setDeprecated(false);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        java.lang.String str10 = jSDocInfo0.toString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "JSDocInfo" + "'", str10, "JSDocInfo");
    }

    @Test
    public void test09945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09945");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        boolean boolean22 = node4.isInc();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node(30, node4);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double28 = node27.getDouble();
        boolean boolean29 = node27.isAdd();
        com.google.javascript.rhino.Node node30 = node27.cloneNode();
        com.google.javascript.rhino.jstype.JSType jSType31 = node30.getJSType();
        java.lang.String str32 = node30.toStringTree();
        node4.addChildToFront(node30);
        boolean boolean34 = node30.isGetterDef();
        int int35 = node30.getType();
        com.google.javascript.rhino.Node node36 = node30.detachFromParent();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 4095.0d + "'", double28 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "NUMBER 4095.0 100\n" + "'", str32, "NUMBER 4095.0 100\n");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 39 + "'", int35 == 39);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test09946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09946");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("(ERROR [opt_arg: 1])", 1, 5);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09947");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (byte) 10, "Named type with empty name component");
        boolean boolean3 = node2.isObjectLit();
        boolean boolean4 = node2.hasMoreThanOneChild();
        java.lang.String str5 = node2.getQualifiedName();
        boolean boolean7 = node2.getBooleanProp((int) 'a');
        boolean boolean8 = node2.isOr();
        boolean boolean9 = node2.isAssign();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test09948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09948");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        boolean boolean16 = node4.isRegExp();
        boolean boolean17 = node4.isName();
        boolean boolean18 = node4.isVoid();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node25 = node23.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) -1, node23, (int) (byte) 1, (int) '#');
        boolean boolean29 = node23.isDo();
        com.google.javascript.rhino.Node node30 = node4.useSourceInfoIfMissingFrom(node23);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        int int41 = node40.getType();
        boolean boolean42 = node40.isFor();
        node23.addChildToFront(node40);
        boolean boolean44 = node23.isTry();
        node23.setOptionalArg(true);
        boolean boolean47 = node23.isBreak();
        boolean boolean48 = node23.isOnlyModifiesThisCall();
        boolean boolean49 = node23.isLabelName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(node25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test09949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09949");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        boolean boolean6 = jSDocInfo0.isJavaDispatch();
        boolean boolean7 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        boolean boolean10 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test09950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09950");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node34 = node32.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) -1, node32, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        boolean boolean48 = node37.hasChild(node47);
        boolean boolean49 = node47.isVar();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1), node14, node47);
        com.google.javascript.rhino.Node node51 = node50.getParent();
        boolean boolean52 = node50.isContinue();
        com.google.javascript.rhino.Node node54 = node50.getAncestor(409601);
        com.google.javascript.rhino.Node node55 = node50.getFirstChild();
        boolean boolean56 = node50.isComma();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test09951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09951");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getFileOverview();
        boolean boolean3 = jSDocInfo0.shouldPreserveTry();
        boolean boolean4 = jSDocInfo0.isExpose();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        java.lang.String str6 = jSDocInfo0.getDescription();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("(Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n)");
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        boolean boolean10 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(10);
        boolean boolean13 = node12.isQuotedString();
        node12.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("Node tree inequality:\nTree1:\nOR 0\n\n\nTree2:\nNUMBER 4095.0 100\n\n\nSubtree1: OR 0\n\n\nSubtree2: NUMBER 4095.0 100\n");
        com.google.javascript.rhino.Node node18 = node12.useSourceInfoIfMissingFromForTree(node17);
        jSDocInfo0.setAssociatedNode(node18);
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(visibility20);
    }

    @Test
    public void test09952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09952");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 51, (int) (byte) 100, (int) (short) 10);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test09953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09953");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isTypeOf();
        boolean boolean23 = node19.isAssignAdd();
        com.google.javascript.rhino.Node node24 = node19.removeFirstChild();
        boolean boolean25 = node24.isSwitch();
        boolean boolean26 = node24.isFalse();
        com.google.javascript.rhino.Node node27 = node24.cloneTree();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = node27.getJSDocInfo();
        boolean boolean29 = node27.isVarArgs();
        boolean boolean30 = node27.isObjectLit();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNull(jSDocInfo28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test09954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09954");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) 'a', "((OR 1 [length: 32]\n))");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test09955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09955");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
    }

    @Test
    public void test09956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09956");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node20 = node18.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) -1, node18, (int) (byte) 1, (int) '#');
        boolean boolean24 = node13.hasChild(node23);
        int int25 = node13.getCharno();
        com.google.javascript.rhino.Node node26 = node3.useSourceInfoIfMissingFrom(node13);
        node26.setLength((int) ' ');
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node39 = node37.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) -1, node37, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node49 = node47.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) -1, node47, (int) (byte) 1, (int) '#');
        boolean boolean53 = node42.hasChild(node52);
        int int54 = node42.getCharno();
        com.google.javascript.rhino.Node node55 = node32.useSourceInfoIfMissingFrom(node42);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node60 = node32.srcref(node59);
        boolean boolean61 = node26.isEquivalentToTyped(node32);
        node32.addSuppression("STRING  0 [synthetic: 1]\n");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean68 = node67.isThrow();
        java.lang.String str72 = node67.toString(true, false, true);
        int int74 = node67.getIntProp(51);
        node67.addSuppression("STRING  0 [quoted: 1]\n");
        com.google.javascript.rhino.Node node77 = node32.useSourceInfoFrom(node67);
        boolean boolean78 = node77.isTrue();
        boolean boolean79 = node77.isSetterDef();
        com.google.javascript.rhino.Node node80 = node77.getLastChild();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 35 + "'", int54 == 35);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "STRING  0" + "'", str72, "STRING  0");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(node80);
    }

    @Test
    public void test09957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09957");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        boolean boolean12 = node4.isFor();
        boolean boolean13 = node4.isThis();
        node4.setLineno(8);
        boolean boolean16 = node4.isBlock();
        boolean boolean17 = node4.isThrow();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test09958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09958");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node7 = node5.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1, node5, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node17 = node15.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) -1, node15, (int) (byte) 1, (int) '#');
        boolean boolean21 = node10.hasChild(node20);
        int int22 = node10.getCharno();
        boolean boolean23 = node10.isTry();
        boolean boolean24 = node10.isDec();
        boolean boolean25 = node10.isLocalResultCall();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node29.setCharno(1);
        java.util.Set<java.lang.String> strSet32 = node29.getDirectives();
        node29.setCharno((int) (short) -1);
        boolean boolean35 = node29.isRegExp();
        com.google.javascript.rhino.Node node36 = node29.getLastChild();
        boolean boolean37 = node29.isDec();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node44 = node42.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) -1, node42, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node54 = node52.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) -1, node52, (int) (byte) 1, (int) '#');
        boolean boolean58 = node47.hasChild(node57);
        boolean boolean59 = node57.isVar();
        boolean boolean60 = node57.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable61 = node57.children();
        boolean boolean62 = node57.isTrue();
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str64 = jSDocInfo63.getVersion();
        java.lang.String str65 = jSDocInfo63.getFileOverview();
        boolean boolean66 = jSDocInfo63.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet67 = jSDocInfo63.getParameterNames();
        boolean boolean68 = jSDocInfo63.isExpose();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node72.setCharno(1);
        boolean boolean75 = node72.isRegExp();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node82 = node80.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (byte) -1, node80, (int) (byte) 1, (int) '#');
        boolean boolean86 = node80.isDo();
        boolean boolean87 = node80.isDefaultCase();
        node80.setQuotedString();
        com.google.javascript.rhino.Node node89 = node72.useSourceInfoFromForTree(node80);
        jSDocInfo63.setAssociatedNode(node72);
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node(32, node10, node29, node57, node72);
        com.google.javascript.rhino.Node node92 = node29.cloneTree();
        boolean boolean93 = node29.isQuotedString();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(node17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(strSet32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(node54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(nodeIterable61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test09959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09959");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("Not declared as a constructor", (-1), 2);
        boolean boolean4 = node3.isAnd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str6 = jSDocInfo5.getVersion();
        java.lang.String str7 = jSDocInfo5.getFileOverview();
        jSDocInfo5.addSuppression("STRING  0");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo5.getExtendedInterfaces();
        boolean boolean11 = jSDocInfo5.isConstructor();
        node3.setJSDocInfo(jSDocInfo5);
        boolean boolean13 = jSDocInfo5.isConsistentIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo5.getBaseType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(jSTypeExpression14);
    }

    @Test
    public void test09960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09960");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (byte) 0, "STRING Not declared as a constructor 0", (int) '4', 2);
        node4.detachChildren();
        org.junit.Assert.assertNotNull(node4);
    }

    @Test
    public void test09961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09961");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        boolean boolean9 = node3.isOptionalArg();
        boolean boolean10 = node3.isThrow();
        boolean boolean11 = node3.isLocalResultCall();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean17 = node16.isThrow();
        java.lang.String str21 = node16.toString(true, false, true);
        java.lang.String str22 = node16.getQualifiedName();
        boolean boolean23 = node16.isIn();
        com.google.javascript.rhino.Node node24 = node16.cloneTree();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node31 = node29.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, (int) (byte) 1, (int) '#');
        boolean boolean35 = node29.isScript();
        com.google.javascript.rhino.Node node36 = node29.detachFromParent();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node40.setCharno(1);
        java.util.Set<java.lang.String> strSet43 = node40.getDirectives();
        boolean boolean44 = node40.isHook();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node55 = node53.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) -1, node53, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node65 = node63.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) -1, node63, (int) (byte) 1, (int) '#');
        boolean boolean69 = node58.hasChild(node68);
        int int70 = node58.getCharno();
        com.google.javascript.rhino.Node node71 = node48.useSourceInfoIfMissingFrom(node58);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node76 = node48.srcref(node75);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node(4095, node24, node36, node40, node48);
        com.google.javascript.rhino.Node node78 = node77.removeChildren();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder79 = node78.getJsDocBuilderForNode();
        java.lang.String str80 = node3.checkTreeEquals(node78);
        node3.detachChildren();
        node3.setSourceEncodedPosition(397361);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "STRING  0" + "'", str21, "STRING  0");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 35 + "'", int70 == 35);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder79);
        org.junit.Assert.assertNull(str80);
    }

    @Test
    public void test09962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09962");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("STRING  0\n");
        jSDocInfo0.setDeprecated(false);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getParameterType("STRING  0 [var_args_name: 1]");
        java.lang.String str12 = jSDocInfo0.getVersion();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getSuppressions();
        int int14 = strSet13.size();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test09963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09963");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("CALL 0\n", 12, 52);
        boolean boolean4 = node3.isDec();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test09964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09964");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setLength(0);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node21, node25, node40, (int) 'a', (int) (short) 0);
        boolean boolean44 = node21.isNull();
        java.lang.String[] strArray47 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        boolean boolean55 = strSet48.addAll((java.util.Collection<java.lang.String>) strList53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node62 = node60.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) -1, node60, (int) (byte) 1, (int) '#');
        boolean boolean66 = node60.isScript();
        node60.setQuotedString();
        boolean boolean68 = strSet48.equals((java.lang.Object) node60);
        com.google.javascript.rhino.Node node69 = node21.copyInformationFrom(node60);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node76 = node74.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) -1, node74, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node80 = node21.useSourceInfoFrom(node79);
        boolean boolean81 = node80.isParamList();
        boolean boolean82 = node80.isThis();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable83 = node80.getAncestors();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNull(node62);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(ancestorIterable83);
    }

    @Test
    public void test09965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09965");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.isExterns();
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        java.util.Collection<java.lang.String> strCollection8 = jSDocInfo0.getReferences();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(strCollection8);
    }

    @Test
    public void test09966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09966");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.toString();
        java.lang.String str2 = jSDocInfo0.getLicense();
        boolean boolean3 = jSDocInfo0.hasEnumParameterType();
        boolean boolean4 = jSDocInfo0.hasThisType();
        java.lang.String str5 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getParameterType("STRING  0 [quoted: 1] [synthetic: 1]\n");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JSDocInfo" + "'", str1, "JSDocInfo");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression7);
    }

    @Test
    public void test09967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09967");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        boolean boolean6 = jSDocInfo0.hasBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getParameterType("Node tree inequality:\nTree1:\nERROR 1\n    STRING  0\n\n\nTree2:\nSTRING  0\n\n\nSubtree1: ERROR 1\n    STRING  0\n\n\nSubtree2: STRING  0\n");
        java.lang.String str9 = jSDocInfo0.getSourceName();
        boolean boolean10 = jSDocInfo0.hasThisType();
        boolean boolean11 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test09968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09968");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node11 = node9.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) -1, node9, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node21 = node19.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) -1, node19, (int) (byte) 1, (int) '#');
        boolean boolean25 = node14.hasChild(node24);
        int int26 = node14.getCharno();
        com.google.javascript.rhino.Node node27 = node4.useSourceInfoIfMissingFrom(node14);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node32 = node4.srcref(node31);
        node4.putIntProp(32, 50);
        boolean boolean36 = node4.isWhile();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((-1), node4);
        boolean boolean38 = node4.isBlock();
        boolean boolean39 = node4.isArrayLit();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 35 + "'", int26 == 35);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test09969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09969");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(16);
        com.google.javascript.rhino.Node node2 = node1.cloneNode();
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test09970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09970");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isExprResult();
        boolean boolean12 = node4.isTrue();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isDo();
        boolean boolean24 = node17.isDefaultCase();
        node17.setQuotedString();
        boolean boolean26 = node17.isDec();
        boolean boolean27 = node17.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable28 = node17.siblings();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(51);
        java.lang.String str31 = node17.checkTreeEquals(node30);
        boolean boolean32 = node17.isOr();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node36.setCharno(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile39 = null;
        node36.setStaticSourceFile(staticSourceFile39);
        boolean boolean41 = node36.isBreak();
        boolean boolean42 = node36.isOptionalArg();
        boolean boolean43 = node36.isNew();
        java.lang.String str44 = node17.checkTreeEquals(node36);
        int int45 = node4.getIndexOfChild(node36);
        boolean boolean46 = node4.isExprResult();
        boolean boolean47 = node4.isCatch();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeIterable28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n" + "'", str31, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test09971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09971");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node14.setCharno(1);
        java.util.Set<java.lang.String> strSet17 = node14.getDirectives();
        java.lang.String str18 = node4.checkTreeEquals(node14);
        boolean boolean19 = node4.isQualifiedName();
        boolean boolean20 = node4.isAnd();
        int int21 = node4.getCharno();
        boolean boolean22 = node4.isFor();
        boolean boolean23 = node4.isScript();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean28 = node27.isThrow();
        java.lang.String str32 = node27.toString(true, false, true);
        java.lang.String str33 = node27.getQualifiedName();
        boolean boolean34 = node27.isCatch();
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node27.setJSType(jSType35);
        java.util.Set<java.lang.String> strSet37 = node27.getDirectives();
        com.google.javascript.rhino.Node node38 = node27.cloneTree();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node45 = node43.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) -1, node43, (int) (byte) 1, (int) '#');
        boolean boolean49 = node43.isScript();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node53.setCharno(1);
        java.util.Set<java.lang.String> strSet56 = node53.getDirectives();
        java.lang.String str57 = node43.checkTreeEquals(node53);
        boolean boolean58 = node43.isQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable59 = node43.siblings();
        int int60 = node43.getSourceOffset();
        int int61 = node43.getCharno();
        boolean boolean62 = node43.isNot();
        boolean boolean63 = node27.hasChild(node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str65 = jSDocInfo64.getVersion();
        boolean boolean66 = jSDocInfo64.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet67 = jSDocInfo64.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList68 = jSDocInfo64.getImplementedInterfaces();
        boolean boolean69 = jSDocInfo64.hasReturnType();
        jSDocInfo64.addSuppression("STRING  0");
        int int72 = jSDocInfo64.getParameterCount();
        node27.setJSDocInfo(jSDocInfo64);
        node27.putIntProp(0, 51);
        boolean boolean77 = node4.isEquivalentTo(node27);
        boolean boolean78 = node27.isFalse();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "STRING  0" + "'", str32, "STRING  0");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(strSet37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(node45);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNull(strSet56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(nodeIterable59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 10 + "'", int61 == 10);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(jSTypeExpressionList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test09972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09972");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean9 = jSDocInfo0.containsDeclaration();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getSuppressions();
        boolean boolean12 = jSDocInfo0.isConstructor();
        boolean boolean13 = jSDocInfo0.isOverride();
        java.lang.String str14 = jSDocInfo0.getFileOverview();
        jSDocInfo0.setLicense("GETELEM OR 1 0");
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test09973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09973");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.toString();
        boolean boolean6 = jSDocInfo0.isOverride();
        boolean boolean7 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getReferences();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility10 = jSDocInfo0.getVisibility();
        boolean boolean11 = jSDocInfo0.isHidden();
        java.lang.String str12 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "JSDocInfo" + "'", str5, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertNull(visibility10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test09974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09974");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isDo();
        boolean boolean11 = node4.isDefaultCase();
        node4.setQuotedString();
        boolean boolean13 = node4.isDec();
        boolean boolean14 = node4.isLabel();
        boolean boolean15 = node4.isSetterDef();
        com.google.javascript.rhino.Node node16 = node4.getLastSibling();
        boolean boolean17 = node16.isOnlyModifiesThisCall();
        boolean boolean18 = node16.isExprResult();
        boolean boolean19 = node16.isTrue();
        boolean boolean20 = node16.isTrue();
        boolean boolean21 = node16.isNot();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09975");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(37, 35, 1);
        boolean boolean4 = node3.isThrow();
        java.util.Set<java.lang.String> strSet5 = node3.getDirectives();
        boolean boolean6 = node3.isGetterDef();
        int int7 = node3.getSourceOffset();
        boolean boolean8 = node3.isBreak();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09976");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node19.isVar();
        boolean boolean22 = node19.isTypeOf();
        boolean boolean23 = node19.isAssignAdd();
        boolean boolean24 = node19.isStringKey();
        node19.setOptionalArg(true);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean31 = node30.isThrow();
        java.lang.String str35 = node30.toString(true, false, true);
        java.lang.String str36 = node30.getQualifiedName();
        boolean boolean37 = node30.isIn();
        com.google.javascript.rhino.Node node38 = node30.cloneTree();
        boolean boolean39 = node38.isRegExp();
        boolean boolean40 = node38.isExprResult();
        com.google.javascript.rhino.Node node41 = node19.useSourceInfoIfMissingFrom(node38);
        boolean boolean42 = node41.isThrow();
        boolean boolean43 = node41.isDelProp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "STRING  0" + "'", str35, "STRING  0");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test09977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09977");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(39, "(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n)");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean7 = node6.isThrow();
        java.lang.String str11 = node6.toString(true, false, true);
        node6.setIsSyntheticBlock(true);
        int int14 = node6.getLength();
        boolean boolean15 = node6.isNumber();
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node22 = node20.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) -1, node20, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        boolean boolean36 = node25.hasChild(node35);
        boolean boolean37 = node35.isVar();
        boolean boolean38 = node35.isBlock();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder39 = node35.new FileLevelJsDocBuilder();
        boolean boolean40 = node35.isOr();
        com.google.javascript.rhino.Node node41 = node35.removeChildren();
        com.google.javascript.rhino.Node node42 = node6.copyInformationFromForTree(node41);
        com.google.javascript.rhino.jstype.JSType jSType43 = null;
        node42.setJSType(jSType43);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node45 = node2.getChildBefore(node42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "STRING  0" + "'", str11, "STRING  0");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test09978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09978");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        jSDocInfo0.setLicense("Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n");
        java.lang.String str9 = jSDocInfo0.getLicense();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean11 = jSDocInfo0.isNoCompile();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo0.getThrownTypes();
        boolean boolean13 = jSDocInfo0.isExterns();
        boolean boolean14 = jSDocInfo0.isNoTypeCheck();
        boolean boolean15 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n" + "'", str9, "Node tree inequality:\nTree1:\nNUMBER 4095.0 100\n\n\nTree2:\nNUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n\n\nSubtree1: NUMBER 4095.0 100\n\n\nSubtree2: NUMBER 4095.0 100\n    INSTANCEOF\n        STRING  0\n");
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test09979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09979");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node10 = node8.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) -1, node8, (int) (byte) 1, (int) '#');
        boolean boolean14 = node8.isScript();
        node8.setQuotedString();
        com.google.javascript.rhino.Node node16 = node3.srcrefTree(node8);
        boolean boolean17 = node8.isBreak();
        boolean boolean19 = node8.getBooleanProp(100);
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node30 = node28.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) -1, node28, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        boolean boolean44 = node33.hasChild(node43);
        int int45 = node33.getCharno();
        com.google.javascript.rhino.Node node46 = node23.useSourceInfoIfMissingFrom(node33);
        node46.setLength((int) ' ');
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node59 = node57.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) -1, node57, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node69 = node67.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) -1, node67, (int) (byte) 1, (int) '#');
        boolean boolean73 = node62.hasChild(node72);
        int int74 = node62.getCharno();
        com.google.javascript.rhino.Node node75 = node52.useSourceInfoIfMissingFrom(node62);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node80 = node52.srcref(node79);
        boolean boolean81 = node46.isEquivalentToTyped(node52);
        node52.detachChildren();
        java.lang.String str83 = node8.checkTreeEquals(node52);
        boolean boolean84 = node8.isDefaultCase();
        boolean boolean85 = node8.isOnlyModifiesThisCall();
        boolean boolean86 = node8.isRegExp();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder87 = node8.getJsDocBuilderForNode();
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNull(node10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 35 + "'", int74 == 35);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nOR 51\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: OR 51\n" + "'", str83, "Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nOR 51\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: OR 51\n");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder87);
    }

    @Test
    public void test09980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09980");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        boolean boolean10 = node4.isScript();
        node4.setQuotedString();
        boolean boolean12 = node4.isAssignAdd();
        java.lang.Object obj14 = node4.getProp(16);
        boolean boolean15 = node4.isFunction();
        boolean boolean16 = node4.isNE();
        node4.setSourceEncodedPosition(36);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test09981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09981");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) -1);
        node1.setSourceEncodedPosition(16);
        node1.putBooleanProp((int) (short) 10, false);
        boolean boolean7 = node1.isComma();
        boolean boolean8 = node1.isOptionalArg();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09982");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.util.Collection<java.lang.String> strCollection1 = jSDocInfo0.getAuthors();
        int int2 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str3 = jSDocInfo0.toString();
        java.lang.String str4 = jSDocInfo0.toString();
        java.lang.String str5 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertNull(strCollection1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "JSDocInfo" + "'", str3, "JSDocInfo");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test09983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09983");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        boolean boolean20 = node9.hasChild(node19);
        boolean boolean21 = node9.isReturn();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node25.setCharno(1);
        java.util.Set<java.lang.String> strSet28 = node25.getDirectives();
        node25.setCharno((int) (short) -1);
        int int31 = node9.getIndexOfChild(node25);
        node9.setLineno(40);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test09984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09984");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.isDefine();
        boolean boolean3 = jSDocInfo0.hasModifies();
        boolean boolean4 = jSDocInfo0.isNoTypeCheck();
        boolean boolean6 = jSDocInfo0.hasParameterType("(Node tree inequality:\nTree1:\nSTRING  0 [quoted: 1]\n\n\nTree2:\nIN\n\n\nSubtree1: STRING  0 [quoted: 1]\n\n\nSubtree2: IN\n)");
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo8 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str9 = jSDocInfo8.getVersion();
        boolean boolean10 = jSDocInfo8.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo8.getParameterNames();
        jSDocInfo8.addSuppression("");
        boolean boolean14 = jSDocInfo8.isImplicitCast();
        boolean boolean15 = jSDocInfo8.isIdGenerator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str17 = jSDocInfo16.getVersion();
        boolean boolean18 = jSDocInfo16.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet19 = jSDocInfo16.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility20 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo16.setVisibility(visibility20);
        jSDocInfo8.setVisibility(visibility20);
        jSDocInfo0.setVisibility(visibility20);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList24 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression25 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + visibility20 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility20.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(jSTypeExpressionList24);
        org.junit.Assert.assertNull(jSTypeExpression25);
    }

    @Test
    public void test09985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09985");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean4 = node3.isThrow();
        java.lang.String str8 = node3.toString(true, false, true);
        java.lang.String str9 = node3.getQualifiedName();
        boolean boolean10 = node3.isIn();
        com.google.javascript.rhino.Node node11 = node3.cloneTree();
        boolean boolean12 = node11.isUnscopedQualifiedName();
        boolean boolean13 = node11.isDec();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node18.setCharno(1);
        boolean boolean21 = node18.isRegExp();
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node28 = node26.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) -1, node26, (int) (byte) 1, (int) '#');
        boolean boolean32 = node26.isDo();
        boolean boolean33 = node26.isDefaultCase();
        node26.setQuotedString();
        com.google.javascript.rhino.Node node35 = node18.useSourceInfoFromForTree(node26);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node39.setCharno(1);
        java.util.Set<java.lang.String> strSet42 = node39.getDirectives();
        node39.setLength(0);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(0, node35, node39, node54, (int) 'a', (int) (short) 0);
        boolean boolean58 = node35.isString();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node65 = node63.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) -1, node63, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node75 = node73.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (byte) -1, node73, (int) (byte) 1, (int) '#');
        boolean boolean79 = node68.hasChild(node78);
        boolean boolean80 = node78.isVar();
        boolean boolean81 = node78.isTypeOf();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable82 = node78.children();
        com.google.javascript.rhino.Node node83 = node35.srcref(node78);
        com.google.javascript.rhino.Node node84 = node11.srcrefTree(node83);
        int int85 = node11.getSourcePosition();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "STRING  0" + "'", str8, "STRING  0");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(nodeIterable82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 4131 + "'", int85 == 4131);
    }

    @Test
    public void test09986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09986");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node24 = node22.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) -1, node22, (int) (byte) 1, (int) '#');
        boolean boolean28 = node17.hasChild(node27);
        int int29 = node17.getCharno();
        com.google.javascript.rhino.Node node30 = node7.useSourceInfoIfMissingFrom(node17);
        node30.setLength((int) ' ');
        node3.addChildrenToBack(node30);
        com.google.javascript.rhino.Node node34 = node3.cloneNode();
        com.google.javascript.rhino.Node node35 = node34.cloneTree();
        int int36 = node34.getLineno();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable37 = node34.getAncestors();
        int int38 = node34.getLength();
        boolean boolean39 = node34.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNull(node24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 51 + "'", int36 == 51);
        org.junit.Assert.assertNotNull(ancestorIterable37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test09987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09987");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node4.setCharno(1);
        boolean boolean7 = node4.isRegExp();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node14 = node12.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) -1, node12, (int) (byte) 1, (int) '#');
        boolean boolean18 = node12.isDo();
        boolean boolean19 = node12.isDefaultCase();
        node12.setQuotedString();
        com.google.javascript.rhino.Node node21 = node4.useSourceInfoFromForTree(node12);
        node12.putIntProp((int) (byte) 100, (int) (byte) 0);
        node12.putProp((int) 'a', (java.lang.Object) "JSDocInfo");
        boolean boolean28 = node12.isInc();
        com.google.javascript.rhino.Node node29 = node12.getLastSibling();
        boolean boolean31 = node29.getBooleanProp(15);
        boolean boolean32 = node29.isArrayLit();
        boolean boolean33 = node29.isNot();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 1, node29, 30, 192612);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test09988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09988");
        java.lang.String[] strArray2 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        boolean boolean10 = strSet3.addAll((java.util.Collection<java.lang.String>) strList8);
        int int11 = strSet3.size();
        java.lang.String[] strArray14 = new java.lang.String[] { "STRING  0", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        boolean boolean22 = strSet15.addAll((java.util.Collection<java.lang.String>) strList20);
        com.google.javascript.rhino.JSDocInfo jSDocInfo23 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str24 = jSDocInfo23.getVersion();
        java.lang.String str25 = jSDocInfo23.getFileOverview();
        boolean boolean26 = jSDocInfo23.shouldPreserveTry();
        java.util.Set<java.lang.String> strSet27 = jSDocInfo23.getParameterNames();
        boolean boolean28 = strSet15.retainAll((java.util.Collection<java.lang.String>) strSet27);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node35 = node33.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) -1, node33, (int) (byte) 1, (int) '#');
        boolean boolean39 = node33.isDo();
        boolean boolean40 = node33.isDefaultCase();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node61 = node59.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) -1, node59, (int) (byte) 1, (int) '#');
        boolean boolean65 = node54.hasChild(node64);
        int int66 = node54.getCharno();
        com.google.javascript.rhino.Node node67 = node44.useSourceInfoIfMissingFrom(node54);
        int int68 = node44.getSourcePosition();
        java.lang.String str69 = node44.toString();
        int int70 = node33.getIndexOfChild(node44);
        boolean boolean71 = strSet15.equals((java.lang.Object) node33);
        boolean boolean72 = strSet15.isEmpty();
        boolean boolean73 = strSet3.addAll((java.util.Collection<java.lang.String>) strSet15);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = ternaryValue75.or(ternaryValue77);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue79 = ternaryValue75.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue80 = ternaryValue79.not();
        boolean boolean81 = strSet15.remove((java.lang.Object) ternaryValue80);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(node35);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 35 + "'", int66 == 35);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 4131 + "'", int68 == 4131);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "OR 1" + "'", str69, "OR 1");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertNotNull(ternaryValue79);
        org.junit.Assert.assertNotNull(ternaryValue80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test09989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09989");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str8 = jSDocInfo0.getBlockDescription();
        boolean boolean9 = jSDocInfo0.hasBaseType();
        java.lang.String str10 = jSDocInfo0.getFileOverview();
        boolean boolean11 = jSDocInfo0.isInterface();
        boolean boolean12 = jSDocInfo0.isConstant();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09990");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean5 = node4.isThrow();
        java.lang.String str9 = node4.toString(true, false, true);
        java.lang.String str10 = node4.getQualifiedName();
        boolean boolean11 = node4.isIn();
        com.google.javascript.rhino.Node node12 = node4.cloneTree();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        boolean boolean23 = node17.isScript();
        com.google.javascript.rhino.Node node24 = node17.detachFromParent();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node28.setCharno(1);
        java.util.Set<java.lang.String> strSet31 = node28.getDirectives();
        boolean boolean32 = node28.isHook();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node43 = node41.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) -1, node41, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node53 = node51.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) -1, node51, (int) (byte) 1, (int) '#');
        boolean boolean57 = node46.hasChild(node56);
        int int58 = node46.getCharno();
        com.google.javascript.rhino.Node node59 = node36.useSourceInfoIfMissingFrom(node46);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node64 = node36.srcref(node63);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(4095, node12, node24, node28, node36);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node72 = node70.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) -1, node70, (int) (byte) 1, (int) '#');
        int int76 = node75.getType();
        boolean boolean77 = node28.isEquivalentTo(node75);
        boolean boolean78 = node28.isUnscopedQualifiedName();
        node28.setVarArgs(false);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString("(STRING  0 [quoted: 1]\n)");
        node28.addChildrenToBack(node82);
        boolean boolean84 = node28.isWith();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "STRING  0" + "'", str9, "STRING  0");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test09991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09991");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDescriptionForParameter("JSDocInfo");
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        boolean boolean7 = jSDocInfo0.isIdGenerator();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        boolean boolean10 = jSDocInfo0.isConstructor();
        boolean boolean11 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList12 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean13 = jSDocInfo0.isNoShadow();
        boolean boolean14 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test09992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09992");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        node3.setStaticSourceFile(staticSourceFile6);
        boolean boolean8 = node3.isBreak();
        boolean boolean9 = node3.isOptionalArg();
        boolean boolean10 = node3.isNew();
        boolean boolean11 = node3.isSwitch();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node33 = node31.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) -1, node31, (int) (byte) 1, (int) '#');
        boolean boolean37 = node26.hasChild(node36);
        int int38 = node26.getCharno();
        com.google.javascript.rhino.Node node39 = node16.useSourceInfoIfMissingFrom(node26);
        int int40 = node16.getSourcePosition();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean45 = node44.isThrow();
        java.lang.String str49 = node44.toString(true, false, true);
        int int51 = node44.getIntProp(51);
        node44.addSuppression("STRING  0 [quoted: 1]\n");
        node16.addChildrenToBack(node44);
        boolean boolean55 = node16.isNE();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) 4095, 100, (int) (short) 1);
        double double60 = node59.getDouble();
        boolean boolean61 = node59.isAdd();
        boolean boolean62 = node59.isDelProp();
        boolean boolean63 = node59.isGetElem();
        node59.setWasEmptyNode(true);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100, node16, node59);
        boolean boolean67 = node59.hasMoreThanOneChild();
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildrenToBack(node59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNull(node33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 35 + "'", int38 == 35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 4131 + "'", int40 == 4131);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "STRING  0" + "'", str49, "STRING  0");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 4095.0d + "'", double60 == 4095.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09993");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        int int4 = node3.getType();
        boolean boolean5 = node3.isArrayLit();
        node3.addSuppression("true");
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder8 = node3.new FileLevelJsDocBuilder();
        boolean boolean9 = node3.isTrue();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node16 = node14.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) -1, node14, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node26 = node24.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) -1, node24, (int) (byte) 1, (int) '#');
        boolean boolean30 = node19.hasChild(node29);
        boolean boolean31 = node29.isVar();
        boolean boolean32 = node29.isTypeOf();
        boolean boolean33 = node29.isAssignAdd();
        java.lang.String str34 = node29.getQualifiedName();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node41 = node39.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) -1, node39, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node51 = node49.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) -1, node49, (int) (byte) 1, (int) '#');
        boolean boolean55 = node44.hasChild(node54);
        boolean boolean56 = node54.isVar();
        boolean boolean57 = node54.isCase();
        boolean boolean58 = node29.hasChild(node54);
        node29.setOptionalArg(false);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node61 = node3.removeChildAfter(node29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 40 + "'", int4 == 40);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test09994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09994");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getSuppressions();
        int int3 = strSet2.size();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(38, "STRING OR 1 0");
        boolean boolean7 = node6.isInc();
        boolean boolean8 = strSet2.contains((java.lang.Object) boolean7);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test09995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09995");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection6 = jSDocInfo0.getTypeNodes();
        java.lang.String str8 = jSDocInfo0.getDescriptionForParameter("Not declared as a constructor");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getReturnType();
        java.lang.String str10 = jSDocInfo0.getReturnDescription();
        boolean boolean11 = jSDocInfo0.isImplicitCast();
        boolean boolean12 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getType();
        java.lang.String str14 = jSDocInfo0.getDeprecationReason();
        java.lang.String str15 = jSDocInfo0.toString();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str17 = jSDocInfo16.getVersion();
        boolean boolean18 = jSDocInfo16.hasEnumParameterType();
        java.lang.String str20 = jSDocInfo16.getDescriptionForParameter("STRING  0\n");
        java.lang.String str21 = jSDocInfo16.getDescription();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node32 = node30.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) -1, node30, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node42 = node40.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) -1, node40, (int) (byte) 1, (int) '#');
        boolean boolean46 = node35.hasChild(node45);
        int int47 = node35.getCharno();
        com.google.javascript.rhino.Node node48 = node25.useSourceInfoIfMissingFrom(node35);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node53 = node25.srcref(node52);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString("", 0, 10);
        boolean boolean58 = node57.isFromExterns();
        boolean boolean59 = node53.hasChild(node57);
        jSDocInfo16.setAssociatedNode(node53);
        boolean boolean61 = jSDocInfo16.isJavaDispatch();
        java.lang.String str62 = jSDocInfo16.getFileOverview();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection63 = jSDocInfo16.getMarkers();
        java.lang.String str64 = jSDocInfo16.getLicense();
        boolean boolean65 = jSDocInfo16.isImplicitCast();
        jSDocInfo16.setLicense("STRING");
        boolean boolean68 = jSDocInfo16.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str70 = jSDocInfo69.getVersion();
        boolean boolean71 = jSDocInfo69.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet72 = jSDocInfo69.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList73 = jSDocInfo69.getImplementedInterfaces();
        boolean boolean74 = jSDocInfo69.hasReturnType();
        boolean boolean75 = jSDocInfo69.hasBaseType();
        boolean boolean76 = jSDocInfo69.isNoCompile();
        java.lang.String str77 = jSDocInfo69.getOriginalCommentString();
        boolean boolean78 = jSDocInfo69.hasReturnType();
        com.google.javascript.rhino.Node node79 = jSDocInfo69.getAssociatedNode();
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        boolean boolean82 = jSDocInfo80.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet83 = jSDocInfo80.getParameterNames();
        jSDocInfo80.addSuppression("");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection86 = jSDocInfo80.getTypeNodes();
        boolean boolean87 = jSDocInfo80.containsDeclaration();
        boolean boolean88 = jSDocInfo80.isExpose();
        com.google.javascript.rhino.JSDocInfo jSDocInfo89 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str90 = jSDocInfo89.getVersion();
        boolean boolean91 = jSDocInfo89.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet92 = jSDocInfo89.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility93 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo89.setVisibility(visibility93);
        jSDocInfo80.setVisibility(visibility93);
        jSDocInfo69.setVisibility(visibility93);
        jSDocInfo16.setVisibility(visibility93);
        jSDocInfo0.setVisibility(visibility93);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(nodeCollection6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "JSDocInfo" + "'", str15, "JSDocInfo");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(node32);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 35 + "'", int47 == 35);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(markerCollection63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(jSTypeExpressionList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strSet83);
        org.junit.Assert.assertNotNull(nodeCollection86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertTrue("'" + visibility93 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility93.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
    }

    @Test
    public void test09996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09996");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("", 0, 10);
        node3.setCharno(1);
        java.util.Set<java.lang.String> strSet6 = node3.getDirectives();
        node3.setCharno((int) (short) -1);
        boolean boolean9 = node3.isRegExp();
        boolean boolean10 = node3.isDefaultCase();
        boolean boolean11 = node3.isBlock();
        java.lang.String str12 = node3.getString();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node27 = node25.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node25, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node37 = node35.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node35, (int) (byte) 1, (int) '#');
        boolean boolean41 = node30.hasChild(node40);
        int int42 = node30.getCharno();
        com.google.javascript.rhino.Node node43 = node20.useSourceInfoIfMissingFrom(node30);
        node43.setLength((int) ' ');
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node56 = node54.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (byte) -1, node54, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node66 = node64.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) -1, node64, (int) (byte) 1, (int) '#');
        boolean boolean70 = node59.hasChild(node69);
        int int71 = node59.getCharno();
        com.google.javascript.rhino.Node node72 = node49.useSourceInfoIfMissingFrom(node59);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) 40, 51, (int) 'a');
        com.google.javascript.rhino.Node node77 = node49.srcref(node76);
        boolean boolean78 = node43.isEquivalentToTyped(node49);
        node14.putProp(0, (java.lang.Object) node43);
        com.google.javascript.rhino.Node node80 = node3.clonePropsFrom(node43);
        boolean boolean81 = node80.isRegExp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(node27);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 35 + "'", int42 == 35);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 35 + "'", int71 == 35);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test09997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09997");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(46, "OR", 0, 53);
        com.google.javascript.rhino.jstype.JSType jSType5 = node4.getJSType();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable6 = node4.children();
        boolean boolean7 = node4.hasChildren();
        int int8 = node4.getCharno();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(jSType5);
        org.junit.Assert.assertNotNull(nodeIterable6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
    }

    @Test
    public void test09998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09998");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (byte) 100, 40, 40);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node13 = node11.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) -1, node11, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node23 = node21.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) -1, node21, (int) (byte) 1, (int) '#');
        boolean boolean27 = node16.hasChild(node26);
        int int28 = node16.getCharno();
        com.google.javascript.rhino.Node node29 = node6.useSourceInfoIfMissingFrom(node16);
        boolean boolean30 = node6.isSwitch();
        java.lang.String str31 = node6.toString();
        boolean boolean32 = node6.wasEmptyNode();
        boolean boolean33 = strSet2.remove((java.lang.Object) boolean32);
        int int34 = strSet2.size();
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean36 = jSDocInfo35.isConstructor();
        int int37 = jSDocInfo35.getParameterCount();
        com.google.common.collect.ImmutableList<java.lang.String> strList38 = jSDocInfo35.getTemplateTypeNames();
        boolean boolean39 = jSDocInfo35.isNoShadow();
        com.google.common.collect.ImmutableList<java.lang.String> strList40 = jSDocInfo35.getTemplateTypeNames();
        java.util.Collection<java.lang.String> strCollection41 = jSDocInfo35.getReferences();
        java.util.Set<java.lang.String> strSet42 = jSDocInfo35.getParameterNames();
        boolean boolean43 = strSet2.containsAll((java.util.Collection<java.lang.String>) strSet42);
        boolean boolean44 = strSet42.isEmpty();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "OR 1" + "'", str31, "OR 1");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNull(strCollection41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test09999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09999");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node6 = node4.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, (int) (byte) 1, (int) '#');
        int int10 = node9.getType();
        boolean boolean11 = node9.isDelProp();
        boolean boolean12 = node9.wasEmptyNode();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node19 = node17.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) -1, node17, (int) (byte) 1, (int) '#');
        com.google.javascript.rhino.Node node23 = node9.copyInformationFromForTree(node17);
        com.google.javascript.rhino.jstype.JSType jSType24 = node23.getJSType();
        boolean boolean25 = node23.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(53, "OR 51");
        boolean boolean29 = node28.isLabel();
        java.util.Set<java.lang.String> strSet30 = node28.getDirectives();
        java.lang.Object obj32 = node28.getProp(44);
        boolean boolean33 = node28.isQualifiedName();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("", 0, 10);
        com.google.javascript.rhino.Node node40 = node38.getChildAtIndex((int) (byte) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) -1, node38, (int) (byte) 1, (int) '#');
        java.lang.String str44 = node38.toStringTree();
        boolean boolean45 = node38.isStringKey();
        boolean boolean46 = node38.isAnd();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = node38.getStaticSourceFile();
        boolean boolean48 = node38.isLabel();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable49 = node38.children();
        com.google.javascript.rhino.Node node50 = node28.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node51 = node23.useSourceInfoFromForTree(node38);
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node23.setJSType(jSType52);
        com.google.javascript.rhino.Node node54 = node23.cloneNode();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "STRING  0\n" + "'", str44, "STRING  0\n");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(staticSourceFile47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(nodeIterable49);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
    }

    @Test
    public void test10000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test10000");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.hasEnumParameterType();
        boolean boolean3 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo0.setVisibility(visibility5);
        boolean boolean7 = jSDocInfo0.isJavaDispatch();
        jSDocInfo0.setLicense("Named type with empty name component");
        boolean boolean10 = jSDocInfo0.isInterface();
        java.lang.String str11 = jSDocInfo0.getDeprecationReason();
        java.util.Set<java.lang.String> strSet12 = jSDocInfo0.getModifies();
        boolean boolean13 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }
}

